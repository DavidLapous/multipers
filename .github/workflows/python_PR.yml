name: Build, test

on: 
  [pull_request,workflow_dispatch,push]

jobs:
  create_sources:
    name: Create source dist
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: mamba-org/setup-micromamba@v2
      with:
        micromamba-version: 'latest'
        init-shell: bash
        condarc: |
          channels:
            - conda-forge
    - name: Build source distribution
      shell: bash -el {0}
      run: |
        micromamba create -n sources python=3.11 pip setuptools cython numpy python-build
        micromamba activate sources
        python -m build --sdist --no-isolation
    - name: Upload sources 
      uses: actions/upload-artifact@v4
      with:
        name: sources
        path: dist
    - name: test archive
      shell: bash -el {0}
      run: |
        tar -tf dist/*.tar.gz
  build:
    name: Build
    needs: create_sources
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
        os: ["ubuntu-latest", "macos-13", "macos-14","windows-latest"]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/download-artifact@v4
      with:
        name: sources
    - name: (windows) install tar stuff and extract
      if: ${{ matrix.os == 'windows-latest' }}
      shell: pwsh
      run: |
        choco install bzip2 7zip
        7z x multipers-*.tar.gz
        7z x multipers-*.tar
        Move-Item -Path multipers-*/* -Destination .
        dir
    - name: (unix) extract sources 
      if: ${{ matrix.os != 'windows-latest' }}
      run: |
        tar -xvf multipers-*.tar.gz
        mv multipers-*/* .
        ls
    - uses: mamba-org/setup-micromamba@v2
      with:
        micromamba-version: 'latest' 
        init-shell: >-
          bash
          powershell
        condarc: |
          channels:
            - conda-forge
    - name: dependencies
      shell: bash -el {0}
      run: |
        # conda install mamba -c conda-forge
        micromamba create -n build python=${{matrix.python-version}} pip wheel -c conda-forge
        micromamba activate build

        micromamba install 'gudhi>=3.11' 'numpy>=2' pot 'cython>=3' pytest scikit-learn matplotlib  joblib tqdm scipy tbb tbb-devel libboost-devel python-build -c conda-forge
        pip install pykeops filtration-domination --upgrade

        micromamba install c-compiler cxx-compiler  -c conda-forge

    - name: compiler restrictions 
      shell: bash -el {0}
      run: |
        if [[ ${{ matrix.os }} =~ "ubuntu-".* ]]; then
        micromamba install gcc=11 # Conda changed ? workaround
        fi

    - name: (windows) add dlls
      if: ${{ matrix.os == 'windows-latest' }}
      shell: pwsh
      run: |
        micromamba activate build
        cp "$env:CONDA_PREFIX\Library\bin\tbb*.dll" multipers
        dir multipers
    - name: Build package
      shell: bash -el {0}
      run: |
        ls
        micromamba activate build
        if [[ ${{ matrix.os }} =~ "macos-".* ]]; then
          export CXXFLAGS="-fno-aligned-new" # Macos workaround
          export CFLAGS="-fno-aligned-new" # Macos workaround
          export MACOSX_DEPLOYMENT_TARGET="13.0"
        fi
        if [[ ${{ matrix.os }} =~ "ubuntu-".* ]]; then
          export CXXFLAGS="-march=x86-64-v3" # post haswell, for avx
          export CFLAGS="-march=x86-64-v3"
          export CPPFLAGS="-isystem $CONDA_PREFIX/include"
        fi
        python -m build . --no-isolation --wheel

    - name: Fix wheels on Linux and Macos
      shell: bash -el {0}
      if: ${{ matrix.os != 'windows-latest' }}
      run: |
        micromamba activate build
        cd dist

        if [[ ${{ matrix.os }} =~ "ubuntu-".* ]]; then
          micromamba install auditwheel patchelf -c conda-forge
          for wheel_file in multipers*linux*.whl; do
            auditwheel show $wheel_file
            auditwheel repair $wheel_file --plat manylinux_2_34_x86_64
            rm $wheel_file
          done
          mv wheelhouse/*.whl . # retrieves repaired wheels
        fi
        if [[ ${{ matrix.os }} == "macos-13" ]]; then
          micromamba install delocate -c conda-forge
          for wheel_file in multipers*macosx*x86*.whl; do
            delocate-listdeps $wheel_file
            delocate-wheel --require-archs x86_64 -w wheelhouse -v $wheel_file
            rm $wheel_file
          done
          mv wheelhouse/*.whl . # retrieves repaired wheels
        fi

        if [[ ${{ matrix.os }} == "macos-14" ]]; then
          pip install delocate --upgrade
          for wheel_file in multipers*macosx*arm64*.whl; do
            delocate-listdeps $wheel_file
            delocate-wheel --require-archs arm64 -w wheelhouse -v $wheel_file
            rm $wheel_file
          done
          mv wheelhouse/*.whl . # retrieves repaired wheels
        fi

        cd ..
    - name: Upload sources and wheel
      uses: actions/upload-artifact@v4
      with:
        name: compiled-sources-${{ matrix.os }}-${{ matrix.python-version }}
        path: dist
    - name: tests
      shell: bash -el {0}
      run: |
        micromamba create -n test python=${{matrix.python-version}} pip pytest -c conda-forge
        micromamba activate test
        pip install dist/*.whl

        cd tests
        pytest -rv .

