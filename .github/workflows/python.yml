# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Build, test, and Push to PyPI

on: 
  [workflow_dispatch]



jobs:
  build_test:
    name: Build and Test 
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        os: ["ubuntu-latest", "macos-13", "macos-14", "windows-latest"] # macos13 is x86_64 and macos-latest=14 is arm64
        # monitor  https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners/about-github-hosted-runners#standard-github-hosted-runners-for-public-repositories
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    - uses: mamba-org/setup-micromamba@v2
      with:
        micromamba-version: 'latest' 
        # environment-file: environment.yml
        # environment-name: build
        init-shell: >-
          bash
          powershell
        # cache-environment: true
        # post-cleanup: 'all'
        condarc: |
          channels:
            - conda-forge
    - name: dependencies
      shell: bash -el {0}
      run: |
        # conda install mamba -c conda-forge
        micromamba create -n build python=${{matrix.python-version}} pip -c conda-forge
        micromamba activate build

        micromamba install 'gudhi>=3.10' 'numpy>=2' pot 'cython>=3' pytest scikit-learn matplotlib  joblib tqdm scipy tbb tbb-devel libboost-devel -c conda-forge
        pip install pykeops filtration-domination --upgrade

        micromamba install c-compiler=1.6 cxx-compiler=1.6 -c conda-forge

    - name: (windows) add dlls
      if: ${{ matrix.os == 'windows-latest' }}
      shell: pwsh
      run: |
        micromamba activate build
        cp "$env:CONDA_PREFIX\Library\bin\tbb*.dll" multipers
        dir multipers
    - name: Build package
      shell: bash -el {0}
      run: |
        micromamba activate build
        python setup.py sdist
        if [[ ${{ matrix.os }} =~ "macos-".* ]]; then
          export CXXFLAGS="-fno-aligned-new" # Macos workaround
          export CFLAGS="-fno-aligned-new" # Macos workaround
          export MACOSX_DEPLOYMENT_TARGET="13.0"
        fi
        if [[ ${{ matrix.os }} =~ "ubuntu-".* ]]; then
          export CXXFLAGS="-march=x86-64-v3" # post haswell, for avx
          export CFLAGS="-march=x86-64-v3"
          export CPPFLAGS="-isystem $CONDA_PREFIX/include"
        fi
        python setup.py build_ext -j4 --inplace bdist_wheel

    - name: Fix wheels on Linux and Macos
      shell: bash -el {0}
      run: |
        micromamba activate build
        cd dist

        if [[ ${{ matrix.os }} =~ "ubuntu-".* ]]; then
          micromamba install auditwheel patchelf -c conda-forge
          for wheel_file in multipers*linux*.whl; do
            auditwheel show $wheel_file
            auditwheel repair $wheel_file --plat manylinux_2_34_x86_64
            rm $wheel_file
          done
          mv wheelhouse/*.whl . # retrieves repaired wheels
        fi
        if [[ ${{ matrix.os }} == "macos-13" ]]; then
          micromamba install delocate -c conda-forge
          for wheel_file in multipers*macosx*x86*.whl; do
            delocate-listdeps $wheel_file
            delocate-wheel --require-archs x86_64 -w wheelhouse -v $wheel_file
            rm $wheel_file
          done
          mv wheelhouse/*.whl . # retrieves repaired wheels
        fi

        if [[ ${{ matrix.os }} == "macos-14" ]]; then
          pip install delocate --upgrade
          for wheel_file in multipers*macosx*arm64*.whl; do
            delocate-listdeps $wheel_file
            delocate-wheel --require-archs arm64 -w wheelhouse -v $wheel_file
            rm $wheel_file
          done
          mv wheelhouse/*.whl . # retrieves repaired wheels
        fi

        cd ..

    - name: Install and Test
      shell: bash -el {0}
      run: |
        micromamba create -n test python=${{matrix.python-version}} pip pytest -c conda-forge
        micromamba activate test
        pip install dist/*.whl
        cd multipers 
        cd tests
        pytest -rvv .

    - name: Upload sources and wheel
      uses: actions/upload-artifact@v4
      with:
        name: sources-${{ matrix.os }}-${{ matrix.python-version }}
        path: dist

  merge_artifacts:
    runs-on: ubuntu-latest
    needs: build_test
    steps:
      - name: Merge sources and wheels
        uses: actions/upload-artifact/merge@v4
        with:
          name: sources
          pattern: sources-*
          delete: true



  send_to_pypi:
    name: Send sources and wheels
    runs-on: ubuntu-latest
    needs: [ merge_artifacts ]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: sources
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          pip install --upgrade pip twine
          twine upload --skip-existing *.tar.gz # sources
          twine upload --skip-existing *.whl    # wheels
