!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FIELD_DESCRIPTION!Python	nameref	/the original name for the tag/
!_TAG_FIELD_DESCRIPTION!XML	uri	/uri associated with name prefix/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!BibTeX	B,booklet	/booklet/
!_TAG_KIND_DESCRIPTION!BibTeX	I,incollection	/incollection/
!_TAG_KIND_DESCRIPTION!BibTeX	M,mastersthesis	/mastersthesis/
!_TAG_KIND_DESCRIPTION!BibTeX	P,proceedings	/proceedings/
!_TAG_KIND_DESCRIPTION!BibTeX	a,article	/article/
!_TAG_KIND_DESCRIPTION!BibTeX	b,book	/book/
!_TAG_KIND_DESCRIPTION!BibTeX	c,conference	/conference/
!_TAG_KIND_DESCRIPTION!BibTeX	i,inbook	/inbook/
!_TAG_KIND_DESCRIPTION!BibTeX	j,inproceedings	/inproceedings/
!_TAG_KIND_DESCRIPTION!BibTeX	m,manual	/manual/
!_TAG_KIND_DESCRIPTION!BibTeX	n,misc	/misc/
!_TAG_KIND_DESCRIPTION!BibTeX	p,phdthesis	/phdthesis/
!_TAG_KIND_DESCRIPTION!BibTeX	s,string	/string/
!_TAG_KIND_DESCRIPTION!BibTeX	t,techreport	/techreport/
!_TAG_KIND_DESCRIPTION!BibTeX	u,unpublished	/unpublished/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!Make	I,makefile	/makefiles/
!_TAG_KIND_DESCRIPTION!Make	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!Make	t,target	/targets/
!_TAG_KIND_DESCRIPTION!Markdown	S,subsection	/level 2 sections/
!_TAG_KIND_DESCRIPTION!Markdown	T,l4subsection	/level 4 sections/
!_TAG_KIND_DESCRIPTION!Markdown	c,chapter	/chapters/
!_TAG_KIND_DESCRIPTION!Markdown	h,hashtag	/hashtags/
!_TAG_KIND_DESCRIPTION!Markdown	n,footnote	/footnotes/
!_TAG_KIND_DESCRIPTION!Markdown	s,section	/sections/
!_TAG_KIND_DESCRIPTION!Markdown	t,subsubsection	/level 3 sections/
!_TAG_KIND_DESCRIPTION!Markdown	u,l5subsection	/level 5 sections/
!_TAG_KIND_DESCRIPTION!Python	I,namespace	/name referring a module defined in other file/
!_TAG_KIND_DESCRIPTION!Python	Y,unknown	/name referring a class\/variable\/function\/module defined in other module/
!_TAG_KIND_DESCRIPTION!Python	c,class	/classes/
!_TAG_KIND_DESCRIPTION!Python	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Python	i,module	/modules/
!_TAG_KIND_DESCRIPTION!Python	m,member	/class members/
!_TAG_KIND_DESCRIPTION!Python	v,variable	/variables/
!_TAG_KIND_DESCRIPTION!ReStructuredText	C,citation	/citations/
!_TAG_KIND_DESCRIPTION!ReStructuredText	H,title	/titles/
!_TAG_KIND_DESCRIPTION!ReStructuredText	S,subsection	/subsections/
!_TAG_KIND_DESCRIPTION!ReStructuredText	T,target	/targets/
!_TAG_KIND_DESCRIPTION!ReStructuredText	c,chapter	/chapters/
!_TAG_KIND_DESCRIPTION!ReStructuredText	d,substdef	/substitute definitions/
!_TAG_KIND_DESCRIPTION!ReStructuredText	h,subtitle	/sub titles/
!_TAG_KIND_DESCRIPTION!ReStructuredText	s,section	/sections/
!_TAG_KIND_DESCRIPTION!ReStructuredText	t,subsubsection	/subsubsections/
!_TAG_KIND_DESCRIPTION!SVG	d,def	/ids in defs tags/
!_TAG_KIND_DESCRIPTION!Sh	a,alias	/aliases/
!_TAG_KIND_DESCRIPTION!Sh	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Sh	h,heredoc	/label for here document/
!_TAG_KIND_DESCRIPTION!Sh	s,script	/script files/
!_TAG_KIND_DESCRIPTION!XML	i,id	/id attributes/
!_TAG_KIND_DESCRIPTION!XML	n,nsprefix	/namespace prefixes/
!_TAG_KIND_DESCRIPTION!XML	r,root	/root elements/
!_TAG_KIND_DESCRIPTION!Yaml	a,anchor	/anchors/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!BibTeX	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	1.1	/current.age/
!_TAG_PARSER_VERSION!Make	0.0	/current.age/
!_TAG_PARSER_VERSION!Markdown	1.1	/current.age/
!_TAG_PARSER_VERSION!Python	0.0	/current.age/
!_TAG_PARSER_VERSION!ReStructuredText	0.0	/current.age/
!_TAG_PARSER_VERSION!SVG	0.0	/current.age/
!_TAG_PARSER_VERSION!Sh	0.0	/current.age/
!_TAG_PARSER_VERSION!XML	0.0	/current.age/
!_TAG_PARSER_VERSION!Yaml	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/odinhg/Repositories/Research/multipers_delaunay_core/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/v6.1.0/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!Make!makefile	included	/included/
!_TAG_ROLE_DESCRIPTION!Make!makefile	optional	/optionally included/
!_TAG_ROLE_DESCRIPTION!Python!module	imported	/imported modules/
!_TAG_ROLE_DESCRIPTION!Python!module	indirectlyImported	/module imported in alternative name/
!_TAG_ROLE_DESCRIPTION!Python!module	namespace	/namespace from where classes\/variables\/functions are imported/
!_TAG_ROLE_DESCRIPTION!Python!unknown	imported	/imported from the other module/
!_TAG_ROLE_DESCRIPTION!Python!unknown	indirectlyImported	/classes\/variables\/functions\/modules imported in alternative name/
!_TAG_ROLE_DESCRIPTION!Sh!heredoc	endmarker	/end marker/
!_TAG_ROLE_DESCRIPTION!Sh!script	loaded	/loaded/
!_TAG_ROLE_DESCRIPTION!Yaml!anchor	alias	/alias/
%	docs/Makefile	/^%: Makefile$/;"	t
APPROXIMATION_H_INCLUDED	multipers/multiparameter_module_approximation/approximation.h	/^#define APPROXIMATION_H_INCLUDED$/;"	d
A_ds_type	multipers/gudhi/gudhi/Persistent_cohomology.h	/^  typedef std::vector<std::pair<Simplex_key, Arith_element> > A_ds_type;$/;"	t	class:Gudhi::persistent_cohomology::Persistent_cohomology	typeref:typename:std::vector<std::pair<Simplex_key,Arith_element>>
All_cells_iterator	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^  typedef boost::counting_iterator<std::size_t> All_cells_iterator;$/;"	t	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base	typeref:typename:boost::counting_iterator<std::size_t>
All_cells_range	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^  typedef boost::iterator_range<All_cells_iterator> All_cells_range;$/;"	t	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base	typeref:typename:boost::iterator_range<All_cells_iterator>
Arith_element	multipers/gudhi/gudhi/Persistent_cohomology.h	/^  typedef typename CoefficientField::Element Arith_element;$/;"	t	class:Gudhi::persistent_cohomology::Persistent_cohomology	typeref:typename:CoefficientField::Element
Authors	README.md	/^## Authors$/;"	s	chapter:multipers : Multiparameter Persistence for Machine Learning
Available_columns	multipers/gudhi/Persistence_slices_interface.h	/^using Available_columns = Gudhi::persistence_matrix::Column_types;$/;"	t	typeref:typename:Gudhi::persistence_matrix::Column_types
BITMAP_CUBICAL_COMPLEX_BASE_H_	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^#define BITMAP_CUBICAL_COMPLEX_BASE_H_$/;"	d
BITMAP_CUBICAL_COMPLEX_H_	multipers/gudhi/gudhi/Bitmap_cubical_complex.h	/^#define BITMAP_CUBICAL_COMPLEX_H_$/;"	d
BITMAP_CUBICAL_COMPLEX_PERIODIC_BOUNDARY_CONDITIONS_BASE_H_	multipers/gudhi/gudhi/Bitmap_cubical_complex_periodic_boundary_conditions_base.h	/^#define BITMAP_CUBICAL_COMPLEX_PERIODIC_BOUNDARY_CONDITIONS_BASE_H_$/;"	d
BOX_H_INCLUDED	multipers/gudhi/gudhi/Multi_persistence/Box.h	/^#define BOX_H_INCLUDED$/;"	d
BUILDDIR	docs/Makefile	/^BUILDDIR      = _build$/;"	m
BackendOptionsWithVine	multipers/gudhi/Persistence_slices_interface.h	/^using BackendOptionsWithVine = Gudhi::multiparameter::truc_interface::Multi_persistence_options</;"	t	typeref:typename:Gudhi::multiparameter::truc_interface::Multi_persistence_options<col>
BackendOptionsWithoutVine	multipers/gudhi/Persistence_slices_interface.h	/^using BackendOptionsWithoutVine = Gudhi::multiparameter::truc_interface::No_vine_multi_persisten/;"	t	typeref:typename:Gudhi::multiparameter::truc_interface::No_vine_multi_persistence_options<col>
BackendsEnum	multipers/gudhi/Persistence_slices_interface.h	/^enum class BackendsEnum { Matrix, Graph, Clement, GudhiCohomology };$/;"	g
Bar	multipers/gudhi/gudhi/Matrix.h	/^  using Bar = Persistence_interval<Dimension, Pos_index>;$/;"	t	class:Gudhi::persistence_matrix::Matrix	typeref:typename:Persistence_interval<Dimension,Pos_index>
Bar	multipers/gudhi/gudhi/Persistence_matrix/Id_to_index_overlay.h	/^  using Bar = typename Master_matrix::Bar;                              \/**< Bar type. *\/$/;"	t	class:Gudhi::persistence_matrix::Id_to_index_overlay	typeref:typename:Master_matrix::Bar
Bar	multipers/gudhi/gudhi/Persistence_matrix/Position_to_index_overlay.h	/^  using Bar = typename Master_matrix::Bar;                                  \/**< Bar type. *\/$/;"	t	class:Gudhi::persistence_matrix::Position_to_index_overlay	typeref:typename:Master_matrix::Bar
Bar	multipers/gudhi/gudhi/Persistence_matrix/base_pairing.h	/^  using Bar = typename Master_matrix::Bar;                            \/**< Bar type. *\/$/;"	t	class:Gudhi::persistence_matrix::Base_pairing	typeref:typename:Master_matrix::Bar
Bar	multipers/gudhi/gudhi/Persistence_matrix/chain_rep_cycles.h	/^  using Bar = typename Master_matrix::Bar;                            \/**< Bar type. *\/$/;"	t	class:Gudhi::persistence_matrix::Chain_representative_cycles	typeref:typename:Master_matrix::Bar
Bar	multipers/gudhi/gudhi/Persistence_matrix/ru_rep_cycles.h	/^  using Bar = typename Master_matrix::Bar;            \/**< Bar type. *\/$/;"	t	class:Gudhi::persistence_matrix::RU_representative_cycles	typeref:typename:Master_matrix::Bar
Bar	multipers/gudhi/naive_merge_tree.h	/^  Bar() : dim(-1), birth(-1), death(-1) {}$/;"	f	struct:Bar
Bar	multipers/gudhi/naive_merge_tree.h	/^  Bar(int dim, int birth, int death) : dim(dim), birth(birth), death(death) {}$/;"	f	struct:Bar
Bar	multipers/gudhi/naive_merge_tree.h	/^struct Bar {$/;"	s
Bar	multipers/multiparameter_module_approximation/utilities.h	/^  Bar() : dim(-1), birth(-1), death(-1) {}$/;"	f	struct:Gudhi::multiparameter::mma::Bar
Bar	multipers/multiparameter_module_approximation/utilities.h	/^  Bar(dimension_type dim, int birth, int death)$/;"	f	struct:Gudhi::multiparameter::mma::Bar
Bar	multipers/multiparameter_module_approximation/utilities.h	/^struct Bar {$/;"	s	namespace:Gudhi::multiparameter::mma
Bar_dictionary	multipers/gudhi/gudhi/Matrix.h	/^  using Bar_dictionary = $/;"	t	class:Gudhi::persistence_matrix::Matrix
Bar_dictionary	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^  using Bar_dictionary = typename Master_matrix::Bar_dictionary;$/;"	t	class:Gudhi::persistence_matrix::Chain_matrix	typeref:typename:Master_matrix::Bar_dictionary
Bar_dictionary	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^  using Bar_dictionary = typename Master_matrix::Bar_dictionary;$/;"	t	class:Gudhi::persistence_matrix::RU_matrix	typeref:typename:Master_matrix::Bar_dictionary
Barcode	multipers/gudhi/gudhi/Matrix.h	/^  using Barcode = typename std::conditional<hasFixedBarcode,$/;"	t	class:Gudhi::persistence_matrix::Matrix
Barcode	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^  using Barcode = typename Master_matrix::Barcode;$/;"	t	class:Gudhi::persistence_matrix::Chain_matrix	typeref:typename:Master_matrix::Barcode
Barcode	multipers/gudhi/gudhi/Persistence_matrix/Id_to_index_overlay.h	/^  using Barcode = typename Master_matrix::Barcode;                      \/**< Barcode type. *\/$/;"	t	class:Gudhi::persistence_matrix::Id_to_index_overlay	typeref:typename:Master_matrix::Barcode
Barcode	multipers/gudhi/gudhi/Persistence_matrix/Position_to_index_overlay.h	/^  using Barcode = typename Master_matrix::Barcode;                          \/**< Barcode type. /;"	t	class:Gudhi::persistence_matrix::Position_to_index_overlay	typeref:typename:Master_matrix::Barcode
Barcode	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^  using Barcode = typename Master_matrix::Barcode;$/;"	t	class:Gudhi::persistence_matrix::RU_matrix	typeref:typename:Master_matrix::Barcode
Barcode	multipers/gudhi/gudhi/Persistence_matrix/base_pairing.h	/^  using Barcode = typename Master_matrix::Barcode;                    \/**< Barcode type. *\/$/;"	t	class:Gudhi::persistence_matrix::Base_pairing	typeref:typename:Master_matrix::Barcode
Barcode	multipers/gudhi/gudhi/Persistence_matrix/chain_pairing.h	/^  using Barcode = typename Master_matrix::Barcode;      \/**< Barcode type. *\/$/;"	t	class:Gudhi::persistence_matrix::Chain_pairing	typeref:typename:Master_matrix::Barcode
Barcode	multipers/gudhi/gudhi/Persistence_matrix/ru_pairing.h	/^  using Barcode = typename Master_matrix::Barcode;  \/**< Barcode type. *\/$/;"	t	class:Gudhi::persistence_matrix::RU_pairing	typeref:typename:Master_matrix::Barcode
Barcode	multipers/gudhi/mma_interface_coh.h	/^  using Barcode = std::vector<bar>;$/;"	t	class:Gudhi::multiparameter::truc_interface::Persistence_backend_cohomology	typeref:typename:std::vector<bar>
Barcode	multipers/gudhi/mma_interface_h0.h	/^    Barcode(Naive_merge_forest &mf, const std::vector<std::size_t> *perm)$/;"	f	class:Gudhi::multiparameter::truc_interface::Persistence_backend_h0::Barcode
Barcode	multipers/gudhi/mma_interface_h0.h	/^  class Barcode {$/;"	c	class:Gudhi::multiparameter::truc_interface::Persistence_backend_h0
Barcode	multipers/gudhi/mma_interface_matrix.h	/^    Barcode(matrix_type &matrix, const std::vector<Index> *perm) : barcode_(&matrix.get_current_/;"	f	class:Gudhi::multiparameter::truc_interface::Persistence_backend_matrix::Barcode
Barcode	multipers/gudhi/mma_interface_matrix.h	/^  class Barcode {$/;"	c	class:Gudhi::multiparameter::truc_interface::Persistence_backend_matrix
Barcode	multipers/gudhi/naive_merge_tree.h	/^    Barcode() {}$/;"	f	struct:Naive_merge_forest::Barcode
Barcode	multipers/gudhi/naive_merge_tree.h	/^    Barcode(int numberOfSimplices, int numberOfVertices)$/;"	f	struct:Naive_merge_forest::Barcode
Barcode	multipers/gudhi/naive_merge_tree.h	/^  struct Barcode {$/;"	s	class:Naive_merge_forest
Barcode	multipers/multi_parameter_rank_invariant/persistence_slices.h	/^using Barcode = std::vector<std::pair<Simplex_tree_std::Filtration_value, Simplex_tree_std::Filt/;"	t	namespace:Gudhi::multiparameter	typeref:typename:std::vector<std::pair<Simplex_tree_std::Filtration_value,Simplex_tree_std::Filtration_value>>
Barcode_iterator	multipers/gudhi/mma_interface_h0.h	/^    Barcode_iterator() : barcode_(nullptr), perm_(nullptr), currPos_(0) {}$/;"	f	class:Gudhi::multiparameter::truc_interface::Persistence_backend_h0::Barcode_iterator
Barcode_iterator	multipers/gudhi/mma_interface_h0.h	/^    Barcode_iterator(const std::vector<Bar> *barcode,$/;"	f	class:Gudhi::multiparameter::truc_interface::Persistence_backend_h0::Barcode_iterator
Barcode_iterator	multipers/gudhi/mma_interface_h0.h	/^  class Barcode_iterator$/;"	c	class:Gudhi::multiparameter::truc_interface::Persistence_backend_h0
Barcode_iterator	multipers/gudhi/mma_interface_matrix.h	/^    Barcode_iterator() : barcode_(nullptr), perm_(nullptr), currPos_(0) {}$/;"	f	class:Gudhi::multiparameter::truc_interface::Persistence_backend_matrix::Barcode_iterator
Barcode_iterator	multipers/gudhi/mma_interface_matrix.h	/^    Barcode_iterator(const typename matrix_type::Barcode *barcode, const std::vector<Index> *inv/;"	f	class:Gudhi::multiparameter::truc_interface::Persistence_backend_matrix::Barcode_iterator
Barcode_iterator	multipers/gudhi/mma_interface_matrix.h	/^  class Barcode_iterator : public boost::iterator_facade<Barcode_iterator, const bar &, boost::f/;"	c	class:Gudhi::multiparameter::truc_interface::Persistence_backend_matrix
Base	multipers/gudhi/Simplex_tree_interface.h	/^  using Base = Simplex_tree<Simplex_tree_options_for_python>;$/;"	t	class:Gudhi::Simplex_tree_interface	typeref:typename:Simplex_tree<Simplex_tree_options_for_python>
Base	multipers/gudhi/Simplex_tree_multi_interface.h	/^  using Base = Simplex_tree<SimplexTreeOptions>;$/;"	t	class:Gudhi::multiparameter::python_interface::Simplex_tree_multi_interface	typeref:typename:Simplex_tree<SimplexTreeOptions>
Base	multipers/gudhi/gudhi/One_critical_filtration.h	/^  using Base = std::vector<T>;$/;"	t	class:Gudhi::multi_filtration::One_critical_filtration	typeref:typename:std::vector<T>
Base	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix_with_column_compression.h	/^    using Base = typename Master_matrix::Column;$/;"	t	class:Gudhi::persistence_matrix::Base_matrix_with_column_compression::Column	typeref:typename:Master_matrix::Column
Base	multipers/gudhi/gudhi/Simple_object_pool.h	/^  typedef boost::pool<boost::default_user_allocator_malloc_free> Base;$/;"	t	class:Gudhi::Simple_object_pool	typeref:typename:boost::pool<boost::default_user_allocator_malloc_free>
Base_hook_matrix_list_column	multipers/gudhi/gudhi/Matrix.h	/^  using Base_hook_matrix_list_column =$/;"	t	class:Gudhi::persistence_matrix::Matrix	typeref:typename:boost::intrusive::list_base_hook<boost::intrusive::tag<Matrix_column_tag>,boost::intrusive::link_mode<boost::intrusive::safe_link>>
Base_hook_matrix_row	multipers/gudhi/gudhi/Matrix.h	/^  using Base_hook_matrix_row =$/;"	t	class:Gudhi::persistence_matrix::Matrix	typeref:typename:boost::intrusive::list_base_hook<boost::intrusive::tag<Matrix_row_tag>,boost::intrusive::link_mode<boost::intrusive::auto_unlink>>
Base_hook_matrix_row	multipers/gudhi/gudhi/Persistence_matrix/columns/row_access.h	/^  using Base_hook_matrix_row = typename Master_matrix::Base_hook_matrix_row;$/;"	t	class:Gudhi::persistence_matrix::Row_access	typeref:typename:Master_matrix::Base_hook_matrix_row
Base_hook_matrix_set_column	multipers/gudhi/gudhi/Matrix.h	/^  using Base_hook_matrix_set_column =$/;"	t	class:Gudhi::persistence_matrix::Matrix	typeref:typename:boost::intrusive::set_base_hook<boost::intrusive::tag<Matrix_column_tag>,boost::intrusive::link_mode<boost::intrusive::safe_link>>
Base_matrix	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix.h	/^class Base_matrix : public Master_matrix::template Base_swap_option<Base_matrix<Master_matrix> >/;"	c	namespace:Gudhi::persistence_matrix
Base_matrix	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix.h	/^inline Base_matrix<Master_matrix>::Base_matrix(Base_matrix&& other) noexcept$/;"	f	class:Gudhi::persistence_matrix::Base_matrix
Base_matrix	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix.h	/^inline Base_matrix<Master_matrix>::Base_matrix(Column_settings* colSettings)$/;"	f	class:Gudhi::persistence_matrix::Base_matrix
Base_matrix	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix.h	/^inline Base_matrix<Master_matrix>::Base_matrix(const Base_matrix& matrixToCopy, $/;"	f	class:Gudhi::persistence_matrix::Base_matrix
Base_matrix	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix.h	/^inline Base_matrix<Master_matrix>::Base_matrix(const std::vector<Container>& columns, $/;"	f	class:Gudhi::persistence_matrix::Base_matrix
Base_matrix	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix.h	/^inline Base_matrix<Master_matrix>::Base_matrix(unsigned int numberOfColumns, $/;"	f	class:Gudhi::persistence_matrix::Base_matrix
Base_matrix	multipers/gudhi/gudhi/Persistence_matrix/base_pairing.h	/^  using Base_matrix = typename Master_matrix::Master_boundary_matrix;$/;"	t	class:Gudhi::persistence_matrix::Base_pairing	typeref:typename:Master_matrix::Master_boundary_matrix
Base_matrix_with_column_compression	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix_with_column_compression.h	/^class Base_matrix_with_column_compression : protected Master_matrix::Matrix_row_access_option $/;"	c	namespace:Gudhi::persistence_matrix
Base_matrix_with_column_compression	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix_with_column_compression.h	/^inline Base_matrix_with_column_compression<Master_matrix>::Base_matrix_with_column_compression($/;"	f	class:Gudhi::persistence_matrix::Base_matrix_with_column_compression
Base_pairing	multipers/gudhi/gudhi/Persistence_matrix/base_pairing.h	/^class Base_pairing : public std::conditional<$/;"	c	namespace:Gudhi::persistence_matrix
Base_pairing	multipers/gudhi/gudhi/Persistence_matrix/base_pairing.h	/^inline Base_pairing<Master_matrix>::Base_pairing() : PIDM(), isReduced_(false) $/;"	f	class:Gudhi::persistence_matrix::Base_pairing
Base_pairing_option	multipers/gudhi/gudhi/Matrix.h	/^  using Base_pairing_option =$/;"	t	class:Gudhi::persistence_matrix::Matrix	typeref:typename:std::conditional<PersistenceMatrixOptions::has_column_pairings &&!PersistenceMatrixOptions::has_vine_update &&!PersistenceMatrixOptions::can_retrieve_representative_cycles,Base_pairing<Matrix<PersistenceMatrixOptions>>,Dummy_base_pairing>::type
Base_swap	multipers/gudhi/gudhi/Persistence_matrix/base_swap.h	/^class Base_swap {$/;"	c	namespace:Gudhi::persistence_matrix
Base_swap	multipers/gudhi/gudhi/Persistence_matrix/base_swap.h	/^inline Base_swap<Master_matrix, Base_matrix>::Base_swap() : rowSwapped_(false)$/;"	f	class:Gudhi::persistence_matrix::Base_swap
Base_swap	multipers/gudhi/gudhi/Persistence_matrix/base_swap.h	/^inline Base_swap<Master_matrix, Base_matrix>::Base_swap(Base_swap&& other) noexcept$/;"	f	class:Gudhi::persistence_matrix::Base_swap
Base_swap	multipers/gudhi/gudhi/Persistence_matrix/base_swap.h	/^inline Base_swap<Master_matrix, Base_matrix>::Base_swap(unsigned int numberOfColumns)$/;"	f	class:Gudhi::persistence_matrix::Base_swap
Base_swap_option	multipers/gudhi/gudhi/Matrix.h	/^  using Base_swap_option =$/;"	t	class:Gudhi::persistence_matrix::Matrix	typeref:typename:std::conditional<PersistenceMatrixOptions::has_vine_update||PersistenceMatrixOptions::has_column_and_row_swaps,Base_swap<Matrix<PersistenceMatrixOptions>,Base>,Dummy_base_swap>::type
Bibliography	docs/bibliography.rst	/^Bibliography$/;"	H
Bitmap_cubical_complex	multipers/gudhi/cubical_to_boundary.h	/^  using Bitmap_cubical_complex = Gudhi::cubical_complex::Bitmap_cubical_complex<Bitmap_cubical_c/;"	t	function:_to_boundary	typeref:typename:Gudhi::cubical_complex::Bitmap_cubical_complex<Bitmap_cubical_complex_base>
Bitmap_cubical_complex	multipers/gudhi/gudhi/Bitmap_cubical_complex.h	/^  Bitmap_cubical_complex(const std::vector<unsigned>& dimensions,$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex
Bitmap_cubical_complex	multipers/gudhi/gudhi/Bitmap_cubical_complex.h	/^  explicit Bitmap_cubical_complex(const char* perseus_style_file)$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex
Bitmap_cubical_complex	multipers/gudhi/gudhi/Bitmap_cubical_complex.h	/^class Bitmap_cubical_complex : public T {$/;"	c	namespace:Gudhi::cubical_complex
Bitmap_cubical_complex_base	multipers/gudhi/cubical_to_boundary.h	/^  using Bitmap_cubical_complex_base = Gudhi::cubical_complex::Bitmap_cubical_complex_base<char>;$/;"	t	function:_to_boundary	typeref:typename:Gudhi::cubical_complex::Bitmap_cubical_complex_base<char>
Bitmap_cubical_complex_base	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^  Bitmap_cubical_complex_base() {}$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base
Bitmap_cubical_complex_base	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^Bitmap_cubical_complex_base<T>::Bitmap_cubical_complex_base(const char* perseus_style_file) {$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base
Bitmap_cubical_complex_base	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^Bitmap_cubical_complex_base<T>::Bitmap_cubical_complex_base(const char* perseus_style_file,$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base
Bitmap_cubical_complex_base	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^Bitmap_cubical_complex_base<T>::Bitmap_cubical_complex_base(const std::vector<unsigned>& dimensi/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base
Bitmap_cubical_complex_base	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^Bitmap_cubical_complex_base<T>::Bitmap_cubical_complex_base(const std::vector<unsigned>& sizes) /;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base
Bitmap_cubical_complex_base	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^Bitmap_cubical_complex_base<T>::Bitmap_cubical_complex_base(const std::vector<unsigned>& sizes,$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base
Bitmap_cubical_complex_base	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^Bitmap_cubical_complex_base<T>::Bitmap_cubical_complex_base(const std::vector<unsigned>& sizes_i/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base
Bitmap_cubical_complex_base	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^class Bitmap_cubical_complex_base {$/;"	c	namespace:Gudhi::cubical_complex
Bitmap_cubical_complex_periodic_boundary_conditions_base	multipers/gudhi/gudhi/Bitmap_cubical_complex_periodic_boundary_conditions_base.h	/^  Bitmap_cubical_complex_periodic_boundary_conditions_base() {}$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_periodic_boundary_conditions_base
Bitmap_cubical_complex_periodic_boundary_conditions_base	multipers/gudhi/gudhi/Bitmap_cubical_complex_periodic_boundary_conditions_base.h	/^Bitmap_cubical_complex_periodic_boundary_conditions_base<T>::Bitmap_cubical_complex_periodic_bou/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_periodic_boundary_conditions_base
Bitmap_cubical_complex_periodic_boundary_conditions_base	multipers/gudhi/gudhi/Bitmap_cubical_complex_periodic_boundary_conditions_base.h	/^class Bitmap_cubical_complex_periodic_boundary_conditions_base : public Bitmap_cubical_complex_b/;"	c	namespace:Gudhi::cubical_complex
Boundary	multipers/gudhi/gudhi/Matrix.h	/^  using Boundary = typename std::conditional<PersistenceMatrixOptions::is_z2,$/;"	t	class:Gudhi::persistence_matrix::Matrix
Boundary	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix.h	/^  using Boundary = typename Master_matrix::Boundary;                    \/**< Type of the column/;"	t	class:Gudhi::persistence_matrix::Base_matrix	typeref:typename:Master_matrix::Boundary
Boundary	multipers/gudhi/gudhi/Persistence_matrix/Boundary_matrix.h	/^  using Boundary = typename Master_matrix::Boundary;                    \/**< Type of an input c/;"	t	class:Gudhi::persistence_matrix::Boundary_matrix	typeref:typename:Master_matrix::Boundary
Boundary	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^  using Boundary = typename Master_matrix::Boundary;                        \/**< Type of an inp/;"	t	class:Gudhi::persistence_matrix::Chain_matrix	typeref:typename:Master_matrix::Boundary
Boundary	multipers/gudhi/gudhi/Persistence_matrix/Id_to_index_overlay.h	/^  using Boundary = typename Master_matrix::Boundary;                    \/**< Type of an input c/;"	t	class:Gudhi::persistence_matrix::Id_to_index_overlay	typeref:typename:Master_matrix::Boundary
Boundary	multipers/gudhi/gudhi/Persistence_matrix/Position_to_index_overlay.h	/^  using Boundary = typename Master_matrix::Boundary;                        \/**< Type of an inp/;"	t	class:Gudhi::persistence_matrix::Position_to_index_overlay	typeref:typename:Master_matrix::Boundary
Boundary	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^  using Boundary = typename Master_matrix::Boundary;                    \/**< Type of an input c/;"	t	class:Gudhi::persistence_matrix::RU_matrix	typeref:typename:Master_matrix::Boundary
BoundaryFiltration	multipers/multiparameter_module_approximation/format_python-cpp.h	/^using BoundaryFiltration =$/;"	t	namespace:Gudhi::multiparameter::mma	typeref:typename:std::pair<boundary_matrix,std::vector<MultiFiltration>>
Boundary_iterator	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^  typedef typename std::vector<std::size_t>::const_iterator Boundary_iterator;$/;"	t	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base	typeref:typename:std::vector<std::size_t>::const_iterator
Boundary_matrix	multipers/gudhi/gudhi/Persistence_matrix/Boundary_matrix.h	/^class Boundary_matrix : public Master_matrix::Matrix_dimension_option,$/;"	c	namespace:Gudhi::persistence_matrix
Boundary_matrix	multipers/gudhi/gudhi/Persistence_matrix/Boundary_matrix.h	/^inline Boundary_matrix<Master_matrix>::Boundary_matrix(Boundary_matrix&& other) noexcept$/;"	f	class:Gudhi::persistence_matrix::Boundary_matrix
Boundary_matrix	multipers/gudhi/gudhi/Persistence_matrix/Boundary_matrix.h	/^inline Boundary_matrix<Master_matrix>::Boundary_matrix(Column_settings* colSettings)$/;"	f	class:Gudhi::persistence_matrix::Boundary_matrix
Boundary_matrix	multipers/gudhi/gudhi/Persistence_matrix/Boundary_matrix.h	/^inline Boundary_matrix<Master_matrix>::Boundary_matrix(const Boundary_matrix& matrixToCopy, $/;"	f	class:Gudhi::persistence_matrix::Boundary_matrix
Boundary_matrix	multipers/gudhi/gudhi/Persistence_matrix/Boundary_matrix.h	/^inline Boundary_matrix<Master_matrix>::Boundary_matrix(const std::vector<Boundary_range>& ordere/;"	f	class:Gudhi::persistence_matrix::Boundary_matrix
Boundary_matrix	multipers/gudhi/gudhi/Persistence_matrix/Boundary_matrix.h	/^inline Boundary_matrix<Master_matrix>::Boundary_matrix(unsigned int numberOfColumns, $/;"	f	class:Gudhi::persistence_matrix::Boundary_matrix
Boundary_matrix_as_filtered_complex_for_coh	multipers/gudhi/mma_interface_coh.h	/^  Boundary_matrix_as_filtered_complex_for_coh() : boundaries_(nullptr), new_to_old_perm_(nullptr/;"	f	class:Gudhi::multiparameter::truc_interface::Boundary_matrix_as_filtered_complex_for_coh
Boundary_matrix_as_filtered_complex_for_coh	multipers/gudhi/mma_interface_coh.h	/^  Boundary_matrix_as_filtered_complex_for_coh(const Structure &boundaries,$/;"	f	class:Gudhi::multiparameter::truc_interface::Boundary_matrix_as_filtered_complex_for_coh
Boundary_matrix_as_filtered_complex_for_coh	multipers/gudhi/mma_interface_coh.h	/^class Boundary_matrix_as_filtered_complex_for_coh {$/;"	c	namespace:Gudhi::multiparameter::truc_interface
Boundary_opposite_vertex_simplex_iterator	multipers/gudhi/gudhi/Simplex_tree.h	/^      Boundary_opposite_vertex_simplex_iterator;$/;"	t	class:Gudhi::Simplex_tree	typeref:typename:Simplex_tree_boundary_opposite_vertex_simplex_iterator<Simplex_tree>
Boundary_opposite_vertex_simplex_range	multipers/gudhi/gudhi/Simplex_tree.h	/^  typedef boost::iterator_range<Boundary_opposite_vertex_simplex_iterator> Boundary_opposite_ver/;"	t	class:Gudhi::Simplex_tree	typeref:typename:boost::iterator_range<Boundary_opposite_vertex_simplex_iterator>
Boundary_range	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^  typedef typename std::vector<std::size_t> Boundary_range;$/;"	t	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base	typeref:typename:std::vector<std::size_t>
Boundary_simplex_iterator	multipers/gudhi/Simplex_tree_interface.h	/^  using Boundary_simplex_iterator = typename Base::Boundary_simplex_iterator;$/;"	t	class:Gudhi::Simplex_tree_interface	typeref:typename:Base::Boundary_simplex_iterator
Boundary_simplex_iterator	multipers/gudhi/Simplex_tree_multi_interface.h	/^  using Boundary_simplex_iterator = typename Base::Boundary_simplex_iterator;$/;"	t	class:Gudhi::multiparameter::python_interface::Simplex_tree_multi_interface	typeref:typename:Base::Boundary_simplex_iterator
Boundary_simplex_iterator	multipers/gudhi/gudhi/Bitmap_cubical_complex.h	/^  typedef typename std::vector<Simplex_handle>::iterator Boundary_simplex_iterator;$/;"	t	class:Gudhi::cubical_complex::Bitmap_cubical_complex	typeref:typename:std::vector<Simplex_handle>::iterator
Boundary_simplex_iterator	multipers/gudhi/gudhi/Simplex_tree.h	/^  typedef Simplex_tree_boundary_simplex_iterator<Simplex_tree> Boundary_simplex_iterator;$/;"	t	class:Gudhi::Simplex_tree	typeref:typename:Simplex_tree_boundary_simplex_iterator<Simplex_tree>
Boundary_simplex_range	multipers/gudhi/gudhi/Bitmap_cubical_complex.h	/^  typedef typename std::vector<Simplex_handle> Boundary_simplex_range;$/;"	t	class:Gudhi::cubical_complex::Bitmap_cubical_complex	typeref:typename:std::vector<Simplex_handle>
Boundary_simplex_range	multipers/gudhi/gudhi/Simplex_tree.h	/^  typedef boost::iterator_range<Boundary_simplex_iterator> Boundary_simplex_range;$/;"	t	class:Gudhi::Simplex_tree	typeref:typename:boost::iterator_range<Boundary_simplex_iterator>
Box	multipers/gudhi/gudhi/Multi_persistence/Box.h	/^  Box() {}$/;"	f	class:Gudhi::multi_persistence::Box
Box	multipers/gudhi/gudhi/Multi_persistence/Box.h	/^  Box(const Point &lowerCorner, const Point &upperCorner) : lowerCorner_(lowerCorner), upperCorn/;"	f	class:Gudhi::multi_persistence::Box
Box	multipers/gudhi/gudhi/Multi_persistence/Box.h	/^  Box(const std::pair<Point, Point> &box) : Box(box.first, box.second) {}$/;"	f	class:Gudhi::multi_persistence::Box
Box	multipers/gudhi/gudhi/Multi_persistence/Box.h	/^class Box {$/;"	c	namespace:Gudhi::multi_persistence
Bug reports	docs/contributions.rst	/^Bug reports$/;"	c	title:Contributions
Building the documentation	docs/contributions.rst	/^Building the documentation$/;"	s	chapter:Example zoo
C0_0_996a01b526	docs/icon.svg	/^         d="M 0,20 C 5.304062,20 10.391597,17.892674 14.142136,14.142136 17.892674,10.391597 20,/;"	d
C0_0_996a01b526	docs/icon.svg	/^         d="M 0,20 C 5.304062,20 10.391597,17.892674 14.142136,14.142136 17.892674,10.391597 20,/;"	i
CC_	multipers/gudhi/gudhi/Bitmap_cubical_complex.h	/^  Bitmap_cubical_complex<T>* CC_;$/;"	m	class:Gudhi::cubical_complex::is_before_in_filtration	typeref:typename:Bitmap_cubical_complex<T> *
COMBINATORY_H_INCLUDED	multipers/multiparameter_module_approximation/combinatory.h	/^#define COMBINATORY_H_INCLUDED$/;"	d
CONTAINER	multipers/gudhi/gudhi/persistence_matrix_options.h	/^  CONTAINER,  \/**< Default use of @ref MatIdx indices. *\/$/;"	e	enum:Gudhi::persistence_matrix::Column_indexation_types
CP	multipers/gudhi/gudhi/Persistence_matrix/chain_vine_swap.h	/^  using CP = Chain_pairing<Master_matrix>;$/;"	t	class:Gudhi::persistence_matrix::Chain_barcode_swap	typeref:typename:Chain_pairing<Master_matrix>
CP	multipers/gudhi/gudhi/Persistence_matrix/chain_vine_swap.h	/^  using CP = typename std::conditional<Master_matrix::Option_list::has_column_pairings,$/;"	t	class:Gudhi::persistence_matrix::Chain_vine_swap	typeref:typename:std::conditional<Master_matrix::Option_list::has_column_pairings,Chain_barcode_swap<Master_matrix>,Dummy_chain_vine_pairing>::type
Cam	multipers/gudhi/gudhi/Persistent_cohomology.h	/^      boost::intrusive::constant_time_size<false> > Cam;$/;"	t	class:Gudhi::persistent_cohomology::Persistent_cohomology	typeref:typename:boost::intrusive::set<Column,boost::intrusive::constant_time_size<false>>
Cell	multipers/gudhi/gudhi/Persistent_cohomology.h	/^  typedef typename Column::Cell Cell;   \/\/ contains 2 list_hooks$/;"	t	class:Gudhi::persistent_cohomology::Persistent_cohomology	typeref:typename:Column::Cell
Cell	multipers/gudhi/gudhi/Persistent_cohomology/Persistent_cohomology_column.h	/^  typedef Persistent_cohomology_cell<SimplexKey, ArithmeticElement> Cell;$/;"	t	class:Gudhi::persistent_cohomology::Persistent_cohomology_column	typeref:typename:Persistent_cohomology_cell<SimplexKey,ArithmeticElement>
Cell_position_to_ID_mapper	multipers/gudhi/gudhi/Persistence_matrix/boundary_cell_position_to_id_mapper.h	/^struct Cell_position_to_ID_mapper {$/;"	s	namespace:Gudhi::persistence_matrix
Chain_barcode_swap	multipers/gudhi/gudhi/Persistence_matrix/chain_vine_swap.h	/^  Chain_barcode_swap(){};$/;"	f	class:Gudhi::persistence_matrix::Chain_barcode_swap
Chain_barcode_swap	multipers/gudhi/gudhi/Persistence_matrix/chain_vine_swap.h	/^  Chain_barcode_swap(Chain_barcode_swap&& other)$/;"	f	class:Gudhi::persistence_matrix::Chain_barcode_swap
Chain_barcode_swap	multipers/gudhi/gudhi/Persistence_matrix/chain_vine_swap.h	/^  Chain_barcode_swap(const Chain_barcode_swap& toCopy)$/;"	f	class:Gudhi::persistence_matrix::Chain_barcode_swap
Chain_barcode_swap	multipers/gudhi/gudhi/Persistence_matrix/chain_vine_swap.h	/^class Chain_barcode_swap : public Chain_pairing<Master_matrix> $/;"	c	namespace:Gudhi::persistence_matrix
Chain_column_extra_properties	multipers/gudhi/gudhi/Persistence_matrix/columns/chain_column_extra_properties.h	/^  Chain_column_extra_properties() : pivot_(-1), pairedColumn_(-1) {}$/;"	f	class:Gudhi::persistence_matrix::Chain_column_extra_properties
Chain_column_extra_properties	multipers/gudhi/gudhi/Persistence_matrix/columns/chain_column_extra_properties.h	/^  Chain_column_extra_properties(Chain_column_extra_properties&& col)$/;"	f	class:Gudhi::persistence_matrix::Chain_column_extra_properties
Chain_column_extra_properties	multipers/gudhi/gudhi/Persistence_matrix/columns/chain_column_extra_properties.h	/^  Chain_column_extra_properties(ID_index pivot) : pivot_(pivot), pairedColumn_(-1) {}$/;"	f	class:Gudhi::persistence_matrix::Chain_column_extra_properties
Chain_column_extra_properties	multipers/gudhi/gudhi/Persistence_matrix/columns/chain_column_extra_properties.h	/^  Chain_column_extra_properties(ID_index pivot, Index pair) : pivot_(pivot), pairedColumn_(pair)/;"	f	class:Gudhi::persistence_matrix::Chain_column_extra_properties
Chain_column_extra_properties	multipers/gudhi/gudhi/Persistence_matrix/columns/chain_column_extra_properties.h	/^  Chain_column_extra_properties(const Chain_column_extra_properties& col)$/;"	f	class:Gudhi::persistence_matrix::Chain_column_extra_properties
Chain_column_extra_properties	multipers/gudhi/gudhi/Persistence_matrix/columns/chain_column_extra_properties.h	/^class Chain_column_extra_properties $/;"	c	namespace:Gudhi::persistence_matrix
Chain_column_option	multipers/gudhi/gudhi/Matrix.h	/^  using Chain_column_option =$/;"	t	class:Gudhi::persistence_matrix::Matrix	typeref:typename:std::conditional<isNonBasic &&!PersistenceMatrixOptions::is_of_boundary_type,Chain_column_extra_properties<Matrix<PersistenceMatrixOptions>>,Dummy_chain_properties>::type
Chain_matrix	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^class Chain_matrix : public Master_matrix::Matrix_dimension_option,$/;"	c	namespace:Gudhi::persistence_matrix
Chain_matrix	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^inline Chain_matrix<Master_matrix>::Chain_matrix(Chain_matrix&& other) noexcept$/;"	f	class:Gudhi::persistence_matrix::Chain_matrix
Chain_matrix	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^inline Chain_matrix<Master_matrix>::Chain_matrix(Column_settings* colSettings)$/;"	f	class:Gudhi::persistence_matrix::Chain_matrix
Chain_matrix	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^inline Chain_matrix<Master_matrix>::Chain_matrix(Column_settings* colSettings,$/;"	f	class:Gudhi::persistence_matrix::Chain_matrix
Chain_matrix	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^inline Chain_matrix<Master_matrix>::Chain_matrix(const Chain_matrix& matrixToCopy, Column_settin/;"	f	class:Gudhi::persistence_matrix::Chain_matrix
Chain_matrix	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^inline Chain_matrix<Master_matrix>::Chain_matrix(const std::vector<Boundary_range>& orderedBound/;"	f	class:Gudhi::persistence_matrix::Chain_matrix
Chain_matrix	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^inline Chain_matrix<Master_matrix>::Chain_matrix(unsigned int numberOfColumns, $/;"	f	class:Gudhi::persistence_matrix::Chain_matrix
Chain_opt	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^  using Chain_opt = typename Master_matrix::Chain_column_option;$/;"	t	class:Gudhi::persistence_matrix::Heap_column	typeref:typename:Master_matrix::Chain_column_option
Chain_opt	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^  using Chain_opt = typename Master_matrix::Chain_column_option;$/;"	t	class:Gudhi::persistence_matrix::Intrusive_list_column	typeref:typename:Master_matrix::Chain_column_option
Chain_opt	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^  using Chain_opt = typename Master_matrix::Chain_column_option;$/;"	t	class:Gudhi::persistence_matrix::Intrusive_set_column	typeref:typename:Master_matrix::Chain_column_option
Chain_opt	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^  using Chain_opt = typename Master_matrix::Chain_column_option;$/;"	t	class:Gudhi::persistence_matrix::List_column	typeref:typename:Master_matrix::Chain_column_option
Chain_opt	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^  using Chain_opt = typename Master_matrix::Chain_column_option;$/;"	t	class:Gudhi::persistence_matrix::Naive_vector_column	typeref:typename:Master_matrix::Chain_column_option
Chain_opt	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^  using Chain_opt = typename Master_matrix::Chain_column_option;$/;"	t	class:Gudhi::persistence_matrix::Set_column	typeref:typename:Master_matrix::Chain_column_option
Chain_opt	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^  using Chain_opt = typename Master_matrix::Chain_column_option;$/;"	t	class:Gudhi::persistence_matrix::Small_vector_column	typeref:typename:Master_matrix::Chain_column_option
Chain_opt	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^  using Chain_opt = typename Master_matrix::Chain_column_option;$/;"	t	class:Gudhi::persistence_matrix::Unordered_set_column	typeref:typename:Master_matrix::Chain_column_option
Chain_opt	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^  using Chain_opt = typename Master_matrix::Chain_column_option;$/;"	t	class:Gudhi::persistence_matrix::Vector_column	typeref:typename:Master_matrix::Chain_column_option
Chain_pairing	multipers/gudhi/gudhi/Persistence_matrix/chain_pairing.h	/^class Chain_pairing $/;"	c	namespace:Gudhi::persistence_matrix
Chain_pairing	multipers/gudhi/gudhi/Persistence_matrix/chain_pairing.h	/^inline Chain_pairing<Master_matrix>::Chain_pairing() : nextPosition_(0) $/;"	f	class:Gudhi::persistence_matrix::Chain_pairing
Chain_pairing	multipers/gudhi/gudhi/Persistence_matrix/chain_pairing.h	/^inline Chain_pairing<Master_matrix>::Chain_pairing(Chain_pairing<Master_matrix>&& other) noexcep/;"	f	class:Gudhi::persistence_matrix::Chain_pairing
Chain_pairing	multipers/gudhi/gudhi/Persistence_matrix/chain_pairing.h	/^inline Chain_pairing<Master_matrix>::Chain_pairing(const Chain_pairing& matrixToCopy)$/;"	f	class:Gudhi::persistence_matrix::Chain_pairing
Chain_pairing_option	multipers/gudhi/gudhi/Matrix.h	/^  using Chain_pairing_option =$/;"	t	class:Gudhi::persistence_matrix::Matrix	typeref:typename:std::conditional<PersistenceMatrixOptions::has_column_pairings &&!PersistenceMatrixOptions::has_vine_update,Chain_pairing<Matrix<PersistenceMatrixOptions>>,Dummy_chain_pairing>::type
Chain_representative_cycles	multipers/gudhi/gudhi/Persistence_matrix/chain_rep_cycles.h	/^class Chain_representative_cycles $/;"	c	namespace:Gudhi::persistence_matrix
Chain_representative_cycles	multipers/gudhi/gudhi/Persistence_matrix/chain_rep_cycles.h	/^inline Chain_representative_cycles<Master_matrix>::Chain_representative_cycles($/;"	f	class:Gudhi::persistence_matrix::Chain_representative_cycles
Chain_representative_cycles	multipers/gudhi/gudhi/Persistence_matrix/chain_rep_cycles.h	/^inline Chain_representative_cycles<Master_matrix>::Chain_representative_cycles() $/;"	f	class:Gudhi::persistence_matrix::Chain_representative_cycles
Chain_representative_cycles_option	multipers/gudhi/gudhi/Matrix.h	/^  using Chain_representative_cycles_option =$/;"	t	class:Gudhi::persistence_matrix::Matrix	typeref:typename:std::conditional<PersistenceMatrixOptions::can_retrieve_representative_cycles,Chain_representative_cycles<Matrix<PersistenceMatrixOptions>>,Dummy_chain_representative_cycles>::type
Chain_vine_swap	multipers/gudhi/gudhi/Persistence_matrix/chain_vine_swap.h	/^class Chain_vine_swap : public std::conditional<Master_matrix::Option_list::has_column_pairings,$/;"	c	namespace:Gudhi::persistence_matrix
Chain_vine_swap	multipers/gudhi/gudhi/Persistence_matrix/chain_vine_swap.h	/^inline Chain_vine_swap<Master_matrix>::Chain_vine_swap() : CP(), birthComp_(), deathComp_() $/;"	f	class:Gudhi::persistence_matrix::Chain_vine_swap
Chain_vine_swap	multipers/gudhi/gudhi/Persistence_matrix/chain_vine_swap.h	/^inline Chain_vine_swap<Master_matrix>::Chain_vine_swap(Chain_vine_swap<Master_matrix>&& other) n/;"	f	class:Gudhi::persistence_matrix::Chain_vine_swap
Chain_vine_swap	multipers/gudhi/gudhi/Persistence_matrix/chain_vine_swap.h	/^inline Chain_vine_swap<Master_matrix>::Chain_vine_swap(const Chain_vine_swap& matrixToCopy)$/;"	f	class:Gudhi::persistence_matrix::Chain_vine_swap
Chain_vine_swap	multipers/gudhi/gudhi/Persistence_matrix/chain_vine_swap.h	/^inline Chain_vine_swap<Master_matrix>::Chain_vine_swap(std::function<bool(Pos_index,Pos_index)> /;"	f	class:Gudhi::persistence_matrix::Chain_vine_swap
Chain_vine_swap_option	multipers/gudhi/gudhi/Matrix.h	/^  using Chain_vine_swap_option = typename std::conditional<PersistenceMatrixOptions::has_vine_up/;"	t	class:Gudhi::persistence_matrix::Matrix	typeref:typename:std::conditional<PersistenceMatrixOptions::has_vine_update,Chain_vine_swap<Matrix<PersistenceMatrixOptions>>,Dummy_chain_vine_swap>::type
Characteristic	multipers/gudhi/gudhi/Fields/Multi_field.h	/^  using Characteristic = Element; \/**< Type for the field characteristic. *\/$/;"	t	class:Gudhi::persistence_fields::Multi_field_element	typeref:typename:Element
Characteristic	multipers/gudhi/gudhi/Fields/Multi_field_operators.h	/^  using Characteristic = Element;   \/**< Type for the field characteristic. *\/$/;"	t	class:Gudhi::persistence_fields::Multi_field_operators	typeref:typename:Element
Characteristic	multipers/gudhi/gudhi/Fields/Multi_field_shared.h	/^  using Characteristic = Element; \/**< Type for the field characteristic. *\/$/;"	t	class:Gudhi::persistence_fields::Shared_multi_field_element	typeref:typename:Element
Characteristic	multipers/gudhi/gudhi/Fields/Multi_field_small.h	/^  using Characteristic = Element;   \/**< Type for the field characteristic. *\/$/;"	t	class:Gudhi::persistence_fields::Multi_field_element_with_small_characteristics	typeref:typename:Element
Characteristic	multipers/gudhi/gudhi/Fields/Multi_field_small_operators.h	/^  using Characteristic = Element;   \/**< Type for the field characteristic. *\/$/;"	t	class:Gudhi::persistence_fields::Multi_field_operators_with_small_characteristics	typeref:typename:Element
Characteristic	multipers/gudhi/gudhi/Fields/Multi_field_small_shared.h	/^  using Characteristic = Element;   \/**< Type for the field characteristic. *\/$/;"	t	class:Gudhi::persistence_fields::Shared_multi_field_element_with_small_characteristics	typeref:typename:Element
Characteristic	multipers/gudhi/gudhi/Fields/Z2_field_operators.h	/^  using Characteristic = unsigned int; \/**< Type for the field characteristic. *\/$/;"	t	class:Gudhi::persistence_fields::Z2_field_operators	typeref:typename:unsigned int
Characteristic	multipers/gudhi/gudhi/Fields/Zp_field.h	/^  using Characteristic = Element;   \/**< Type for the field characteristic. *\/$/;"	t	class:Gudhi::persistence_fields::Zp_field_element	typeref:typename:Element
Characteristic	multipers/gudhi/gudhi/Fields/Zp_field_operators.h	/^  using Characteristic = Element;   \/**< Type for the field characteristic. *\/$/;"	t	class:Gudhi::persistence_fields::Zp_field_operators	typeref:typename:Element
Characteristic	multipers/gudhi/gudhi/Fields/Zp_field_shared.h	/^  using Characteristic = Element;   \/**< Type for the field characteristic. *\/$/;"	t	class:Gudhi::persistence_fields::Shared_Zp_field_element	typeref:typename:Element
Characteristic	multipers/gudhi/gudhi/Matrix.h	/^  using Characteristic = typename Field_operators::Characteristic;$/;"	t	class:Gudhi::persistence_matrix::Matrix	typeref:typename:Field_operators::Characteristic
Citation	README.md	/^## Citation$/;"	s	chapter:multipers : Multiparameter Persistence for Machine Learning
Citation	docs/index.rst	/^Citation$/;"	s	chapter:`multipers` : Multiparameter Persistence for Machine Learning
Clement	multipers/gudhi/Persistence_slices_interface.h	/^enum class BackendsEnum { Matrix, Graph, Clement, GudhiCohomology };$/;"	e	enum:BackendsEnum
ClementBackendOptionsWithVine	multipers/gudhi/Persistence_slices_interface.h	/^using ClementBackendOptionsWithVine = Gudhi::multiparameter::truc_interface::Multi_persistence_C/;"	t	typeref:typename:Gudhi::multiparameter::truc_interface::Multi_persistence_Clement_options<col>
ClementMatrixBackendVine	multipers/gudhi/Persistence_slices_interface.h	/^using ClementMatrixBackendVine =$/;"	t	typeref:typename:Gudhi::multiparameter::truc_interface::Persistence_backend_matrix<ClementBackendOptionsWithVine<col>,Structure>
Cmpi	multipers/gudhi/gudhi/Flag_complex_edge_collapser.h	/^  struct Cmpi { template<class T, class U> bool operator()(T const&a, U const&b)const{return b<a/;"	s	struct:Gudhi::collapse::Flag_complex_edge_collapser
Coboundary_iterator	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^  typedef typename std::vector<std::size_t>::const_iterator Coboundary_iterator;$/;"	t	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base	typeref:typename:std::vector<std::size_t>::const_iterator
Coboundary_range	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^  typedef typename std::vector<std::size_t> Coboundary_range;$/;"	t	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base	typeref:typename:std::vector<std::size_t>
Cofaces_simplex_range	multipers/gudhi/gudhi/Simplex_tree.h	/^                                    std::vector<Simplex_handle>>::type Cofaces_simplex_range;$/;"	t	class:Gudhi::Simplex_tree	typeref:typename:std::conditional<Options::link_nodes_by_label,Optimized_cofaces_simplex_filtered_range,std::vector<Simplex_handle>>::type
Cohomology_persistence_options	multipers/gudhi/gudhi/persistence_matrix_options.h	/^struct Cohomology_persistence_options : Default_options<column_type, is_z2_only, FieldOperators>/;"	s	namespace:Gudhi::persistence_matrix
Col_dict	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix_with_column_compression.h	/^  using Col_dict = boost::intrusive::set<Column, boost::intrusive::constant_time_size<false> >;$/;"	t	class:Gudhi::persistence_matrix::Base_matrix_with_column_compression	typeref:typename:boost::intrusive::set<Column,boost::intrusive::constant_time_size<false>>
Col_type	multipers/gudhi/gudhi/Persistent_cohomology/Persistent_cohomology_column.h	/^      boost::intrusive::base_hook<base_hook_cam_v> > Col_type;$/;"	t	class:Gudhi::persistent_cohomology::Persistent_cohomology_column	typeref:typename:boost::intrusive::list<Cell,boost::intrusive::constant_time_size<false>,boost::intrusive::base_hook<base_hook_cam_v>>
Column	multipers/gudhi/gudhi/Matrix.h	/^  using Column = typename std::conditional<$/;"	t	class:Gudhi::persistence_matrix::Matrix
Column	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix.h	/^  using Column = typename Master_matrix::Column;                        \/**< Column type. *\/$/;"	t	class:Gudhi::persistence_matrix::Base_matrix	typeref:typename:Master_matrix::Column
Column	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix_with_column_compression.h	/^    Column(Column&& column) noexcept : Base(std::move(static_cast<Base&>(column))) {}$/;"	f	class:Gudhi::persistence_matrix::Base_matrix_with_column_compression::Column
Column	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix_with_column_compression.h	/^    Column(Column_settings* colSettings = nullptr)$/;"	f	class:Gudhi::persistence_matrix::Base_matrix_with_column_compression::Column
Column	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix_with_column_compression.h	/^    Column(Index columnIndex, const Container& nonZeroRowIndices, Dimension dimension,$/;"	f	class:Gudhi::persistence_matrix::Base_matrix_with_column_compression::Column
Column	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix_with_column_compression.h	/^    Column(Index columnIndex, const Container& nonZeroRowIndices, Row_container& rowContainer,$/;"	f	class:Gudhi::persistence_matrix::Base_matrix_with_column_compression::Column
Column	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix_with_column_compression.h	/^    Column(const Column& column, Column_settings* colSettings = nullptr)$/;"	f	class:Gudhi::persistence_matrix::Base_matrix_with_column_compression::Column
Column	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix_with_column_compression.h	/^    Column(const Column& column, Index columnIndex, Row_container& rowContainer,$/;"	f	class:Gudhi::persistence_matrix::Base_matrix_with_column_compression::Column
Column	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix_with_column_compression.h	/^    Column(const Container& nonZeroRowIndices, Column_settings* colSettings)$/;"	f	class:Gudhi::persistence_matrix::Base_matrix_with_column_compression::Column
Column	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix_with_column_compression.h	/^    Column(const Container& nonZeroRowIndices, Dimension dimension, Column_settings* colSettings/;"	f	class:Gudhi::persistence_matrix::Base_matrix_with_column_compression::Column
Column	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix_with_column_compression.h	/^  class Column$/;"	c	class:Gudhi::persistence_matrix::Base_matrix_with_column_compression
Column	multipers/gudhi/gudhi/Persistence_matrix/Boundary_matrix.h	/^  using Column = typename Master_matrix::Column;                        \/**< Column type. *\/$/;"	t	class:Gudhi::persistence_matrix::Boundary_matrix	typeref:typename:Master_matrix::Column
Column	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^  using Column = typename Master_matrix::Column;                            \/**< Column type. */;"	t	class:Gudhi::persistence_matrix::Chain_matrix	typeref:typename:Master_matrix::Column
Column	multipers/gudhi/gudhi/Persistence_matrix/Id_to_index_overlay.h	/^  using Column = typename Master_matrix::Column;                        \/**< Column type. *\/$/;"	t	class:Gudhi::persistence_matrix::Id_to_index_overlay	typeref:typename:Master_matrix::Column
Column	multipers/gudhi/gudhi/Persistence_matrix/Position_to_index_overlay.h	/^  using Column = typename Master_matrix::Column;                            \/**< Column type. */;"	t	class:Gudhi::persistence_matrix::Position_to_index_overlay	typeref:typename:Master_matrix::Column
Column	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^  using Column = typename Master_matrix::Column;                        \/**< Column type. *\/$/;"	t	class:Gudhi::persistence_matrix::RU_matrix	typeref:typename:Master_matrix::Column
Column	multipers/gudhi/gudhi/Persistence_matrix/chain_vine_swap.h	/^  using Column = typename Master_matrix::Column;                      \/**< Column type. *\/$/;"	t	class:Gudhi::persistence_matrix::Chain_vine_swap	typeref:typename:Master_matrix::Column
Column	multipers/gudhi/gudhi/Persistent_cohomology.h	/^  typedef Persistent_cohomology_column<Simplex_key, Arith_element> Column;  \/\/ contains 1 set_/;"	t	class:Gudhi::persistent_cohomology::Persistent_cohomology	typeref:typename:Persistent_cohomology_column<Simplex_key,Arith_element>
Column	multipers/gudhi/gudhi/Persistent_cohomology/Persistent_cohomology_column.h	/^  typedef Persistent_cohomology_column<SimplexKey, ArithmeticElement> Column;$/;"	t	class:Gudhi::persistent_cohomology::Persistent_cohomology_cell	typeref:typename:Persistent_cohomology_column<SimplexKey,ArithmeticElement>
Column_container	multipers/gudhi/gudhi/Matrix.h	/^  using Column_container =$/;"	t	class:Gudhi::persistence_matrix::Matrix	typeref:typename:std::conditional<PersistenceMatrixOptions::has_map_column_container,std::unordered_map<Index,Column>,std::vector<Column>>::type
Column_container	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix.h	/^  using Column_container = typename Master_matrix::Column_container;$/;"	t	class:Gudhi::persistence_matrix::Base_matrix	typeref:typename:Master_matrix::Column_container
Column_container	multipers/gudhi/gudhi/Persistence_matrix/Boundary_matrix.h	/^  using Column_container = typename Master_matrix::Column_container;$/;"	t	class:Gudhi::persistence_matrix::Boundary_matrix	typeref:typename:Master_matrix::Column_container
Column_container	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^  using Column_container = typename Master_matrix::Column_container;$/;"	t	class:Gudhi::persistence_matrix::Chain_matrix	typeref:typename:Master_matrix::Column_container
Column_container	multipers/gudhi/gudhi/Persistence_matrix/base_pairing.h	/^  using Column_container = typename Master_matrix::Column_container;  \/**< Column container typ/;"	t	class:Gudhi::persistence_matrix::Base_pairing	typeref:typename:Master_matrix::Column_container
Column_container	multipers/gudhi/gudhi/Persistence_matrix/base_swap.h	/^  using Column_container = typename Master_matrix::Column_container;  \/**< Column container typ/;"	t	class:Gudhi::persistence_matrix::Base_swap	typeref:typename:Master_matrix::Column_container
Column_container	multipers/gudhi/gudhi/Persistence_matrix/chain_rep_cycles.h	/^  using Column_container = typename Master_matrix::Column_container;  \/**< Column container typ/;"	t	class:Gudhi::persistence_matrix::Chain_representative_cycles	typeref:typename:Master_matrix::Column_container
Column_container	multipers/gudhi/gudhi/Persistence_matrix/chain_vine_swap.h	/^  using Column_container = typename Master_matrix::Column_container;  \/**< Column container typ/;"	t	class:Gudhi::persistence_matrix::Chain_vine_swap	typeref:typename:Master_matrix::Column_container
Column_dimension_holder	multipers/gudhi/gudhi/Persistence_matrix/columns/column_dimension_holder.h	/^  Column_dimension_holder() : dim_(Master_matrix::Option_list::is_of_boundary_type ? 0 : -1) {}$/;"	f	struct:Gudhi::persistence_matrix::Column_dimension_holder
Column_dimension_holder	multipers/gudhi/gudhi/Persistence_matrix/columns/column_dimension_holder.h	/^  Column_dimension_holder(Column_dimension_holder&& col) : dim_(std::exchange(col.dim_, -1)) {}$/;"	f	struct:Gudhi::persistence_matrix::Column_dimension_holder
Column_dimension_holder	multipers/gudhi/gudhi/Persistence_matrix/columns/column_dimension_holder.h	/^  Column_dimension_holder(Dimension dim) : dim_(dim) {}$/;"	f	struct:Gudhi::persistence_matrix::Column_dimension_holder
Column_dimension_holder	multipers/gudhi/gudhi/Persistence_matrix/columns/column_dimension_holder.h	/^  Column_dimension_holder(const Column_dimension_holder& col) : dim_(col.dim_) {}$/;"	f	struct:Gudhi::persistence_matrix::Column_dimension_holder
Column_dimension_holder	multipers/gudhi/gudhi/Persistence_matrix/columns/column_dimension_holder.h	/^struct Column_dimension_holder $/;"	s	namespace:Gudhi::persistence_matrix
Column_dimension_option	multipers/gudhi/gudhi/Matrix.h	/^  using Column_dimension_option =$/;"	t	class:Gudhi::persistence_matrix::Matrix	typeref:typename:std::conditional<isNonBasic,Column_dimension_holder<Matrix<PersistenceMatrixOptions>>,Dummy_dimension_holder>::type
Column_hook	multipers/gudhi/gudhi/Matrix.h	/^  using Column_hook = typename std::conditional<$/;"	t	class:Gudhi::persistence_matrix::Matrix
Column_indexation_types	multipers/gudhi/gudhi/persistence_matrix_options.h	/^enum class Column_indexation_types { $/;"	g	namespace:Gudhi::persistence_matrix
Column_settings	multipers/gudhi/gudhi/Matrix.h	/^  using Column_settings = typename std::conditional<$/;"	t	class:Gudhi::persistence_matrix::Matrix	typeref:typename:std::conditional<PersistenceMatrixOptions::is_z2,Column_z2_settings,Column_zp_settings>::type
Column_settings	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix.h	/^  using Column_settings = typename Master_matrix::Column_settings;      \/**< Structure giving a/;"	t	class:Gudhi::persistence_matrix::Base_matrix	typeref:typename:Master_matrix::Column_settings
Column_settings	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix_with_column_compression.h	/^  using Column_settings = typename Master_matrix::Column_settings;      \/**< Structure giving a/;"	t	class:Gudhi::persistence_matrix::Base_matrix_with_column_compression	typeref:typename:Master_matrix::Column_settings
Column_settings	multipers/gudhi/gudhi/Persistence_matrix/Boundary_matrix.h	/^  using Column_settings = typename Master_matrix::Column_settings;      \/**< Structure giving a/;"	t	class:Gudhi::persistence_matrix::Boundary_matrix	typeref:typename:Master_matrix::Column_settings
Column_settings	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^  using Column_settings = typename Master_matrix::Column_settings;          \/**< Structure givi/;"	t	class:Gudhi::persistence_matrix::Chain_matrix	typeref:typename:Master_matrix::Column_settings
Column_settings	multipers/gudhi/gudhi/Persistence_matrix/Id_to_index_overlay.h	/^  using Column_settings = typename Master_matrix::Column_settings;      \/**< Structure giving a/;"	t	class:Gudhi::persistence_matrix::Id_to_index_overlay	typeref:typename:Master_matrix::Column_settings
Column_settings	multipers/gudhi/gudhi/Persistence_matrix/Position_to_index_overlay.h	/^  using Column_settings = typename Master_matrix::Column_settings;          \/**< Structure givi/;"	t	class:Gudhi::persistence_matrix::Position_to_index_overlay	typeref:typename:Master_matrix::Column_settings
Column_settings	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^  using Column_settings = typename Master_matrix::Column_settings;      \/**< Structure giving a/;"	t	class:Gudhi::persistence_matrix::RU_matrix	typeref:typename:Master_matrix::Column_settings
Column_settings	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^  using Column_settings = typename Master_matrix::Column_settings;$/;"	t	class:Gudhi::persistence_matrix::Heap_column	typeref:typename:Master_matrix::Column_settings
Column_settings	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^  using Column_settings = typename Master_matrix::Column_settings;$/;"	t	class:Gudhi::persistence_matrix::Intrusive_list_column	typeref:typename:Master_matrix::Column_settings
Column_settings	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^  using Column_settings = typename Master_matrix::Column_settings;$/;"	t	class:Gudhi::persistence_matrix::Intrusive_set_column	typeref:typename:Master_matrix::Column_settings
Column_settings	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^  using Column_settings = typename Master_matrix::Column_settings;$/;"	t	class:Gudhi::persistence_matrix::List_column	typeref:typename:Master_matrix::Column_settings
Column_settings	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^  using Column_settings = typename Master_matrix::Column_settings;$/;"	t	class:Gudhi::persistence_matrix::Naive_vector_column	typeref:typename:Master_matrix::Column_settings
Column_settings	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^  using Column_settings = typename Master_matrix::Column_settings;$/;"	t	class:Gudhi::persistence_matrix::Set_column	typeref:typename:Master_matrix::Column_settings
Column_settings	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^  using Column_settings = typename Master_matrix::Column_settings;$/;"	t	class:Gudhi::persistence_matrix::Small_vector_column	typeref:typename:Master_matrix::Column_settings
Column_settings	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^  using Column_settings = typename Master_matrix::Column_settings;$/;"	t	class:Gudhi::persistence_matrix::Unordered_set_column	typeref:typename:Master_matrix::Column_settings
Column_settings	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^  using Column_settings = typename Master_matrix::Column_settings;$/;"	t	class:Gudhi::persistence_matrix::Vector_column	typeref:typename:Master_matrix::Column_settings
Column_support	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^  using Column_support = std::vector<Entry*>;$/;"	t	class:Gudhi::persistence_matrix::Heap_column	typeref:typename:std::vector<Entry * >
Column_support	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^  using Column_support =$/;"	t	class:Gudhi::persistence_matrix::Intrusive_list_column	typeref:typename:boost::intrusive::list<Entry,boost::intrusive::constant_time_size<false>,boost::intrusive::base_hook<typename Master_matrix::Base_hook_matrix_list_column>>
Column_support	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^  using Column_support =$/;"	t	class:Gudhi::persistence_matrix::Intrusive_set_column	typeref:typename:boost::intrusive::set<Entry,boost::intrusive::constant_time_size<false>,boost::intrusive::base_hook<typename Master_matrix::Base_hook_matrix_set_column>>
Column_support	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^  using Column_support = std::list<Entry*>;$/;"	t	class:Gudhi::persistence_matrix::List_column	typeref:typename:std::list<Entry * >
Column_support	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^  using Column_support = std::vector<Entry*>;$/;"	t	class:Gudhi::persistence_matrix::Naive_vector_column	typeref:typename:std::vector<Entry * >
Column_support	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^  using Column_support = std::set<Entry*, EntryPointerComp>;$/;"	t	class:Gudhi::persistence_matrix::Set_column	typeref:typename:std::set<Entry *,EntryPointerComp>
Column_support	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^  using Column_support = boost::container::small_vector<Entry*, 10>;$/;"	t	class:Gudhi::persistence_matrix::Small_vector_column	typeref:typename:boost::container::small_vector<Entry *,10>
Column_support	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^  using Column_support = boost::unordered_flat_set<Entry*, EntryPointerHash<Entry>, EntryPointer/;"	t	class:Gudhi::persistence_matrix::Unordered_set_column	typeref:typename:boost::unordered_flat_set<Entry *,EntryPointerHash<Entry>,EntryPointerEq<Entry>>
Column_support	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^  using Column_support = std::unordered_set<Entry*, EntryPointerHash<Entry>, EntryPointerEq<Entr/;"	t	class:Gudhi::persistence_matrix::Unordered_set_column	typeref:typename:std::unordered_set<Entry *,EntryPointerHash<Entry>,EntryPointerEq<Entry>>
Column_support	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^  using Column_support = std::vector<Entry*>;$/;"	t	class:Gudhi::persistence_matrix::Vector_column	typeref:typename:std::vector<Entry * >
Column_types	multipers/gudhi/gudhi/persistence_matrix_options.h	/^enum class Column_types { $/;"	g	namespace:Gudhi::persistence_matrix
Column_types_strs	multipers/gudhi/Persistence_slices_interface.h	/^enum Column_types_strs { LIST, SET, HEAP, VECTOR, NAIVE_VECTOR, UNORDERED_SET, INTRUSIVE_LIST, I/;"	g
Column_z2_settings	multipers/gudhi/gudhi/Matrix.h	/^    Column_z2_settings() : entryConstructor() {}$/;"	f	struct:Gudhi::persistence_matrix::Matrix::Column_z2_settings
Column_z2_settings	multipers/gudhi/gudhi/Matrix.h	/^    Column_z2_settings([[maybe_unused]] Characteristic characteristic) : entryConstructor() {}$/;"	f	struct:Gudhi::persistence_matrix::Matrix::Column_z2_settings
Column_z2_settings	multipers/gudhi/gudhi/Matrix.h	/^    Column_z2_settings(const Column_z2_settings& toCopy) : entryConstructor() {}$/;"	f	struct:Gudhi::persistence_matrix::Matrix::Column_z2_settings
Column_z2_settings	multipers/gudhi/gudhi/Matrix.h	/^  struct Column_z2_settings{$/;"	s	class:Gudhi::persistence_matrix::Matrix
Column_zp_settings	multipers/gudhi/gudhi/Matrix.h	/^    Column_zp_settings() : operators(), entryConstructor() {}$/;"	f	struct:Gudhi::persistence_matrix::Matrix::Column_zp_settings
Column_zp_settings	multipers/gudhi/gudhi/Matrix.h	/^    Column_zp_settings(Characteristic characteristic) : operators(), entryConstructor() {$/;"	f	struct:Gudhi::persistence_matrix::Matrix::Column_zp_settings
Column_zp_settings	multipers/gudhi/gudhi/Matrix.h	/^    Column_zp_settings(const Column_zp_settings& toCopy)$/;"	f	struct:Gudhi::persistence_matrix::Matrix::Column_zp_settings
Column_zp_settings	multipers/gudhi/gudhi/Matrix.h	/^  struct Column_zp_settings {$/;"	s	class:Gudhi::persistence_matrix::Matrix
Combinatorics	multipers/multiparameter_module_approximation/combinatory.h	/^namespace Gudhi::multiparameter::mma::Combinatorics {$/;"	n	namespace:Gudhi::multiparameter::mma
Compilation from sources	docs/compilation.rst	/^Compilation from sources$/;"	H
Complex_simplex_iterator	multipers/gudhi/Simplex_tree_interface.h	/^  using Complex_simplex_iterator = typename Base::Complex_simplex_iterator;$/;"	t	class:Gudhi::Simplex_tree_interface	typeref:typename:Base::Complex_simplex_iterator
Complex_simplex_iterator	multipers/gudhi/Simplex_tree_multi_interface.h	/^  using Complex_simplex_iterator = typename Base::Complex_simplex_iterator;$/;"	t	class:Gudhi::multiparameter::python_interface::Simplex_tree_multi_interface	typeref:typename:Base::Complex_simplex_iterator
Complex_simplex_iterator	multipers/gudhi/gudhi/Simplex_tree.h	/^  typedef Simplex_tree_complex_simplex_iterator<Simplex_tree> Complex_simplex_iterator;$/;"	t	class:Gudhi::Simplex_tree	typeref:typename:Simplex_tree_complex_simplex_iterator<Simplex_tree>
Complex_simplex_range	multipers/gudhi/gudhi/Simplex_tree.h	/^  typedef boost::iterator_range<Complex_simplex_iterator> Complex_simplex_range;$/;"	t	class:Gudhi::Simplex_tree	typeref:typename:boost::iterator_range<Complex_simplex_iterator>
Complex_vertex_iterator	multipers/gudhi/gudhi/Simplex_tree.h	/^  typedef boost::transform_iterator<return_first, Dictionary_it> Complex_vertex_iterator;$/;"	t	class:Gudhi::Simplex_tree	typeref:typename:boost::transform_iterator<return_first,Dictionary_it>
Complex_vertex_range	multipers/gudhi/gudhi/Simplex_tree.h	/^  typedef boost::iterator_range<Complex_vertex_iterator> Complex_vertex_range;$/;"	t	class:Gudhi::Simplex_tree	typeref:typename:boost::iterator_range<Complex_vertex_iterator>
Contributions	README.md	/^## Contributions$/;"	s	chapter:multipers : Multiparameter Persistence for Machine Learning
Contributions	docs/contributions.rst	/^Contributions$/;"	H
Cycle	multipers/gudhi/gudhi/Matrix.h	/^  using Cycle = std::vector<ID_index>; \/\/TODO: add coefficients$/;"	t	class:Gudhi::persistence_matrix::Matrix	typeref:typename:std::vector<ID_index>
Cycle	multipers/gudhi/gudhi/Persistence_matrix/Id_to_index_overlay.h	/^  using Cycle = typename Master_matrix::Cycle;                          \/**< Cycle type. *\/$/;"	t	class:Gudhi::persistence_matrix::Id_to_index_overlay	typeref:typename:Master_matrix::Cycle
Cycle	multipers/gudhi/gudhi/Persistence_matrix/Position_to_index_overlay.h	/^  using Cycle = typename Master_matrix::Cycle;                              \/**< Cycle type. *\/$/;"	t	class:Gudhi::persistence_matrix::Position_to_index_overlay	typeref:typename:Master_matrix::Cycle
Cycle	multipers/gudhi/gudhi/Persistence_matrix/chain_rep_cycles.h	/^  using Cycle = typename Master_matrix::Cycle;                        \/**< Cycle type. *\/$/;"	t	class:Gudhi::persistence_matrix::Chain_representative_cycles	typeref:typename:Master_matrix::Cycle
Cycle	multipers/gudhi/gudhi/Persistence_matrix/ru_rep_cycles.h	/^  using Cycle = typename Master_matrix::Cycle;        \/**< Cycle type. *\/$/;"	t	class:Gudhi::persistence_matrix::RU_representative_cycles	typeref:typename:Master_matrix::Cycle
Cycle_border	multipers/gudhi/gudhi/Persistence_matrix/ru_rep_cycles.h	/^  using Cycle_border = std::vector<ID_index>;$/;"	t	class:Gudhi::persistence_matrix::RU_representative_cycles	typeref:typename:std::vector<ID_index>
Cycle_borders	multipers/gudhi/gudhi/Persistence_matrix/ru_rep_cycles.h	/^  using Cycle_borders = std::vector<Cycle_border>;$/;"	t	class:Gudhi::persistence_matrix::RU_representative_cycles	typeref:typename:std::vector<Cycle_border>
Cycle_borders_tmp	multipers/gudhi/gudhi/Persistence_matrix/ru_rep_cycles.h	/^  using Cycle_borders_tmp = boost::unordered_flat_set<Cycle_border,hashCycle>;$/;"	t	class:Gudhi::persistence_matrix::RU_representative_cycles	typeref:typename:boost::unordered_flat_set<Cycle_border,hashCycle>
Cycle_borders_tmp	multipers/gudhi/gudhi/Persistence_matrix/ru_rep_cycles.h	/^  using Cycle_borders_tmp = std::unordered_set<Cycle_border,hashCycle>;$/;"	t	class:Gudhi::persistence_matrix::RU_representative_cycles	typeref:typename:std::unordered_set<Cycle_border,hashCycle>
Cycle_unreduced_borders_tmp	multipers/gudhi/gudhi/Persistence_matrix/ru_rep_cycles.h	/^  using Cycle_unreduced_borders_tmp = boost::unordered_flat_set<Index>;$/;"	t	class:Gudhi::persistence_matrix::RU_representative_cycles	typeref:typename:boost::unordered_flat_set<Index>
Cycle_unreduced_borders_tmp	multipers/gudhi/gudhi/Persistence_matrix/ru_rep_cycles.h	/^  using Cycle_unreduced_borders_tmp = std::unordered_set<Index>;$/;"	t	class:Gudhi::persistence_matrix::RU_representative_cycles	typeref:typename:std::unordered_set<Index>
D2DL	compute.py	/^	D2DL = mmk.DistanceMatrices2DistancesList()$/;"	v
DATASET_PATH	multipers/data/MOL2.py	/^DATASET_PATH = expanduser("~\/Datasets\/")$/;"	v
DATASET_PATH	multipers/data/graphs.py	/^DATASET_PATH = expanduser("~\/Datasets\/")$/;"	v
DATASET_PATH	multipers/data/shape3d.py	/^DATASET_PATH = expanduser("~\/Datasets\/")$/;"	v
DBG	multipers/gudhi/gudhi/Debug_utils.h	/^  #define DBG(/;"	d
DBG	multipers/gudhi/gudhi/Debug_utils.h	/^  #define DBG(a) std::clog << "DBG:/;"	d
DBGCONT	multipers/gudhi/gudhi/Debug_utils.h	/^  #define DBGCONT(/;"	d
DBGMSG	multipers/gudhi/gudhi/Debug_utils.h	/^  #define DBGMSG(/;"	d
DBGVALUE	multipers/gudhi/gudhi/Debug_utils.h	/^  #define DBGVALUE(/;"	d
DEBUG_H_INCLUDED	multipers/multiparameter_module_approximation/debug.h	/^#define DEBUG_H_INCLUDED$/;"	d
DEBUG_UTILS_H_	multipers/gudhi/gudhi/Debug_utils.h	/^#define DEBUG_UTILS_H_$/;"	d
DISTANCE_FUNCTIONS_H_	multipers/gudhi/gudhi/distance_functions.h	/^#define DISTANCE_FUNCTIONS_H_$/;"	d
DL2D	compute.py	/^	DL2D = mmk.DistancesLists2DistanceMatrices()$/;"	v
DM2K	compute.py	/^	DM2K = mmk.DistanceMatrix2Kernel()$/;"	v
DM2K_parameters	compute.py	/^	DM2K_parameters= {$/;"	v
DOMINATES	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  enum class Rel { EQUAL, DOMINATES, IS_DOMINATED, NONE };$/;"	e	enum:Gudhi::multi_filtration::Multi_critical_filtration::Rel
DOWN	multipers/gudhi/gudhi/Simplex_tree.h	/^enum class Extended_simplex_type { UP, DOWN, EXTRA };$/;"	e	enum:Gudhi::Extended_simplex_type
DTM	multipers/ml/convolutions.py	/^class DTM:$/;"	c
DTM	multipers_old.py	/^def DTM(X,query_pts,m):$/;"	f
DUDE_path	multipers/data/MOL2.py	/^DUDE_path = DATASET_PATH + "DUD-E\/"$/;"	v
Debug	multipers/multiparameter_module_approximation/debug.h	/^namespace Gudhi::multiparameter::mma::Debug {$/;"	n	namespace:Gudhi::multiparameter::mma
Default_options	multipers/gudhi/gudhi/persistence_matrix_options.h	/^struct Default_options $/;"	s	namespace:Gudhi::persistence_matrix
DegreeRips2SignedMeasure	multipers/ml/signed_measures.py	/^class DegreeRips2SignedMeasure(BaseEstimator, TransformerMixin):$/;"	c
Delete_disposer	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix_with_column_compression.h	/^    Delete_disposer(Base_matrix_with_column_compression* matrix) : matrix_(matrix) {}$/;"	f	struct:Gudhi::persistence_matrix::Base_matrix_with_column_compression::Delete_disposer
Delete_disposer	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix_with_column_compression.h	/^  struct Delete_disposer {$/;"	s	class:Gudhi::persistence_matrix::Base_matrix_with_column_compression
Delete_disposer	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^    Delete_disposer() {};$/;"	f	struct:Gudhi::persistence_matrix::Intrusive_list_column::Delete_disposer
Delete_disposer	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^    Delete_disposer(Intrusive_list_column* col) : col_(col) {};$/;"	f	struct:Gudhi::persistence_matrix::Intrusive_list_column::Delete_disposer
Delete_disposer	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^  struct Delete_disposer {$/;"	s	class:Gudhi::persistence_matrix::Intrusive_list_column
Delete_disposer	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^    Delete_disposer() {};$/;"	f	struct:Gudhi::persistence_matrix::Intrusive_set_column::Delete_disposer
Delete_disposer	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^    Delete_disposer(Intrusive_set_column* col) : col_(col) {};$/;"	f	struct:Gudhi::persistence_matrix::Intrusive_set_column::Delete_disposer
Delete_disposer	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^  struct Delete_disposer {$/;"	s	class:Gudhi::persistence_matrix::Intrusive_set_column
Dgm2Histogram	multipers/ml/one.py	/^class Dgm2Histogram(BaseEstimator, TransformerMixin):$/;"	c
Dgms2Image	multipers/ml/one.py	/^class Dgms2Image(BaseEstimator, TransformerMixin):$/;"	c
Dgms2Landscapes	multipers/ml/one.py	/^class Dgms2Landscapes(BaseEstimator, TransformerMixin):$/;"	c
Dgms2SWK	multipers/ml/one.py	/^class Dgms2SWK(BaseEstimator, TransformerMixin):$/;"	c
Dgms2SignedMeasureDistance	multipers/ml/one.py	/^class Dgms2SignedMeasureDistance(BaseEstimator, TransformerMixin):$/;"	c
Dgms2SignedMeasureHistogram	multipers/ml/one.py	/^class Dgms2SignedMeasureHistogram(BaseEstimator, TransformerMixin):$/;"	c
Dgms2SignedMeasureImage	multipers/ml/one.py	/^class Dgms2SignedMeasureImage(BaseEstimator, TransformerMixin):$/;"	c
Dgms2SlicedWassersteinDistanceMatrices	multipers/ml/one.py	/^class Dgms2SlicedWassersteinDistanceMatrices(BaseEstimator, TransformerMixin):$/;"	c
DiagramShuffle	multipers/ml/one.py	/^class DiagramShuffle(BaseEstimator, TransformerMixin):$/;"	c
Diagram_point	multipers/multiparameter_module_approximation/utilities.h	/^  Diagram_point() : dim(-1), birth(-1), death(-1) {}$/;"	f	struct:Gudhi::multiparameter::mma::Diagram_point
Diagram_point	multipers/multiparameter_module_approximation/utilities.h	/^  Diagram_point(dimension_type dim, value_type birth, value_type death)$/;"	f	struct:Gudhi::multiparameter::mma::Diagram_point
Diagram_point	multipers/multiparameter_module_approximation/utilities.h	/^struct Diagram_point {$/;"	s	namespace:Gudhi::multiparameter::mma
Dictionary	multipers/gudhi/gudhi/Matrix.h	/^  using Dictionary =$/;"	t	class:Gudhi::persistence_matrix::Matrix	typeref:typename:std::conditional<PersistenceMatrixOptions::has_map_column_container,std::unordered_map<unsigned int,value_type>,std::vector<value_type>>::type
Dictionary	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^  using Dictionary = typename Master_matrix::template Dictionary<Index>;$/;"	t	class:Gudhi::persistence_matrix::Chain_matrix	typeref:typename:Master_matrix::template Dictionary<Index>
Dictionary	multipers/gudhi/gudhi/Persistence_matrix/Id_to_index_overlay.h	/^  using Dictionary = typename Master_matrix::template Dictionary<Index>;$/;"	t	class:Gudhi::persistence_matrix::Id_to_index_overlay	typeref:typename:Master_matrix::template Dictionary<Index>
Dictionary	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^  using Dictionary = typename Master_matrix::template Dictionary<Index>;$/;"	t	class:Gudhi::persistence_matrix::RU_matrix	typeref:typename:Master_matrix::template Dictionary<Index>
Dictionary	multipers/gudhi/gudhi/Persistence_matrix/base_pairing.h	/^  using Dictionary = typename Master_matrix::Bar_dictionary;$/;"	t	class:Gudhi::persistence_matrix::Base_pairing	typeref:typename:Master_matrix::Bar_dictionary
Dictionary	multipers/gudhi/gudhi/Persistence_matrix/chain_pairing.h	/^  using Dictionary = typename Master_matrix::Bar_dictionary;$/;"	t	class:Gudhi::persistence_matrix::Chain_pairing	typeref:typename:Master_matrix::Bar_dictionary
Dictionary	multipers/gudhi/gudhi/Persistence_matrix/chain_vine_swap.h	/^  using Dictionary = typename Master_matrix::template Dictionary<Pos_index>;$/;"	t	class:Gudhi::persistence_matrix::Chain_barcode_swap	typeref:typename:Master_matrix::template Dictionary<Pos_index>
Dictionary	multipers/gudhi/gudhi/Persistence_matrix/ru_pairing.h	/^  using Dictionary = typename Master_matrix::Bar_dictionary;$/;"	t	class:Gudhi::persistence_matrix::RU_pairing	typeref:typename:Master_matrix::Bar_dictionary
Dictionary	multipers/gudhi/gudhi/Simplex_tree.h	/^  typedef typename std::conditional<Options::stable_simplex_handles, map, flat_map>::type Dictio/;"	t	class:Gudhi::Simplex_tree	typeref:typename:std::conditional<Options::stable_simplex_handles,map,flat_map>::type
Dictionary	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_siblings.h	/^  typedef MapContainer Dictionary;$/;"	t	class:Gudhi::Simplex_tree_siblings	typeref:typename:MapContainer
Dictionary_it	multipers/gudhi/gudhi/Simplex_tree.h	/^  typedef typename Dictionary::iterator Dictionary_it;$/;"	t	class:Gudhi::Simplex_tree	typeref:typename:Dictionary::iterator
Dictionary_it	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_siblings.h	/^  typedef typename MapContainer::iterator Dictionary_it;$/;"	t	class:Gudhi::Simplex_tree_siblings	typeref:typename:MapContainer::iterator
Dim_opt	multipers/gudhi/gudhi/Persistence_matrix/Boundary_matrix.h	/^  using Dim_opt = typename Master_matrix::Matrix_dimension_option;$/;"	t	class:Gudhi::persistence_matrix::Boundary_matrix	typeref:typename:Master_matrix::Matrix_dimension_option
Dim_opt	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^  using Dim_opt = typename Master_matrix::Matrix_dimension_option;$/;"	t	class:Gudhi::persistence_matrix::Chain_matrix	typeref:typename:Master_matrix::Matrix_dimension_option
Dim_opt	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^  using Dim_opt = typename Master_matrix::Column_dimension_option;$/;"	t	class:Gudhi::persistence_matrix::Heap_column	typeref:typename:Master_matrix::Column_dimension_option
Dim_opt	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^  using Dim_opt = typename Master_matrix::Column_dimension_option;$/;"	t	class:Gudhi::persistence_matrix::Intrusive_list_column	typeref:typename:Master_matrix::Column_dimension_option
Dim_opt	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^  using Dim_opt = typename Master_matrix::Column_dimension_option;$/;"	t	class:Gudhi::persistence_matrix::Intrusive_set_column	typeref:typename:Master_matrix::Column_dimension_option
Dim_opt	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^  using Dim_opt = typename Master_matrix::Column_dimension_option;$/;"	t	class:Gudhi::persistence_matrix::List_column	typeref:typename:Master_matrix::Column_dimension_option
Dim_opt	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^  using Dim_opt = typename Master_matrix::Column_dimension_option;$/;"	t	class:Gudhi::persistence_matrix::Naive_vector_column	typeref:typename:Master_matrix::Column_dimension_option
Dim_opt	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^  using Dim_opt = typename Master_matrix::Column_dimension_option;$/;"	t	class:Gudhi::persistence_matrix::Set_column	typeref:typename:Master_matrix::Column_dimension_option
Dim_opt	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^  using Dim_opt = typename Master_matrix::Column_dimension_option;$/;"	t	class:Gudhi::persistence_matrix::Small_vector_column	typeref:typename:Master_matrix::Column_dimension_option
Dim_opt	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^  using Dim_opt = typename Master_matrix::Column_dimension_option;$/;"	t	class:Gudhi::persistence_matrix::Unordered_set_column	typeref:typename:Master_matrix::Column_dimension_option
Dim_opt	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^  using Dim_opt = typename Master_matrix::Column_dimension_option;$/;"	t	class:Gudhi::persistence_matrix::Vector_column	typeref:typename:Master_matrix::Column_dimension_option
Dimension	multipers/gudhi/gudhi/Matrix.h	/^  using Dimension = typename PersistenceMatrixOptions::Dimension; \/**< Type for dimension value/;"	t	class:Gudhi::persistence_matrix::Matrix	typeref:typename:PersistenceMatrixOptions::Dimension
Dimension	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix.h	/^  using Dimension = typename Master_matrix::Dimension;                \/**< Dimension value type/;"	t	class:Gudhi::persistence_matrix::Base_matrix	typeref:typename:Master_matrix::Dimension
Dimension	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix_with_column_compression.h	/^  using Dimension = typename Master_matrix::Dimension;                  \/**< Dimension value ty/;"	t	class:Gudhi::persistence_matrix::Base_matrix_with_column_compression	typeref:typename:Master_matrix::Dimension
Dimension	multipers/gudhi/gudhi/Persistence_matrix/Boundary_matrix.h	/^  using Dimension = typename Master_matrix::Dimension;                \/**< Dimension value type/;"	t	class:Gudhi::persistence_matrix::Boundary_matrix	typeref:typename:Master_matrix::Dimension
Dimension	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^  using Dimension = typename Master_matrix::Dimension;                      \/**< Dimension valu/;"	t	class:Gudhi::persistence_matrix::Chain_matrix	typeref:typename:Master_matrix::Dimension
Dimension	multipers/gudhi/gudhi/Persistence_matrix/Id_to_index_overlay.h	/^  using Dimension = typename Master_matrix::Dimension;                  \/**< Dimension value ty/;"	t	class:Gudhi::persistence_matrix::Id_to_index_overlay	typeref:typename:Master_matrix::Dimension
Dimension	multipers/gudhi/gudhi/Persistence_matrix/Position_to_index_overlay.h	/^  using Dimension = typename Master_matrix::Dimension;                      \/**< Dimension valu/;"	t	class:Gudhi::persistence_matrix::Position_to_index_overlay	typeref:typename:Master_matrix::Dimension
Dimension	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^  using Dimension = typename Master_matrix::Dimension;                  \/**< Dimension value ty/;"	t	class:Gudhi::persistence_matrix::RU_matrix	typeref:typename:Master_matrix::Dimension
Dimension	multipers/gudhi/gudhi/Persistence_matrix/base_pairing.h	/^  using Dimension = typename Master_matrix::Dimension;                \/**< Dimension value type/;"	t	class:Gudhi::persistence_matrix::Base_pairing	typeref:typename:Master_matrix::Dimension
Dimension	multipers/gudhi/gudhi/Persistence_matrix/chain_pairing.h	/^  using Dimension = typename Master_matrix::Dimension;  \/**< Dimension value type. *\/$/;"	t	class:Gudhi::persistence_matrix::Chain_pairing	typeref:typename:Master_matrix::Dimension
Dimension	multipers/gudhi/gudhi/Persistence_matrix/columns/column_dimension_holder.h	/^  using Dimension = typename Master_matrix::Dimension;  \/**< Dimension value type. *\/$/;"	t	struct:Gudhi::persistence_matrix::Column_dimension_holder	typeref:typename:Master_matrix::Dimension
Dimension	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^  using Dimension = typename Master_matrix::Dimension;$/;"	t	class:Gudhi::persistence_matrix::Heap_column	typeref:typename:Master_matrix::Dimension
Dimension	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^  using Dimension = typename Master_matrix::Dimension;$/;"	t	class:Gudhi::persistence_matrix::Intrusive_list_column	typeref:typename:Master_matrix::Dimension
Dimension	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^  using Dimension = typename Master_matrix::Dimension;$/;"	t	class:Gudhi::persistence_matrix::Intrusive_set_column	typeref:typename:Master_matrix::Dimension
Dimension	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^  using Dimension = typename Master_matrix::Dimension;$/;"	t	class:Gudhi::persistence_matrix::List_column	typeref:typename:Master_matrix::Dimension
Dimension	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^  using Dimension = typename Master_matrix::Dimension;$/;"	t	class:Gudhi::persistence_matrix::Naive_vector_column	typeref:typename:Master_matrix::Dimension
Dimension	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^  using Dimension = typename Master_matrix::Dimension;$/;"	t	class:Gudhi::persistence_matrix::Set_column	typeref:typename:Master_matrix::Dimension
Dimension	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^  using Dimension = typename Master_matrix::Dimension;$/;"	t	class:Gudhi::persistence_matrix::Small_vector_column	typeref:typename:Master_matrix::Dimension
Dimension	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^  using Dimension = typename Master_matrix::Dimension;$/;"	t	class:Gudhi::persistence_matrix::Unordered_set_column	typeref:typename:Master_matrix::Dimension
Dimension	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^  using Dimension = typename Master_matrix::Dimension;$/;"	t	class:Gudhi::persistence_matrix::Vector_column	typeref:typename:Master_matrix::Dimension
Dimension	multipers/gudhi/gudhi/Persistence_matrix/ru_pairing.h	/^  using Dimension = typename Master_matrix::Dimension;$/;"	t	class:Gudhi::persistence_matrix::RU_pairing	typeref:typename:Master_matrix::Dimension
Dimension	multipers/gudhi/gudhi/persistence_matrix_options.h	/^  using Dimension = int;$/;"	t	struct:Gudhi::persistence_matrix::Default_options	typeref:typename:int
Dimension	multipers/gudhi/mma_interface_coh.h	/^  using Dimension = int;$/;"	t	class:Gudhi::multiparameter::truc_interface::Boundary_matrix_as_filtered_complex_for_coh	typeref:typename:int
Discussions	docs/contributions.rst	/^Discussions$/;"	c	title:Contributions
DistanceList2DistanceMatrix	multipers/ml/kernels.py	/^class DistanceList2DistanceMatrix(BaseEstimator, TransformerMixin):$/;"	c
DistanceMatrices2DistancesList	multipers/ml/kernels.py	/^class DistanceMatrices2DistancesList(BaseEstimator, TransformerMixin):$/;"	c
DistanceMatrix2DistanceList	multipers/ml/kernels.py	/^class DistanceMatrix2DistanceList(BaseEstimator, TransformerMixin):$/;"	c
DistanceMatrix2Kernel	multipers/ml/kernels.py	/^class DistanceMatrix2Kernel(BaseEstimator, TransformerMixin):$/;"	c
DistancesLists2DistanceMatrices	multipers/ml/kernels.py	/^class DistancesLists2DistanceMatrices(BaseEstimator, TransformerMixin):$/;"	c
Dit_value_t	multipers/gudhi/gudhi/Simplex_tree.h	/^  typedef typename Dictionary_it::value_type Dit_value_t;$/;"	t	class:Gudhi::Simplex_tree	typeref:typename:Dictionary_it::value_type
Dummy_base_pairing	multipers/gudhi/gudhi/Persistence_matrix/base_pairing.h	/^struct Dummy_base_pairing {$/;"	s	namespace:Gudhi::persistence_matrix
Dummy_base_swap	multipers/gudhi/gudhi/Persistence_matrix/base_swap.h	/^  Dummy_base_swap([[maybe_unused]] unsigned int numberOfColumns = 0) {}$/;"	f	struct:Gudhi::persistence_matrix::Dummy_base_swap
Dummy_base_swap	multipers/gudhi/gudhi/Persistence_matrix/base_swap.h	/^struct Dummy_base_swap {$/;"	s	namespace:Gudhi::persistence_matrix
Dummy_chain_pairing	multipers/gudhi/gudhi/Persistence_matrix/chain_pairing.h	/^struct Dummy_chain_pairing$/;"	s	namespace:Gudhi::persistence_matrix
Dummy_chain_properties	multipers/gudhi/gudhi/Persistence_matrix/columns/chain_column_extra_properties.h	/^  Dummy_chain_properties([[maybe_unused]] int pivot = 0, [[maybe_unused]] int pair = 0) {}$/;"	f	struct:Gudhi::persistence_matrix::Dummy_chain_properties
Dummy_chain_properties	multipers/gudhi/gudhi/Persistence_matrix/columns/chain_column_extra_properties.h	/^struct Dummy_chain_properties $/;"	s	namespace:Gudhi::persistence_matrix
Dummy_chain_representative_cycles	multipers/gudhi/gudhi/Persistence_matrix/chain_rep_cycles.h	/^struct Dummy_chain_representative_cycles$/;"	s	namespace:Gudhi::persistence_matrix
Dummy_chain_vine_pairing	multipers/gudhi/gudhi/Persistence_matrix/chain_vine_swap.h	/^struct Dummy_chain_vine_pairing$/;"	s	namespace:Gudhi::persistence_matrix
Dummy_chain_vine_swap	multipers/gudhi/gudhi/Persistence_matrix/chain_vine_swap.h	/^  Dummy_chain_vine_swap() {}$/;"	f	struct:Gudhi::persistence_matrix::Dummy_chain_vine_swap
Dummy_chain_vine_swap	multipers/gudhi/gudhi/Persistence_matrix/chain_vine_swap.h	/^  Dummy_chain_vine_swap([[maybe_unused]] const BirthComparatorFunction& birthComparator,$/;"	f	struct:Gudhi::persistence_matrix::Dummy_chain_vine_swap
Dummy_chain_vine_swap	multipers/gudhi/gudhi/Persistence_matrix/chain_vine_swap.h	/^struct Dummy_chain_vine_swap$/;"	s	namespace:Gudhi::persistence_matrix
Dummy_column_hook	multipers/gudhi/gudhi/Matrix.h	/^  struct Dummy_column_hook {};$/;"	s	class:Gudhi::persistence_matrix::Matrix
Dummy_dimension_holder	multipers/gudhi/gudhi/Persistence_matrix/columns/column_dimension_holder.h	/^  Dummy_dimension_holder() {}$/;"	f	struct:Gudhi::persistence_matrix::Dummy_dimension_holder
Dummy_dimension_holder	multipers/gudhi/gudhi/Persistence_matrix/columns/column_dimension_holder.h	/^  Dummy_dimension_holder([[maybe_unused]] Dimension dim) {}$/;"	f	struct:Gudhi::persistence_matrix::Dummy_dimension_holder
Dummy_dimension_holder	multipers/gudhi/gudhi/Persistence_matrix/columns/column_dimension_holder.h	/^struct Dummy_dimension_holder $/;"	s	namespace:Gudhi::persistence_matrix
Dummy_entry_column_index_mixin	multipers/gudhi/gudhi/Persistence_matrix/columns/entry_types.h	/^  Dummy_entry_column_index_mixin() {}$/;"	f	struct:Gudhi::persistence_matrix::Dummy_entry_column_index_mixin
Dummy_entry_column_index_mixin	multipers/gudhi/gudhi/Persistence_matrix/columns/entry_types.h	/^  Dummy_entry_column_index_mixin([[maybe_unused]] Index columnIndex) {}$/;"	f	struct:Gudhi::persistence_matrix::Dummy_entry_column_index_mixin
Dummy_entry_column_index_mixin	multipers/gudhi/gudhi/Persistence_matrix/columns/entry_types.h	/^struct Dummy_entry_column_index_mixin $/;"	s	namespace:Gudhi::persistence_matrix
Dummy_entry_field_element_mixin	multipers/gudhi/gudhi/Persistence_matrix/columns/entry_types.h	/^  Dummy_entry_field_element_mixin() {}$/;"	f	struct:Gudhi::persistence_matrix::Dummy_entry_field_element_mixin
Dummy_entry_field_element_mixin	multipers/gudhi/gudhi/Persistence_matrix/columns/entry_types.h	/^  Dummy_entry_field_element_mixin([[maybe_unused]] Field_element t) {}$/;"	f	struct:Gudhi::persistence_matrix::Dummy_entry_field_element_mixin
Dummy_entry_field_element_mixin	multipers/gudhi/gudhi/Persistence_matrix/columns/entry_types.h	/^struct Dummy_entry_field_element_mixin $/;"	s	namespace:Gudhi::persistence_matrix
Dummy_matrix_dimension_holder	multipers/gudhi/gudhi/Persistence_matrix/matrix_dimension_holders.h	/^  Dummy_matrix_dimension_holder([[maybe_unused]] Dimension maximalDimension) {}$/;"	f	struct:Gudhi::persistence_matrix::Dummy_matrix_dimension_holder
Dummy_matrix_dimension_holder	multipers/gudhi/gudhi/Persistence_matrix/matrix_dimension_holders.h	/^struct Dummy_matrix_dimension_holder$/;"	s	namespace:Gudhi::persistence_matrix
Dummy_matrix_row_access	multipers/gudhi/gudhi/Persistence_matrix/matrix_row_access.h	/^  Dummy_matrix_row_access([[maybe_unused]] unsigned int numberOfRows = 0){};$/;"	f	struct:Gudhi::persistence_matrix::Dummy_matrix_row_access
Dummy_matrix_row_access	multipers/gudhi/gudhi/Persistence_matrix/matrix_row_access.h	/^struct Dummy_matrix_row_access$/;"	s	namespace:Gudhi::persistence_matrix
Dummy_pos_mapper	multipers/gudhi/gudhi/Persistence_matrix/boundary_cell_position_to_id_mapper.h	/^struct Dummy_pos_mapper {$/;"	s	namespace:Gudhi::persistence_matrix
Dummy_pos_mapper	multipers/gudhi/gudhi/Persistence_matrix/boundary_face_position_to_id_mapper.h	/^struct Dummy_pos_mapper {$/;"	s	namespace:Gudhi::persistence_matrix
Dummy_row_access	multipers/gudhi/gudhi/Persistence_matrix/columns/row_access.h	/^  Dummy_row_access() {}$/;"	f	struct:Gudhi::persistence_matrix::Dummy_row_access
Dummy_row_access	multipers/gudhi/gudhi/Persistence_matrix/columns/row_access.h	/^  Dummy_row_access([[maybe_unused]] Index columnIndex, [[maybe_unused]] Row_container& rows) {}$/;"	f	struct:Gudhi::persistence_matrix::Dummy_row_access
Dummy_row_access	multipers/gudhi/gudhi/Persistence_matrix/columns/row_access.h	/^struct Dummy_row_access $/;"	s	namespace:Gudhi::persistence_matrix
Dummy_row_hook	multipers/gudhi/gudhi/Matrix.h	/^  struct Dummy_row_hook {};$/;"	s	class:Gudhi::persistence_matrix::Matrix
Dummy_ru_pairing	multipers/gudhi/gudhi/Persistence_matrix/ru_pairing.h	/^struct Dummy_ru_pairing$/;"	s	namespace:Gudhi::persistence_matrix
Dummy_ru_representative_cycles	multipers/gudhi/gudhi/Persistence_matrix/ru_rep_cycles.h	/^struct Dummy_ru_representative_cycles$/;"	s	namespace:Gudhi::persistence_matrix
Dummy_ru_vine_pairing	multipers/gudhi/gudhi/Persistence_matrix/ru_vine_swap.h	/^struct Dummy_ru_vine_pairing$/;"	s	namespace:Gudhi::persistence_matrix
Dummy_ru_vine_swap	multipers/gudhi/gudhi/Persistence_matrix/ru_vine_swap.h	/^struct Dummy_ru_vine_swap$/;"	s	namespace:Gudhi::persistence_matrix
EF_AUC	multipers/data/MOL2.py	/^def EF_AUC(distances: np.ndarray, labels: np.ndarray, anchors_in_test=0):$/;"	f
EF_from_distance_matrix	multipers/data/MOL2.py	/^def EF_from_distance_matrix($/;"	f
EQUAL	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  enum class Rel { EQUAL, DOMINATES, IS_DOMINATED, NONE };$/;"	e	enum:Gudhi::multi_filtration::Multi_critical_filtration::Rel
EXTRA	multipers/gudhi/gudhi/Simplex_tree.h	/^enum class Extended_simplex_type { UP, DOWN, EXTRA };$/;"	e	enum:Gudhi::Extended_simplex_type
Edge	multipers/gudhi/gudhi/Flag_complex_edge_collapser.h	/^  typedef std::pair<Vertex,Vertex> Edge;$/;"	t	struct:Gudhi::collapse::Flag_complex_edge_collapser	typeref:typename:std::pair<Vertex,Vertex>
Edge_collapser	multipers/gudhi/gudhi/Flag_complex_edge_collapser.h	/^  using Edge_collapser = Flag_complex_edge_collapser<Vertex, Filtration_value>;$/;"	t	function:Gudhi::collapse::flag_complex_collapse_edges	typeref:typename:Flag_complex_edge_collapser<Vertex,Filtration_value>
Edge_t	multipers/gudhi/gudhi/reader_utils.h	/^  typedef std::pair<Vertex_handle, Vertex_handle> Edge_t;$/;"	t	function:Gudhi::read_graph	typeref:typename:std::pair<Vertex_handle,Vertex_handle>
Element	multipers/gudhi/gudhi/Fields/Multi_field.h	/^  using Element = mpz_class;           \/**< Type for the elements in the field. *\/$/;"	t	class:Gudhi::persistence_fields::Multi_field_element	typeref:typename:mpz_class
Element	multipers/gudhi/gudhi/Fields/Multi_field_operators.h	/^  using Element = mpz_class;             \/**< Type for the elements in the field. *\/$/;"	t	class:Gudhi::persistence_fields::Multi_field_operators	typeref:typename:mpz_class
Element	multipers/gudhi/gudhi/Fields/Multi_field_shared.h	/^  using Element = mpz_class;           \/**< Type for the elements in the field. *\/$/;"	t	class:Gudhi::persistence_fields::Shared_multi_field_element	typeref:typename:mpz_class
Element	multipers/gudhi/gudhi/Fields/Multi_field_small.h	/^  using Element = Unsigned_integer_type; \/**< Type for the elements in the field. *\/$/;"	t	class:Gudhi::persistence_fields::Multi_field_element_with_small_characteristics	typeref:typename:Unsigned_integer_type
Element	multipers/gudhi/gudhi/Fields/Multi_field_small_operators.h	/^  using Element = unsigned int;          \/**< Type for the elements in the field. *\/$/;"	t	class:Gudhi::persistence_fields::Multi_field_operators_with_small_characteristics	typeref:typename:unsigned int
Element	multipers/gudhi/gudhi/Fields/Multi_field_small_shared.h	/^  using Element = Unsigned_integer_type; \/**< Type for the elements in the field. *\/$/;"	t	class:Gudhi::persistence_fields::Shared_multi_field_element_with_small_characteristics	typeref:typename:Unsigned_integer_type
Element	multipers/gudhi/gudhi/Fields/Z2_field.h	/^  using Element = bool;  \/**< Type for the elements in the field. *\/$/;"	t	class:Gudhi::persistence_fields::Z2_field_element	typeref:typename:bool
Element	multipers/gudhi/gudhi/Fields/Z2_field_operators.h	/^  using Element = bool;                \/**< Type for the elements in the field. *\/$/;"	t	class:Gudhi::persistence_fields::Z2_field_operators	typeref:typename:bool
Element	multipers/gudhi/gudhi/Fields/Zp_field.h	/^  using Element = Unsigned_integer_type; \/**< Type for the elements in the field. *\/$/;"	t	class:Gudhi::persistence_fields::Zp_field_element	typeref:typename:Unsigned_integer_type
Element	multipers/gudhi/gudhi/Fields/Zp_field_operators.h	/^  using Element = Unsigned_integer_type; \/**< Type for the elements in the field. *\/$/;"	t	class:Gudhi::persistence_fields::Zp_field_operators	typeref:typename:Unsigned_integer_type
Element	multipers/gudhi/gudhi/Fields/Zp_field_shared.h	/^  using Element = Unsigned_integer_type; \/**< Type for the elements in the field. *\/$/;"	t	class:Gudhi::persistence_fields::Shared_Zp_field_element	typeref:typename:Unsigned_integer_type
Element	multipers/gudhi/gudhi/Matrix.h	/^  using Element = typename Field_operators::Element;$/;"	t	class:Gudhi::persistence_matrix::Matrix	typeref:typename:Field_operators::Element
Element	multipers/gudhi/gudhi/Persistent_cohomology/Field_Zp.h	/^  typedef int Element;$/;"	t	class:Gudhi::persistent_cohomology::Field_Zp	typeref:typename:int
Element	multipers/gudhi/gudhi/Persistent_cohomology/Multi_field.h	/^  typedef mpz_class Element;$/;"	t	class:Gudhi::persistent_cohomology::Multi_field	typeref:typename:mpz_class
Entry	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^  using Entry = typename Master_matrix::Matrix_entry;                       \/**< @ref Entry "Ma/;"	t	class:Gudhi::persistence_matrix::Chain_matrix	typeref:typename:Master_matrix::Matrix_entry
Entry	multipers/gudhi/gudhi/Persistence_matrix/columns/entry_types.h	/^  Entry(){};$/;"	f	class:Gudhi::persistence_matrix::Entry
Entry	multipers/gudhi/gudhi/Persistence_matrix/columns/entry_types.h	/^  Entry(Entry&& entry) noexcept$/;"	f	class:Gudhi::persistence_matrix::Entry
Entry	multipers/gudhi/gudhi/Persistence_matrix/columns/entry_types.h	/^  Entry(ID_index rowIndex) : col_opt(), field_opt(), rowIndex_(rowIndex){};$/;"	f	class:Gudhi::persistence_matrix::Entry
Entry	multipers/gudhi/gudhi/Persistence_matrix/columns/entry_types.h	/^  Entry(Index columnIndex, ID_index rowIndex) : col_opt(columnIndex), field_opt(), rowIndex_(row/;"	f	class:Gudhi::persistence_matrix::Entry
Entry	multipers/gudhi/gudhi/Persistence_matrix/columns/entry_types.h	/^  Entry(const Entry& entry)$/;"	f	class:Gudhi::persistence_matrix::Entry
Entry	multipers/gudhi/gudhi/Persistence_matrix/columns/entry_types.h	/^class Entry : public Master_matrix::Entry_column_index_option,$/;"	c	namespace:Gudhi::persistence_matrix
Entry	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^  using Entry = typename Master_matrix::Matrix_entry;$/;"	t	class:Gudhi::persistence_matrix::Heap_column	typeref:typename:Master_matrix::Matrix_entry
Entry	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^  using Entry = typename Master_matrix::Matrix_entry;$/;"	t	class:Gudhi::persistence_matrix::Intrusive_list_column	typeref:typename:Master_matrix::Matrix_entry
Entry	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^  using Entry = typename Master_matrix::Matrix_entry;$/;"	t	class:Gudhi::persistence_matrix::Intrusive_set_column	typeref:typename:Master_matrix::Matrix_entry
Entry	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^  using Entry = typename Master_matrix::Matrix_entry;$/;"	t	class:Gudhi::persistence_matrix::List_column	typeref:typename:Master_matrix::Matrix_entry
Entry	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^  using Entry = typename Master_matrix::Matrix_entry;$/;"	t	class:Gudhi::persistence_matrix::Naive_vector_column	typeref:typename:Master_matrix::Matrix_entry
Entry	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^  using Entry = typename Master_matrix::Matrix_entry;$/;"	t	class:Gudhi::persistence_matrix::Set_column	typeref:typename:Master_matrix::Matrix_entry
Entry	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^  using Entry = typename Master_matrix::Matrix_entry;$/;"	t	class:Gudhi::persistence_matrix::Small_vector_column	typeref:typename:Master_matrix::Matrix_entry
Entry	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^  using Entry = typename Master_matrix::Matrix_entry;$/;"	t	class:Gudhi::persistence_matrix::Unordered_set_column	typeref:typename:Master_matrix::Matrix_entry
Entry	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^  using Entry = typename Master_matrix::Matrix_entry;$/;"	t	class:Gudhi::persistence_matrix::Vector_column	typeref:typename:Master_matrix::Matrix_entry
EntryPointerComp	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^  struct EntryPointerComp {$/;"	s	class:Gudhi::persistence_matrix::Heap_column
EntryPointerComp	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^  struct EntryPointerComp {$/;"	s	class:Gudhi::persistence_matrix::Set_column
EntryPointerComp	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^  struct EntryPointerComp {$/;"	s	class:Gudhi::persistence_matrix::Unordered_set_column
EntryPointerEq	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^struct EntryPointerEq$/;"	s	namespace:Gudhi::persistence_matrix
EntryPointerHash	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^struct EntryPointerHash$/;"	s	namespace:Gudhi::persistence_matrix
Entry_column_index	multipers/gudhi/gudhi/Persistence_matrix/columns/entry_types.h	/^  Entry_column_index() : columnIndex_(-1){};$/;"	f	class:Gudhi::persistence_matrix::Entry_column_index
Entry_column_index	multipers/gudhi/gudhi/Persistence_matrix/columns/entry_types.h	/^  Entry_column_index(Entry_column_index&& entry) noexcept : columnIndex_(std::exchange(entry.col/;"	f	class:Gudhi::persistence_matrix::Entry_column_index
Entry_column_index	multipers/gudhi/gudhi/Persistence_matrix/columns/entry_types.h	/^  Entry_column_index(Index columnIndex) : columnIndex_(columnIndex){};$/;"	f	class:Gudhi::persistence_matrix::Entry_column_index
Entry_column_index	multipers/gudhi/gudhi/Persistence_matrix/columns/entry_types.h	/^  Entry_column_index(const Entry_column_index& entry) : columnIndex_(entry.columnIndex_){};$/;"	f	class:Gudhi::persistence_matrix::Entry_column_index
Entry_column_index	multipers/gudhi/gudhi/Persistence_matrix/columns/entry_types.h	/^class Entry_column_index $/;"	c	namespace:Gudhi::persistence_matrix
Entry_column_index_option	multipers/gudhi/gudhi/Matrix.h	/^  using Entry_column_index_option =$/;"	t	class:Gudhi::persistence_matrix::Matrix	typeref:typename:std::conditional<PersistenceMatrixOptions::has_row_access,Entry_column_index<Index>,Dummy_entry_column_index_mixin>::type
Entry_constructor	multipers/gudhi/gudhi/Matrix.h	/^  using Entry_constructor = Pool_entry_constructor<Matrix_entry>;$/;"	t	class:Gudhi::persistence_matrix::Matrix	typeref:typename:Pool_entry_constructor<Matrix_entry>
Entry_constructor	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix.h	/^  using Entry_constructor = typename Master_matrix::Entry_constructor;  \/**< Factory of @ref En/;"	t	class:Gudhi::persistence_matrix::Base_matrix	typeref:typename:Master_matrix::Entry_constructor
Entry_constructor	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix_with_column_compression.h	/^  using Entry_constructor = typename Master_matrix::Entry_constructor;  \/**< Factory of @ref En/;"	t	class:Gudhi::persistence_matrix::Base_matrix_with_column_compression	typeref:typename:Master_matrix::Entry_constructor
Entry_constructor	multipers/gudhi/gudhi/Persistence_matrix/Boundary_matrix.h	/^  using Entry_constructor = typename Master_matrix::Entry_constructor;  \/**< Factory of @ref En/;"	t	class:Gudhi::persistence_matrix::Boundary_matrix	typeref:typename:Master_matrix::Entry_constructor
Entry_constructor	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^  using Entry_constructor = typename Master_matrix::Entry_constructor;      \/**< Factory of @re/;"	t	class:Gudhi::persistence_matrix::Chain_matrix	typeref:typename:Master_matrix::Entry_constructor
Entry_constructor	multipers/gudhi/gudhi/Persistence_matrix/Id_to_index_overlay.h	/^  using Entry_constructor = typename Master_matrix::Entry_constructor;  \/**< Factory of @ref En/;"	t	class:Gudhi::persistence_matrix::Id_to_index_overlay	typeref:typename:Master_matrix::Entry_constructor
Entry_constructor	multipers/gudhi/gudhi/Persistence_matrix/Position_to_index_overlay.h	/^  using Entry_constructor = typename Master_matrix::Entry_constructor;        \/**< Factory of @/;"	t	class:Gudhi::persistence_matrix::Position_to_index_overlay	typeref:typename:Master_matrix::Entry_constructor
Entry_constructor	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^  using Entry_constructor = typename Master_matrix::Entry_constructor;  \/**< Factory of @ref En/;"	t	class:Gudhi::persistence_matrix::RU_matrix	typeref:typename:Master_matrix::Entry_constructor
Entry_constructor	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^  using Entry_constructor = typename Master_matrix::Entry_constructor;$/;"	t	class:Gudhi::persistence_matrix::Heap_column	typeref:typename:Master_matrix::Entry_constructor
Entry_constructor	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^  using Entry_constructor = typename Master_matrix::Entry_constructor;$/;"	t	class:Gudhi::persistence_matrix::Intrusive_list_column	typeref:typename:Master_matrix::Entry_constructor
Entry_constructor	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^  using Entry_constructor = typename Master_matrix::Entry_constructor;$/;"	t	class:Gudhi::persistence_matrix::Intrusive_set_column	typeref:typename:Master_matrix::Entry_constructor
Entry_constructor	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^  using Entry_constructor = typename Master_matrix::Entry_constructor;$/;"	t	class:Gudhi::persistence_matrix::List_column	typeref:typename:Master_matrix::Entry_constructor
Entry_constructor	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^  using Entry_constructor = typename Master_matrix::Entry_constructor;$/;"	t	class:Gudhi::persistence_matrix::Naive_vector_column	typeref:typename:Master_matrix::Entry_constructor
Entry_constructor	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^  using Entry_constructor = typename Master_matrix::Entry_constructor;$/;"	t	class:Gudhi::persistence_matrix::Set_column	typeref:typename:Master_matrix::Entry_constructor
Entry_constructor	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^  using Entry_constructor = typename Master_matrix::Entry_constructor;$/;"	t	class:Gudhi::persistence_matrix::Small_vector_column	typeref:typename:Master_matrix::Entry_constructor
Entry_constructor	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^  using Entry_constructor = typename Master_matrix::Entry_constructor;$/;"	t	class:Gudhi::persistence_matrix::Unordered_set_column	typeref:typename:Master_matrix::Entry_constructor
Entry_constructor	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^  using Entry_constructor = typename Master_matrix::Entry_constructor;$/;"	t	class:Gudhi::persistence_matrix::Vector_column	typeref:typename:Master_matrix::Entry_constructor
Entry_field_element	multipers/gudhi/gudhi/Persistence_matrix/columns/entry_types.h	/^  Entry_field_element() : element_(0){};$/;"	f	class:Gudhi::persistence_matrix::Entry_field_element
Entry_field_element	multipers/gudhi/gudhi/Persistence_matrix/columns/entry_types.h	/^  Entry_field_element(Entry_field_element&& entry) noexcept : element_(std::move(entry.element_)/;"	f	class:Gudhi::persistence_matrix::Entry_field_element
Entry_field_element	multipers/gudhi/gudhi/Persistence_matrix/columns/entry_types.h	/^  Entry_field_element(Field_element element) : element_(element){};$/;"	f	class:Gudhi::persistence_matrix::Entry_field_element
Entry_field_element	multipers/gudhi/gudhi/Persistence_matrix/columns/entry_types.h	/^  Entry_field_element(const Entry_field_element& entry) : element_(entry.element_){};$/;"	f	class:Gudhi::persistence_matrix::Entry_field_element
Entry_field_element	multipers/gudhi/gudhi/Persistence_matrix/columns/entry_types.h	/^class Entry_field_element $/;"	c	namespace:Gudhi::persistence_matrix
Entry_field_element_option	multipers/gudhi/gudhi/Matrix.h	/^  using Entry_field_element_option =$/;"	t	class:Gudhi::persistence_matrix::Matrix	typeref:typename:std::conditional<PersistenceMatrixOptions::is_z2,Dummy_entry_field_element_mixin,Entry_field_element<Element>>::type
Entry_rep	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^    using Entry_rep =$/;"	t	function:Gudhi::persistence_matrix::Unordered_set_column::operator <	typeref:typename:std::conditional<Master_matrix::Option_list::is_z2,ID_index,std::pair<ID_index,unsigned int>>::type
Entry_representative	multipers/gudhi/gudhi/Matrix.h	/^  using Entry_representative = typename std::conditional<PersistenceMatrixOptions::is_z2,$/;"	t	class:Gudhi::persistence_matrix::Matrix	typeref:typename:std::conditional<PersistenceMatrixOptions::is_z2,ID_index,std::pair<ID_index,Element>>::type
Entry_representative	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix.h	/^  using Entry_representative =$/;"	t	class:Gudhi::persistence_matrix::Base_matrix	typeref:typename:std::conditional<Master_matrix::Option_list::is_z2,Index,std::pair<Index,Field_element>>::type
Entry_representative	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^  using Entry_representative = typename Master_matrix::Entry_representative;  \/**< %Entry conte/;"	t	class:Gudhi::persistence_matrix::Chain_matrix	typeref:typename:Master_matrix::Entry_representative
Entry_representative	multipers/gudhi/gudhi/Persistence_matrix/Position_to_index_overlay.h	/^  using Entry_representative = typename Master_matrix::Entry_representative;  \/**< %Entry conte/;"	t	class:Gudhi::persistence_matrix::Position_to_index_overlay	typeref:typename:Master_matrix::Entry_representative
Euclidean_distance	multipers/gudhi/gudhi/distance_functions.h	/^class Euclidean_distance {$/;"	c	namespace:Gudhi
EventCompFuncPointer	multipers/gudhi/gudhi/Persistence_matrix/chain_vine_swap.h	/^  typedef bool (*EventCompFuncPointer)(Pos_index, Pos_index);         \/**< Pointer type for bir/;"	t	class:Gudhi::persistence_matrix::Chain_vine_swap	typeref:typename:bool (*)(Pos_index,Pos_index)
Example zoo	docs/contributions.rst	/^Example zoo$/;"	c	title:Contributions
Extended_filtration_data	multipers/gudhi/Simplex_tree_interface.h	/^  using Extended_filtration_data = typename Base::Extended_filtration_data;$/;"	t	class:Gudhi::Simplex_tree_interface	typeref:typename:Base::Extended_filtration_data
Extended_filtration_data	multipers/gudhi/Simplex_tree_multi_interface.h	/^  using Extended_filtration_data = typename Base::Extended_filtration_data;$/;"	t	class:Gudhi::multiparameter::python_interface::Simplex_tree_multi_interface	typeref:typename:Base::Extended_filtration_data
Extended_filtration_data	multipers/gudhi/gudhi/Simplex_tree.h	/^    Extended_filtration_data() {}$/;"	f	struct:Gudhi::Simplex_tree::Extended_filtration_data
Extended_filtration_data	multipers/gudhi/gudhi/Simplex_tree.h	/^    Extended_filtration_data(const Filtration_value& vmin, const Filtration_value& vmax) : minva/;"	f	struct:Gudhi::Simplex_tree::Extended_filtration_data
Extended_filtration_data	multipers/gudhi/gudhi/Simplex_tree.h	/^  struct Extended_filtration_data {$/;"	s	class:Gudhi::Simplex_tree
Extended_simplex_type	multipers/gudhi/gudhi/Simplex_tree.h	/^enum class Extended_simplex_type { UP, DOWN, EXTRA };$/;"	g	namespace:Gudhi
External libraries	docs/compilation.rst	/^External libraries$/;"	c	title:Compilation from sources
FLAG_COMPLEX_EDGE_COLLAPSER_H_	multipers/gudhi/gudhi/Flag_complex_edge_collapser.h	/^#define FLAG_COMPLEX_EDGE_COLLAPSER_H_$/;"	d
FORMAT_PYTHON_CPP_H_INCLUDED	multipers/multiparameter_module_approximation/format_python-cpp.h	/^#define FORMAT_PYTHON_CPP_H_INCLUDED$/;"	d
Face_position_to_ID_mapper	multipers/gudhi/gudhi/Persistence_matrix/boundary_face_position_to_id_mapper.h	/^struct Face_position_to_ID_mapper {$/;"	s	namespace:Gudhi::persistence_matrix
Fast_cofaces_predicate	multipers/gudhi/gudhi/Simplex_tree.h	/^    Fast_cofaces_predicate(Simplex_tree* st, int codim, int dim) : st_(st), codim_(codim), dim_(/;"	f	class:Gudhi::Simplex_tree::Fast_cofaces_predicate
Fast_cofaces_predicate	multipers/gudhi/gudhi/Simplex_tree.h	/^  class Fast_cofaces_predicate {$/;"	c	class:Gudhi::Simplex_tree
Feature additions	docs/contributions.rst	/^Feature additions$/;"	c	title:Contributions
Features, and linked projects	README.md	/^## Features, and linked projects$/;"	s	chapter:multipers : Multiparameter Persistence for Machine Learning
Field_Zp	multipers/gudhi/gudhi/Persistent_cohomology/Field_Zp.h	/^  Field_Zp()$/;"	f	class:Gudhi::persistent_cohomology::Field_Zp
Field_Zp	multipers/gudhi/gudhi/Persistent_cohomology/Field_Zp.h	/^class Field_Zp {$/;"	c	namespace:Gudhi::persistent_cohomology
Field_Zp	multipers/gudhi/mma_interface_coh.h	/^  using Field_Zp = Gudhi::persistent_cohomology::Field_Zp;$/;"	t	class:Gudhi::multiparameter::truc_interface::Persistence_backend_cohomology	typeref:typename:Gudhi::persistent_cohomology::Field_Zp
Field_coeff_operators	multipers/gudhi/gudhi/persistence_matrix_options.h	/^  using Field_coeff_operators = FieldOperators;$/;"	t	struct:Gudhi::persistence_matrix::Default_options	typeref:typename:FieldOperators
Field_element	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix.h	/^  using Field_element = typename Master_matrix::Element;                \/**< Type of a field el/;"	t	class:Gudhi::persistence_matrix::Base_matrix	typeref:typename:Master_matrix::Element
Field_element	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix_with_column_compression.h	/^  using Field_element = typename Master_matrix::Element;                \/**< Field element valu/;"	t	class:Gudhi::persistence_matrix::Base_matrix_with_column_compression	typeref:typename:Master_matrix::Element
Field_element	multipers/gudhi/gudhi/Persistence_matrix/Boundary_matrix.h	/^  using Field_element = typename Master_matrix::Element;                \/**< Type of an field e/;"	t	class:Gudhi::persistence_matrix::Boundary_matrix	typeref:typename:Master_matrix::Element
Field_element	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^  using Field_element = typename Master_matrix::Element;                    \/**< Type of an fie/;"	t	class:Gudhi::persistence_matrix::Chain_matrix	typeref:typename:Master_matrix::Element
Field_element	multipers/gudhi/gudhi/Persistence_matrix/Id_to_index_overlay.h	/^  using Field_element = typename Master_matrix::Element;                \/**< Type of an field e/;"	t	class:Gudhi::persistence_matrix::Id_to_index_overlay	typeref:typename:Master_matrix::Element
Field_element	multipers/gudhi/gudhi/Persistence_matrix/Position_to_index_overlay.h	/^  using Field_element = typename Master_matrix::Element;                    \/**< Type of an fie/;"	t	class:Gudhi::persistence_matrix::Position_to_index_overlay	typeref:typename:Master_matrix::Element
Field_element	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^  using Field_element = typename Master_matrix::Element;                \/**< Type of an field e/;"	t	class:Gudhi::persistence_matrix::RU_matrix	typeref:typename:Master_matrix::Element
Field_element	multipers/gudhi/gudhi/Persistence_matrix/columns/entry_types.h	/^  using Field_element = typename Master_matrix::Element;  \/**< Value type. *\/$/;"	t	class:Gudhi::persistence_matrix::Entry	typeref:typename:Master_matrix::Element
Field_element	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^  using Field_element = typename Master_matrix::Element;$/;"	t	class:Gudhi::persistence_matrix::Heap_column	typeref:typename:Master_matrix::Element
Field_element	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^  using Field_element = typename Master_matrix::Element;$/;"	t	class:Gudhi::persistence_matrix::Intrusive_list_column	typeref:typename:Master_matrix::Element
Field_element	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^  using Field_element = typename Master_matrix::Element;$/;"	t	class:Gudhi::persistence_matrix::Intrusive_set_column	typeref:typename:Master_matrix::Element
Field_element	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^  using Field_element = typename Master_matrix::Element;$/;"	t	class:Gudhi::persistence_matrix::List_column	typeref:typename:Master_matrix::Element
Field_element	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^  using Field_element = typename Master_matrix::Element;$/;"	t	class:Gudhi::persistence_matrix::Naive_vector_column	typeref:typename:Master_matrix::Element
Field_element	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^  using Field_element = typename Master_matrix::Element;$/;"	t	class:Gudhi::persistence_matrix::Set_column	typeref:typename:Master_matrix::Element
Field_element	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^  using Field_element = typename Master_matrix::Element;$/;"	t	class:Gudhi::persistence_matrix::Small_vector_column	typeref:typename:Master_matrix::Element
Field_element	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^  using Field_element = typename Master_matrix::Element;$/;"	t	class:Gudhi::persistence_matrix::Unordered_set_column	typeref:typename:Master_matrix::Element
Field_element	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^  using Field_element = typename Master_matrix::Element;$/;"	t	class:Gudhi::persistence_matrix::Vector_column	typeref:typename:Master_matrix::Element
Field_operators	multipers/gudhi/gudhi/Matrix.h	/^  using Field_operators =$/;"	t	class:Gudhi::persistence_matrix::Matrix	typeref:typename:std::conditional<PersistenceMatrixOptions::is_z2,Gudhi::persistence_fields::Z2_field_operators,typename PersistenceMatrixOptions::Field_coeff_operators>::type
Field_operators	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix.h	/^  using Field_operators = typename Master_matrix::Field_operators;$/;"	t	class:Gudhi::persistence_matrix::Base_matrix	typeref:typename:Master_matrix::Field_operators
Field_operators	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix_with_column_compression.h	/^  using Field_operators = typename Master_matrix::Field_operators;$/;"	t	class:Gudhi::persistence_matrix::Base_matrix_with_column_compression	typeref:typename:Master_matrix::Field_operators
Field_operators	multipers/gudhi/gudhi/Persistence_matrix/Boundary_matrix.h	/^  using Field_operators = typename Master_matrix::Field_operators;$/;"	t	class:Gudhi::persistence_matrix::Boundary_matrix	typeref:typename:Master_matrix::Field_operators
Field_operators	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^  using Field_operators = typename Master_matrix::Field_operators;$/;"	t	class:Gudhi::persistence_matrix::Chain_matrix	typeref:typename:Master_matrix::Field_operators
Field_operators	multipers/gudhi/gudhi/Persistence_matrix/Id_to_index_overlay.h	/^  using Field_operators = typename Master_matrix::Field_operators;$/;"	t	class:Gudhi::persistence_matrix::Id_to_index_overlay	typeref:typename:Master_matrix::Field_operators
Field_operators	multipers/gudhi/gudhi/Persistence_matrix/Position_to_index_overlay.h	/^  using Field_operators = typename Master_matrix::Field_operators;$/;"	t	class:Gudhi::persistence_matrix::Position_to_index_overlay	typeref:typename:Master_matrix::Field_operators
Field_operators	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^  using Field_operators = typename Master_matrix::Field_operators;$/;"	t	class:Gudhi::persistence_matrix::RU_matrix	typeref:typename:Master_matrix::Field_operators
Field_operators	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^  using Field_operators = typename Master_matrix::Field_operators;$/;"	t	class:Gudhi::persistence_matrix::Heap_column	typeref:typename:Master_matrix::Field_operators
Field_operators	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^  using Field_operators = typename Master_matrix::Field_operators;$/;"	t	class:Gudhi::persistence_matrix::Intrusive_list_column	typeref:typename:Master_matrix::Field_operators
Field_operators	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^  using Field_operators = typename Master_matrix::Field_operators;$/;"	t	class:Gudhi::persistence_matrix::Intrusive_set_column	typeref:typename:Master_matrix::Field_operators
Field_operators	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^  using Field_operators = typename Master_matrix::Field_operators;$/;"	t	class:Gudhi::persistence_matrix::List_column	typeref:typename:Master_matrix::Field_operators
Field_operators	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^  using Field_operators = typename Master_matrix::Field_operators;$/;"	t	class:Gudhi::persistence_matrix::Naive_vector_column	typeref:typename:Master_matrix::Field_operators
Field_operators	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^  using Field_operators = typename Master_matrix::Field_operators;$/;"	t	class:Gudhi::persistence_matrix::Set_column	typeref:typename:Master_matrix::Field_operators
Field_operators	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^  using Field_operators = typename Master_matrix::Field_operators;$/;"	t	class:Gudhi::persistence_matrix::Small_vector_column	typeref:typename:Master_matrix::Field_operators
Field_operators	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^  using Field_operators = typename Master_matrix::Field_operators;$/;"	t	class:Gudhi::persistence_matrix::Unordered_set_column	typeref:typename:Master_matrix::Field_operators
Field_operators	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^  using Field_operators = typename Master_matrix::Field_operators;$/;"	t	class:Gudhi::persistence_matrix::Vector_column	typeref:typename:Master_matrix::Field_operators
FilteredComplex2MMA	multipers/ml/mma.py	/^class FilteredComplex2MMA(BaseEstimator, TransformerMixin):$/;"	c
FilteredComplex2SignedMeasure	multipers/ml/signed_measures.py	/^class FilteredComplex2SignedMeasure(BaseEstimator, TransformerMixin):$/;"	c
Filtered_cofaces_simplex_iterator	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_star_simplex_iterators.h	/^      Filtered_cofaces_simplex_iterator;$/;"	t	class:Gudhi::Simplex_tree_optimized_cofaces_rooted_subtrees_simplex_iterator	typeref:typename:boost::filter_iterator<is_coface,typename SimplexTree::List_max_vertex::iterator>
Filtered_edge	multipers/gudhi/Simplex_tree_interface.h	/^    using Filtered_edge = std::tuple<Vertex_handle, Vertex_handle, Filtration_value>;$/;"	t	function:Gudhi::Simplex_tree_interface::collapse_edges	typeref:typename:std::tuple<Vertex_handle,Vertex_handle,Filtration_value>
Filtered_edge	multipers/gudhi/gudhi/Flag_complex_edge_collapser.h	/^  using Filtered_edge = std::tuple<Vertex, Vertex, Filtration_value>;$/;"	t	struct:Gudhi::collapse::Flag_complex_edge_collapser	typeref:typename:std::tuple<Vertex,Vertex,Filtration_value>
Filtered_edge	multipers/multi_parameter_rank_invariant/persistence_slices.h	/^  using Filtered_edge = std::tuple<typename simplextree_like::Vertex_handle,$/;"	t	function:Gudhi::multiparameter::collapse_edges	typeref:typename:std::tuple<typename simplextree_like::Vertex_handle,typename simplextree_like::Vertex_handle,typename simplextree_like::Filtration_value>
Filtered_simplices	multipers/gudhi/Simplex_tree_interface.h	/^  using Filtered_simplices = std::vector<Simplex_and_filtration>;$/;"	t	class:Gudhi::Simplex_tree_interface	typeref:typename:std::vector<Simplex_and_filtration>
Filtered_simplices	multipers/gudhi/Simplex_tree_multi_interface.h	/^  using Filtered_simplices = std::vector<Simplex_and_filtration>;$/;"	t	class:Gudhi::multiparameter::python_interface::Simplex_tree_multi_interface	typeref:typename:std::vector<Simplex_and_filtration>
Filtration_creator	multipers/multiparameter_module_approximation/vineyards.h	/^struct Filtration_creator$/;"	s	namespace:Gudhi::multiparameter::mma
Filtration_range_iterator	multipers/gudhi/mma_interface_coh.h	/^    Filtration_range_iterator(const std::vector<Simplex_handle> *new_to_old_perm = nullptr)$/;"	f	class:Gudhi::multiparameter::truc_interface::Boundary_matrix_as_filtered_complex_for_coh::Filtration_range_iterator
Filtration_range_iterator	multipers/gudhi/mma_interface_coh.h	/^  class Filtration_range_iterator$/;"	c	class:Gudhi::multiparameter::truc_interface::Boundary_matrix_as_filtered_complex_for_coh
Filtration_simplex_base	multipers/gudhi/gudhi/Simplex_tree.h	/^                                    Filtration_simplex_base_dummy>::type Filtration_simplex_base/;"	t	class:Gudhi::Simplex_tree	typeref:typename:std::conditional<Options::store_filtration,Filtration_simplex_base_real,Filtration_simplex_base_dummy>::type
Filtration_simplex_base_dummy	multipers/gudhi/gudhi/Simplex_tree.h	/^    Filtration_simplex_base_dummy() {}$/;"	f	struct:Gudhi::Simplex_tree::Filtration_simplex_base_dummy
Filtration_simplex_base_dummy	multipers/gudhi/gudhi/Simplex_tree.h	/^    Filtration_simplex_base_dummy(Filtration_value GUDHI_CHECK_code(f)) {$/;"	f	struct:Gudhi::Simplex_tree::Filtration_simplex_base_dummy
Filtration_simplex_base_dummy	multipers/gudhi/gudhi/Simplex_tree.h	/^  struct Filtration_simplex_base_dummy {$/;"	s	class:Gudhi::Simplex_tree
Filtration_simplex_base_real	multipers/gudhi/gudhi/Simplex_tree.h	/^    Filtration_simplex_base_real() : filt_(0) {}$/;"	f	struct:Gudhi::Simplex_tree::Filtration_simplex_base_real
Filtration_simplex_base_real	multipers/gudhi/gudhi/Simplex_tree.h	/^    Filtration_simplex_base_real(Filtration_value f) : filt_(f) {}$/;"	f	struct:Gudhi::Simplex_tree::Filtration_simplex_base_real
Filtration_simplex_base_real	multipers/gudhi/gudhi/Simplex_tree.h	/^  struct Filtration_simplex_base_real {$/;"	s	class:Gudhi::Simplex_tree
Filtration_simplex_iterator	multipers/gudhi/gudhi/Simplex_tree.h	/^  typedef typename Filtration_simplex_range::const_iterator Filtration_simplex_iterator;$/;"	t	class:Gudhi::Simplex_tree	typeref:typename:Filtration_simplex_range::const_iterator
Filtration_simplex_range	multipers/gudhi/gudhi/Bitmap_cubical_complex.h	/^  typedef std::vector<Simplex_handle> Filtration_simplex_range;$/;"	t	class:Gudhi::cubical_complex::Bitmap_cubical_complex	typeref:typename:std::vector<Simplex_handle>
Filtration_simplex_range	multipers/gudhi/gudhi/Simplex_tree.h	/^  typedef std::vector<Simplex_handle> Filtration_simplex_range;$/;"	t	class:Gudhi::Simplex_tree	typeref:typename:std::vector<Simplex_handle>
Filtration_simplex_range	multipers/gudhi/mma_interface_coh.h	/^    Filtration_simplex_range(std::vector<Simplex_handle> const *new_to_old_perm)$/;"	f	class:Gudhi::multiparameter::truc_interface::Boundary_matrix_as_filtered_complex_for_coh::Filtration_simplex_range
Filtration_simplex_range	multipers/gudhi/mma_interface_coh.h	/^  class Filtration_simplex_range {$/;"	c	class:Gudhi::multiparameter::truc_interface::Boundary_matrix_as_filtered_complex_for_coh
Filtration_value	multipers/gudhi/Persistence_slices_interface.h	/^using Filtration_value = Gudhi::multi_filtration::One_critical_filtration<float>;$/;"	t	typeref:typename:Gudhi::multi_filtration::One_critical_filtration<float>
Filtration_value	multipers/gudhi/Simplex_tree_interface.h	/^  typedef double Filtration_value;$/;"	t	struct:Gudhi::Simplex_tree_options_for_python	typeref:typename:double
Filtration_value	multipers/gudhi/Simplex_tree_interface.h	/^  using Filtration_value = typename Base::Filtration_value;$/;"	t	class:Gudhi::Simplex_tree_interface	typeref:typename:Base::Filtration_value
Filtration_value	multipers/gudhi/Simplex_tree_multi_interface.h	/^  using Filtration_value = typename Base::Filtration_value;$/;"	t	class:Gudhi::multiparameter::python_interface::Simplex_tree_multi_interface	typeref:typename:Base::Filtration_value
Filtration_value	multipers/gudhi/gudhi/Bitmap_cubical_complex.h	/^    typedef typename T::filtration_type Filtration_value;$/;"	t	function:Gudhi::cubical_complex::is_before_in_filtration::operator ()	typeref:typename:T::filtration_type
Filtration_value	multipers/gudhi/gudhi/Bitmap_cubical_complex.h	/^  typedef typename T::filtration_type Filtration_value;$/;"	t	class:Gudhi::cubical_complex::Bitmap_cubical_complex	typeref:typename:T::filtration_type
Filtration_value	multipers/gudhi/gudhi/Flag_complex_edge_collapser.h	/^  using Filtration_value = std::decay_t<decltype(std::get<2>(*first_edge_itr))>;$/;"	t	function:Gudhi::collapse::flag_complex_collapse_edges
Filtration_value	multipers/gudhi/gudhi/Persistent_cohomology.h	/^  typedef typename FilteredComplex::Filtration_value Filtration_value;$/;"	t	class:Gudhi::persistent_cohomology::Persistent_cohomology	typeref:typename:FilteredComplex::Filtration_value
Filtration_value	multipers/gudhi/gudhi/Simplex_tree.h	/^  typedef typename Options::Filtration_value Filtration_value;$/;"	t	class:Gudhi::Simplex_tree	typeref:typename:Options::Filtration_value
Filtration_value	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_node_explicit_storage.h	/^  typedef typename SimplexTree::Filtration_value Filtration_value;$/;"	t	struct:Gudhi::Simplex_tree_node_explicit_storage	typeref:typename:SimplexTree::Filtration_value
Filtration_value	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_siblings.h	/^  typedef typename SimplexTree::Filtration_value Filtration_value;$/;"	t	class:Gudhi::Simplex_tree_siblings	typeref:typename:SimplexTree::Filtration_value
Filtration_value	multipers/gudhi/gudhi/Simplex_tree/simplex_tree_options.h	/^  typedef double Filtration_value;$/;"	t	struct:Gudhi::Simplex_tree_options_default	typeref:typename:double
Filtration_value	multipers/gudhi/gudhi/Simplex_tree/simplex_tree_options.h	/^  typedef double Filtration_value;$/;"	t	struct:Gudhi::Simplex_tree_options_full_featured	typeref:typename:double
Filtration_value	multipers/gudhi/gudhi/Simplex_tree/simplex_tree_options.h	/^  typedef double Filtration_value;$/;"	t	struct:Gudhi::Simplex_tree_options_minimal	typeref:typename:double
Filtration_value	multipers/gudhi/gudhi/Simplex_tree/simplex_tree_options.h	/^  typedef float Filtration_value;$/;"	t	struct:Gudhi::Simplex_tree_options_fast_persistence	typeref:typename:float
Filtration_value	multipers/gudhi/gudhi/Simplex_tree_multi.h	/^  using Filtration_value = Filtration;$/;"	t	struct:Gudhi::multi_persistence::Simplex_tree_options_multidimensional_filtration	typeref:typename:Filtration
Filtration_value	multipers/gudhi/gudhi/graph_simplicial_complex.h	/^  using Filtration_value = typename SimplicialComplexForProximityGraph::Filtration_value;$/;"	t	function:Gudhi::compute_proximity_graph	typeref:typename:SimplicialComplexForProximityGraph::Filtration_value
Filtration_value	multipers/gudhi/mma_interface_coh.h	/^  using Filtration_value = Simplex_key;$/;"	t	class:Gudhi::multiparameter::truc_interface::Boundary_matrix_as_filtered_complex_for_coh	typeref:typename:Simplex_key
Filtration_value	multipers/gudhi/scc_io.h	/^  using Filtration_value = typename Slicer::Filtration_value;$/;"	t	function:read_scc_file	typeref:typename:Slicer::Filtration_value
Filtration_value	multipers/gudhi/scc_io.h	/^  using Filtration_value = typename Slicer::Filtration_value;$/;"	t	function:write_scc_file	typeref:typename:Slicer::Filtration_value
Filtration_value	multipers/gudhi/truc.h	/^    using Filtration_value = MultiFiltration;$/;"	t	class:Gudhi::multiparameter::truc_interface::Truc::TrucThread	typeref:typename:MultiFiltration
Filtration_value	multipers/gudhi/truc.h	/^  using Filtration_value = MultiFiltration;$/;"	t	class:Gudhi::multiparameter::truc_interface::Truc	typeref:typename:MultiFiltration
Filtration_value	multipers/multi_parameter_rank_invariant/persistence_slices.h	/^  typedef float Filtration_value;$/;"	t	struct:Gudhi::multiparameter::Simplex_tree_float	typeref:typename:float
Filtrations_types	_tempita_grid_gen.py	/^Filtrations_types = [$/;"	v
FilvecGetter	multipers/ml/one.py	/^class FilvecGetter(BaseEstimator, TransformerMixin):$/;"	c
Flag_complex_edge_collapser	multipers/gudhi/gudhi/Flag_complex_edge_collapser.h	/^struct Flag_complex_edge_collapser {$/;"	s	namespace:Gudhi::collapse
Fork TODO:	README.md	/^# Fork TODO:$/;"	c
GRAPH_SIMPLICIAL_COMPLEX_H_	multipers/gudhi/gudhi/graph_simplicial_complex.h	/^#define GRAPH_SIMPLICIAL_COMPLEX_H_$/;"	d
GUDHI_CHECK	multipers/gudhi/gudhi/Debug_utils.h	/^  #define GUDHI_CHECK(/;"	d
GUDHI_CHECK_code	multipers/gudhi/gudhi/Debug_utils.h	/^  #define GUDHI_CHECK_code(/;"	d
GUDHI_DEBUG	multipers/gudhi/gudhi/Debug_utils.h	/^  #define GUDHI_DEBUG$/;"	d
GUDHI_EMPTY_BASE_CLASS_OPTIMIZATION	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_node_explicit_storage.h	/^ #define GUDHI_EMPTY_BASE_CLASS_OPTIMIZATION /;"	d
GUDHI_EMPTY_BASE_CLASS_OPTIMIZATION	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_node_explicit_storage.h	/^ #define GUDHI_EMPTY_BASE_CLASS_OPTIMIZATION$/;"	d
GeneralNoVineTruc	multipers/gudhi/Persistence_slices_interface.h	/^using GeneralNoVineTruc = Gudhi::multiparameter::truc_interface::$/;"	t	typeref:typename:Gudhi::multiparameter::truc_interface::Truc<MatrixBackendNoVine<col,PresentationStructure>,PresentationStructure,Filtration_value>
GeneralVineClementTruc	multipers/gudhi/Persistence_slices_interface.h	/^using GeneralVineClementTruc = Gudhi::multiparameter::truc_interface::$/;"	t	typeref:typename:Gudhi::multiparameter::truc_interface::Truc<ClementMatrixBackendVine<col,PresentationStructure>,PresentationStructure,Filtration_value>
GeneralVineTruc	multipers/gudhi/Persistence_slices_interface.h	/^using GeneralVineTruc = Gudhi::multiparameter::truc_interface::$/;"	t	typeref:typename:Gudhi::multiparameter::truc_interface::Truc<MatrixBackendVine<col,PresentationStructure>,PresentationStructure,Filtration_value>
Generator	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  using Generator = One_critical_filtration<T>;$/;"	t	class:Gudhi::multi_filtration::Multi_critical_filtration	typeref:typename:One_critical_filtration<T>
Generator	multipers/gudhi/gudhi/One_critical_filtration.h	/^  using Generator = One_critical_filtration<T>;$/;"	t	class:Gudhi::multi_filtration::One_critical_filtration	typeref:typename:One_critical_filtration<T>
Generators	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  using Generators = std::vector<Generator>;                  \/**< Container type for the filtr/;"	t	class:Gudhi::multi_filtration::Multi_critical_filtration	typeref:typename:std::vector<Generator>
Get_simplex_data_type	multipers/gudhi/gudhi/Simplex_tree/simplex_tree_options.h	/^struct Get_simplex_data_type<O, std::void_t<typename O::Simplex_data>> { typedef typename O::Sim/;"	s	namespace:Gudhi
Get_simplex_data_type	multipers/gudhi/gudhi/Simplex_tree/simplex_tree_options.h	/^template <class, class=void> struct Get_simplex_data_type { typedef No_simplex_data type; };$/;"	s	namespace:Gudhi
Graph	multipers/gudhi/Persistence_slices_interface.h	/^enum class BackendsEnum { Matrix, Graph, Clement, GudhiCohomology };$/;"	e	enum:BackendsEnum
Graph2SimplexTree	multipers/ml/one.py	/^class Graph2SimplexTree(BaseEstimator,TransformerMixin):$/;"	c
Graph2SimplexTrees	multipers/data/graphs.py	/^class Graph2SimplexTrees(BaseEstimator, TransformerMixin):$/;"	c
GraphBackendVine	multipers/gudhi/Persistence_slices_interface.h	/^using GraphBackendVine = Gudhi::multiparameter::truc_interface::Persistence_backend_h0<Simplicia/;"	t	typeref:typename:Gudhi::multiparameter::truc_interface::Persistence_backend_h0<SimplicialStructure>
Gudhi	multipers/gudhi/Simplex_tree_interface.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/Simplex_tree_multi_interface.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Bitmap_cubical_complex.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Bitmap_cubical_complex_periodic_boundary_conditions_base.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Fields/Multi_field.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Fields/Multi_field_operators.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Fields/Multi_field_shared.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Fields/Multi_field_small.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Fields/Multi_field_small_operators.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Fields/Multi_field_small_shared.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Fields/Z2_field.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Fields/Z2_field_operators.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Fields/Zp_field.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Fields/Zp_field_operators.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Fields/Zp_field_shared.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Flag_complex_edge_collapser.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Matrix.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Multi_persistence/Box.h	/^namespace Gudhi{$/;"	n
Gudhi	multipers/gudhi/gudhi/Multi_persistence/Line.h	/^namespace Gudhi{$/;"	n
Gudhi	multipers/gudhi/gudhi/Off_reader.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/One_critical_filtration.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix_with_column_compression.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Persistence_matrix/Boundary_matrix.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Persistence_matrix/Id_to_index_overlay.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Persistence_matrix/Position_to_index_overlay.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Persistence_matrix/allocators/entry_constructors.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Persistence_matrix/base_pairing.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Persistence_matrix/base_swap.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Persistence_matrix/boundary_cell_position_to_id_mapper.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Persistence_matrix/boundary_face_position_to_id_mapper.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Persistence_matrix/chain_pairing.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Persistence_matrix/chain_rep_cycles.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Persistence_matrix/chain_vine_swap.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Persistence_matrix/columns/chain_column_extra_properties.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Persistence_matrix/columns/column_dimension_holder.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Persistence_matrix/columns/column_utilities.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Persistence_matrix/columns/entry_types.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Persistence_matrix/columns/row_access.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Persistence_matrix/matrix_dimension_holders.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Persistence_matrix/matrix_row_access.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Persistence_matrix/ru_pairing.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Persistence_matrix/ru_rep_cycles.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Persistence_matrix/ru_vine_swap.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Persistent_cohomology.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Persistent_cohomology/Field_Zp.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Persistent_cohomology/Multi_field.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Persistent_cohomology/Persistent_cohomology_column.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Points_off_io.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Simple_object_pool.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Simplex_tree.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_node_explicit_storage.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_siblings.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_star_simplex_iterators.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Simplex_tree/hooks_simplex_base.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Simplex_tree/indexing_tag.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Simplex_tree/serialization_utils.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Simplex_tree/simplex_tree_options.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/Simplex_tree_multi.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/distance_functions.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/graph_simplicial_complex.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/persistence_interval.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/persistence_matrix_options.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/gudhi/reader_utils.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/mma_interface_coh.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/mma_interface_h0.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/mma_interface_matrix.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/gudhi/truc.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/multi_parameter_rank_invariant/diff_helpers.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/multi_parameter_rank_invariant/euler_characteristic.h	/^namespace Gudhi::multiparameter::euler_characteristic{$/;"	n
Gudhi	multipers/multi_parameter_rank_invariant/function_rips.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/multi_parameter_rank_invariant/hilbert_function.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/multi_parameter_rank_invariant/persistence_slices.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/multi_parameter_rank_invariant/rank_invariant.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/multiparameter_module_approximation/approximation.h	/^namespace Gudhi {$/;"	n
Gudhi	multipers/multiparameter_module_approximation/combinatory.h	/^namespace Gudhi::multiparameter::mma::Combinatorics {$/;"	n
Gudhi	multipers/multiparameter_module_approximation/debug.h	/^namespace Gudhi::multiparameter::mma::Debug {$/;"	n
Gudhi	multipers/multiparameter_module_approximation/format_python-cpp.h	/^namespace Gudhi::multiparameter::mma {$/;"	n
Gudhi	multipers/multiparameter_module_approximation/images.h	/^namespace Gudhi::multiparameter::mma::representation{$/;"	n
Gudhi	multipers/multiparameter_module_approximation/ru_matrix.h	/^namespace Gudhi::multiparameter::mma {$/;"	n
Gudhi	multipers/multiparameter_module_approximation/set_column.h	/^namespace Gudhi::multiparameter::mma {$/;"	n
Gudhi	multipers/multiparameter_module_approximation/utilities.h	/^namespace Gudhi::multiparameter::mma {$/;"	n
Gudhi	multipers/multiparameter_module_approximation/vector_matrix.h	/^namespace Gudhi::multiparameter::mma {$/;"	n
Gudhi	multipers/multiparameter_module_approximation/vineyards.h	/^namespace Gudhi::multiparameter::mma {$/;"	n
Gudhi	multipers/multiparameter_module_approximation/vineyards_trajectories.h	/^namespace Gudhi::multiparameter::mma {$/;"	n
GudhiCohomology	multipers/gudhi/Persistence_slices_interface.h	/^enum class BackendsEnum { Matrix, Graph, Clement, GudhiCohomology };$/;"	e	enum:BackendsEnum
H0V_MERGE_TREE_H	multipers/gudhi/naive_merge_tree.h	/^#define H0V_MERGE_TREE_H$/;"	d
HEAP	multipers/gudhi/Persistence_slices_interface.h	/^enum Column_types_strs { LIST, SET, HEAP, VECTOR, NAIVE_VECTOR, UNORDERED_SET, INTRUSIVE_LIST, I/;"	e	enum:Column_types_strs
HEAP	multipers/gudhi/gudhi/persistence_matrix_options.h	/^  HEAP,           \/**< @ref Heap_column "": Underlying container is a std::vector<@ref Entry*> /;"	e	enum:Gudhi::persistence_matrix::Column_types
HEAPCOLUMN_H	multipers/multiparameter_module_approximation/heap_column.h	/^#define HEAPCOLUMN_H$/;"	d
Hasher	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix_with_column_compression.h	/^    struct Hasher {$/;"	s	class:Gudhi::persistence_matrix::Base_matrix_with_column_compression::Column
Hcell	multipers/gudhi/gudhi/Persistent_cohomology.h	/^      boost::intrusive::base_hook<base_hook_cam_h> > Hcell;$/;"	t	class:Gudhi::persistent_cohomology::Persistent_cohomology	typeref:typename:boost::intrusive::list<Cell,boost::intrusive::constant_time_size<false>,boost::intrusive::base_hook<base_hook_cam_h>>
Heap_column	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^class Heap_column : public Master_matrix::Column_dimension_option, public Master_matrix::Chain_c/;"	c	namespace:Gudhi::persistence_matrix
Heap_column	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^inline Heap_column<Master_matrix>::Heap_column(Column_settings* colSettings)$/;"	f	class:Gudhi::persistence_matrix::Heap_column
Heap_column	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^inline Heap_column<Master_matrix>::Heap_column(Heap_column&& column) noexcept$/;"	f	class:Gudhi::persistence_matrix::Heap_column
Heap_column	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^inline Heap_column<Master_matrix>::Heap_column(Index columnIndex,$/;"	f	class:Gudhi::persistence_matrix::Heap_column
Heap_column	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^inline Heap_column<Master_matrix>::Heap_column(const Container& nonZeroRowIndices, Column_settin/;"	f	class:Gudhi::persistence_matrix::Heap_column
Heap_column	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^inline Heap_column<Master_matrix>::Heap_column(const Container& nonZeroRowIndices,$/;"	f	class:Gudhi::persistence_matrix::Heap_column
Heap_column	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^inline Heap_column<Master_matrix>::Heap_column(const Heap_column& column, Column_settings* colSe/;"	f	class:Gudhi::persistence_matrix::Heap_column
Heap_column	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^inline Heap_column<Master_matrix>::Heap_column(const Heap_column& column,$/;"	f	class:Gudhi::persistence_matrix::Heap_column
Heap_column	multipers/multiparameter_module_approximation/heap_column.h	/^class Heap_column$/;"	c	namespace:Vineyard
Heap_column	multipers/multiparameter_module_approximation/heap_column.h	/^inline Heap_column::Heap_column() : dim_(0), insertsSinceLastPrune_(0)$/;"	f	class:Vineyard::Heap_column
Heap_column	multipers/multiparameter_module_approximation/heap_column.h	/^inline Heap_column::Heap_column(Heap_column& column)$/;"	f	class:Vineyard::Heap_column
Heap_column	multipers/multiparameter_module_approximation/heap_column.h	/^inline Heap_column::Heap_column(Heap_column&& column) noexcept$/;"	f	class:Vineyard::Heap_column
Heap_column	multipers/multiparameter_module_approximation/heap_column.h	/^inline Heap_column::Heap_column(boundary_type& boundary)$/;"	f	class:Vineyard::Heap_column
Hooks_simplex_base	multipers/gudhi/gudhi/Simplex_tree.h	/^                                    Hooks_simplex_base_dummy>::type Hooks_simplex_base;$/;"	t	class:Gudhi::Simplex_tree	typeref:typename:std::conditional<Options::link_nodes_by_label,Hooks_simplex_base_link_nodes,Hooks_simplex_base_dummy>::type
Hooks_simplex_base_dummy	multipers/gudhi/gudhi/Simplex_tree/hooks_simplex_base.h	/^  struct Hooks_simplex_base_dummy {};$/;"	s	namespace:Gudhi
Hooks_simplex_base_link_nodes	multipers/gudhi/gudhi/Simplex_tree/hooks_simplex_base.h	/^    Hooks_simplex_base_link_nodes() {}$/;"	f	struct:Gudhi::Hooks_simplex_base_link_nodes
Hooks_simplex_base_link_nodes	multipers/gudhi/gudhi/Simplex_tree/hooks_simplex_base.h	/^    Hooks_simplex_base_link_nodes(Hooks_simplex_base_link_nodes&& other) {$/;"	f	struct:Gudhi::Hooks_simplex_base_link_nodes
Hooks_simplex_base_link_nodes	multipers/gudhi/gudhi/Simplex_tree/hooks_simplex_base.h	/^    Hooks_simplex_base_link_nodes(const Hooks_simplex_base_link_nodes&)$/;"	f	struct:Gudhi::Hooks_simplex_base_link_nodes
Hooks_simplex_base_link_nodes	multipers/gudhi/gudhi/Simplex_tree/hooks_simplex_base.h	/^  struct Hooks_simplex_base_link_nodes {$/;"	s	namespace:Gudhi
IDENTIFIER	multipers/gudhi/gudhi/persistence_matrix_options.h	/^  IDENTIFIER  \/**< All input and output @ref MatIdx indices are replaced with @ref IDIdx indice/;"	e	enum:Gudhi::persistence_matrix::Column_indexation_types
ID_index	multipers/gudhi/gudhi/Matrix.h	/^  using ID_index = typename PersistenceMatrixOptions::Index;      \/**< Type of @ref IDIdx index/;"	t	class:Gudhi::persistence_matrix::Matrix	typeref:typename:PersistenceMatrixOptions::Index
ID_index	multipers/gudhi/gudhi/Persistence_matrix/Boundary_matrix.h	/^  using ID_index = typename Master_matrix::ID_index;                  \/**< @ref IDIdx index typ/;"	t	class:Gudhi::persistence_matrix::Boundary_matrix	typeref:typename:Master_matrix::ID_index
ID_index	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^  using ID_index = typename Master_matrix::ID_index;                        \/**< @ref IDIdx ind/;"	t	class:Gudhi::persistence_matrix::Chain_matrix	typeref:typename:Master_matrix::ID_index
ID_index	multipers/gudhi/gudhi/Persistence_matrix/Id_to_index_overlay.h	/^  using ID_index = typename Master_matrix::ID_index;                    \/**< @ref IDIdx index t/;"	t	class:Gudhi::persistence_matrix::Id_to_index_overlay	typeref:typename:Master_matrix::ID_index
ID_index	multipers/gudhi/gudhi/Persistence_matrix/Position_to_index_overlay.h	/^  using ID_index = typename Master_matrix::ID_index;                        \/**< @ref IDIdx ind/;"	t	class:Gudhi::persistence_matrix::Position_to_index_overlay	typeref:typename:Master_matrix::ID_index
ID_index	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^  using ID_index = typename Master_matrix::ID_index;                    \/**< @ref IDIdx index t/;"	t	class:Gudhi::persistence_matrix::RU_matrix	typeref:typename:Master_matrix::ID_index
ID_index	multipers/gudhi/gudhi/Persistence_matrix/base_pairing.h	/^  using ID_index = typename Master_matrix::ID_index;$/;"	t	class:Gudhi::persistence_matrix::Base_pairing	typeref:typename:Master_matrix::ID_index
ID_index	multipers/gudhi/gudhi/Persistence_matrix/base_swap.h	/^  using ID_index = typename Master_matrix::ID_index;                  \/**< @ref IDIdx index typ/;"	t	class:Gudhi::persistence_matrix::Base_swap	typeref:typename:Master_matrix::ID_index
ID_index	multipers/gudhi/gudhi/Persistence_matrix/chain_vine_swap.h	/^  using ID_index = typename Master_matrix::ID_index;                  \/**< @ref IDIdx index typ/;"	t	class:Gudhi::persistence_matrix::Chain_vine_swap	typeref:typename:Master_matrix::ID_index
ID_index	multipers/gudhi/gudhi/Persistence_matrix/chain_vine_swap.h	/^  using ID_index = typename Master_matrix::ID_index;    \/**< @ref IDIdx index type. *\/$/;"	t	class:Gudhi::persistence_matrix::Chain_barcode_swap	typeref:typename:Master_matrix::ID_index
ID_index	multipers/gudhi/gudhi/Persistence_matrix/columns/chain_column_extra_properties.h	/^  using ID_index = typename Master_matrix::ID_index;  \/**< @ref IDIdx index type. *\/$/;"	t	class:Gudhi::persistence_matrix::Chain_column_extra_properties	typeref:typename:Master_matrix::ID_index
ID_index	multipers/gudhi/gudhi/Persistence_matrix/columns/entry_types.h	/^  using ID_index = typename Master_matrix::ID_index;      \/**< Row index type. *\/$/;"	t	class:Gudhi::persistence_matrix::Entry	typeref:typename:Master_matrix::ID_index
ID_index	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^  using ID_index = typename Master_matrix::ID_index;$/;"	t	class:Gudhi::persistence_matrix::Heap_column	typeref:typename:Master_matrix::ID_index
ID_index	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^  using ID_index = typename Master_matrix::ID_index;$/;"	t	class:Gudhi::persistence_matrix::Intrusive_list_column	typeref:typename:Master_matrix::ID_index
ID_index	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^  using ID_index = typename Master_matrix::ID_index;$/;"	t	class:Gudhi::persistence_matrix::Intrusive_set_column	typeref:typename:Master_matrix::ID_index
ID_index	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^  using ID_index = typename Master_matrix::ID_index;$/;"	t	class:Gudhi::persistence_matrix::List_column	typeref:typename:Master_matrix::ID_index
ID_index	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^  using ID_index = typename Master_matrix::ID_index;$/;"	t	class:Gudhi::persistence_matrix::Naive_vector_column	typeref:typename:Master_matrix::ID_index
ID_index	multipers/gudhi/gudhi/Persistence_matrix/columns/row_access.h	/^  using ID_index = typename Master_matrix::ID_index;            \/**< @ref IDIdx index type. *\/$/;"	t	class:Gudhi::persistence_matrix::Row_access	typeref:typename:Master_matrix::ID_index
ID_index	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^  using ID_index = typename Master_matrix::ID_index;$/;"	t	class:Gudhi::persistence_matrix::Set_column	typeref:typename:Master_matrix::ID_index
ID_index	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^  using ID_index = typename Master_matrix::ID_index;$/;"	t	class:Gudhi::persistence_matrix::Small_vector_column	typeref:typename:Master_matrix::ID_index
ID_index	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^    using ID_index = Unordered_set_column<Master_matrix>::ID_index;$/;"	t	function:Gudhi::persistence_matrix::Unordered_set_column::operator <	typeref:typename:Unordered_set_column<Master_matrix>::ID_index
ID_index	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^  using ID_index = typename Master_matrix::ID_index;$/;"	t	class:Gudhi::persistence_matrix::Unordered_set_column	typeref:typename:Master_matrix::ID_index
ID_index	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^  using ID_index = typename Master_matrix::ID_index;$/;"	t	class:Gudhi::persistence_matrix::Vector_column	typeref:typename:Master_matrix::ID_index
ID_index	multipers/gudhi/gudhi/Persistence_matrix/ru_pairing.h	/^  using ID_index = typename Master_matrix::ID_index;$/;"	t	class:Gudhi::persistence_matrix::RU_pairing	typeref:typename:Master_matrix::ID_index
ID_index	multipers/gudhi/gudhi/Persistence_matrix/ru_rep_cycles.h	/^  using ID_index = typename Master_matrix::ID_index;  \/**< @ref IDIdx index type. *\/$/;"	t	class:Gudhi::persistence_matrix::RU_representative_cycles	typeref:typename:Master_matrix::ID_index
ID_index	multipers/gudhi/gudhi/Persistence_matrix/ru_vine_swap.h	/^  using ID_index = typename Master_matrix::ID_index;    \/**< @ref IDIdx index type. *\/$/;"	t	class:Gudhi::persistence_matrix::RU_vine_swap	typeref:typename:Master_matrix::ID_index
IMAGES_H_INCLUDED	multipers/multiparameter_module_approximation/images.h	/^#define IMAGES_H_INCLUDED$/;"	d
INCLUDE_SIMPLEX_TREE_INTERFACE_H_	multipers/gudhi/Simplex_tree_interface.h	/^#define INCLUDE_SIMPLEX_TREE_INTERFACE_H_$/;"	d
INTRUSIVE_LIST	multipers/gudhi/Persistence_slices_interface.h	/^enum Column_types_strs { LIST, SET, HEAP, VECTOR, NAIVE_VECTOR, UNORDERED_SET, INTRUSIVE_LIST, I/;"	e	enum:Column_types_strs
INTRUSIVE_LIST	multipers/gudhi/gudhi/persistence_matrix_options.h	/^  INTRUSIVE_LIST, \/**< @ref Intrusive_list_column "": Underlying container is a boost::intrusiv/;"	e	enum:Gudhi::persistence_matrix::Column_types
INTRUSIVE_SET	multipers/gudhi/Persistence_slices_interface.h	/^enum Column_types_strs { LIST, SET, HEAP, VECTOR, NAIVE_VECTOR, UNORDERED_SET, INTRUSIVE_LIST, I/;"	e	enum:Column_types_strs
INTRUSIVE_SET	multipers/gudhi/gudhi/persistence_matrix_options.h	/^  INTRUSIVE_SET,   \/**< @ref Intrusive_set_column "": Underlying container is a boost::intrusiv/;"	e	enum:Gudhi::persistence_matrix::Column_types
IS_DOMINATED	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  enum class Rel { EQUAL, DOMINATES, IS_DOMINATED, NONE };$/;"	e	enum:Gudhi::multi_filtration::Multi_critical_filtration::Rel
Id_to_index_overlay	multipers/gudhi/gudhi/Persistence_matrix/Id_to_index_overlay.h	/^class Id_to_index_overlay $/;"	c	namespace:Gudhi::persistence_matrix
Id_to_index_overlay	multipers/gudhi/gudhi/Persistence_matrix/Id_to_index_overlay.h	/^inline Id_to_index_overlay<Underlying_matrix, Master_matrix>::Id_to_index_overlay($/;"	f	class:Gudhi::persistence_matrix::Id_to_index_overlay
Id_to_index_overlay	multipers/gudhi/gudhi/Persistence_matrix/Id_to_index_overlay.h	/^inline Id_to_index_overlay<Underlying_matrix, Master_matrix>::Id_to_index_overlay(Column_setting/;"	f	class:Gudhi::persistence_matrix::Id_to_index_overlay
Id_to_index_overlay	multipers/gudhi/gudhi/Persistence_matrix/Id_to_index_overlay.h	/^inline Id_to_index_overlay<Underlying_matrix, Master_matrix>::Id_to_index_overlay(Id_to_index_ov/;"	f	class:Gudhi::persistence_matrix::Id_to_index_overlay
Id_to_index_overlay	multipers/gudhi/gudhi/Persistence_matrix/Id_to_index_overlay.h	/^inline Id_to_index_overlay<Underlying_matrix, Master_matrix>::Id_to_index_overlay(unsigned int n/;"	f	class:Gudhi::persistence_matrix::Id_to_index_overlay
Identity	compute.py	/^class Identity(BaseEstimator, TransformerMixin):$/;"	c
ImageArgs	multipers/multiparameter_module_approximation/images.h	/^struct ImageArgs{$/;"	s	namespace:Gudhi::multiparameter::mma::representation
Index	multipers/gudhi/gudhi/Matrix.h	/^  using Index = typename PersistenceMatrixOptions::Index;         \/**< Type of @ref MatIdx inde/;"	t	class:Gudhi::persistence_matrix::Matrix	typeref:typename:PersistenceMatrixOptions::Index
Index	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix.h	/^  using Index = typename Master_matrix::Index;                        \/**< Container index type/;"	t	class:Gudhi::persistence_matrix::Base_matrix	typeref:typename:Master_matrix::Index
Index	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix_with_column_compression.h	/^  using Index = typename Master_matrix::Index;                          \/**< Container index ty/;"	t	class:Gudhi::persistence_matrix::Base_matrix_with_column_compression	typeref:typename:Master_matrix::Index
Index	multipers/gudhi/gudhi/Persistence_matrix/Boundary_matrix.h	/^  using Index = typename Master_matrix::Index;                        \/**< Container index type/;"	t	class:Gudhi::persistence_matrix::Boundary_matrix	typeref:typename:Master_matrix::Index
Index	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^  using Index = typename Master_matrix::Index;                              \/**< @ref MatIdx in/;"	t	class:Gudhi::persistence_matrix::Chain_matrix	typeref:typename:Master_matrix::Index
Index	multipers/gudhi/gudhi/Persistence_matrix/Id_to_index_overlay.h	/^  using Index = typename Master_matrix::Index;                          \/**< @ref MatIdx index /;"	t	class:Gudhi::persistence_matrix::Id_to_index_overlay	typeref:typename:Master_matrix::Index
Index	multipers/gudhi/gudhi/Persistence_matrix/Position_to_index_overlay.h	/^  using Index = typename Master_matrix::Index;                              \/**< @ref MatIdx in/;"	t	class:Gudhi::persistence_matrix::Position_to_index_overlay	typeref:typename:Master_matrix::Index
Index	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^  using Index = typename Master_matrix::Index;                          \/**< @ref MatIdx index /;"	t	class:Gudhi::persistence_matrix::RU_matrix	typeref:typename:Master_matrix::Index
Index	multipers/gudhi/gudhi/Persistence_matrix/base_pairing.h	/^  using Index = typename Master_matrix::Index;                        \/**< Container index type/;"	t	class:Gudhi::persistence_matrix::Base_pairing	typeref:typename:Master_matrix::Index
Index	multipers/gudhi/gudhi/Persistence_matrix/base_swap.h	/^  using Index = typename Master_matrix::Index;                        \/**< Container index type/;"	t	class:Gudhi::persistence_matrix::Base_swap	typeref:typename:Master_matrix::Index
Index	multipers/gudhi/gudhi/Persistence_matrix/chain_vine_swap.h	/^  using Index = typename Master_matrix::Index;                        \/**< @ref MatIdx index ty/;"	t	class:Gudhi::persistence_matrix::Chain_vine_swap	typeref:typename:Master_matrix::Index
Index	multipers/gudhi/gudhi/Persistence_matrix/columns/chain_column_extra_properties.h	/^  using Index = typename Master_matrix::Index;        \/**< @ref MatIdx index type. *\/$/;"	t	class:Gudhi::persistence_matrix::Chain_column_extra_properties	typeref:typename:Master_matrix::Index
Index	multipers/gudhi/gudhi/Persistence_matrix/columns/entry_types.h	/^  using Index = typename Master_matrix::Index;            \/**< Column index type. *\/$/;"	t	class:Gudhi::persistence_matrix::Entry	typeref:typename:Master_matrix::Index
Index	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^  using Index = typename Master_matrix::Index;$/;"	t	class:Gudhi::persistence_matrix::Heap_column	typeref:typename:Master_matrix::Index
Index	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^  using Index = typename Master_matrix::Index;$/;"	t	class:Gudhi::persistence_matrix::Intrusive_list_column	typeref:typename:Master_matrix::Index
Index	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^  using Index = typename Master_matrix::Index;$/;"	t	class:Gudhi::persistence_matrix::Intrusive_set_column	typeref:typename:Master_matrix::Index
Index	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^  using Index = typename Master_matrix::Index;$/;"	t	class:Gudhi::persistence_matrix::List_column	typeref:typename:Master_matrix::Index
Index	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^  using Index = typename Master_matrix::Index;$/;"	t	class:Gudhi::persistence_matrix::Naive_vector_column	typeref:typename:Master_matrix::Index
Index	multipers/gudhi/gudhi/Persistence_matrix/columns/row_access.h	/^  using Index = typename Master_matrix::Index;                  \/**< @ref MatIdx index type. *\/$/;"	t	class:Gudhi::persistence_matrix::Row_access	typeref:typename:Master_matrix::Index
Index	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^  using Index = typename Master_matrix::Index;$/;"	t	class:Gudhi::persistence_matrix::Set_column	typeref:typename:Master_matrix::Index
Index	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^  using Index = typename Master_matrix::Index;$/;"	t	class:Gudhi::persistence_matrix::Small_vector_column	typeref:typename:Master_matrix::Index
Index	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^  using Index = typename Master_matrix::Index;$/;"	t	class:Gudhi::persistence_matrix::Unordered_set_column	typeref:typename:Master_matrix::Index
Index	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^  using Index = typename Master_matrix::Index;$/;"	t	class:Gudhi::persistence_matrix::Vector_column	typeref:typename:Master_matrix::Index
Index	multipers/gudhi/gudhi/Persistence_matrix/ru_rep_cycles.h	/^  using Index = typename Master_matrix::Index;        \/**< @ref MatIdx index type. *\/$/;"	t	class:Gudhi::persistence_matrix::RU_representative_cycles	typeref:typename:Master_matrix::Index
Index	multipers/gudhi/gudhi/Persistence_matrix/ru_vine_swap.h	/^  using Index = typename Master_matrix::Index;          \/**< @ref MatIdx index type. *\/$/;"	t	class:Gudhi::persistence_matrix::RU_vine_swap	typeref:typename:Master_matrix::Index
Index	multipers/gudhi/gudhi/persistence_matrix_options.h	/^  using Index = unsigned int;$/;"	t	struct:Gudhi::persistence_matrix::Default_options	typeref:typename:unsigned int
Index	multipers/gudhi/mma_interface_coh.h	/^  using Index = typename MatrixComplex::Simplex_handle;$/;"	t	class:Gudhi::multiparameter::truc_interface::Persistence_backend_cohomology	typeref:typename:MatrixComplex::Simplex_handle
Index	multipers/gudhi/mma_interface_matrix.h	/^  using Index = std::uint32_t;$/;"	t	struct:Gudhi::multiparameter::truc_interface::Multi_persistence_Clement_options	typeref:typename:std::uint32_t
Index	multipers/gudhi/mma_interface_matrix.h	/^  using Index = std::uint32_t;$/;"	t	struct:Gudhi::multiparameter::truc_interface::Multi_persistence_options	typeref:typename:std::uint32_t
Index	multipers/gudhi/mma_interface_matrix.h	/^  using Index = std::uint32_t;$/;"	t	struct:Gudhi::multiparameter::truc_interface::No_vine_multi_persistence_options	typeref:typename:std::uint32_t
Index	multipers/gudhi/mma_interface_matrix.h	/^  using Index = typename matrix_type::Index;$/;"	t	class:Gudhi::multiparameter::truc_interface::Persistence_backend_matrix	typeref:typename:matrix_type::Index
Index	multipers/multi_parameter_rank_invariant/rank_invariant.h	/^using Index = truc_interface::index_type;$/;"	t	namespace:Gudhi::multiparameter::rank_invariant	typeref:typename:truc_interface::index_type
Index_dictionary	multipers/gudhi/gudhi/Persistence_matrix/base_swap.h	/^  using Index_dictionary = typename Master_matrix::template Dictionary<Index>;$/;"	t	class:Gudhi::persistence_matrix::Base_swap	typeref:typename:Master_matrix::template Dictionary<Index>
Index_map	multipers/gudhi/gudhi/Persistence_matrix/boundary_cell_position_to_id_mapper.h	/^  using Index_map = std::unordered_map<Pos_index,ID_index>; \/\/TODO: test other map types$/;"	t	struct:Gudhi::persistence_matrix::Cell_position_to_ID_mapper	typeref:typename:std::unordered_map<Pos_index,ID_index>
Index_map	multipers/gudhi/gudhi/Persistence_matrix/boundary_face_position_to_id_mapper.h	/^  using Index_map = std::unordered_map<Pos_index,ID_index>; \/\/TODO: test other map types$/;"	t	struct:Gudhi::persistence_matrix::Face_position_to_ID_mapper	typeref:typename:std::unordered_map<Pos_index,ID_index>
Indexing_tag	multipers/gudhi/Simplex_tree_interface.h	/^  typedef linear_indexing_tag Indexing_tag;$/;"	t	struct:Gudhi::Simplex_tree_options_for_python	typeref:typename:linear_indexing_tag
Indexing_tag	multipers/gudhi/gudhi/Simplex_tree.h	/^  typedef typename Options::Indexing_tag Indexing_tag;$/;"	t	class:Gudhi::Simplex_tree	typeref:typename:Options::Indexing_tag
Indexing_tag	multipers/gudhi/gudhi/Simplex_tree/simplex_tree_options.h	/^  typedef linear_indexing_tag Indexing_tag;$/;"	t	struct:Gudhi::Simplex_tree_options_default	typeref:typename:linear_indexing_tag
Indexing_tag	multipers/gudhi/gudhi/Simplex_tree/simplex_tree_options.h	/^  typedef linear_indexing_tag Indexing_tag;$/;"	t	struct:Gudhi::Simplex_tree_options_fast_persistence	typeref:typename:linear_indexing_tag
Indexing_tag	multipers/gudhi/gudhi/Simplex_tree/simplex_tree_options.h	/^  typedef linear_indexing_tag Indexing_tag;$/;"	t	struct:Gudhi::Simplex_tree_options_full_featured	typeref:typename:linear_indexing_tag
Indexing_tag	multipers/gudhi/gudhi/Simplex_tree/simplex_tree_options.h	/^  typedef linear_indexing_tag Indexing_tag;$/;"	t	struct:Gudhi::Simplex_tree_options_minimal	typeref:typename:linear_indexing_tag
Indexing_tag	multipers/gudhi/gudhi/Simplex_tree_multi.h	/^  typedef linear_indexing_tag Indexing_tag;$/;"	t	struct:Gudhi::multi_persistence::Simplex_tree_options_multidimensional_filtration	typeref:typename:linear_indexing_tag
Indexing_tag	multipers/multi_parameter_rank_invariant/persistence_slices.h	/^  typedef linear_indexing_tag Indexing_tag;$/;"	t	struct:Gudhi::multiparameter::Simplex_tree_float	typeref:typename:linear_indexing_tag
Indices and tables	docs/index.rst	/^Indices and tables$/;"	c
Insertion_result	multipers/gudhi/Simplex_tree_interface.h	/^  using Insertion_result = typename std::pair<Simplex_handle, bool>;$/;"	t	class:Gudhi::Simplex_tree_interface	typeref:typename:std::pair<Simplex_handle,bool>
Insertion_result	multipers/gudhi/Simplex_tree_multi_interface.h	/^  using Insertion_result = typename std::pair<Simplex_handle, bool>;$/;"	t	class:Gudhi::multiparameter::python_interface::Simplex_tree_multi_interface	typeref:typename:std::pair<Simplex_handle,bool>
Insertion_return	multipers/gudhi/gudhi/Matrix.h	/^  using Insertion_return =$/;"	t	class:Gudhi::persistence_matrix::Matrix	typeref:typename:std::conditional<PersistenceMatrixOptions::is_of_boundary_type||!isNonBasic||PersistenceMatrixOptions::column_indexation_type==Column_indexation_types::POSITION,void,std::vector<Entry_representative>>::type
Intrusive_list_column	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^class Intrusive_list_column : public Master_matrix::Row_access_option,$/;"	c	namespace:Gudhi::persistence_matrix
Intrusive_list_column	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^inline Intrusive_list_column<Master_matrix>::Intrusive_list_column(Column_settings* colSettings)$/;"	f	class:Gudhi::persistence_matrix::Intrusive_list_column
Intrusive_list_column	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^inline Intrusive_list_column<Master_matrix>::Intrusive_list_column(Index columnIndex,$/;"	f	class:Gudhi::persistence_matrix::Intrusive_list_column
Intrusive_list_column	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^inline Intrusive_list_column<Master_matrix>::Intrusive_list_column(Intrusive_list_column&& colum/;"	f	class:Gudhi::persistence_matrix::Intrusive_list_column
Intrusive_list_column	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^inline Intrusive_list_column<Master_matrix>::Intrusive_list_column(const Container& nonZeroRowIn/;"	f	class:Gudhi::persistence_matrix::Intrusive_list_column
Intrusive_list_column	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^inline Intrusive_list_column<Master_matrix>::Intrusive_list_column(const Intrusive_list_column& /;"	f	class:Gudhi::persistence_matrix::Intrusive_list_column
Intrusive_set_column	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^class Intrusive_set_column : public Master_matrix::Row_access_option,$/;"	c	namespace:Gudhi::persistence_matrix
Intrusive_set_column	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^inline Intrusive_set_column<Master_matrix>::Intrusive_set_column(Column_settings* colSettings)$/;"	f	class:Gudhi::persistence_matrix::Intrusive_set_column
Intrusive_set_column	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^inline Intrusive_set_column<Master_matrix>::Intrusive_set_column(Index columnIndex,$/;"	f	class:Gudhi::persistence_matrix::Intrusive_set_column
Intrusive_set_column	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^inline Intrusive_set_column<Master_matrix>::Intrusive_set_column(Intrusive_set_column&& column) /;"	f	class:Gudhi::persistence_matrix::Intrusive_set_column
Intrusive_set_column	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^inline Intrusive_set_column<Master_matrix>::Intrusive_set_column(const Container& nonZeroRowIndi/;"	f	class:Gudhi::persistence_matrix::Intrusive_set_column
Intrusive_set_column	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^inline Intrusive_set_column<Master_matrix>::Intrusive_set_column(const Intrusive_set_column& col/;"	f	class:Gudhi::persistence_matrix::Intrusive_set_column
Is_strictly_smaller_lexicographically	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  struct Is_strictly_smaller_lexicographically {$/;"	s	class:Gudhi::multi_filtration::Multi_critical_filtration
JC_path	multipers/data/MOL2.py	/^JC_path = DATASET_PATH + "Cleves-Jain\/"$/;"	v
KCriticalVineTruc	multipers/gudhi/Persistence_slices_interface.h	/^using KCriticalVineTruc = Gudhi::multiparameter::truc_interface::$/;"	t	typeref:typename:Gudhi::multiparameter::truc_interface::Truc<MatrixBackendVine<col,PresentationStructure>,PresentationStructure,Multi_critical_filtrationValue>
KDE	multipers/ml/convolutions.py	/^class KDE:$/;"	c
KFold	multipers/ml/accuracies.py	/^        from sklearn.model_selection import StratifiedKFold as KFold$/;"	Y	function:accuracy_to_csv	file:	nameref:unknown:StratifiedKFold
K_critical_point	multipers/gudhi/gudhi/Multi_persistence/Line.h	/^  using K_critical_point = Gudhi::multi_filtration::Multi_critical_filtration<T>;$/;"	t	class:Gudhi::multi_persistence::Line	typeref:typename:Gudhi::multi_filtration::Multi_critical_filtration<T>
Key_simplex_base	multipers/gudhi/gudhi/Simplex_tree.h	/^      Key_simplex_base;$/;"	t	class:Gudhi::Simplex_tree	typeref:typename:std::conditional<Options::store_key,Key_simplex_base_real,Key_simplex_base_dummy>::type
Key_simplex_base_dummy	multipers/gudhi/gudhi/Simplex_tree.h	/^    Key_simplex_base_dummy() {}$/;"	f	struct:Gudhi::Simplex_tree::Key_simplex_base_dummy
Key_simplex_base_dummy	multipers/gudhi/gudhi/Simplex_tree.h	/^  struct Key_simplex_base_dummy {$/;"	s	class:Gudhi::Simplex_tree
Key_simplex_base_real	multipers/gudhi/gudhi/Simplex_tree.h	/^    Key_simplex_base_real() : key_(-1) {}$/;"	f	struct:Gudhi::Simplex_tree::Key_simplex_base_real
Key_simplex_base_real	multipers/gudhi/gudhi/Simplex_tree.h	/^    Key_simplex_base_real(Simplex_key k) : key_(k) {}$/;"	f	struct:Gudhi::Simplex_tree::Key_simplex_base_real
Key_simplex_base_real	multipers/gudhi/gudhi/Simplex_tree.h	/^  struct Key_simplex_base_real {$/;"	s	class:Gudhi::Simplex_tree
LINE_FILTRATION_TRANSLATION_H_INCLUDED	multipers/gudhi/gudhi/Multi_persistence/Line.h	/^#define LINE_FILTRATION_TRANSLATION_H_INCLUDED$/;"	d
LIST	multipers/gudhi/Persistence_slices_interface.h	/^enum Column_types_strs { LIST, SET, HEAP, VECTOR, NAIVE_VECTOR, UNORDERED_SET, INTRUSIVE_LIST, I/;"	e	enum:Column_types_strs
LIST	multipers/gudhi/gudhi/persistence_matrix_options.h	/^  LIST,           \/**< @ref List_column "": Underlying container is a std::list<@ref Entry*>. */;"	e	enum:Gudhi::persistence_matrix::Column_types
LISTCOLUMN_H	multipers/multiparameter_module_approximation/list_column.h	/^#define LISTCOLUMN_H$/;"	d
LISTCOLUMN_H	multipers/multiparameter_module_approximation/list_column_2.h	/^#define LISTCOLUMN_H$/;"	d
Line	multipers/gudhi/gudhi/Multi_persistence/Line.h	/^  Line() : basePoint_(0), direction_(0) {}  \/\/ has to be explicitly set to 0, otherwise become/;"	f	class:Gudhi::multi_persistence::Line
Line	multipers/gudhi/gudhi/Multi_persistence/Line.h	/^  Line(Point &&x) : basePoint_(std::move(x)), direction_(0) {}  \/\/ default direction$/;"	f	class:Gudhi::multi_persistence::Line
Line	multipers/gudhi/gudhi/Multi_persistence/Line.h	/^  Line(const Point &x) : basePoint_(x), direction_(0) {}  \/\/ default direction$/;"	f	class:Gudhi::multi_persistence::Line
Line	multipers/gudhi/gudhi/Multi_persistence/Line.h	/^  Line(const Point &x, const Point &vector) : basePoint_(x), direction_(vector) { check_directio/;"	f	class:Gudhi::multi_persistence::Line
Line	multipers/gudhi/gudhi/Multi_persistence/Line.h	/^class Line {$/;"	c	namespace:Gudhi::multi_persistence
LineIterator	multipers/multiparameter_module_approximation/approximation.h	/^  LineIterator(const Filtration_value &basepoint,$/;"	f	class:Gudhi::multiparameter::mma::LineIterator
LineIterator	multipers/multiparameter_module_approximation/approximation.h	/^class LineIterator {$/;"	c	namespace:Gudhi::multiparameter::mma
List_column	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^class List_column : public Master_matrix::Row_access_option,$/;"	c	namespace:Gudhi::persistence_matrix
List_column	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^inline List_column<Master_matrix>::List_column(Column_settings* colSettings)$/;"	f	class:Gudhi::persistence_matrix::List_column
List_column	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^inline List_column<Master_matrix>::List_column(Index columnIndex,$/;"	f	class:Gudhi::persistence_matrix::List_column
List_column	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^inline List_column<Master_matrix>::List_column(List_column&& column) noexcept$/;"	f	class:Gudhi::persistence_matrix::List_column
List_column	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^inline List_column<Master_matrix>::List_column(const Container& nonZeroRowIndices, Column_settin/;"	f	class:Gudhi::persistence_matrix::List_column
List_column	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^inline List_column<Master_matrix>::List_column(const Container& nonZeroRowIndices,$/;"	f	class:Gudhi::persistence_matrix::List_column
List_column	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^inline List_column<Master_matrix>::List_column(const List_column& column, Column_settings* colSe/;"	f	class:Gudhi::persistence_matrix::List_column
List_column	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^inline List_column<Master_matrix>::List_column(const List_column& column,$/;"	f	class:Gudhi::persistence_matrix::List_column
List_column	multipers/multiparameter_module_approximation/list_column.h	/^class List_column$/;"	c	namespace:Vineyard
List_column	multipers/multiparameter_module_approximation/list_column.h	/^inline List_column::List_column() : dim_(0)$/;"	f	class:Vineyard::List_column
List_column	multipers/multiparameter_module_approximation/list_column.h	/^inline List_column::List_column(List_column &&column) noexcept$/;"	f	class:Vineyard::List_column
List_column	multipers/multiparameter_module_approximation/list_column.h	/^inline List_column::List_column(List_column &column)$/;"	f	class:Vineyard::List_column
List_column	multipers/multiparameter_module_approximation/list_column.h	/^inline List_column::List_column(boundary_type &boundary)$/;"	f	class:Vineyard::List_column
List_column	multipers/multiparameter_module_approximation/list_column_2.h	/^class List_column$/;"	c	namespace:Vineyard
List_column	multipers/multiparameter_module_approximation/list_column_2.h	/^inline List_column::List_column() : dim_(0)$/;"	f	class:Vineyard::List_column
List_column	multipers/multiparameter_module_approximation/list_column_2.h	/^inline List_column::List_column(List_column &&column) noexcept$/;"	f	class:Vineyard::List_column
List_column	multipers/multiparameter_module_approximation/list_column_2.h	/^inline List_column::List_column(List_column &column)$/;"	f	class:Vineyard::List_column
List_column	multipers/multiparameter_module_approximation/list_column_2.h	/^inline List_column::List_column(boundary_type &boundary)$/;"	f	class:Vineyard::List_column
List_max_vertex	multipers/gudhi/gudhi/Simplex_tree.h	/^          List_max_vertex;$/;"	t	class:Gudhi::Simplex_tree	typeref:typename:boost::intrusive::list<Hooks_simplex_base_link_nodes,List_member_hook_t,boost::intrusive::constant_time_size<false>>
List_member_hook_t	multipers/gudhi/gudhi/Simplex_tree.h	/^      List_member_hook_t;$/;"	t	class:Gudhi::Simplex_tree	typeref:typename:boost::intrusive::member_hook<Hooks_simplex_base_link_nodes,typename Hooks_simplex_base_link_nodes::Member_hook_t,& Hooks_simplex_base_link_nodes::list_max_vertex_hook_>
Lstrategies	multipers/grids.pyx	/^Lstrategies = Literal["regular","regular_closest", "regular_left", "partition", "quantile", "pre/;"	v
MASTER_MATRIX_H	multipers/gudhi/gudhi/Matrix.h	/^#define MASTER_MATRIX_H$/;"	d
MATRIX_FIELD_MULTI_H_	multipers/gudhi/gudhi/Fields/Multi_field.h	/^#define MATRIX_FIELD_MULTI_H_$/;"	d
MATRIX_FIELD_MULTI_OPERATORS_H_	multipers/gudhi/gudhi/Fields/Multi_field_operators.h	/^#define MATRIX_FIELD_MULTI_OPERATORS_H_$/;"	d
MATRIX_FIELD_MULTI_SHARED_H_	multipers/gudhi/gudhi/Fields/Multi_field_shared.h	/^#define MATRIX_FIELD_MULTI_SHARED_H_$/;"	d
MATRIX_FIELD_MULTI_SMALL_H_	multipers/gudhi/gudhi/Fields/Multi_field_small.h	/^#define MATRIX_FIELD_MULTI_SMALL_H_$/;"	d
MATRIX_FIELD_MULTI_SMALL_OPERATORS_H_	multipers/gudhi/gudhi/Fields/Multi_field_small_operators.h	/^#define MATRIX_FIELD_MULTI_SMALL_OPERATORS_H_$/;"	d
MATRIX_FIELD_MULTI_SMALL_SHARED_H_	multipers/gudhi/gudhi/Fields/Multi_field_small_shared.h	/^#define MATRIX_FIELD_MULTI_SMALL_SHARED_H_$/;"	d
MATRIX_FIELD_Z2_H_	multipers/gudhi/gudhi/Fields/Z2_field.h	/^#define MATRIX_FIELD_Z2_H_$/;"	d
MATRIX_FIELD_Z2_OPERATORS_H_	multipers/gudhi/gudhi/Fields/Z2_field_operators.h	/^#define MATRIX_FIELD_Z2_OPERATORS_H_$/;"	d
MATRIX_FIELD_ZP_H_	multipers/gudhi/gudhi/Fields/Zp_field.h	/^#define MATRIX_FIELD_ZP_H_$/;"	d
MATRIX_FIELD_ZP_OPERATOR_H_	multipers/gudhi/gudhi/Fields/Zp_field_operators.h	/^#define MATRIX_FIELD_ZP_OPERATOR_H_$/;"	d
MATRIX_FIELD_ZP_VAR_H_	multipers/gudhi/gudhi/Fields/Zp_field_shared.h	/^#define MATRIX_FIELD_ZP_VAR_H_$/;"	d
MMA2IMG	compute.py	/^MMA2IMG = mma.MMA2IMG(n_jobs=1,progress=False,flatten=True,degrees=int_degrees)$/;"	v
MMA2IMG	multipers/ml/mma.py	/^class MMA2IMG(BaseEstimator, TransformerMixin):$/;"	c
MMA2IMG_parameters	compute.py	/^MMA2IMG_parameters = {$/;"	v
MMA2Landscape	multipers/ml/mma.py	/^class MMA2Landscape(BaseEstimator, TransformerMixin):$/;"	c
MMAF	compute.py	/^MMAF = mma.MMAFormatter() $/;"	v
MMAF_parameters	compute.py	/^MMAF_parameters={$/;"	v
MMAFormatter	multipers/ml/mma.py	/^class MMAFormatter(BaseEstimator, TransformerMixin):$/;"	c
MMA_INTERFACE_COH_H	multipers/gudhi/mma_interface_coh.h	/^#define MMA_INTERFACE_COH_H$/;"	d
MMA_INTERFACE_H0_H	multipers/gudhi/mma_interface_h0.h	/^#define MMA_INTERFACE_H0_H$/;"	d
MMA_INTERFACE_MATRIX_H	multipers/gudhi/mma_interface_matrix.h	/^#define MMA_INTERFACE_MATRIX_H$/;"	d
MULTIPERS_CUBICAL_CONV_H	multipers/gudhi/cubical_to_boundary.h	/^#define MULTIPERS_CUBICAL_CONV_H$/;"	d
MULTIPERS_SCC_IO_H	multipers/gudhi/scc_io.h	/^#define MULTIPERS_SCC_IO_H$/;"	d
MULTI_CRITICAL_FILTRATIONS_H_	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^#define MULTI_CRITICAL_FILTRATIONS_H_$/;"	d
Master	multipers/gudhi/gudhi/Persistence_matrix/columns/entry_types.h	/^  using Master = Master_matrix;                           \/**< Access to options from outside. /;"	t	class:Gudhi::persistence_matrix::Entry	typeref:typename:Master_matrix
Master	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^  using Master = Master_matrix;$/;"	t	class:Gudhi::persistence_matrix::Heap_column	typeref:typename:Master_matrix
Master	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^  using Master = Master_matrix;$/;"	t	class:Gudhi::persistence_matrix::Intrusive_list_column	typeref:typename:Master_matrix
Master	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^  using Master = Master_matrix;$/;"	t	class:Gudhi::persistence_matrix::Intrusive_set_column	typeref:typename:Master_matrix
Master	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^  using Master = Master_matrix;$/;"	t	class:Gudhi::persistence_matrix::List_column	typeref:typename:Master_matrix
Master	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^  using Master = Master_matrix;$/;"	t	class:Gudhi::persistence_matrix::Naive_vector_column	typeref:typename:Master_matrix
Master	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^  using Master = Master_matrix;$/;"	t	class:Gudhi::persistence_matrix::Set_column	typeref:typename:Master_matrix
Master	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^  using Master = Master_matrix;$/;"	t	class:Gudhi::persistence_matrix::Small_vector_column	typeref:typename:Master_matrix
Master	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^  using Master = Master_matrix;$/;"	t	class:Gudhi::persistence_matrix::Unordered_set_column	typeref:typename:Master_matrix
Master	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^  using Master = Master_matrix;$/;"	t	class:Gudhi::persistence_matrix::Vector_column	typeref:typename:Master_matrix
Master_RU_matrix	multipers/gudhi/gudhi/Matrix.h	/^  using Master_RU_matrix = RU_matrix<Matrix<PersistenceMatrixOptions> >;$/;"	t	class:Gudhi::persistence_matrix::Matrix	typeref:typename:RU_matrix<Matrix<PersistenceMatrixOptions>>
Master_RU_matrix	multipers/gudhi/gudhi/Persistence_matrix/ru_rep_cycles.h	/^  using Master_RU_matrix = typename Master_matrix::Master_RU_matrix;$/;"	t	class:Gudhi::persistence_matrix::RU_representative_cycles	typeref:typename:Master_matrix::Master_RU_matrix
Master_RU_matrix	multipers/gudhi/gudhi/Persistence_matrix/ru_vine_swap.h	/^  using Master_RU_matrix = typename Master_matrix::Master_RU_matrix;$/;"	t	class:Gudhi::persistence_matrix::RU_vine_swap	typeref:typename:Master_matrix::Master_RU_matrix
Master_base_matrix	multipers/gudhi/gudhi/Matrix.h	/^  using Master_base_matrix =$/;"	t	class:Gudhi::persistence_matrix::Matrix	typeref:typename:std::conditional<PersistenceMatrixOptions::has_column_compression,Base_matrix_with_column_compression<Matrix<PersistenceMatrixOptions>>,Base_matrix<Matrix<PersistenceMatrixOptions>>>::type
Master_boundary_matrix	multipers/gudhi/gudhi/Matrix.h	/^  using Master_boundary_matrix = Boundary_matrix<Matrix<PersistenceMatrixOptions> >;$/;"	t	class:Gudhi::persistence_matrix::Matrix	typeref:typename:Boundary_matrix<Matrix<PersistenceMatrixOptions>>
Master_chain_matrix	multipers/gudhi/gudhi/Matrix.h	/^  using Master_chain_matrix = Chain_matrix<Matrix<PersistenceMatrixOptions> >;$/;"	t	class:Gudhi::persistence_matrix::Matrix	typeref:typename:Chain_matrix<Matrix<PersistenceMatrixOptions>>
Master_chain_matrix	multipers/gudhi/gudhi/Persistence_matrix/chain_rep_cycles.h	/^  using Master_chain_matrix = typename Master_matrix::Master_chain_matrix;$/;"	t	class:Gudhi::persistence_matrix::Chain_representative_cycles	typeref:typename:Master_matrix::Master_chain_matrix
Master_chain_matrix	multipers/gudhi/gudhi/Persistence_matrix/chain_vine_swap.h	/^  using Master_chain_matrix = typename Master_matrix::Master_chain_matrix;$/;"	t	class:Gudhi::persistence_matrix::Chain_vine_swap	typeref:typename:Master_matrix::Master_chain_matrix
Matrix	multipers/gudhi/Persistence_slices_interface.h	/^enum class BackendsEnum { Matrix, Graph, Clement, GudhiCohomology };$/;"	e	enum:BackendsEnum
Matrix	multipers/gudhi/gudhi/Matrix.h	/^class Matrix {$/;"	c	namespace:Gudhi::persistence_matrix
Matrix	multipers/gudhi/gudhi/Matrix.h	/^inline Matrix<PersistenceMatrixOptions>::Matrix()$/;"	f	class:Gudhi::persistence_matrix::Matrix
Matrix	multipers/gudhi/gudhi/Matrix.h	/^inline Matrix<PersistenceMatrixOptions>::Matrix(Matrix&& other) noexcept$/;"	f	class:Gudhi::persistence_matrix::Matrix
Matrix	multipers/gudhi/gudhi/Matrix.h	/^inline Matrix<PersistenceMatrixOptions>::Matrix(const Matrix& matrixToCopy)$/;"	f	class:Gudhi::persistence_matrix::Matrix
Matrix	multipers/gudhi/gudhi/Matrix.h	/^inline Matrix<PersistenceMatrixOptions>::Matrix(const std::function<bool(Pos_index,Pos_index)>& /;"	f	class:Gudhi::persistence_matrix::Matrix
Matrix	multipers/gudhi/gudhi/Matrix.h	/^inline Matrix<PersistenceMatrixOptions>::Matrix(const std::vector<Boundary_range>& orderedBounda/;"	f	class:Gudhi::persistence_matrix::Matrix
Matrix	multipers/gudhi/gudhi/Matrix.h	/^inline Matrix<PersistenceMatrixOptions>::Matrix(const std::vector<Container>& columns,$/;"	f	class:Gudhi::persistence_matrix::Matrix
Matrix	multipers/gudhi/gudhi/Matrix.h	/^inline Matrix<PersistenceMatrixOptions>::Matrix(unsigned int numberOfColumns, Characteristic cha/;"	f	class:Gudhi::persistence_matrix::Matrix
Matrix	multipers/gudhi/gudhi/Matrix.h	/^inline Matrix<PersistenceMatrixOptions>::Matrix(unsigned int numberOfColumns,$/;"	f	class:Gudhi::persistence_matrix::Matrix
MatrixBackendNoVine	multipers/gudhi/Persistence_slices_interface.h	/^using MatrixBackendNoVine =$/;"	t	typeref:typename:Gudhi::multiparameter::truc_interface::Persistence_backend_matrix<BackendOptionsWithoutVine<col>,Structure>
MatrixBackendVine	multipers/gudhi/Persistence_slices_interface.h	/^using MatrixBackendVine =$/;"	t	typeref:typename:Gudhi::multiparameter::truc_interface::Persistence_backend_matrix<BackendOptionsWithVine<col>,Structure>
MatrixComplex	multipers/gudhi/mma_interface_coh.h	/^  using MatrixComplex = Boundary_matrix_as_filtered_complex_for_coh<Boundary_matrix_type>;$/;"	t	class:Gudhi::multiparameter::truc_interface::Persistence_backend_cohomology	typeref:typename:Boundary_matrix_as_filtered_complex_for_coh<Boundary_matrix_type>
MatrixTrucPythonInterface	multipers/gudhi/Persistence_slices_interface.h	/^using MatrixTrucPythonInterface = Gudhi::multiparameter::truc_interface::$/;"	t	typeref:typename:Gudhi::multiparameter::truc_interface::Truc<Matrix_interface<is_vine,col>,PresentationStructure,filtration_options<is_kcritical,value_type>>
Matrix_all_dimension_holder	multipers/gudhi/gudhi/Persistence_matrix/matrix_dimension_holders.h	/^  Matrix_all_dimension_holder(Dimension maximalDimension = -1)$/;"	f	class:Gudhi::persistence_matrix::Matrix_all_dimension_holder
Matrix_all_dimension_holder	multipers/gudhi/gudhi/Persistence_matrix/matrix_dimension_holders.h	/^  Matrix_all_dimension_holder(Matrix_all_dimension_holder&& other) noexcept$/;"	f	class:Gudhi::persistence_matrix::Matrix_all_dimension_holder
Matrix_all_dimension_holder	multipers/gudhi/gudhi/Persistence_matrix/matrix_dimension_holders.h	/^  Matrix_all_dimension_holder(const Matrix_all_dimension_holder& toCopy)$/;"	f	class:Gudhi::persistence_matrix::Matrix_all_dimension_holder
Matrix_all_dimension_holder	multipers/gudhi/gudhi/Persistence_matrix/matrix_dimension_holders.h	/^class Matrix_all_dimension_holder $/;"	c	namespace:Gudhi::persistence_matrix
Matrix_dimension_option	multipers/gudhi/gudhi/Matrix.h	/^  using Matrix_dimension_option = typename std::conditional<$/;"	t	class:Gudhi::persistence_matrix::Matrix
Matrix_entry	multipers/gudhi/gudhi/Matrix.h	/^  using Matrix_entry = Entry<Matrix<PersistenceMatrixOptions> >;$/;"	t	class:Gudhi::persistence_matrix::Matrix	typeref:typename:Entry<Matrix<PersistenceMatrixOptions>>
Matrix_entry	multipers/gudhi/gudhi/Persistence_matrix/columns/row_access.h	/^  using Matrix_entry = typename Master_matrix::Matrix_entry;    \/**< @ref Entry. *\/$/;"	t	class:Gudhi::persistence_matrix::Row_access	typeref:typename:Master_matrix::Matrix_entry
Matrix_heap_column	multipers/gudhi/gudhi/Matrix.h	/^  using Matrix_heap_column = Heap_column<Matrix<PersistenceMatrixOptions> >;$/;"	t	class:Gudhi::persistence_matrix::Matrix	typeref:typename:Heap_column<Matrix<PersistenceMatrixOptions>>
Matrix_interface	multipers/gudhi/Persistence_slices_interface.h	/^using Matrix_interface = std::conditional_t<is_vine,$/;"	t	typeref:typename:std::conditional_t<is_vine,MatrixBackendVine<col,PresentationStructure>,MatrixBackendNoVine<col,PresentationStructure>>
Matrix_intrusive_list_column	multipers/gudhi/gudhi/Matrix.h	/^  using Matrix_intrusive_list_column = Intrusive_list_column<Matrix<PersistenceMatrixOptions> >;$/;"	t	class:Gudhi::persistence_matrix::Matrix	typeref:typename:Intrusive_list_column<Matrix<PersistenceMatrixOptions>>
Matrix_intrusive_set_column	multipers/gudhi/gudhi/Matrix.h	/^  using Matrix_intrusive_set_column = Intrusive_set_column<Matrix<PersistenceMatrixOptions> >;$/;"	t	class:Gudhi::persistence_matrix::Matrix	typeref:typename:Intrusive_set_column<Matrix<PersistenceMatrixOptions>>
Matrix_list_column	multipers/gudhi/gudhi/Matrix.h	/^  using Matrix_list_column = List_column<Matrix<PersistenceMatrixOptions> >;$/;"	t	class:Gudhi::persistence_matrix::Matrix	typeref:typename:List_column<Matrix<PersistenceMatrixOptions>>
Matrix_max_dimension_holder	multipers/gudhi/gudhi/Persistence_matrix/matrix_dimension_holders.h	/^  Matrix_max_dimension_holder(Dimension maximalDimension = -1) : maxDim_(maximalDimension){};$/;"	f	class:Gudhi::persistence_matrix::Matrix_max_dimension_holder
Matrix_max_dimension_holder	multipers/gudhi/gudhi/Persistence_matrix/matrix_dimension_holders.h	/^  Matrix_max_dimension_holder(Matrix_max_dimension_holder&& other) noexcept$/;"	f	class:Gudhi::persistence_matrix::Matrix_max_dimension_holder
Matrix_max_dimension_holder	multipers/gudhi/gudhi/Persistence_matrix/matrix_dimension_holders.h	/^  Matrix_max_dimension_holder(const Matrix_max_dimension_holder& toCopy) : maxDim_(toCopy.maxDim/;"	f	class:Gudhi::persistence_matrix::Matrix_max_dimension_holder
Matrix_max_dimension_holder	multipers/gudhi/gudhi/Persistence_matrix/matrix_dimension_holders.h	/^class Matrix_max_dimension_holder $/;"	c	namespace:Gudhi::persistence_matrix
Matrix_naive_vector_column	multipers/gudhi/gudhi/Matrix.h	/^  using Matrix_naive_vector_column = Naive_vector_column<Matrix<PersistenceMatrixOptions> >;$/;"	t	class:Gudhi::persistence_matrix::Matrix	typeref:typename:Naive_vector_column<Matrix<PersistenceMatrixOptions>>
Matrix_row_access	multipers/gudhi/gudhi/Persistence_matrix/matrix_row_access.h	/^  Matrix_row_access() : rows_(new Row_container()){};$/;"	f	class:Gudhi::persistence_matrix::Matrix_row_access
Matrix_row_access	multipers/gudhi/gudhi/Persistence_matrix/matrix_row_access.h	/^  Matrix_row_access(Matrix_row_access&& other) noexcept : rows_(std::exchange(other.rows_, nullp/;"	f	class:Gudhi::persistence_matrix::Matrix_row_access
Matrix_row_access	multipers/gudhi/gudhi/Persistence_matrix/matrix_row_access.h	/^  Matrix_row_access(const Matrix_row_access& toCopy)$/;"	f	class:Gudhi::persistence_matrix::Matrix_row_access
Matrix_row_access	multipers/gudhi/gudhi/Persistence_matrix/matrix_row_access.h	/^  Matrix_row_access(unsigned int numberOfRows) : rows_(new Row_container()) {$/;"	f	class:Gudhi::persistence_matrix::Matrix_row_access
Matrix_row_access	multipers/gudhi/gudhi/Persistence_matrix/matrix_row_access.h	/^class Matrix_row_access $/;"	c	namespace:Gudhi::persistence_matrix
Matrix_row_access_option	multipers/gudhi/gudhi/Matrix.h	/^  using Matrix_row_access_option =$/;"	t	class:Gudhi::persistence_matrix::Matrix	typeref:typename:std::conditional<PersistenceMatrixOptions::has_row_access,Matrix_row_access<Row,Row_container,PersistenceMatrixOptions::has_removable_rows,ID_index>,Dummy_matrix_row_access>::type
Matrix_set_column	multipers/gudhi/gudhi/Matrix.h	/^  using Matrix_set_column = Set_column<Matrix<PersistenceMatrixOptions> >;$/;"	t	class:Gudhi::persistence_matrix::Matrix	typeref:typename:Set_column<Matrix<PersistenceMatrixOptions>>
Matrix_small_vector_column	multipers/gudhi/gudhi/Matrix.h	/^  using Matrix_small_vector_column = Small_vector_column<Matrix<PersistenceMatrixOptions> >;$/;"	t	class:Gudhi::persistence_matrix::Matrix	typeref:typename:Small_vector_column<Matrix<PersistenceMatrixOptions>>
Matrix_unordered_set_column	multipers/gudhi/gudhi/Matrix.h	/^  using Matrix_unordered_set_column = Unordered_set_column<Matrix<PersistenceMatrixOptions> >;$/;"	t	class:Gudhi::persistence_matrix::Matrix	typeref:typename:Unordered_set_column<Matrix<PersistenceMatrixOptions>>
Matrix_vector_column	multipers/gudhi/gudhi/Matrix.h	/^  using Matrix_vector_column = Vector_column<Matrix<PersistenceMatrixOptions> >;$/;"	t	class:Gudhi::persistence_matrix::Matrix	typeref:typename:Vector_column<Matrix<PersistenceMatrixOptions>>
Member_hook_t	multipers/gudhi/gudhi/Simplex_tree/hooks_simplex_base.h	/^        Member_hook_t;$/;"	t	struct:Gudhi::Hooks_simplex_base_link_nodes	typeref:typename:boost::intrusive::list_member_hook<boost::intrusive::link_mode<boost::intrusive::auto_unlink>>
Module	multipers/multiparameter_module_approximation/approximation.h	/^class Module {$/;"	c	namespace:Gudhi::multiparameter::mma
Module	multipers/multiparameter_module_approximation/approximation.h	/^inline Module<value_type>::Module() {}$/;"	f	class:Gudhi::multiparameter::mma::Module
Module	multipers/multiparameter_module_approximation/approximation.h	/^inline Module<value_type>::Module(Box<value_type> &box) : box_(box) {}$/;"	f	class:Gudhi::multiparameter::mma::Module
ModuleTransformer	compute.py	/^		ModuleTransformer = Pipeline([$/;"	v
Molecule2SimplexTree	multipers/data/MOL2.py	/^class Molecule2SimplexTree(BaseEstimator, TransformerMixin):$/;"	c
MultiDiagram	multipers/multiparameter_module_approximation/utilities.h	/^  MultiDiagram() {}$/;"	f	struct:Gudhi::multiparameter::mma::MultiDiagram
MultiDiagram	multipers/multiparameter_module_approximation/utilities.h	/^  MultiDiagram(std::vector<MultiDiagram_point<filtration_type>> &m)$/;"	f	struct:Gudhi::multiparameter::mma::MultiDiagram
MultiDiagram	multipers/multiparameter_module_approximation/utilities.h	/^struct MultiDiagram { \/\/ for python interface$/;"	s	namespace:Gudhi::multiparameter::mma
MultiDiagram_point	multipers/multiparameter_module_approximation/utilities.h	/^  MultiDiagram_point() : dim(-1), birth({}), death({}) {}$/;"	f	struct:Gudhi::multiparameter::mma::MultiDiagram_point
MultiDiagram_point	multipers/multiparameter_module_approximation/utilities.h	/^  MultiDiagram_point(dimension_type dim, filtration_type birth,$/;"	f	struct:Gudhi::multiparameter::mma::MultiDiagram_point
MultiDiagram_point	multipers/multiparameter_module_approximation/utilities.h	/^struct MultiDiagram_point {$/;"	s	namespace:Gudhi::multiparameter::mma
MultiDiagrams	multipers/multiparameter_module_approximation/utilities.h	/^  MultiDiagrams() {}$/;"	f	struct:Gudhi::multiparameter::mma::MultiDiagrams
MultiDiagrams	multipers/multiparameter_module_approximation/utilities.h	/^  MultiDiagrams(unsigned int size) : multiDiagrams(size) {}$/;"	f	struct:Gudhi::multiparameter::mma::MultiDiagrams
MultiDiagrams	multipers/multiparameter_module_approximation/utilities.h	/^template <typename filtration_type, typename value_type > struct MultiDiagrams {$/;"	s	namespace:Gudhi::multiparameter::mma
MultiPersistenceImageWrapper	multipers_old.py	/^class MultiPersistenceImageWrapper(BaseEstimator, TransformerMixin):$/;"	c
MultiPersistenceLandscapeWrapper	multipers_old.py	/^class MultiPersistenceLandscapeWrapper(BaseEstimator, TransformerMixin):$/;"	c
Multi_critical_filtration	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  Multi_critical_filtration() : multi_filtration_(_get_default_filtration_value()) {};$/;"	f	class:Gudhi::multi_filtration::Multi_critical_filtration
Multi_critical_filtration	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  Multi_critical_filtration(const std::vector<Generator> &v)$/;"	f	class:Gudhi::multi_filtration::Multi_critical_filtration
Multi_critical_filtration	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  Multi_critical_filtration(const std::vector<T> &v) : multi_filtration_(1, Generator{v}) {};$/;"	f	class:Gudhi::multi_filtration::Multi_critical_filtration
Multi_critical_filtration	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  Multi_critical_filtration(int n) : multi_filtration_(1, Generator(n, _get_default_value())) {}/;"	f	class:Gudhi::multi_filtration::Multi_critical_filtration
Multi_critical_filtration	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  Multi_critical_filtration(int n, T value) : multi_filtration_(1, Generator(n, value)) {};$/;"	f	class:Gudhi::multi_filtration::Multi_critical_filtration
Multi_critical_filtration	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  Multi_critical_filtration(std::initializer_list<T> init) : multi_filtration_(1, Generator{init/;"	f	class:Gudhi::multi_filtration::Multi_critical_filtration
Multi_critical_filtration	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  Multi_critical_filtration(std::vector<Generator> &&v)$/;"	f	class:Gudhi::multi_filtration::Multi_critical_filtration
Multi_critical_filtration	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  Multi_critical_filtration(std::vector<T> &&v) : multi_filtration_(1, Generator{std::move(v)}) /;"	f	class:Gudhi::multi_filtration::Multi_critical_filtration
Multi_critical_filtration	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  Multi_critical_filtration(typename std::vector<T>::const_iterator it_begin,$/;"	f	class:Gudhi::multi_filtration::Multi_critical_filtration
Multi_critical_filtration	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  Multi_critical_filtration(typename std::vector<T>::iterator it_begin, typename std::vector<T>:/;"	f	class:Gudhi::multi_filtration::Multi_critical_filtration
Multi_critical_filtration	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^class Multi_critical_filtration {$/;"	c	namespace:Gudhi::multi_filtration
Multi_critical_filtrationValue	multipers/gudhi/Persistence_slices_interface.h	/^using Multi_critical_filtrationValue = Gudhi::multi_filtration::Multi_critical_filtration<float>/;"	t	typeref:typename:Gudhi::multi_filtration::Multi_critical_filtration<float>
Multi_field	multipers/gudhi/gudhi/Persistent_cohomology/Multi_field.h	/^  Multi_field()$/;"	f	class:Gudhi::persistent_cohomology::Multi_field
Multi_field	multipers/gudhi/gudhi/Persistent_cohomology/Multi_field.h	/^class Multi_field {$/;"	c	namespace:Gudhi::persistent_cohomology
Multi_field_element	multipers/gudhi/gudhi/Fields/Multi_field.h	/^class Multi_field_element {$/;"	c	namespace:Gudhi::persistence_fields
Multi_field_element	multipers/gudhi/gudhi/Fields/Multi_field.h	/^inline Multi_field_element<minimum, maximum>::Multi_field_element($/;"	f	class:Gudhi::persistence_fields::Multi_field_element
Multi_field_element	multipers/gudhi/gudhi/Fields/Multi_field.h	/^inline Multi_field_element<minimum, maximum>::Multi_field_element() : element_(0) {$/;"	f	class:Gudhi::persistence_fields::Multi_field_element
Multi_field_element	multipers/gudhi/gudhi/Fields/Multi_field.h	/^inline Multi_field_element<minimum, maximum>::Multi_field_element(const Element& element) : elem/;"	f	class:Gudhi::persistence_fields::Multi_field_element
Multi_field_element	multipers/gudhi/gudhi/Fields/Multi_field.h	/^inline Multi_field_element<minimum, maximum>::Multi_field_element(const Multi_field_element<mini/;"	f	class:Gudhi::persistence_fields::Multi_field_element
Multi_field_element_with_small_characteristics	multipers/gudhi/gudhi/Fields/Multi_field_small.h	/^  Multi_field_element_with_small_characteristics() : element_(0) {$/;"	f	class:Gudhi::persistence_fields::Multi_field_element_with_small_characteristics
Multi_field_element_with_small_characteristics	multipers/gudhi/gudhi/Fields/Multi_field_small.h	/^  Multi_field_element_with_small_characteristics(Integer_type element)$/;"	f	class:Gudhi::persistence_fields::Multi_field_element_with_small_characteristics
Multi_field_element_with_small_characteristics	multipers/gudhi/gudhi/Fields/Multi_field_small.h	/^  Multi_field_element_with_small_characteristics(Multi_field_element_with_small_characteristics&/;"	f	class:Gudhi::persistence_fields::Multi_field_element_with_small_characteristics
Multi_field_element_with_small_characteristics	multipers/gudhi/gudhi/Fields/Multi_field_small.h	/^  Multi_field_element_with_small_characteristics(const Multi_field_element_with_small_characteri/;"	f	class:Gudhi::persistence_fields::Multi_field_element_with_small_characteristics
Multi_field_element_with_small_characteristics	multipers/gudhi/gudhi/Fields/Multi_field_small.h	/^class Multi_field_element_with_small_characteristics {$/;"	c	namespace:Gudhi::persistence_fields
Multi_field_operators	multipers/gudhi/gudhi/Fields/Multi_field_operators.h	/^  Multi_field_operators() : productOfAllCharacteristics_(0) \/* , multiplicativeID_(1) *\/ $/;"	f	class:Gudhi::persistence_fields::Multi_field_operators
Multi_field_operators	multipers/gudhi/gudhi/Fields/Multi_field_operators.h	/^  Multi_field_operators(Multi_field_operators&& toMove) noexcept$/;"	f	class:Gudhi::persistence_fields::Multi_field_operators
Multi_field_operators	multipers/gudhi/gudhi/Fields/Multi_field_operators.h	/^  Multi_field_operators(const Multi_field_operators& toCopy)$/;"	f	class:Gudhi::persistence_fields::Multi_field_operators
Multi_field_operators	multipers/gudhi/gudhi/Fields/Multi_field_operators.h	/^  Multi_field_operators(int minCharacteristic, int maxCharacteristic)$/;"	f	class:Gudhi::persistence_fields::Multi_field_operators
Multi_field_operators	multipers/gudhi/gudhi/Fields/Multi_field_operators.h	/^class Multi_field_operators$/;"	c	namespace:Gudhi::persistence_fields
Multi_field_operators_with_small_characteristics	multipers/gudhi/gudhi/Fields/Multi_field_small_operators.h	/^  Multi_field_operators_with_small_characteristics() : productOfAllCharacteristics_(0) \/* , mul/;"	f	class:Gudhi::persistence_fields::Multi_field_operators_with_small_characteristics
Multi_field_operators_with_small_characteristics	multipers/gudhi/gudhi/Fields/Multi_field_small_operators.h	/^  Multi_field_operators_with_small_characteristics(Multi_field_operators_with_small_characterist/;"	f	class:Gudhi::persistence_fields::Multi_field_operators_with_small_characteristics
Multi_field_operators_with_small_characteristics	multipers/gudhi/gudhi/Fields/Multi_field_small_operators.h	/^  Multi_field_operators_with_small_characteristics(const Multi_field_operators_with_small_charac/;"	f	class:Gudhi::persistence_fields::Multi_field_operators_with_small_characteristics
Multi_field_operators_with_small_characteristics	multipers/gudhi/gudhi/Fields/Multi_field_small_operators.h	/^  Multi_field_operators_with_small_characteristics(int minCharacteristic, int maxCharacteristic)$/;"	f	class:Gudhi::persistence_fields::Multi_field_operators_with_small_characteristics
Multi_field_operators_with_small_characteristics	multipers/gudhi/gudhi/Fields/Multi_field_small_operators.h	/^class Multi_field_operators_with_small_characteristics $/;"	c	namespace:Gudhi::persistence_fields
Multi_persistence_Clement_options	multipers/gudhi/mma_interface_matrix.h	/^struct Multi_persistence_Clement_options : Gudhi::persistence_matrix::Default_options<column_typ/;"	s	namespace:Gudhi::multiparameter::truc_interface
Multi_persistence_options	multipers/gudhi/gudhi/persistence_matrix_options.h	/^struct Multi_persistence_options : Default_options<column_type, true> $/;"	s	namespace:Gudhi::persistence_matrix
Multi_persistence_options	multipers/gudhi/mma_interface_matrix.h	/^struct Multi_persistence_options : Gudhi::persistence_matrix::Default_options<column_type, true>/;"	s	namespace:Gudhi::multiparameter::truc_interface
NAIVE_VECTOR	multipers/gudhi/Persistence_slices_interface.h	/^enum Column_types_strs { LIST, SET, HEAP, VECTOR, NAIVE_VECTOR, UNORDERED_SET, INTRUSIVE_LIST, I/;"	e	enum:Column_types_strs
NAIVE_VECTOR	multipers/gudhi/gudhi/persistence_matrix_options.h	/^  NAIVE_VECTOR,   \/**< @ref Naive_vector_column "": Underlying container is a std::vector<@ref /;"	e	enum:Gudhi::persistence_matrix::Column_types
NONE	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  enum class Rel { EQUAL, DOMINATES, IS_DOMINATED, NONE };$/;"	e	enum:Gudhi::multi_filtration::Multi_critical_filtration::Rel
NT	multipers/gudhi/gudhi/distance_functions.h	/^    typedef typename boost::range_value<Point>::type NT;$/;"	t	function:Gudhi::Euclidean_distance::operator ()	typeref:typename:boost::range_value<Point>::type
Naive_bottleneck_forest	multipers/gudhi/naive_merge_tree.h	/^  Naive_bottleneck_forest() {}$/;"	f	class:Naive_bottleneck_forest
Naive_bottleneck_forest	multipers/gudhi/naive_merge_tree.h	/^  Naive_bottleneck_forest(unsigned int numberOfVertices)$/;"	f	class:Naive_bottleneck_forest
Naive_bottleneck_forest	multipers/gudhi/naive_merge_tree.h	/^class Naive_bottleneck_forest {$/;"	c
Naive_merge_forest	multipers/gudhi/naive_merge_tree.h	/^  Naive_merge_forest() {}$/;"	f	class:Naive_merge_forest
Naive_merge_forest	multipers/gudhi/naive_merge_tree.h	/^  Naive_merge_forest(unsigned int numberOfSimplices,$/;"	f	class:Naive_merge_forest
Naive_merge_forest	multipers/gudhi/naive_merge_tree.h	/^class Naive_merge_forest {$/;"	c
Naive_vector_column	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^class Naive_vector_column : public Master_matrix::Row_access_option,$/;"	c	namespace:Gudhi::persistence_matrix
Naive_vector_column	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^inline Naive_vector_column<Master_matrix>::Naive_vector_column(Column_settings* colSettings)$/;"	f	class:Gudhi::persistence_matrix::Naive_vector_column
Naive_vector_column	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^inline Naive_vector_column<Master_matrix>::Naive_vector_column(Index columnIndex,$/;"	f	class:Gudhi::persistence_matrix::Naive_vector_column
Naive_vector_column	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^inline Naive_vector_column<Master_matrix>::Naive_vector_column(Naive_vector_column&& column) noe/;"	f	class:Gudhi::persistence_matrix::Naive_vector_column
Naive_vector_column	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^inline Naive_vector_column<Master_matrix>::Naive_vector_column(const Container& nonZeroRowIndice/;"	f	class:Gudhi::persistence_matrix::Naive_vector_column
Naive_vector_column	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^inline Naive_vector_column<Master_matrix>::Naive_vector_column(const Naive_vector_column& column/;"	f	class:Gudhi::persistence_matrix::Naive_vector_column
Neighbors	multipers/gudhi/gudhi/Flag_complex_edge_collapser.h	/^  typedef std::vector<Ngb_list> Neighbors;$/;"	t	struct:Gudhi::collapse::Flag_complex_edge_collapser	typeref:typename:std::vector<Ngb_list>
New_cloner	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^    New_cloner(Entry_constructor* entryPool) : entryPool_(entryPool) {};$/;"	f	struct:Gudhi::persistence_matrix::Intrusive_list_column::New_cloner
New_cloner	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^  struct New_cloner {$/;"	s	class:Gudhi::persistence_matrix::Intrusive_list_column
New_cloner	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^    New_cloner(Entry_constructor* entryPool) : entryPool_(entryPool) {};$/;"	f	struct:Gudhi::persistence_matrix::Intrusive_set_column::New_cloner
New_cloner	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^  struct New_cloner {$/;"	s	class:Gudhi::persistence_matrix::Intrusive_set_column
New_entry_constructor	multipers/gudhi/gudhi/Persistence_matrix/allocators/entry_constructors.h	/^  New_entry_constructor() {}$/;"	f	struct:Gudhi::persistence_matrix::New_entry_constructor
New_entry_constructor	multipers/gudhi/gudhi/Persistence_matrix/allocators/entry_constructors.h	/^struct New_entry_constructor $/;"	s	namespace:Gudhi::persistence_matrix
Ngb_list	multipers/gudhi/gudhi/Flag_complex_edge_collapser.h	/^  typedef boost::container::flat_map<Vertex, Filtration_value> Ngb_list;$/;"	t	struct:Gudhi::collapse::Flag_complex_edge_collapser	typeref:typename:boost::container::flat_map<Vertex,Filtration_value>
No_simplex_data	multipers/gudhi/gudhi/Simplex_tree/simplex_tree_options.h	/^struct No_simplex_data {};$/;"	s	namespace:Gudhi
No_vine_multi_persistence_options	multipers/gudhi/mma_interface_matrix.h	/^struct No_vine_multi_persistence_options : Gudhi::persistence_matrix::Default_options<column_typ/;"	s	namespace:Gudhi::multiparameter::truc_interface
Node	multipers/gudhi/Simplex_tree_interface.h	/^  using Node = typename Base::Node;$/;"	t	class:Gudhi::Simplex_tree_interface	typeref:typename:Base::Node
Node	multipers/gudhi/gudhi/Simplex_tree.h	/^  typedef Simplex_tree_node_explicit_storage<Simplex_tree> Node;$/;"	t	class:Gudhi::Simplex_tree	typeref:typename:Simplex_tree_node_explicit_storage<Simplex_tree>
Node	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_siblings.h	/^  typedef typename SimplexTree::Node Node;$/;"	t	class:Gudhi::Simplex_tree_siblings	typeref:typename:SimplexTree::Node
Node	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_star_simplex_iterators.h	/^  using Node = typename SimplexTree::Node;$/;"	t	class:Gudhi::Simplex_tree_optimized_cofaces_rooted_subtrees_simplex_iterator	typeref:typename:SimplexTree::Node
Node	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_star_simplex_iterators.h	/^  using Node = typename SimplexTree::Node;$/;"	t	class:Gudhi::Simplex_tree_optimized_star_simplex_iterator	typeref:typename:SimplexTree::Node
Node	multipers/gudhi/naive_merge_tree.h	/^  struct Node {$/;"	s	class:Naive_bottleneck_forest
Node	multipers/gudhi/naive_merge_tree.h	/^  struct Node {$/;"	s	class:Naive_merge_forest
OC	multipers/gudhi/truc.h	/^    using OC = typename MultiFiltration::Generator;$/;"	t	function:Gudhi::multiparameter::truc_interface::Truc::get_bounding_box	typeref:typename:MultiFiltration::Generator
OFF_READER_H_	multipers/gudhi/gudhi/Off_reader.h	/^#define OFF_READER_H_$/;"	d
ONE_CRITICAL_FILTRATIONS_H_	multipers/gudhi/gudhi/One_critical_filtration.h	/^#define ONE_CRITICAL_FILTRATIONS_H_$/;"	d
OSWdistance	multipers/ml/one.py	/^	def OSWdistance(mu:list[np.ndarray], nu:list[np.ndarray], dim:int)->float:$/;"	m	class:Dgms2SignedMeasureDistance	typeref:typename:float
Off_info	multipers/gudhi/gudhi/Off_reader.h	/^  struct Off_info {$/;"	s	class:Gudhi::Off_reader
Off_reader	multipers/gudhi/gudhi/Off_reader.h	/^  Off_reader(std::ifstream& stream) : stream_(stream) { }$/;"	f	class:Gudhi::Off_reader
Off_reader	multipers/gudhi/gudhi/Off_reader.h	/^class Off_reader {$/;"	c	namespace:Gudhi
One_critical_filtration	multipers/gudhi/gudhi/One_critical_filtration.h	/^  One_critical_filtration() : Base{-T_inf} {};$/;"	f	class:Gudhi::multi_filtration::One_critical_filtration
One_critical_filtration	multipers/gudhi/gudhi/One_critical_filtration.h	/^  One_critical_filtration(const std::vector<T> &v) : Base(v) {};$/;"	f	class:Gudhi::multi_filtration::One_critical_filtration
One_critical_filtration	multipers/gudhi/gudhi/One_critical_filtration.h	/^  One_critical_filtration(int n) : Base(n, -T_inf) {};$/;"	f	class:Gudhi::multi_filtration::One_critical_filtration
One_critical_filtration	multipers/gudhi/gudhi/One_critical_filtration.h	/^  One_critical_filtration(int n, T value) : Base(n, value) {};$/;"	f	class:Gudhi::multi_filtration::One_critical_filtration
One_critical_filtration	multipers/gudhi/gudhi/One_critical_filtration.h	/^  One_critical_filtration(std::initializer_list<T> init) : Base(init) {};$/;"	f	class:Gudhi::multi_filtration::One_critical_filtration
One_critical_filtration	multipers/gudhi/gudhi/One_critical_filtration.h	/^  One_critical_filtration(std::vector<T> &&v) : Base(std::move(v)) {};$/;"	f	class:Gudhi::multi_filtration::One_critical_filtration
One_critical_filtration	multipers/gudhi/gudhi/One_critical_filtration.h	/^  One_critical_filtration(typename std::vector<T>::const_iterator it_begin,$/;"	f	class:Gudhi::multi_filtration::One_critical_filtration
One_critical_filtration	multipers/gudhi/gudhi/One_critical_filtration.h	/^  One_critical_filtration(typename std::vector<T>::iterator it_begin, typename std::vector<T>::i/;"	f	class:Gudhi::multi_filtration::One_critical_filtration
One_critical_filtration	multipers/gudhi/gudhi/One_critical_filtration.h	/^class One_critical_filtration : public std::vector<T> {$/;"	c	namespace:Gudhi::multi_filtration
Optimized_cofaces_simplex_filtered_range	multipers/gudhi/gudhi/Simplex_tree.h	/^  using Optimized_cofaces_simplex_filtered_range =$/;"	t	class:Gudhi::Simplex_tree	typeref:typename:boost::filtered_range<Fast_cofaces_predicate,Optimized_star_simplex_range>
Optimized_star_simplex_iterator	multipers/gudhi/gudhi/Simplex_tree.h	/^  using Optimized_star_simplex_iterator = Simplex_tree_optimized_star_simplex_iterator<Simplex_t/;"	t	class:Gudhi::Simplex_tree	typeref:typename:Simplex_tree_optimized_star_simplex_iterator<Simplex_tree>
Optimized_star_simplex_range	multipers/gudhi/gudhi/Simplex_tree.h	/^  using Optimized_star_simplex_range = boost::iterator_range<Optimized_star_simplex_iterator>;$/;"	t	class:Gudhi::Simplex_tree	typeref:typename:boost::iterator_range<Optimized_star_simplex_iterator>
Option_list	multipers/gudhi/gudhi/Matrix.h	/^  using Option_list = PersistenceMatrixOptions;     \/\/to make it accessible from the other cla/;"	t	class:Gudhi::persistence_matrix::Matrix	typeref:typename:PersistenceMatrixOptions
Options	multipers/gudhi/gudhi/Simplex_tree.h	/^  typedef SimplexTreeOptions Options;$/;"	t	class:Gudhi::Simplex_tree	typeref:typename:SimplexTreeOptions
PARSED_SOURCE	docs/Makefile	/^PARSED_SOURCE = source$/;"	m
PERSISTENT_COHOMOLOGY_FIELD_ZP_H_	multipers/gudhi/gudhi/Persistent_cohomology/Field_Zp.h	/^#define PERSISTENT_COHOMOLOGY_FIELD_ZP_H_$/;"	d
PERSISTENT_COHOMOLOGY_H_	multipers/gudhi/gudhi/Persistent_cohomology.h	/^#define PERSISTENT_COHOMOLOGY_H_$/;"	d
PERSISTENT_COHOMOLOGY_MULTI_FIELD_H_	multipers/gudhi/gudhi/Persistent_cohomology/Multi_field.h	/^#define PERSISTENT_COHOMOLOGY_MULTI_FIELD_H_$/;"	d
PERSISTENT_COHOMOLOGY_PERSISTENT_COHOMOLOGY_COLUMN_H_	multipers/gudhi/gudhi/Persistent_cohomology/Persistent_cohomology_column.h	/^#define PERSISTENT_COHOMOLOGY_PERSISTENT_COHOMOLOGY_COLUMN_H_$/;"	d
PIDM	multipers/gudhi/gudhi/Persistence_matrix/base_pairing.h	/^  using PIDM = typename std::conditional<Master_matrix::Option_list::has_removable_columns,$/;"	t	class:Gudhi::persistence_matrix::Base_pairing	typeref:typename:std::conditional<Master_matrix::Option_list::has_removable_columns,Cell_position_to_ID_mapper<ID_index,Pos_index>,Dummy_pos_mapper>::type
PIDM	multipers/gudhi/gudhi/Persistence_matrix/ru_pairing.h	/^  using PIDM = typename std::conditional<Master_matrix::Option_list::has_removable_columns,$/;"	t	class:Gudhi::persistence_matrix::RU_pairing	typeref:typename:std::conditional<Master_matrix::Option_list::has_removable_columns,Cell_position_to_ID_mapper<ID_index,Pos_index>,Dummy_pos_mapper>::type
PM_BASE_MATRIX_COMPRESSION_H	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix_with_column_compression.h	/^#define PM_BASE_MATRIX_COMPRESSION_H$/;"	d
PM_BASE_MATRIX_H	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix.h	/^#define PM_BASE_MATRIX_H$/;"	d
PM_BASE_MATRIX_RA_H	multipers/gudhi/gudhi/Persistence_matrix/matrix_row_access.h	/^#define PM_BASE_MATRIX_RA_H$/;"	d
PM_BASE_PAIRING_H	multipers/gudhi/gudhi/Persistence_matrix/base_pairing.h	/^#define PM_BASE_PAIRING_H$/;"	d
PM_BASE_SWAP_H	multipers/gudhi/gudhi/Persistence_matrix/base_swap.h	/^#define PM_BASE_SWAP_H$/;"	d
PM_BOUNDARY_MATRIX_H	multipers/gudhi/gudhi/Persistence_matrix/Boundary_matrix.h	/^#define PM_BOUNDARY_MATRIX_H$/;"	d
PM_CHAIN_COLUMN_PROP_H	multipers/gudhi/gudhi/Persistence_matrix/columns/chain_column_extra_properties.h	/^#define PM_CHAIN_COLUMN_PROP_H$/;"	d
PM_CHAIN_MATRIX_H	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^#define PM_CHAIN_MATRIX_H$/;"	d
PM_CHAIN_PAIRING_H	multipers/gudhi/gudhi/Persistence_matrix/chain_pairing.h	/^#define PM_CHAIN_PAIRING_H$/;"	d
PM_CHAIN_REP_CYCLES_H	multipers/gudhi/gudhi/Persistence_matrix/chain_rep_cycles.h	/^#define PM_CHAIN_REP_CYCLES_H$/;"	d
PM_CHAIN_VINE_SWAP_H	multipers/gudhi/gudhi/Persistence_matrix/chain_vine_swap.h	/^#define PM_CHAIN_VINE_SWAP_H$/;"	d
PM_COLUMN_DIM_HOLDER_H	multipers/gudhi/gudhi/Persistence_matrix/columns/column_dimension_holder.h	/^#define PM_COLUMN_DIM_HOLDER_H$/;"	d
PM_COLUMN_ENTRY_CONSTRUCTORS_H	multipers/gudhi/gudhi/Persistence_matrix/allocators/entry_constructors.h	/^#define PM_COLUMN_ENTRY_CONSTRUCTORS_H$/;"	d
PM_COLUMN_UTILITIES_H	multipers/gudhi/gudhi/Persistence_matrix/columns/column_utilities.h	/^#define PM_COLUMN_UTILITIES_H$/;"	d
PM_HEAP_COLUMN_H	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^#define PM_HEAP_COLUMN_H$/;"	d
PM_ID_POS_MAPPER_H	multipers/gudhi/gudhi/Persistence_matrix/boundary_cell_position_to_id_mapper.h	/^#define PM_ID_POS_MAPPER_H$/;"	d
PM_ID_POS_MAPPER_H	multipers/gudhi/gudhi/Persistence_matrix/boundary_face_position_to_id_mapper.h	/^#define PM_ID_POS_MAPPER_H$/;"	d
PM_ID_TO_POS_TRANSLATION_H	multipers/gudhi/gudhi/Persistence_matrix/Id_to_index_overlay.h	/^#define PM_ID_TO_POS_TRANSLATION_H$/;"	d
PM_INTERVAL_INCLUDED	multipers/gudhi/gudhi/persistence_interval.h	/^#define PM_INTERVAL_INCLUDED$/;"	d
PM_INTRUSIVE_LIST_COLUMN_H	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^#define PM_INTRUSIVE_LIST_COLUMN_H$/;"	d
PM_INTRUSIVE_SET_COLUMN_H	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^#define PM_INTRUSIVE_SET_COLUMN_H$/;"	d
PM_LIST_COLUMN_H	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^#define PM_LIST_COLUMN_H$/;"	d
PM_MATRIX_DIM_HOLDER_H	multipers/gudhi/gudhi/Persistence_matrix/matrix_dimension_holders.h	/^#define PM_MATRIX_DIM_HOLDER_H$/;"	d
PM_MATRIX_ENTRY_H	multipers/gudhi/gudhi/Persistence_matrix/columns/entry_types.h	/^#define PM_MATRIX_ENTRY_H$/;"	d
PM_NAIVE_VECTOR_COLUMN_H	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^#define PM_NAIVE_VECTOR_COLUMN_H$/;"	d
PM_OPTIONS_INCLUDED	multipers/gudhi/gudhi/persistence_matrix_options.h	/^#define PM_OPTIONS_INCLUDED$/;"	d
PM_POS_TO_ID_TRANSLATION_H	multipers/gudhi/gudhi/Persistence_matrix/Position_to_index_overlay.h	/^#define PM_POS_TO_ID_TRANSLATION_H$/;"	d
PM_ROW_ACCESS_H	multipers/gudhi/gudhi/Persistence_matrix/columns/row_access.h	/^#define PM_ROW_ACCESS_H$/;"	d
PM_RU_MATRIX_H	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^#define PM_RU_MATRIX_H$/;"	d
PM_RU_PAIRING_H	multipers/gudhi/gudhi/Persistence_matrix/ru_pairing.h	/^#define PM_RU_PAIRING_H$/;"	d
PM_RU_REP_CYCLES_H	multipers/gudhi/gudhi/Persistence_matrix/ru_rep_cycles.h	/^#define PM_RU_REP_CYCLES_H$/;"	d
PM_RU_VINE_SWAP_H	multipers/gudhi/gudhi/Persistence_matrix/ru_vine_swap.h	/^#define PM_RU_VINE_SWAP_H$/;"	d
PM_SET_COLUMN_H	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^#define PM_SET_COLUMN_H$/;"	d
PM_SMALL_VECTOR_COLUMN_H	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^#define PM_SMALL_VECTOR_COLUMN_H$/;"	d
PM_UNORDERED_SET_COLUMN_H	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^#define PM_UNORDERED_SET_COLUMN_H$/;"	d
PM_VECTOR_COLUMN_H	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^#define PM_VECTOR_COLUMN_H$/;"	d
POINTS_OFF_IO_H_	multipers/gudhi/gudhi/Points_off_io.h	/^#define POINTS_OFF_IO_H_$/;"	d
POSITION	multipers/gudhi/gudhi/persistence_matrix_options.h	/^  POSITION,   \/**< All input and output @ref MatIdx indices are replaced with @ref PosIdx indic/;"	e	enum:Gudhi::persistence_matrix::Column_indexation_types
PRINT	multipers/gudhi/gudhi/Debug_utils.h	/^#define PRINT(/;"	d
PYTHON_ENV_PATH	setup.py	/^PYTHON_ENV_PATH = sys.prefix$/;"	v
Pair_opt	multipers/gudhi/gudhi/Persistence_matrix/Boundary_matrix.h	/^  using Pair_opt = typename Master_matrix::Base_pairing_option;$/;"	t	class:Gudhi::persistence_matrix::Boundary_matrix	typeref:typename:Master_matrix::Base_pairing_option
Pair_opt	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^  using Pair_opt = typename Master_matrix::Chain_pairing_option;$/;"	t	class:Gudhi::persistence_matrix::Chain_matrix	typeref:typename:Master_matrix::Chain_pairing_option
Pair_opt	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^  using Pair_opt = typename Master_matrix::RU_pairing_option;$/;"	t	class:Gudhi::persistence_matrix::RU_matrix	typeref:typename:Master_matrix::RU_pairing_option
PathCollection_1	docs/icon.svg	/^     transform="translate(-136.66067,-74.198299)">$/;"	i
PersBackendOpts	multipers/gudhi/Persistence_slices_interface.h	/^using PersBackendOpts = typename PersBackendOptsImpl<backend, is_vine, col>::type;$/;"	t	typeref:typename:PersBackendOptsImpl<backend,is_vine,col>::type
PersBackendOptsImpl	multipers/gudhi/Persistence_slices_interface.h	/^struct PersBackendOptsImpl<BackendsEnum::Clement, is_vine, col> {$/;"	s
PersBackendOptsImpl	multipers/gudhi/Persistence_slices_interface.h	/^struct PersBackendOptsImpl<BackendsEnum::Graph, is_vine, col> {$/;"	s
PersBackendOptsImpl	multipers/gudhi/Persistence_slices_interface.h	/^struct PersBackendOptsImpl<BackendsEnum::GudhiCohomology, is_vine, col> {$/;"	s
PersBackendOptsImpl	multipers/gudhi/Persistence_slices_interface.h	/^struct PersBackendOptsImpl<BackendsEnum::Matrix, is_vine, col> {$/;"	s
PersistenceImageWrapper	multipers_old.py	/^class PersistenceImageWrapper(BaseEstimator, TransformerMixin):$/;"	c
Persistence_backend_cohomology	multipers/gudhi/mma_interface_coh.h	/^  Persistence_backend_cohomology() {};$/;"	f	class:Gudhi::multiparameter::truc_interface::Persistence_backend_cohomology
Persistence_backend_cohomology	multipers/gudhi/mma_interface_coh.h	/^  Persistence_backend_cohomology(const Boundary_matrix_type &boundaries, std::vector<Index> &per/;"	f	class:Gudhi::multiparameter::truc_interface::Persistence_backend_cohomology
Persistence_backend_cohomology	multipers/gudhi/mma_interface_coh.h	/^class Persistence_backend_cohomology {$/;"	c	namespace:Gudhi::multiparameter::truc_interface
Persistence_backend_h0	multipers/gudhi/mma_interface_h0.h	/^  Persistence_backend_h0() {}$/;"	f	class:Gudhi::multiparameter::truc_interface::Persistence_backend_h0
Persistence_backend_h0	multipers/gudhi/mma_interface_h0.h	/^  Persistence_backend_h0(Persistence_backend_h0 &&other) noexcept$/;"	f	class:Gudhi::multiparameter::truc_interface::Persistence_backend_h0
Persistence_backend_h0	multipers/gudhi/mma_interface_h0.h	/^  Persistence_backend_h0(const Boundary_matrix_type &boundaries,$/;"	f	class:Gudhi::multiparameter::truc_interface::Persistence_backend_h0
Persistence_backend_h0	multipers/gudhi/mma_interface_h0.h	/^  Persistence_backend_h0(const Persistence_backend_h0 &toCopy)$/;"	f	class:Gudhi::multiparameter::truc_interface::Persistence_backend_h0
Persistence_backend_h0	multipers/gudhi/mma_interface_h0.h	/^template <class Boundary_matrix_type> class Persistence_backend_h0 {$/;"	c	namespace:Gudhi::multiparameter::truc_interface
Persistence_backend_matrix	multipers/gudhi/mma_interface_matrix.h	/^  Persistence_backend_matrix() : permutation_(nullptr) {};$/;"	f	class:Gudhi::multiparameter::truc_interface::Persistence_backend_matrix
Persistence_backend_matrix	multipers/gudhi/mma_interface_matrix.h	/^  Persistence_backend_matrix(Persistence_backend_matrix &&other) noexcept$/;"	f	class:Gudhi::multiparameter::truc_interface::Persistence_backend_matrix
Persistence_backend_matrix	multipers/gudhi/mma_interface_matrix.h	/^  Persistence_backend_matrix(const Boundary_matrix_type &boundaries, std::vector<Index> &permuta/;"	f	class:Gudhi::multiparameter::truc_interface::Persistence_backend_matrix
Persistence_backend_matrix	multipers/gudhi/mma_interface_matrix.h	/^  Persistence_backend_matrix(const Persistence_backend_matrix &toCopy)$/;"	f	class:Gudhi::multiparameter::truc_interface::Persistence_backend_matrix
Persistence_backend_matrix	multipers/gudhi/mma_interface_matrix.h	/^class Persistence_backend_matrix {$/;"	c	namespace:Gudhi::multiparameter::truc_interface
Persistence_interval	multipers/gudhi/gudhi/persistence_interval.h	/^  Persistence_interval(Event_value birth = inf, Event_value death = inf, Dimension dim = -1)$/;"	f	struct:Gudhi::persistence_matrix::Persistence_interval
Persistence_interval	multipers/gudhi/gudhi/persistence_interval.h	/^struct Persistence_interval {$/;"	s	namespace:Gudhi::persistence_matrix
Persistent_cohomology	multipers/gudhi/gudhi/Persistent_cohomology.h	/^  explicit Persistent_cohomology(FilteredComplex& cpx, bool persistence_dim_max = false)$/;"	f	class:Gudhi::persistent_cohomology::Persistent_cohomology
Persistent_cohomology	multipers/gudhi/gudhi/Persistent_cohomology.h	/^class Persistent_cohomology {$/;"	c	namespace:Gudhi::persistent_cohomology
Persistent_cohomology	multipers/gudhi/mma_interface_coh.h	/^  using Persistent_cohomology = Gudhi::persistent_cohomology::Persistent_cohomology<MatrixComple/;"	t	class:Gudhi::multiparameter::truc_interface::Persistence_backend_cohomology	typeref:typename:Gudhi::persistent_cohomology::Persistent_cohomology<MatrixComplex,Field_Zp>
Persistent_cohomology_cell	multipers/gudhi/gudhi/Persistent_cohomology/Persistent_cohomology_column.h	/^  Persistent_cohomology_cell(SimplexKey key, ArithmeticElement x,$/;"	f	class:Gudhi::persistent_cohomology::Persistent_cohomology_cell
Persistent_cohomology_cell	multipers/gudhi/gudhi/Persistent_cohomology/Persistent_cohomology_column.h	/^class Persistent_cohomology_cell : public base_hook_cam_h,$/;"	c	namespace:Gudhi::persistent_cohomology
Persistent_cohomology_column	multipers/gudhi/gudhi/Persistent_cohomology/Persistent_cohomology_column.h	/^  explicit Persistent_cohomology_column(SimplexKey key)$/;"	f	class:Gudhi::persistent_cohomology::Persistent_cohomology_column
Persistent_cohomology_column	multipers/gudhi/gudhi/Persistent_cohomology/Persistent_cohomology_column.h	/^class Persistent_cohomology_column : public boost::intrusive::set_base_hook<$/;"	c	namespace:Gudhi::persistent_cohomology
Persistent_interval	multipers/gudhi/gudhi/Persistent_cohomology.h	/^  typedef std::tuple<Simplex_handle, Simplex_handle, Arith_element> Persistent_interval;$/;"	t	class:Gudhi::persistent_cohomology::Persistent_cohomology	typeref:typename:std::tuple<Simplex_handle,Simplex_handle,Arith_element>
Point	multipers/gudhi/gudhi/Multi_persistence/Box.h	/^  using Point = Gudhi::multi_filtration::One_critical_filtration<T>; \/**< Type of a point in \\/;"	t	class:Gudhi::multi_persistence::Box	typeref:typename:Gudhi::multi_filtration::One_critical_filtration<T>
Point	multipers/gudhi/gudhi/Multi_persistence/Line.h	/^  using Point = Gudhi::multi_filtration::One_critical_filtration<T>;$/;"	t	class:Gudhi::multi_persistence::Line	typeref:typename:Gudhi::multi_filtration::One_critical_filtration<T>
PointCloud2FilteredComplex	multipers/ml/point_clouds.py	/^class PointCloud2FilteredComplex(BaseEstimator, TransformerMixin):$/;"	c
PointCloud2SimplexTree	multipers/ml/one.py	/^class PointCloud2SimplexTree(BaseEstimator,TransformerMixin):$/;"	c
PointCloud2SimplexTree	multipers/ml/point_clouds.py	/^class PointCloud2SimplexTree(PointCloud2FilteredComplex):$/;"	c
Points_off_reader	multipers/gudhi/gudhi/Points_off_io.h	/^  Points_off_reader(const std::string& name_file)$/;"	f	class:Gudhi::Points_off_reader
Points_off_reader	multipers/gudhi/gudhi/Points_off_io.h	/^class Points_off_reader {$/;"	c	namespace:Gudhi
Points_off_visitor_reader	multipers/gudhi/gudhi/Points_off_io.h	/^class Points_off_visitor_reader {$/;"	c	namespace:Gudhi
Pool_entry_constructor	multipers/gudhi/gudhi/Persistence_matrix/allocators/entry_constructors.h	/^  Pool_entry_constructor() : entryPool_() {}$/;"	f	struct:Gudhi::persistence_matrix::Pool_entry_constructor
Pool_entry_constructor	multipers/gudhi/gudhi/Persistence_matrix/allocators/entry_constructors.h	/^  Pool_entry_constructor(Pool_entry_constructor&& col) : entryPool_(std::move(col.entryPool_)) {/;"	f	struct:Gudhi::persistence_matrix::Pool_entry_constructor
Pool_entry_constructor	multipers/gudhi/gudhi/Persistence_matrix/allocators/entry_constructors.h	/^  Pool_entry_constructor(const Pool_entry_constructor& col) : entryPool_(col.entryPool_) {}$/;"	f	struct:Gudhi::persistence_matrix::Pool_entry_constructor
Pool_entry_constructor	multipers/gudhi/gudhi/Persistence_matrix/allocators/entry_constructors.h	/^struct Pool_entry_constructor $/;"	s	namespace:Gudhi::persistence_matrix
Pos_index	multipers/gudhi/gudhi/Matrix.h	/^  using Pos_index = typename PersistenceMatrixOptions::Index;     \/**< Type of @ref PosIdx inde/;"	t	class:Gudhi::persistence_matrix::Matrix	typeref:typename:PersistenceMatrixOptions::Index
Pos_index	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^  using Pos_index = typename Master_matrix::Pos_index;                      \/**< @ref PosIdx in/;"	t	class:Gudhi::persistence_matrix::Chain_matrix	typeref:typename:Master_matrix::Pos_index
Pos_index	multipers/gudhi/gudhi/Persistence_matrix/Id_to_index_overlay.h	/^  using Pos_index = typename Master_matrix::Pos_index;                  \/**< @ref PosIdx index /;"	t	class:Gudhi::persistence_matrix::Id_to_index_overlay	typeref:typename:Master_matrix::Pos_index
Pos_index	multipers/gudhi/gudhi/Persistence_matrix/Position_to_index_overlay.h	/^  using Pos_index = typename Master_matrix::Pos_index;                      \/**< @ref PosIdx in/;"	t	class:Gudhi::persistence_matrix::Position_to_index_overlay	typeref:typename:Master_matrix::Pos_index
Pos_index	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^  using Pos_index = typename Master_matrix::Pos_index;                  \/**< @ref PosIdx index /;"	t	class:Gudhi::persistence_matrix::RU_matrix	typeref:typename:Master_matrix::Pos_index
Pos_index	multipers/gudhi/gudhi/Persistence_matrix/base_pairing.h	/^  using Pos_index = typename Master_matrix::Pos_index;$/;"	t	class:Gudhi::persistence_matrix::Base_pairing	typeref:typename:Master_matrix::Pos_index
Pos_index	multipers/gudhi/gudhi/Persistence_matrix/chain_pairing.h	/^  using Pos_index = typename Master_matrix::Pos_index;$/;"	t	class:Gudhi::persistence_matrix::Chain_pairing	typeref:typename:Master_matrix::Pos_index
Pos_index	multipers/gudhi/gudhi/Persistence_matrix/chain_vine_swap.h	/^  using Pos_index = typename Master_matrix::Pos_index;                \/**< @ref PosIdx index ty/;"	t	class:Gudhi::persistence_matrix::Chain_vine_swap	typeref:typename:Master_matrix::Pos_index
Pos_index	multipers/gudhi/gudhi/Persistence_matrix/chain_vine_swap.h	/^  using Pos_index = typename Master_matrix::Pos_index;  \/**< @ref PosIdx index type. *\/$/;"	t	class:Gudhi::persistence_matrix::Chain_barcode_swap	typeref:typename:Master_matrix::Pos_index
Pos_index	multipers/gudhi/gudhi/Persistence_matrix/ru_pairing.h	/^  using Pos_index = typename Master_matrix::Pos_index;$/;"	t	class:Gudhi::persistence_matrix::RU_pairing	typeref:typename:Master_matrix::Pos_index
Pos_index	multipers/gudhi/gudhi/Persistence_matrix/ru_vine_swap.h	/^  using Pos_index = typename Master_matrix::Pos_index;  \/**< @ref PosIdx index type. *\/$/;"	t	class:Gudhi::persistence_matrix::RU_vine_swap	typeref:typename:Master_matrix::Pos_index
Position_to_index_overlay	multipers/gudhi/gudhi/Persistence_matrix/Position_to_index_overlay.h	/^class Position_to_index_overlay $/;"	c	namespace:Gudhi::persistence_matrix
Position_to_index_overlay	multipers/gudhi/gudhi/Persistence_matrix/Position_to_index_overlay.h	/^inline Position_to_index_overlay<Underlying_matrix, Master_matrix>::Position_to_index_overlay($/;"	f	class:Gudhi::persistence_matrix::Position_to_index_overlay
PresentationStructure	multipers/gudhi/Persistence_slices_interface.h	/^using PresentationStructure = Gudhi::multiparameter::truc_interface::PresentationStructure;$/;"	t	typeref:typename:Gudhi::multiparameter::truc_interface::PresentationStructure
PresentationStructure	multipers/gudhi/truc.h	/^  PresentationStructure() {}$/;"	f	class:Gudhi::multiparameter::truc_interface::PresentationStructure
PresentationStructure	multipers/gudhi/truc.h	/^  PresentationStructure(const PresentationStructure &other)$/;"	f	class:Gudhi::multiparameter::truc_interface::PresentationStructure
PresentationStructure	multipers/gudhi/truc.h	/^  PresentationStructure(const std::vector<std::vector<index_type>> &generators,$/;"	f	class:Gudhi::multiparameter::truc_interface::PresentationStructure
PresentationStructure	multipers/gudhi/truc.h	/^class PresentationStructure {$/;"	c	namespace:Gudhi::multiparameter::truc_interface
Prime	multipers/gudhi/gudhi/Persistent_cohomology/Field_Zp.h	/^  int Prime;$/;"	m	class:Gudhi::persistent_cohomology::Field_Zp	typeref:typename:int
Proximity_graph	multipers/gudhi/gudhi/graph_simplicial_complex.h	/^using Proximity_graph = typename boost::adjacency_list < boost::vecS, boost::vecS, boost::direct/;"	t	namespace:Gudhi
Python_filtration_type	multipers/gudhi/Simplex_tree_multi_interface.h	/^  using Python_filtration_type =$/;"	t	class:Gudhi::multiparameter::python_interface::Simplex_tree_multi_interface	typeref:typename:std::vector<typename SimplexTreeOptions::value_type>
Quick introduction to Multiparameter Persistence	docs/index.rst	/^Quick introduction to Multiparameter Persistence$/;"	s	chapter:`multipers` : Multiparameter Persistence for Machine Learning
Quick start	README.md	/^## Quick start$/;"	s	chapter:multipers : Multiparameter Persistence for Machine Learning
Quickstart	docs/index.rst	/^Quickstart $/;"	s	chapter:`multipers` : Multiparameter Persistence for Machine Learning
RA_opt	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix.h	/^  using RA_opt = typename Master_matrix::Matrix_row_access_option;$/;"	t	class:Gudhi::persistence_matrix::Base_matrix	typeref:typename:Master_matrix::Matrix_row_access_option
RA_opt	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix_with_column_compression.h	/^  using RA_opt = typename Master_matrix::Matrix_row_access_option;$/;"	t	class:Gudhi::persistence_matrix::Base_matrix_with_column_compression	typeref:typename:Master_matrix::Matrix_row_access_option
RA_opt	multipers/gudhi/gudhi/Persistence_matrix/Boundary_matrix.h	/^  using RA_opt = typename Master_matrix::Matrix_row_access_option;$/;"	t	class:Gudhi::persistence_matrix::Boundary_matrix	typeref:typename:Master_matrix::Matrix_row_access_option
RA_opt	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^  using RA_opt = typename Master_matrix::Matrix_row_access_option;$/;"	t	class:Gudhi::persistence_matrix::Chain_matrix	typeref:typename:Master_matrix::Matrix_row_access_option
RA_opt	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^  using RA_opt = typename Master_matrix::Row_access_option;$/;"	t	class:Gudhi::persistence_matrix::Intrusive_list_column	typeref:typename:Master_matrix::Row_access_option
RA_opt	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^  using RA_opt = typename Master_matrix::Row_access_option;$/;"	t	class:Gudhi::persistence_matrix::Intrusive_set_column	typeref:typename:Master_matrix::Row_access_option
RA_opt	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^  using RA_opt = typename Master_matrix::Row_access_option;$/;"	t	class:Gudhi::persistence_matrix::List_column	typeref:typename:Master_matrix::Row_access_option
RA_opt	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^  using RA_opt = typename Master_matrix::Row_access_option;$/;"	t	class:Gudhi::persistence_matrix::Naive_vector_column	typeref:typename:Master_matrix::Row_access_option
RA_opt	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^  using RA_opt = typename Master_matrix::Row_access_option;$/;"	t	class:Gudhi::persistence_matrix::Set_column	typeref:typename:Master_matrix::Row_access_option
RA_opt	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^  using RA_opt = typename Master_matrix::Row_access_option;$/;"	t	class:Gudhi::persistence_matrix::Small_vector_column	typeref:typename:Master_matrix::Row_access_option
RA_opt	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^  using RA_opt = typename Master_matrix::Row_access_option;$/;"	t	class:Gudhi::persistence_matrix::Unordered_set_column	typeref:typename:Master_matrix::Row_access_option
RA_opt	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^  using RA_opt = typename Master_matrix::Row_access_option;$/;"	t	class:Gudhi::persistence_matrix::Vector_column	typeref:typename:Master_matrix::Row_access_option
RDs2STs	compute.py	/^	RDs2STs = mmp.PointCloud2SimplexTree($/;"	v
READER_UTILS_H_	multipers/gudhi/gudhi/reader_utils.h	/^#define READER_UTILS_H_$/;"	d
RUM	multipers/gudhi/gudhi/Persistence_matrix/ru_vine_swap.h	/^  using RUM = typename std::conditional<Master_matrix::Option_list::has_column_pairings &&$/;"	t	class:Gudhi::persistence_matrix::RU_vine_swap	typeref:typename:std::conditional<Master_matrix::Option_list::has_column_pairings && Master_matrix::Option_list::has_removable_columns,Dummy_pos_mapper,Cell_position_to_ID_mapper<ID_index,Pos_index>>::type
RUP	multipers/gudhi/gudhi/Persistence_matrix/ru_vine_swap.h	/^  using RUP = typename std::conditional<Master_matrix::Option_list::has_column_pairings, $/;"	t	class:Gudhi::persistence_matrix::RU_vine_swap	typeref:typename:std::conditional<Master_matrix::Option_list::has_column_pairings,RU_pairing<Master_matrix>,Dummy_ru_vine_pairing>::type
RU_MATRIX_H	multipers/multiparameter_module_approximation/ru_matrix.h	/^#define RU_MATRIX_H$/;"	d
RU_matrix	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^class RU_matrix : public Master_matrix::RU_pairing_option,$/;"	c	namespace:Gudhi::persistence_matrix
RU_matrix	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^inline RU_matrix<Master_matrix>::RU_matrix(Column_settings* colSettings)$/;"	f	class:Gudhi::persistence_matrix::RU_matrix
RU_matrix	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^inline RU_matrix<Master_matrix>::RU_matrix(RU_matrix&& other) noexcept$/;"	f	class:Gudhi::persistence_matrix::RU_matrix
RU_matrix	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^inline RU_matrix<Master_matrix>::RU_matrix(const RU_matrix& matrixToCopy, Column_settings* colSe/;"	f	class:Gudhi::persistence_matrix::RU_matrix
RU_matrix	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^inline RU_matrix<Master_matrix>::RU_matrix(const std::vector<Boundary_range>& orderedBoundaries,$/;"	f	class:Gudhi::persistence_matrix::RU_matrix
RU_matrix	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^inline RU_matrix<Master_matrix>::RU_matrix(unsigned int numberOfColumns, Column_settings* colSet/;"	f	class:Gudhi::persistence_matrix::RU_matrix
RU_matrix	multipers/multiparameter_module_approximation/ru_matrix.h	/^inline RU_matrix<Column_type>::RU_matrix($/;"	f	class:Gudhi::multiparameter::mma::RU_matrix
RU_matrix	multipers/multiparameter_module_approximation/ru_matrix.h	/^inline RU_matrix<Column_type>::RU_matrix(RU_matrix &matrixToCopy)$/;"	f	class:Gudhi::multiparameter::mma::RU_matrix
RU_matrix	multipers/multiparameter_module_approximation/ru_matrix.h	/^inline RU_matrix<Column_type>::RU_matrix(boundary_matrix &orderedBoundaries)$/;"	f	class:Gudhi::multiparameter::mma::RU_matrix
RU_matrix	multipers/multiparameter_module_approximation/ru_matrix.h	/^inline RU_matrix<Column_type>::RU_matrix(int numberOfColumns)$/;"	f	class:Gudhi::multiparameter::mma::RU_matrix
RU_matrix	multipers/multiparameter_module_approximation/ru_matrix.h	/^template <class Column_type> class RU_matrix {$/;"	c	namespace:Gudhi::multiparameter::mma
RU_matrix	multipers/multiparameter_module_approximation/ru_matrix.h	/^template <class Column_type> inline RU_matrix<Column_type>::RU_matrix() {}$/;"	f	class:Gudhi::multiparameter::mma::RU_matrix
RU_pairing	multipers/gudhi/gudhi/Persistence_matrix/ru_pairing.h	/^  RU_pairing() : PIDM() {}$/;"	f	class:Gudhi::persistence_matrix::RU_pairing
RU_pairing	multipers/gudhi/gudhi/Persistence_matrix/ru_pairing.h	/^class RU_pairing : public std::conditional<$/;"	c	namespace:Gudhi::persistence_matrix
RU_pairing_option	multipers/gudhi/gudhi/Matrix.h	/^  using RU_pairing_option =$/;"	t	class:Gudhi::persistence_matrix::Matrix	typeref:typename:std::conditional<PersistenceMatrixOptions::has_column_pairings &&!PersistenceMatrixOptions::has_vine_update,RU_pairing<Matrix<PersistenceMatrixOptions>>,Dummy_ru_pairing>::type
RU_representative_cycles	multipers/gudhi/gudhi/Persistence_matrix/ru_rep_cycles.h	/^class RU_representative_cycles $/;"	c	namespace:Gudhi::persistence_matrix
RU_representative_cycles	multipers/gudhi/gudhi/Persistence_matrix/ru_rep_cycles.h	/^inline RU_representative_cycles<Master_matrix>::RU_representative_cycles($/;"	f	class:Gudhi::persistence_matrix::RU_representative_cycles
RU_representative_cycles	multipers/gudhi/gudhi/Persistence_matrix/ru_rep_cycles.h	/^inline RU_representative_cycles<Master_matrix>::RU_representative_cycles()$/;"	f	class:Gudhi::persistence_matrix::RU_representative_cycles
RU_representative_cycles_option	multipers/gudhi/gudhi/Matrix.h	/^  using RU_representative_cycles_option =$/;"	t	class:Gudhi::persistence_matrix::Matrix	typeref:typename:std::conditional<PersistenceMatrixOptions::can_retrieve_representative_cycles,RU_representative_cycles<Matrix<PersistenceMatrixOptions>>,Dummy_ru_representative_cycles>::type
RU_vine_swap	multipers/gudhi/gudhi/Persistence_matrix/ru_vine_swap.h	/^class RU_vine_swap : public std::conditional<Master_matrix::Option_list::has_column_pairings, $/;"	c	namespace:Gudhi::persistence_matrix
RU_vine_swap	multipers/gudhi/gudhi/Persistence_matrix/ru_vine_swap.h	/^inline RU_vine_swap<Master_matrix>::RU_vine_swap() : RUP(), RUM()$/;"	f	class:Gudhi::persistence_matrix::RU_vine_swap
RU_vine_swap	multipers/gudhi/gudhi/Persistence_matrix/ru_vine_swap.h	/^inline RU_vine_swap<Master_matrix>::RU_vine_swap(RU_vine_swap<Master_matrix>&& other) noexcept$/;"	f	class:Gudhi::persistence_matrix::RU_vine_swap
RU_vine_swap	multipers/gudhi/gudhi/Persistence_matrix/ru_vine_swap.h	/^inline RU_vine_swap<Master_matrix>::RU_vine_swap(const RU_vine_swap& matrixToCopy)$/;"	f	class:Gudhi::persistence_matrix::RU_vine_swap
RU_vine_swap_option	multipers/gudhi/gudhi/Matrix.h	/^  using RU_vine_swap_option =$/;"	t	class:Gudhi::persistence_matrix::Matrix	typeref:typename:std::conditional<PersistenceMatrixOptions::has_vine_update,RU_vine_swap<Matrix<PersistenceMatrixOptions>>,Dummy_ru_vine_swap>::type
R_matrix	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^  using R_matrix = typename Master_matrix::Master_boundary_matrix;$/;"	t	class:Gudhi::persistence_matrix::RU_matrix	typeref:typename:Master_matrix::Master_boundary_matrix
RectanglePatch	multipers/plots.py	/^    from matplotlib.patches import Rectangle as RectanglePatch$/;"	Y	function:_rectangle	file:	nameref:unknown:Rectangle
Rel	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  enum class Rel { EQUAL, DOMINATES, IS_DOMINATED, NONE };$/;"	g	class:Gudhi::multi_filtration::Multi_critical_filtration
Rep_opt	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^  using Rep_opt = typename Master_matrix::Chain_representative_cycles_option;$/;"	t	class:Gudhi::persistence_matrix::Chain_matrix	typeref:typename:Master_matrix::Chain_representative_cycles_option
Rep_opt	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^  using Rep_opt = typename Master_matrix::RU_representative_cycles_option;$/;"	t	class:Gudhi::persistence_matrix::RU_matrix	typeref:typename:Master_matrix::RU_representative_cycles_option
Representative_cycles_options	multipers/gudhi/gudhi/persistence_matrix_options.h	/^struct Representative_cycles_options : Default_options<col_type, true> $/;"	s	namespace:Gudhi::persistence_matrix
Returned_column	multipers/gudhi/gudhi/Matrix.h	/^  using Returned_column =$/;"	t	class:Gudhi::persistence_matrix::Matrix	typeref:typename:std::conditional<!isNonBasic && PersistenceMatrixOptions::has_column_compression,const Column,Column>::type
Returned_row	multipers/gudhi/gudhi/Matrix.h	/^  using Returned_row =$/;"	t	class:Gudhi::persistence_matrix::Matrix	typeref:typename:std::conditional<!isNonBasic && PersistenceMatrixOptions::has_column_compression,const Row,Row>::type
Row	multipers/gudhi/gudhi/Matrix.h	/^  using Row =$/;"	t	class:Gudhi::persistence_matrix::Matrix
Row	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix.h	/^  using Row = typename Master_matrix::Row;                              \/**< Row type,$/;"	t	class:Gudhi::persistence_matrix::Base_matrix	typeref:typename:Master_matrix::Row
Row	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix_with_column_compression.h	/^  using Row = typename Master_matrix::Row;                              \/**< Row type,$/;"	t	class:Gudhi::persistence_matrix::Base_matrix_with_column_compression	typeref:typename:Master_matrix::Row
Row	multipers/gudhi/gudhi/Persistence_matrix/Boundary_matrix.h	/^  using Row = typename Master_matrix::Row;                              \/**< Row type,$/;"	t	class:Gudhi::persistence_matrix::Boundary_matrix	typeref:typename:Master_matrix::Row
Row	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^  using Row = typename Master_matrix::Row;                                  \/**< Row type, only/;"	t	class:Gudhi::persistence_matrix::Chain_matrix	typeref:typename:Master_matrix::Row
Row	multipers/gudhi/gudhi/Persistence_matrix/Id_to_index_overlay.h	/^  using Row = typename Master_matrix::Row;                              \/**< Row type,$/;"	t	class:Gudhi::persistence_matrix::Id_to_index_overlay	typeref:typename:Master_matrix::Row
Row	multipers/gudhi/gudhi/Persistence_matrix/Position_to_index_overlay.h	/^  using Row = typename Master_matrix::Row;                                  \/**< Row type, only$/;"	t	class:Gudhi::persistence_matrix::Position_to_index_overlay	typeref:typename:Master_matrix::Row
Row	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^  using Row = typename Master_matrix::Row;                              \/**< Row type,$/;"	t	class:Gudhi::persistence_matrix::RU_matrix	typeref:typename:Master_matrix::Row
RowEntryComp	multipers/gudhi/gudhi/Matrix.h	/^  struct RowEntryComp {$/;"	s	class:Gudhi::persistence_matrix::Matrix
Row_access	multipers/gudhi/gudhi/Persistence_matrix/columns/row_access.h	/^class Row_access $/;"	c	namespace:Gudhi::persistence_matrix
Row_access	multipers/gudhi/gudhi/Persistence_matrix/columns/row_access.h	/^inline Row_access<Master_matrix>::Row_access() : columnIndex_(-1), rows_(nullptr) $/;"	f	class:Gudhi::persistence_matrix::Row_access
Row_access	multipers/gudhi/gudhi/Persistence_matrix/columns/row_access.h	/^inline Row_access<Master_matrix>::Row_access(Index columnIndex, Row_container* rows)$/;"	f	class:Gudhi::persistence_matrix::Row_access
Row_access	multipers/gudhi/gudhi/Persistence_matrix/columns/row_access.h	/^inline Row_access<Master_matrix>::Row_access(Row_access&& other) noexcept$/;"	f	class:Gudhi::persistence_matrix::Row_access
Row_access_option	multipers/gudhi/gudhi/Matrix.h	/^  using Row_access_option =$/;"	t	class:Gudhi::persistence_matrix::Matrix	typeref:typename:std::conditional<PersistenceMatrixOptions::has_row_access,Row_access<Matrix<PersistenceMatrixOptions>>,Dummy_row_access>::type
Row_container	multipers/gudhi/gudhi/Matrix.h	/^  using Row_container =$/;"	t	class:Gudhi::persistence_matrix::Matrix	typeref:typename:std::conditional<PersistenceMatrixOptions::has_removable_rows,std::map<ID_index,Row>,std::vector<Row>>::type
Row_container	multipers/gudhi/gudhi/Persistence_matrix/columns/row_access.h	/^  using Row_container = typename Master_matrix::Row_container;  \/**< Type of the row container./;"	t	class:Gudhi::persistence_matrix::Row_access	typeref:typename:Master_matrix::Row_container
Row_dictionary	multipers/gudhi/gudhi/Persistence_matrix/base_swap.h	/^  using Row_dictionary = typename Master_matrix::template Dictionary<ID_index>;$/;"	t	class:Gudhi::persistence_matrix::Base_swap	typeref:typename:Master_matrix::template Dictionary<ID_index>
Row_hook	multipers/gudhi/gudhi/Matrix.h	/^  using Row_hook = typename std::conditional<PersistenceMatrixOptions::has_row_access &&$/;"	t	class:Gudhi::persistence_matrix::Matrix	typeref:typename:std::conditional<PersistenceMatrixOptions::has_row_access && PersistenceMatrixOptions::has_intrusive_rows,Base_hook_matrix_row,Dummy_row_hook>::type
SET	multipers/gudhi/Persistence_slices_interface.h	/^enum Column_types_strs { LIST, SET, HEAP, VECTOR, NAIVE_VECTOR, UNORDERED_SET, INTRUSIVE_LIST, I/;"	e	enum:Column_types_strs
SET	multipers/gudhi/gudhi/persistence_matrix_options.h	/^  SET,            \/**< @ref Set_column "": Underlying container is a std::set<@ref Entry*>. *\/$/;"	e	enum:Gudhi::persistence_matrix::Column_types
SETCOLUMN_H	multipers/multiparameter_module_approximation/set_column.h	/^#define SETCOLUMN_H$/;"	d
SIMPLEX_TREE_HOOKS_SIMPLEX_BASE_H_	multipers/gudhi/gudhi/Simplex_tree/hooks_simplex_base.h	/^#define SIMPLEX_TREE_HOOKS_SIMPLEX_BASE_H_$/;"	d
SIMPLEX_TREE_H_	multipers/gudhi/gudhi/Simplex_tree.h	/^#define SIMPLEX_TREE_H_$/;"	d
SIMPLEX_TREE_INDEXING_TAG_H_	multipers/gudhi/gudhi/Simplex_tree/indexing_tag.h	/^#define SIMPLEX_TREE_INDEXING_TAG_H_$/;"	d
SIMPLEX_TREE_MULTI_H_	multipers/gudhi/gudhi/Simplex_tree_multi.h	/^#define SIMPLEX_TREE_MULTI_H_$/;"	d
SIMPLEX_TREE_SERIALIZATION_UTILS_H_	multipers/gudhi/gudhi/Simplex_tree/serialization_utils.h	/^#define SIMPLEX_TREE_SERIALIZATION_UTILS_H_$/;"	d
SIMPLEX_TREE_SIMPLEX_TREE_ITERATORS_H_	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^#define SIMPLEX_TREE_SIMPLEX_TREE_ITERATORS_H_$/;"	d
SIMPLEX_TREE_SIMPLEX_TREE_NODE_EXPLICIT_STORAGE_H_	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_node_explicit_storage.h	/^#define SIMPLEX_TREE_SIMPLEX_TREE_NODE_EXPLICIT_STORAGE_H_$/;"	d
SIMPLEX_TREE_SIMPLEX_TREE_OPTIONS_H_	multipers/gudhi/gudhi/Simplex_tree/simplex_tree_options.h	/^#define SIMPLEX_TREE_SIMPLEX_TREE_OPTIONS_H_$/;"	d
SIMPLEX_TREE_SIMPLEX_TREE_SIBLINGS_H_	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_siblings.h	/^#define SIMPLEX_TREE_SIMPLEX_TREE_SIBLINGS_H_$/;"	d
SIMPLEX_TREE_SIMPLEX_TREE_STAR_SIMPLEX_ITERATORS_H_	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_star_simplex_iterators.h	/^#define SIMPLEX_TREE_SIMPLEX_TREE_STAR_SIMPLEX_ITERATORS_H_$/;"	d
SIMPLE_OBJECT_POOL_H_	multipers/gudhi/gudhi/Simple_object_pool.h	/^#define SIMPLE_OBJECT_POOL_H_$/;"	d
SMALL_VECTOR	multipers/gudhi/gudhi/persistence_matrix_options.h	/^  SMALL_VECTOR$/;"	e	enum:Gudhi::persistence_matrix::Column_types
SMD	compute.py	/^		SMD = SMDs$/;"	v
SMD	compute.py	/^	SMD = SMDs$/;"	v
SMD	compute.py	/^	SMD=None$/;"	v
SMD	compute.py	/^	SMD=SMDs$/;"	v
SMD1	compute.py	/^SMD1 = mms.SignedMeasure2SlicedWassersteinDistance(num_directions=args.num_directions, n_jobs=ar/;"	v
SMDs	compute.py	/^SMDs = mms.SignedMeasures2SlicedWassersteinDistances($/;"	v
SMF	compute.py	/^SMF = mms.SignedMeasureFormatter(verbose=False) $/;"	v
SMF_parameters	compute.py	/^SMF_parameters = {$/;"	v
SMM2CV	compute.py	/^	SMM2CV = mms.SignedMeasure2Convolution(flatten=True, n_jobs=1)$/;"	v
SMM2CV_parameters	compute.py	/^	SMM2CV_parameters = {$/;"	v
SM_parameters	compute.py	/^SM_parameters = {$/;"	v
SOURCEDIR	docs/Makefile	/^SOURCEDIR     = .$/;"	m
SPHINXBUILD	docs/Makefile	/^SPHINXBUILD   ?= sphinx-build$/;"	m
SPHINXOPTS	docs/Makefile	/^SPHINXOPTS    ?=$/;"	m
ST	multipers/gudhi/gudhi/Simplex_tree.h	/^  typedef Simplex_tree<T...> ST;$/;"	t	function:Gudhi::operator >>	typeref:typename:Simplex_tree<T...>
ST2MMA	compute.py	/^ST2MMA = mma.SimplexTree2MMA($/;"	v
ST2MMA_parameters	compute.py	/^ST2MMA_parameters={$/;"	v
STM2SM	compute.py	/^STM2SM = mms.SimplexTree2SignedMeasure($/;"	v
STMs2SMs	compute.py	/^STMs2SMs = mms.SimplexTrees2SignedMeasures($/;"	v
STRUCTURE_HIGHER_DIM_BARCODE_H_INCLUDED	multipers/multiparameter_module_approximation/structure_higher_dim_barcode.h	/^#define STRUCTURE_HIGHER_DIM_BARCODE_H_INCLUDED$/;"	d
SVMP	compute.py	/^SVMP = SVC(kernel = "precomputed")$/;"	v
SVMP_parameters	compute.py	/^SVMP_parameters = {$/;"	v
Set_column	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^class Set_column : public Master_matrix::Row_access_option,$/;"	c	namespace:Gudhi::persistence_matrix
Set_column	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^inline Set_column<Master_matrix>::Set_column(Column_settings* colSettings)$/;"	f	class:Gudhi::persistence_matrix::Set_column
Set_column	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^inline Set_column<Master_matrix>::Set_column(Index columnIndex,$/;"	f	class:Gudhi::persistence_matrix::Set_column
Set_column	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^inline Set_column<Master_matrix>::Set_column(Set_column&& column) noexcept$/;"	f	class:Gudhi::persistence_matrix::Set_column
Set_column	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^inline Set_column<Master_matrix>::Set_column(const Container& nonZeroRowIndices, Column_settings/;"	f	class:Gudhi::persistence_matrix::Set_column
Set_column	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^inline Set_column<Master_matrix>::Set_column(const Container& nonZeroRowIndices,$/;"	f	class:Gudhi::persistence_matrix::Set_column
Set_column	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^inline Set_column<Master_matrix>::Set_column(const Set_column& column, Column_settings* colSetti/;"	f	class:Gudhi::persistence_matrix::Set_column
Set_column	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^inline Set_column<Master_matrix>::Set_column(const Set_column& column,$/;"	f	class:Gudhi::persistence_matrix::Set_column
Set_column	multipers/multiparameter_module_approximation/set_column.h	/^class Set_column$/;"	c	namespace:Gudhi::multiparameter::mma
Set_column	multipers/multiparameter_module_approximation/set_column.h	/^inline Set_column::Set_column() : dim_(0)$/;"	f	class:Gudhi::multiparameter::mma::Set_column
Set_column	multipers/multiparameter_module_approximation/set_column.h	/^inline Set_column::Set_column(Set_column &&column) noexcept$/;"	f	class:Gudhi::multiparameter::mma::Set_column
Set_column	multipers/multiparameter_module_approximation/set_column.h	/^inline Set_column::Set_column(Set_column &column)$/;"	f	class:Gudhi::multiparameter::mma::Set_column
Set_column	multipers/multiparameter_module_approximation/set_column.h	/^inline Set_column::Set_column(boundary_type &boundary)$/;"	f	class:Gudhi::multiparameter::mma::Set_column
Shared_Zp_field_element	multipers/gudhi/gudhi/Fields/Zp_field_shared.h	/^  Shared_Zp_field_element() : element_(0) {}$/;"	f	class:Gudhi::persistence_fields::Shared_Zp_field_element
Shared_Zp_field_element	multipers/gudhi/gudhi/Fields/Zp_field_shared.h	/^  Shared_Zp_field_element(Integer_type element) : element_(_get_value(element)) {}$/;"	f	class:Gudhi::persistence_fields::Shared_Zp_field_element
Shared_Zp_field_element	multipers/gudhi/gudhi/Fields/Zp_field_shared.h	/^  Shared_Zp_field_element(Shared_Zp_field_element&& toMove) noexcept : element_(std::exchange(to/;"	f	class:Gudhi::persistence_fields::Shared_Zp_field_element
Shared_Zp_field_element	multipers/gudhi/gudhi/Fields/Zp_field_shared.h	/^  Shared_Zp_field_element(const Shared_Zp_field_element& toCopy) : element_(toCopy.element_) {}$/;"	f	class:Gudhi::persistence_fields::Shared_Zp_field_element
Shared_Zp_field_element	multipers/gudhi/gudhi/Fields/Zp_field_shared.h	/^class Shared_Zp_field_element {$/;"	c	namespace:Gudhi::persistence_fields
Shared_multi_field_element	multipers/gudhi/gudhi/Fields/Multi_field_shared.h	/^class Shared_multi_field_element $/;"	c	namespace:Gudhi::persistence_fields
Shared_multi_field_element	multipers/gudhi/gudhi/Fields/Multi_field_shared.h	/^inline Shared_multi_field_element::Shared_multi_field_element() : element_(0) {}$/;"	f	class:Gudhi::persistence_fields::Shared_multi_field_element
Shared_multi_field_element	multipers/gudhi/gudhi/Fields/Multi_field_shared.h	/^inline Shared_multi_field_element::Shared_multi_field_element(Element element) : element_(elemen/;"	f	class:Gudhi::persistence_fields::Shared_multi_field_element
Shared_multi_field_element	multipers/gudhi/gudhi/Fields/Multi_field_shared.h	/^inline Shared_multi_field_element::Shared_multi_field_element(Shared_multi_field_element&& toMov/;"	f	class:Gudhi::persistence_fields::Shared_multi_field_element
Shared_multi_field_element	multipers/gudhi/gudhi/Fields/Multi_field_shared.h	/^inline Shared_multi_field_element::Shared_multi_field_element(const Shared_multi_field_element& /;"	f	class:Gudhi::persistence_fields::Shared_multi_field_element
Shared_multi_field_element_with_small_characteristics	multipers/gudhi/gudhi/Fields/Multi_field_small_shared.h	/^  Shared_multi_field_element_with_small_characteristics($/;"	f	class:Gudhi::persistence_fields::Shared_multi_field_element_with_small_characteristics
Shared_multi_field_element_with_small_characteristics	multipers/gudhi/gudhi/Fields/Multi_field_small_shared.h	/^  Shared_multi_field_element_with_small_characteristics() : element_(0) {}$/;"	f	class:Gudhi::persistence_fields::Shared_multi_field_element_with_small_characteristics
Shared_multi_field_element_with_small_characteristics	multipers/gudhi/gudhi/Fields/Multi_field_small_shared.h	/^  Shared_multi_field_element_with_small_characteristics(Integer_type element) : element_(_get_va/;"	f	class:Gudhi::persistence_fields::Shared_multi_field_element_with_small_characteristics
Shared_multi_field_element_with_small_characteristics	multipers/gudhi/gudhi/Fields/Multi_field_small_shared.h	/^class Shared_multi_field_element_with_small_characteristics {$/;"	c	namespace:Gudhi::persistence_fields
Siblings	multipers/gudhi/Simplex_tree_interface.h	/^  using Siblings = typename Base::Siblings;$/;"	t	class:Gudhi::Simplex_tree_interface	typeref:typename:Base::Siblings
Siblings	multipers/gudhi/gudhi/Simplex_tree.h	/^  typedef Simplex_tree_siblings<Simplex_tree, Dictionary> Siblings;$/;"	t	class:Gudhi::Simplex_tree	typeref:typename:Simplex_tree_siblings<Simplex_tree,Dictionary>
Siblings	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  typedef typename SimplexTree::Siblings Siblings;$/;"	t	class:Gudhi::Simplex_tree_complex_simplex_iterator	typeref:typename:SimplexTree::Siblings
Siblings	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  typedef typename SimplexTree::Siblings Siblings;$/;"	t	class:Gudhi::Simplex_tree_simplex_vertex_iterator	typeref:typename:SimplexTree::Siblings
Siblings	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  typedef typename SimplexTree::Siblings Siblings;$/;"	t	class:Gudhi::Simplex_tree_skeleton_simplex_iterator	typeref:typename:SimplexTree::Siblings
Siblings	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  using Siblings = typename SimplexTree::Siblings;$/;"	t	class:Gudhi::Simplex_tree_boundary_opposite_vertex_simplex_iterator	typeref:typename:SimplexTree::Siblings
Siblings	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  using Siblings = typename SimplexTree::Siblings;$/;"	t	class:Gudhi::Simplex_tree_boundary_simplex_iterator	typeref:typename:SimplexTree::Siblings
Siblings	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_node_explicit_storage.h	/^  typedef typename SimplexTree::Siblings Siblings;$/;"	t	struct:Gudhi::Simplex_tree_node_explicit_storage	typeref:typename:SimplexTree::Siblings
Siblings	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_star_simplex_iterators.h	/^  using Siblings = typename SimplexTree::Siblings;$/;"	t	class:Gudhi::Simplex_tree_optimized_cofaces_rooted_subtrees_simplex_iterator	typeref:typename:SimplexTree::Siblings
Siblings	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_star_simplex_iterators.h	/^  using Siblings = typename SimplexTree::Siblings;$/;"	t	class:Gudhi::Simplex_tree_optimized_star_simplex_iterator	typeref:typename:SimplexTree::Siblings
SignedMeasure2Convolution	multipers/ml/signed_measures.py	/^class SignedMeasure2Convolution(BaseEstimator, TransformerMixin):$/;"	c
SignedMeasure2SlicedWassersteinDistance	multipers/ml/signed_measures.py	/^class SignedMeasure2SlicedWassersteinDistance(BaseEstimator, TransformerMixin):$/;"	c
SignedMeasureDistancesTransformer	compute.py	/^		SignedMeasureDistancesTransformer = Pipeline([$/;"	v
SignedMeasureFormatter	multipers/ml/signed_measures.py	/^class SignedMeasureFormatter(BaseEstimator, TransformerMixin):$/;"	c
SignedMeasureTransformer	compute.py	/^		SignedMeasureTransformer = Pipeline([('st', ToSimplexTreeMulti), ("sm",ToSignedMeasure)])$/;"	v
SignedMeasures2SlicedWassersteinDistances	multipers/ml/signed_measures.py	/^class SignedMeasures2SlicedWassersteinDistances(BaseEstimator, TransformerMixin):$/;"	c
Simple_object_pool	multipers/gudhi/gudhi/Simple_object_pool.h	/^  Simple_object_pool(U&&...u) : Base(sizeof (T), std::forward<U>(u)...) { }$/;"	f	class:Gudhi::Simple_object_pool
Simple_object_pool	multipers/gudhi/gudhi/Simple_object_pool.h	/^class Simple_object_pool : protected boost::pool<boost::default_user_allocator_malloc_free> {$/;"	c	namespace:Gudhi
Simplex	multipers/gudhi/Simplex_tree_interface.h	/^  using Simplex = std::vector<Vertex_handle>;$/;"	t	class:Gudhi::Simplex_tree_interface	typeref:typename:std::vector<Vertex_handle>
Simplex	multipers/gudhi/Simplex_tree_multi_interface.h	/^  using Simplex = std::vector<Vertex_handle>;$/;"	t	class:Gudhi::multiparameter::python_interface::Simplex_tree_multi_interface	typeref:typename:std::vector<Vertex_handle>
SimplexTree2Dgm	multipers/ml/one.py	/^class SimplexTree2Dgm(BaseEstimator, TransformerMixin):$/;"	c
SimplexTree2Histogram	multipers/ml/one.py	/^class SimplexTree2Histogram(BaseEstimator, TransformerMixin):$/;"	c
SimplexTree2MMA	multipers/ml/mma.py	/^class SimplexTree2MMA(FilteredComplex2MMA):$/;"	c
SimplexTree2RectangleDecomposition	multipers/ml/signed_measures.py	/^class SimplexTree2RectangleDecomposition(BaseEstimator, TransformerMixin):$/;"	c
SimplexTree2SignedMeasure	multipers/ml/signed_measures.py	/^class SimplexTree2SignedMeasure(FilteredComplex2SignedMeasure):$/;"	c
SimplexTreeEdgeCollapser	multipers/ml/tools.py	/^class SimplexTreeEdgeCollapser(BaseEstimator, TransformerMixin):$/;"	c
SimplexTreeMultiOptions	multipers/gudhi/Persistence_slices_interface.h	/^using SimplexTreeMultiOptions = Gudhi::multi_persistence::Simplex_tree_options_multidimensional_/;"	t	typeref:typename:Gudhi::multi_persistence::Simplex_tree_options_multidimensional_filtration<Filtration>
SimplexTreeOptions	multipers/gudhi/Simplex_tree_multi_interface.h	/^  using SimplexTreeOptions =$/;"	t	class:Gudhi::multiparameter::python_interface::Simplex_tree_multi_interface	typeref:typename:Gudhi::multi_persistence::Simplex_tree_options_multidimensional_filtration<Filtration>
Simplex_and_filtration	multipers/gudhi/Simplex_tree_interface.h	/^  using Simplex_and_filtration = std::pair<Simplex, Filtration_value>;$/;"	t	class:Gudhi::Simplex_tree_interface	typeref:typename:std::pair<Simplex,Filtration_value>
Simplex_and_filtration	multipers/gudhi/Simplex_tree_multi_interface.h	/^  using Simplex_and_filtration =$/;"	t	class:Gudhi::multiparameter::python_interface::Simplex_tree_multi_interface	typeref:typename:std::pair<Simplex,Filtration_value * >
Simplex_data	multipers/gudhi/gudhi/Simplex_tree.h	/^  typedef typename Get_simplex_data_type<Options>::type Simplex_data;$/;"	t	class:Gudhi::Simplex_tree	typeref:typename:Get_simplex_data_type<Options>::type
Simplex_data	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_node_explicit_storage.h	/^  typedef typename SimplexTree::Simplex_data Simplex_data;$/;"	t	struct:Gudhi::Simplex_tree_node_explicit_storage	typeref:typename:SimplexTree::Simplex_data
Simplex_handle	multipers/gudhi/Simplex_tree_interface.h	/^  using Simplex_handle = typename Base::Simplex_handle;$/;"	t	class:Gudhi::Simplex_tree_interface	typeref:typename:Base::Simplex_handle
Simplex_handle	multipers/gudhi/Simplex_tree_multi_interface.h	/^  using Simplex_handle = typename Base::Simplex_handle;$/;"	t	class:Gudhi::multiparameter::python_interface::Simplex_tree_multi_interface	typeref:typename:Base::Simplex_handle
Simplex_handle	multipers/gudhi/cubical_to_boundary.h	/^  using Simplex_handle = Bitmap_cubical_complex::Simplex_handle;$/;"	t	function:_to_boundary	typeref:typename:Bitmap_cubical_complex::Simplex_handle
Simplex_handle	multipers/gudhi/gudhi/Bitmap_cubical_complex.h	/^  typedef Simplex_key Simplex_handle;$/;"	t	class:Gudhi::cubical_complex::Bitmap_cubical_complex	typeref:typename:Simplex_key
Simplex_handle	multipers/gudhi/gudhi/Persistent_cohomology.h	/^  typedef typename FilteredComplex::Simplex_handle Simplex_handle;$/;"	t	class:Gudhi::persistent_cohomology::Persistent_cohomology	typeref:typename:FilteredComplex::Simplex_handle
Simplex_handle	multipers/gudhi/gudhi/Simplex_tree.h	/^  typedef typename Dictionary::iterator Simplex_handle;$/;"	t	class:Gudhi::Simplex_tree	typeref:typename:Dictionary::iterator
Simplex_handle	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  typedef typename SimplexTree::Simplex_handle Simplex_handle;$/;"	t	class:Gudhi::Simplex_tree_complex_simplex_iterator	typeref:typename:SimplexTree::Simplex_handle
Simplex_handle	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  typedef typename SimplexTree::Simplex_handle Simplex_handle;$/;"	t	class:Gudhi::Simplex_tree_simplex_vertex_iterator	typeref:typename:SimplexTree::Simplex_handle
Simplex_handle	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  typedef typename SimplexTree::Simplex_handle Simplex_handle;$/;"	t	class:Gudhi::Simplex_tree_skeleton_simplex_iterator	typeref:typename:SimplexTree::Simplex_handle
Simplex_handle	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  using Simplex_handle = typename SimplexTree::Simplex_handle;$/;"	t	class:Gudhi::Simplex_tree_boundary_opposite_vertex_simplex_iterator	typeref:typename:SimplexTree::Simplex_handle
Simplex_handle	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  using Simplex_handle = typename SimplexTree::Simplex_handle;$/;"	t	class:Gudhi::Simplex_tree_boundary_simplex_iterator	typeref:typename:SimplexTree::Simplex_handle
Simplex_handle	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_star_simplex_iterators.h	/^  using Simplex_handle = typename SimplexTree::Simplex_handle;$/;"	t	class:Gudhi::Simplex_tree_optimized_cofaces_rooted_subtrees_simplex_iterator	typeref:typename:SimplexTree::Simplex_handle
Simplex_handle	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_star_simplex_iterators.h	/^  using Simplex_handle = typename SimplexTree::Simplex_handle;$/;"	t	class:Gudhi::Simplex_tree_optimized_star_simplex_iterator	typeref:typename:SimplexTree::Simplex_handle
Simplex_handle	multipers/gudhi/mma_interface_coh.h	/^  using Simplex_handle = Simplex_key;$/;"	t	class:Gudhi::multiparameter::truc_interface::Boundary_matrix_as_filtered_complex_for_coh	typeref:typename:Simplex_key
Simplex_key	multipers/gudhi/Simplex_tree_interface.h	/^  typedef std::uint32_t Simplex_key;$/;"	t	struct:Gudhi::Simplex_tree_options_for_python	typeref:typename:std::uint32_t
Simplex_key	multipers/gudhi/gudhi/Bitmap_cubical_complex.h	/^  typedef std::size_t Simplex_key;$/;"	t	class:Gudhi::cubical_complex::Bitmap_cubical_complex	typeref:typename:std::size_t
Simplex_key	multipers/gudhi/gudhi/Persistent_cohomology.h	/^  typedef typename FilteredComplex::Simplex_key Simplex_key;$/;"	t	class:Gudhi::persistent_cohomology::Persistent_cohomology	typeref:typename:FilteredComplex::Simplex_key
Simplex_key	multipers/gudhi/gudhi/Simplex_tree.h	/^  typedef typename Options::Simplex_key Simplex_key;$/;"	t	class:Gudhi::Simplex_tree	typeref:typename:Options::Simplex_key
Simplex_key	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_node_explicit_storage.h	/^  typedef typename SimplexTree::Simplex_key Simplex_key;$/;"	t	struct:Gudhi::Simplex_tree_node_explicit_storage	typeref:typename:SimplexTree::Simplex_key
Simplex_key	multipers/gudhi/gudhi/Simplex_tree/simplex_tree_options.h	/^  typedef std::uint32_t Simplex_key;$/;"	t	struct:Gudhi::Simplex_tree_options_default	typeref:typename:std::uint32_t
Simplex_key	multipers/gudhi/gudhi/Simplex_tree/simplex_tree_options.h	/^  typedef std::uint32_t Simplex_key;$/;"	t	struct:Gudhi::Simplex_tree_options_fast_persistence	typeref:typename:std::uint32_t
Simplex_key	multipers/gudhi/gudhi/Simplex_tree/simplex_tree_options.h	/^  typedef std::uint32_t Simplex_key;$/;"	t	struct:Gudhi::Simplex_tree_options_full_featured	typeref:typename:std::uint32_t
Simplex_key	multipers/gudhi/gudhi/Simplex_tree/simplex_tree_options.h	/^  typedef std::uint32_t Simplex_key;$/;"	t	struct:Gudhi::Simplex_tree_options_minimal	typeref:typename:std::uint32_t
Simplex_key	multipers/gudhi/gudhi/Simplex_tree_multi.h	/^  typedef std::uint32_t Simplex_key;$/;"	t	struct:Gudhi::multi_persistence::Simplex_tree_options_multidimensional_filtration	typeref:typename:std::uint32_t
Simplex_key	multipers/gudhi/mma_interface_coh.h	/^  using Simplex_key = std::uint32_t;$/;"	t	class:Gudhi::multiparameter::truc_interface::Boundary_matrix_as_filtered_complex_for_coh	typeref:typename:std::uint32_t
Simplex_key	multipers/multi_parameter_rank_invariant/persistence_slices.h	/^  typedef std::uint32_t Simplex_key;$/;"	t	struct:Gudhi::multiparameter::Simplex_tree_float	typeref:typename:std::uint32_t
Simplex_tree	multipers/gudhi/gudhi/Simplex_tree.h	/^  Simplex_tree() : null_vertex_(-1), root_(nullptr, null_vertex_), filtration_vect_(), dimension/;"	f	class:Gudhi::Simplex_tree
Simplex_tree	multipers/gudhi/gudhi/Simplex_tree.h	/^  Simplex_tree(Simplex_tree&& complex_source) : number_of_parameters_(std::move(complex_source.n/;"	f	class:Gudhi::Simplex_tree
Simplex_tree	multipers/gudhi/gudhi/Simplex_tree.h	/^  Simplex_tree(const Simplex_tree& complex_source) {$/;"	f	class:Gudhi::Simplex_tree
Simplex_tree	multipers/gudhi/gudhi/Simplex_tree.h	/^  Simplex_tree(const Simplex_tree<OtherSimplexTreeOptions>& complex_source, F&& translate_filtra/;"	f	class:Gudhi::Simplex_tree
Simplex_tree	multipers/gudhi/gudhi/Simplex_tree.h	/^class Simplex_tree {$/;"	c	namespace:Gudhi
Simplex_tree_boundary_opposite_vertex_simplex_iterator	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  Simplex_tree_boundary_opposite_vertex_simplex_iterator()$/;"	f	class:Gudhi::Simplex_tree_boundary_opposite_vertex_simplex_iterator
Simplex_tree_boundary_opposite_vertex_simplex_iterator	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  Simplex_tree_boundary_opposite_vertex_simplex_iterator(SimplexTree * st, SimplexHandle sh)$/;"	f	class:Gudhi::Simplex_tree_boundary_opposite_vertex_simplex_iterator
Simplex_tree_boundary_opposite_vertex_simplex_iterator	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  explicit Simplex_tree_boundary_opposite_vertex_simplex_iterator(SimplexTree * st)$/;"	f	class:Gudhi::Simplex_tree_boundary_opposite_vertex_simplex_iterator
Simplex_tree_boundary_opposite_vertex_simplex_iterator	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^class Simplex_tree_boundary_opposite_vertex_simplex_iterator : public boost::iterator_facade<$/;"	c	namespace:Gudhi
Simplex_tree_boundary_simplex_iterator	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  Simplex_tree_boundary_simplex_iterator()$/;"	f	class:Gudhi::Simplex_tree_boundary_simplex_iterator
Simplex_tree_boundary_simplex_iterator	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  Simplex_tree_boundary_simplex_iterator(SimplexTree * st, SimplexHandle sh)$/;"	f	class:Gudhi::Simplex_tree_boundary_simplex_iterator
Simplex_tree_boundary_simplex_iterator	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  explicit Simplex_tree_boundary_simplex_iterator(SimplexTree * st)$/;"	f	class:Gudhi::Simplex_tree_boundary_simplex_iterator
Simplex_tree_boundary_simplex_iterator	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^class Simplex_tree_boundary_simplex_iterator : public boost::iterator_facade<$/;"	c	namespace:Gudhi
Simplex_tree_complex_simplex_iterator	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  Simplex_tree_complex_simplex_iterator()$/;"	f	class:Gudhi::Simplex_tree_complex_simplex_iterator
Simplex_tree_complex_simplex_iterator	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  explicit Simplex_tree_complex_simplex_iterator(SimplexTree * st)$/;"	f	class:Gudhi::Simplex_tree_complex_simplex_iterator
Simplex_tree_complex_simplex_iterator	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^class Simplex_tree_complex_simplex_iterator : public boost::iterator_facade<$/;"	c	namespace:Gudhi
Simplex_tree_float	multipers/multi_parameter_rank_invariant/persistence_slices.h	/^struct Simplex_tree_float {  \/\/ smaller simplextrees$/;"	s	namespace:Gudhi::multiparameter
Simplex_tree_interface	multipers/gudhi/Simplex_tree_interface.h	/^class Simplex_tree_interface : public Simplex_tree<Simplex_tree_options_for_python> {$/;"	c	namespace:Gudhi
Simplex_tree_multi_boundary_iterator	multipers/gudhi/Simplex_tree_multi_interface.h	/^using Simplex_tree_multi_boundary_iterator = typename$/;"	t	namespace:Gudhi::multiparameter::python_interface	typeref:typename:Simplex_tree_multi_interface<Filtration>::Boundary_simplex_iterator
Simplex_tree_multi_interface	multipers/gudhi/Simplex_tree_multi_interface.h	/^class Simplex_tree_multi_interface$/;"	c	namespace:Gudhi::multiparameter::python_interface
Simplex_tree_multi_simplex_handle	multipers/gudhi/Simplex_tree_multi_interface.h	/^using Simplex_tree_multi_simplex_handle = typename$/;"	t	namespace:Gudhi::multiparameter::python_interface	typeref:typename:Simplex_tree_multi_interface<Filtration>::Simplex_handle
Simplex_tree_multi_simplices_iterator	multipers/gudhi/Simplex_tree_multi_interface.h	/^using Simplex_tree_multi_simplices_iterator = typename$/;"	t	namespace:Gudhi::multiparameter::python_interface	typeref:typename:Simplex_tree_multi_interface<Filtration>::Complex_simplex_iterator
Simplex_tree_multi_skeleton_iterator	multipers/gudhi/Simplex_tree_multi_interface.h	/^using Simplex_tree_multi_skeleton_iterator = typename$/;"	t	namespace:Gudhi::multiparameter::python_interface	typeref:typename:Simplex_tree_multi_interface<Filtration>::Skeleton_simplex_iterator
Simplex_tree_node_explicit_storage	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_node_explicit_storage.h	/^  Simplex_tree_node_explicit_storage(Siblings* sib = nullptr, const Filtration_value& filtration/;"	f	struct:Gudhi::Simplex_tree_node_explicit_storage
Simplex_tree_node_explicit_storage	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_node_explicit_storage.h	/^  Simplex_tree_node_explicit_storage(Siblings* sib, Filtration_value filtration, Simplex_key key/;"	f	struct:Gudhi::Simplex_tree_node_explicit_storage
Simplex_tree_node_explicit_storage	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_node_explicit_storage.h	/^struct GUDHI_EMPTY_BASE_CLASS_OPTIMIZATION Simplex_tree_node_explicit_storage$/;"	s	namespace:Gudhi
Simplex_tree_optimized_cofaces_rooted_subtrees_simplex_iterator	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_star_simplex_iterators.h	/^  Simplex_tree_optimized_cofaces_rooted_subtrees_simplex_iterator() : predicate_(), st_(nullptr)/;"	f	class:Gudhi::Simplex_tree_optimized_cofaces_rooted_subtrees_simplex_iterator
Simplex_tree_optimized_cofaces_rooted_subtrees_simplex_iterator	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_star_simplex_iterators.h	/^  Simplex_tree_optimized_cofaces_rooted_subtrees_simplex_iterator(SimplexTree* cpx,$/;"	f	class:Gudhi::Simplex_tree_optimized_cofaces_rooted_subtrees_simplex_iterator
Simplex_tree_optimized_cofaces_rooted_subtrees_simplex_iterator	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_star_simplex_iterators.h	/^class Simplex_tree_optimized_cofaces_rooted_subtrees_simplex_iterator$/;"	c	namespace:Gudhi
Simplex_tree_optimized_star_simplex_iterator	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_star_simplex_iterators.h	/^  Simplex_tree_optimized_star_simplex_iterator() : st_(nullptr) {}$/;"	f	class:Gudhi::Simplex_tree_optimized_star_simplex_iterator
Simplex_tree_optimized_star_simplex_iterator	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_star_simplex_iterators.h	/^  Simplex_tree_optimized_star_simplex_iterator(SimplexTree* cpx, Static_vertex_vector&& simp)$/;"	f	class:Gudhi::Simplex_tree_optimized_star_simplex_iterator
Simplex_tree_optimized_star_simplex_iterator	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_star_simplex_iterators.h	/^class Simplex_tree_optimized_star_simplex_iterator$/;"	c	namespace:Gudhi
Simplex_tree_options_default	multipers/gudhi/gudhi/Simplex_tree/simplex_tree_options.h	/^struct Simplex_tree_options_default {$/;"	s	namespace:Gudhi
Simplex_tree_options_fast_persistence	multipers/gudhi/gudhi/Simplex_tree/simplex_tree_options.h	/^struct Simplex_tree_options_fast_persistence {$/;"	s	namespace:Gudhi
Simplex_tree_options_for_python	multipers/gudhi/Simplex_tree_interface.h	/^struct Simplex_tree_options_for_python {$/;"	s	namespace:Gudhi
Simplex_tree_options_full_featured	multipers/gudhi/gudhi/Simplex_tree/simplex_tree_options.h	/^struct Simplex_tree_options_full_featured {$/;"	s	namespace:Gudhi
Simplex_tree_options_minimal	multipers/gudhi/gudhi/Simplex_tree/simplex_tree_options.h	/^struct Simplex_tree_options_minimal {$/;"	s	namespace:Gudhi
Simplex_tree_options_multidimensional_filtration	multipers/gudhi/gudhi/Simplex_tree_multi.h	/^struct Simplex_tree_options_multidimensional_filtration {$/;"	s	namespace:Gudhi::multi_persistence
Simplex_tree_siblings	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_siblings.h	/^  Simplex_tree_siblings()$/;"	f	class:Gudhi::Simplex_tree_siblings
Simplex_tree_siblings	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_siblings.h	/^  Simplex_tree_siblings(Simplex_tree_siblings * oncles, Vertex_handle parent)$/;"	f	class:Gudhi::Simplex_tree_siblings
Simplex_tree_siblings	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_siblings.h	/^  Simplex_tree_siblings(Simplex_tree_siblings * oncles, Vertex_handle parent, const RandomAccess/;"	f	class:Gudhi::Simplex_tree_siblings
Simplex_tree_siblings	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_siblings.h	/^class Simplex_tree_siblings {$/;"	c	namespace:Gudhi
Simplex_tree_simplex_vertex_iterator	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  Simplex_tree_simplex_vertex_iterator(SimplexTree const* st, Simplex_handle sh)$/;"	f	class:Gudhi::Simplex_tree_simplex_vertex_iterator
Simplex_tree_simplex_vertex_iterator	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  explicit Simplex_tree_simplex_vertex_iterator(SimplexTree const* st)$/;"	f	class:Gudhi::Simplex_tree_simplex_vertex_iterator
Simplex_tree_simplex_vertex_iterator	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^class Simplex_tree_simplex_vertex_iterator : public boost::iterator_facade<$/;"	c	namespace:Gudhi
Simplex_tree_skeleton_simplex_iterator	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  Simplex_tree_skeleton_simplex_iterator()$/;"	f	class:Gudhi::Simplex_tree_skeleton_simplex_iterator
Simplex_tree_skeleton_simplex_iterator	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  Simplex_tree_skeleton_simplex_iterator(SimplexTree * st, int dim_skel)$/;"	f	class:Gudhi::Simplex_tree_skeleton_simplex_iterator
Simplex_tree_skeleton_simplex_iterator	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^class Simplex_tree_skeleton_simplex_iterator : public boost::iterator_facade<$/;"	c	namespace:Gudhi
Simplex_tree_std	multipers/multi_parameter_rank_invariant/persistence_slices.h	/^using Simplex_tree_std = Simplex_tree<Simplex_tree_float>;$/;"	t	namespace:Gudhi::multiparameter	typeref:typename:Simplex_tree<Simplex_tree_float>
Simplex_vertex_iterator	multipers/gudhi/gudhi/Simplex_tree.h	/^  typedef Simplex_tree_simplex_vertex_iterator<Simplex_tree> Simplex_vertex_iterator;$/;"	t	class:Gudhi::Simplex_tree	typeref:typename:Simplex_tree_simplex_vertex_iterator<Simplex_tree>
Simplex_vertex_range	multipers/gudhi/gudhi/Simplex_tree.h	/^  typedef boost::iterator_range<Simplex_vertex_iterator> Simplex_vertex_range;$/;"	t	class:Gudhi::Simplex_tree	typeref:typename:boost::iterator_range<Simplex_vertex_iterator>
SimplicialNoVineMatrixTruc	multipers/gudhi/Persistence_slices_interface.h	/^using SimplicialNoVineMatrixTruc =$/;"	t	typeref:typename:Gudhi::multiparameter::truc_interface::Truc<MatrixBackendNoVine<col>,SimplicialStructure,Filtration_value>
SimplicialStructure	multipers/gudhi/Persistence_slices_interface.h	/^using SimplicialStructure = Gudhi::multiparameter::truc_interface::SimplicialStructure;$/;"	t	typeref:typename:Gudhi::multiparameter::truc_interface::SimplicialStructure
SimplicialStructure	multipers/gudhi/truc.h	/^  SimplicialStructure() {}$/;"	f	class:Gudhi::multiparameter::truc_interface::SimplicialStructure
SimplicialStructure	multipers/gudhi/truc.h	/^  SimplicialStructure(const std::vector<std::vector<index_type>> &boundaries,$/;"	f	class:Gudhi::multiparameter::truc_interface::SimplicialStructure
SimplicialStructure	multipers/gudhi/truc.h	/^class SimplicialStructure {$/;"	c	namespace:Gudhi::multiparameter::truc_interface
SimplicialVineGraphTruc	multipers/gudhi/Persistence_slices_interface.h	/^using SimplicialVineGraphTruc =$/;"	t	typeref:typename:Gudhi::multiparameter::truc_interface::Truc<GraphBackendVine,SimplicialStructure,Filtration_value>
SimplicialVineMatrixTruc	multipers/gudhi/Persistence_slices_interface.h	/^using SimplicialVineMatrixTruc =$/;"	t	typeref:typename:Gudhi::multiparameter::truc_interface::Truc<MatrixBackendVine<col>,SimplicialStructure,Filtration_value>
Skeleton_simplex_iterator	multipers/gudhi/Simplex_tree_interface.h	/^  using Skeleton_simplex_iterator = typename Base::Skeleton_simplex_iterator;$/;"	t	class:Gudhi::Simplex_tree_interface	typeref:typename:Base::Skeleton_simplex_iterator
Skeleton_simplex_iterator	multipers/gudhi/Simplex_tree_multi_interface.h	/^  using Skeleton_simplex_iterator = typename Base::Skeleton_simplex_iterator;$/;"	t	class:Gudhi::multiparameter::python_interface::Simplex_tree_multi_interface	typeref:typename:Base::Skeleton_simplex_iterator
Skeleton_simplex_iterator	multipers/gudhi/gudhi/Bitmap_cubical_complex.h	/^    Skeleton_simplex_iterator() : b(NULL), position(0), dimension(0) {}$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex::Skeleton_simplex_iterator
Skeleton_simplex_iterator	multipers/gudhi/gudhi/Bitmap_cubical_complex.h	/^    Skeleton_simplex_iterator(Bitmap_cubical_complex* b, std::size_t d) : b(b), dimension(d) {$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex::Skeleton_simplex_iterator
Skeleton_simplex_iterator	multipers/gudhi/gudhi/Bitmap_cubical_complex.h	/^  class Skeleton_simplex_iterator {$/;"	c	class:Gudhi::cubical_complex::Bitmap_cubical_complex
Skeleton_simplex_iterator	multipers/gudhi/gudhi/Simplex_tree.h	/^  typedef Simplex_tree_skeleton_simplex_iterator<Simplex_tree> Skeleton_simplex_iterator;$/;"	t	class:Gudhi::Simplex_tree	typeref:typename:Simplex_tree_skeleton_simplex_iterator<Simplex_tree>
Skeleton_simplex_range	multipers/gudhi/gudhi/Bitmap_cubical_complex.h	/^    Skeleton_simplex_range(Bitmap_cubical_complex<T>* b, unsigned dimension) : b(b), dimension(d/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex::Skeleton_simplex_range
Skeleton_simplex_range	multipers/gudhi/gudhi/Bitmap_cubical_complex.h	/^  class Skeleton_simplex_range {$/;"	c	class:Gudhi::cubical_complex::Bitmap_cubical_complex
Skeleton_simplex_range	multipers/gudhi/gudhi/Simplex_tree.h	/^  typedef boost::iterator_range<Skeleton_simplex_iterator> Skeleton_simplex_range;$/;"	t	class:Gudhi::Simplex_tree	typeref:typename:boost::iterator_range<Skeleton_simplex_iterator>
SlicedWassersteinDistance	multipers/ml/sliced_wasserstein.py	/^class SlicedWassersteinDistance(BaseEstimator, TransformerMixin):$/;"	c
Slicer	multipers/_slicer_meta.py	/^def Slicer($/;"	f	typeref:typename:mps.Slicer_type
Small_vector_column	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^class Small_vector_column : public Master_matrix::Row_access_option,$/;"	c	namespace:Gudhi::persistence_matrix
Small_vector_column	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^inline Small_vector_column<Master_matrix>::Small_vector_column(Column_settings* colSettings)$/;"	f	class:Gudhi::persistence_matrix::Small_vector_column
Small_vector_column	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^inline Small_vector_column<Master_matrix>::Small_vector_column(Index columnIndex,$/;"	f	class:Gudhi::persistence_matrix::Small_vector_column
Small_vector_column	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^inline Small_vector_column<Master_matrix>::Small_vector_column(Small_vector_column&& column) noe/;"	f	class:Gudhi::persistence_matrix::Small_vector_column
Small_vector_column	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^inline Small_vector_column<Master_matrix>::Small_vector_column(const Container& nonZeroRowIndice/;"	f	class:Gudhi::persistence_matrix::Small_vector_column
Small_vector_column	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^inline Small_vector_column<Master_matrix>::Small_vector_column(const Small_vector_column& column/;"	f	class:Gudhi::persistence_matrix::Small_vector_column
Static_vertex_vector	multipers/gudhi/gudhi/Simplex_tree.h	/^  using Static_vertex_vector = boost::container::static_vector<Vertex_handle, max_dimension()>;$/;"	t	class:Gudhi::Simplex_tree
Static_vertex_vector	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  using Static_vertex_vector = typename SimplexTree::Static_vertex_vector;$/;"	t	class:Gudhi::Simplex_tree_boundary_opposite_vertex_simplex_iterator	typeref:typename:SimplexTree::Static_vertex_vector
Static_vertex_vector	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  using Static_vertex_vector = typename SimplexTree::Static_vertex_vector;$/;"	t	class:Gudhi::Simplex_tree_boundary_simplex_iterator	typeref:typename:SimplexTree::Static_vertex_vector
Static_vertex_vector	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_star_simplex_iterators.h	/^  using Static_vertex_vector = typename SimplexTree::Static_vertex_vector;$/;"	t	class:Gudhi::Simplex_tree_optimized_cofaces_rooted_subtrees_simplex_iterator	typeref:typename:SimplexTree::Static_vertex_vector
Static_vertex_vector	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_star_simplex_iterators.h	/^  using Static_vertex_vector = typename SimplexTree::Static_vertex_vector;$/;"	t	class:Gudhi::Simplex_tree_optimized_star_simplex_iterator	typeref:typename:SimplexTree::Static_vertex_vector
StructureStuff	multipers/gudhi/Persistence_slices_interface.h	/^using StructureStuff = std::conditional_t<backend == BackendsEnum::Graph, SimplicialStructure, P/;"	t	typeref:typename:std::conditional_t<backend==BackendsEnum::Graph,SimplicialStructure,PresentationStructure>
SubsampleWrapper	multipers_old.py	/^class SubsampleWrapper(BaseEstimator, TransformerMixin):$/;"	c
Summand	multipers/multiparameter_module_approximation/approximation.h	/^class Summand {$/;"	c	namespace:Gudhi::multiparameter::mma
Summand	multipers/multiparameter_module_approximation/approximation.h	/^inline Summand<value_type>::Summand($/;"	f	class:Gudhi::multiparameter::mma::Summand
Summand	multipers/multiparameter_module_approximation/approximation.h	/^inline Summand<value_type>::Summand()$/;"	f	class:Gudhi::multiparameter::mma::Summand
Summand	multipers/multiparameter_module_approximation/approximation.h	/^inline Summand<value_type>::Summand(const typename Summand<value_type>::births_type &birth_corne/;"	f	class:Gudhi::multiparameter::mma::Summand
Swap_opt	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix.h	/^  using Swap_opt = typename Master_matrix::template Base_swap_option<Base_matrix<Master_matrix> /;"	t	class:Gudhi::persistence_matrix::Base_matrix	typeref:typename:Master_matrix::template Base_swap_option<Base_matrix<Master_matrix>>
Swap_opt	multipers/gudhi/gudhi/Persistence_matrix/Boundary_matrix.h	/^  using Swap_opt = typename Master_matrix::template Base_swap_option<Boundary_matrix<Master_matr/;"	t	class:Gudhi::persistence_matrix::Boundary_matrix	typeref:typename:Master_matrix::template Base_swap_option<Boundary_matrix<Master_matrix>>
Swap_opt	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^  using Swap_opt = typename Master_matrix::Chain_vine_swap_option;$/;"	t	class:Gudhi::persistence_matrix::Chain_matrix	typeref:typename:Master_matrix::Chain_vine_swap_option
Swap_opt	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^  using Swap_opt = typename Master_matrix::RU_vine_swap_option;$/;"	t	class:Gudhi::persistence_matrix::RU_matrix	typeref:typename:Master_matrix::RU_vine_swap_option
T_inf	multipers/gudhi/gudhi/One_critical_filtration.h	/^  constexpr static const T T_inf =$/;"	m	class:Gudhi::multi_filtration::One_critical_filtration	typeref:typename:const T
ThreadSafe	multipers/gudhi/truc.h	/^    using ThreadSafe = TrucThread;$/;"	t	class:Gudhi::multiparameter::truc_interface::Truc::TrucThread	typeref:typename:TrucThread
ThreadSafe	multipers/gudhi/truc.h	/^  using ThreadSafe = TrucThread;  \/\/ for outside$/;"	t	class:Gudhi::multiparameter::truc_interface::Truc	typeref:typename:TrucThread
ThreadSafe	multipers/multi_parameter_rank_invariant/hilbert_function.h	/^  using ThreadSafe = typename truc_interface::Truc<PersBackend, Structure, Filtration>::ThreadSa/;"	t	function:Gudhi::multiparameter::hilbert_function::get_hilbert_surface	typeref:typename:truc_interface::Truc<PersBackend,Structure,Filtration>::ThreadSafe
ThreadSafe	multipers/multi_parameter_rank_invariant/rank_invariant.h	/^  using ThreadSafe = typename truc_interface::Truc<PersBackend, Structure, MultiFiltration>::Thr/;"	t	function:Gudhi::multiparameter::rank_invariant::compute_2d_rank_invariant	typeref:typename:truc_interface::Truc<PersBackend,Structure,MultiFiltration>::ThreadSafe
Timer	multipers/multiparameter_module_approximation/debug.h	/^  Timer() : activated_(false) {}$/;"	f	class:Gudhi::multiparameter::mma::Debug::Timer
Timer	multipers/multiparameter_module_approximation/debug.h	/^  Timer(const std::string &string, bool verbose)$/;"	f	class:Gudhi::multiparameter::mma::Debug::Timer
Timer	multipers/multiparameter_module_approximation/debug.h	/^class Timer {$/;"	c	namespace:Gudhi::multiparameter::mma::Debug
Tmp_column	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^  using Tmp_column = typename std::conditional<Master_matrix::Option_list::is_z2,$/;"	t	class:Gudhi::persistence_matrix::Chain_matrix	typeref:typename:std::conditional<Master_matrix::Option_list::is_z2,std::set<ID_index>,std::map<ID_index,Field_element>>::type
ToSignedMeasure	compute.py	/^	ToSignedMeasure = None$/;"	v
ToSignedMeasure	compute.py	/^	ToSignedMeasure = STMs2SMs$/;"	v
ToSimplexTree	compute.py	/^	ToSimplexTree = mmo.Graph2SimplexTree(f=args.filtration)$/;"	v
ToSimplexTree	compute.py	/^	ToSimplexTree = mmo.PointCloud2SimplexTree(threshold=args.diagram_threshold)$/;"	v
ToSimplexTree	compute.py	/^	ToSimplexTree = mmo.TorchData2DijkstraSimplexTree(true_geodesic=true_geodesic, progress=True) #/;"	v
ToSimplexTreeMulti	compute.py	/^	ToSimplexTreeMulti = None # TODO ?$/;"	v
ToSimplexTreeMulti	compute.py	/^	ToSimplexTreeMulti = RDs2STs$/;"	v
ToSimplexTreeMulti	compute.py	/^	ToSimplexTreeMulti = mdg.Graph2SimplexTrees(filtrations=args.filtrations)$/;"	v
Top_dimensional_cells_iterator	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^    Top_dimensional_cells_iterator(Bitmap_cubical_complex_base* b) : counter(b->dimension()), b(/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base::Top_dimensional_cells_iterator
Top_dimensional_cells_iterator	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^  class Top_dimensional_cells_iterator {$/;"	c	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base
Top_dimensional_cells_range	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^    Top_dimensional_cells_range(Bitmap_cubical_complex_base* b) : b(b) {}$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base::Top_dimensional_cells_range
Top_dimensional_cells_range	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^  class Top_dimensional_cells_range {$/;"	c	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base
Torch2SimplexTree	multipers/data/pytorch2simplextree.py	/^class Torch2SimplexTree(BaseEstimator,TransformerMixin):$/;"	c
Truc	multipers/gudhi/truc.h	/^  Truc() {};$/;"	f	class:Gudhi::multiparameter::truc_interface::Truc
Truc	multipers/gudhi/truc.h	/^  Truc(SimplexTree *simplextree) {$/;"	f	class:Gudhi::multiparameter::truc_interface::Truc
Truc	multipers/gudhi/truc.h	/^  Truc(const Structure &structure, const std::vector<MultiFiltration> &generator_filtration_valu/;"	f	class:Gudhi::multiparameter::truc_interface::Truc
Truc	multipers/gudhi/truc.h	/^  Truc(const std::vector<std::vector<index_type>> &generator_maps,$/;"	f	class:Gudhi::multiparameter::truc_interface::Truc
Truc	multipers/gudhi/truc.h	/^class Truc {$/;"	c	namespace:Gudhi::multiparameter::truc_interface
TrucPythonInterface	multipers/gudhi/Persistence_slices_interface.h	/^using TrucPythonInterface = Gudhi::multiparameter::truc_interface::$/;"	t	typeref:typename:Gudhi::multiparameter::truc_interface::Truc<PersBackendOpts<backend,is_vine,col>,StructureStuff<backend>,filtration_options<is_kcritical,value_type>>
TrucThread	multipers/gudhi/truc.h	/^    inline TrucThread(const Truc &truc)$/;"	f	class:Gudhi::multiparameter::truc_interface::Truc::TrucThread
TrucThread	multipers/gudhi/truc.h	/^    inline TrucThread(const TrucThread &truc)$/;"	f	class:Gudhi::multiparameter::truc_interface::Truc::TrucThread
TrucThread	multipers/gudhi/truc.h	/^  class TrucThread {$/;"	c	class:Gudhi::multiparameter::truc_interface::Truc
UNORDEREDSETCOLUMN_H	multipers/multiparameter_module_approximation/unordered_set_column.h	/^#define UNORDEREDSETCOLUMN_H$/;"	d
UNORDERED_SET	multipers/gudhi/Persistence_slices_interface.h	/^enum Column_types_strs { LIST, SET, HEAP, VECTOR, NAIVE_VECTOR, UNORDERED_SET, INTRUSIVE_LIST, I/;"	e	enum:Column_types_strs
UNORDERED_SET	multipers/gudhi/gudhi/persistence_matrix_options.h	/^  UNORDERED_SET,  \/**< @ref Unordered_set_column "": Underlying container is a std::unordered_s/;"	e	enum:Gudhi::persistence_matrix::Column_types
UP	multipers/gudhi/gudhi/Simplex_tree.h	/^enum class Extended_simplex_type { UP, DOWN, EXTRA };$/;"	e	enum:Gudhi::Extended_simplex_type
UTILITIES_H	multipers/multiparameter_module_approximation/utilities.h	/^#define UTILITIES_H$/;"	d
U_matrix	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^  using U_matrix = typename Master_matrix::Master_base_matrix;$/;"	t	class:Gudhi::persistence_matrix::RU_matrix	typeref:typename:Master_matrix::Master_base_matrix
Underlying_matrix	multipers/gudhi/gudhi/Matrix.h	/^  using Underlying_matrix = $/;"	t	class:Gudhi::persistence_matrix::Matrix
Unordered_set_column	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^class Unordered_set_column : public Master_matrix::Row_access_option,$/;"	c	namespace:Gudhi::persistence_matrix
Unordered_set_column	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^inline Unordered_set_column<Master_matrix>::Unordered_set_column(Column_settings* colSettings)$/;"	f	class:Gudhi::persistence_matrix::Unordered_set_column
Unordered_set_column	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^inline Unordered_set_column<Master_matrix>::Unordered_set_column(Index columnIndex,$/;"	f	class:Gudhi::persistence_matrix::Unordered_set_column
Unordered_set_column	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^inline Unordered_set_column<Master_matrix>::Unordered_set_column(Unordered_set_column&& column) /;"	f	class:Gudhi::persistence_matrix::Unordered_set_column
Unordered_set_column	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^inline Unordered_set_column<Master_matrix>::Unordered_set_column(const Container& nonZeroRowIndi/;"	f	class:Gudhi::persistence_matrix::Unordered_set_column
Unordered_set_column	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^inline Unordered_set_column<Master_matrix>::Unordered_set_column(const Unordered_set_column& col/;"	f	class:Gudhi::persistence_matrix::Unordered_set_column
Unordered_set_column	multipers/multiparameter_module_approximation/unordered_set_column.h	/^class Unordered_set_column$/;"	c	namespace:Vineyard
Unordered_set_column	multipers/multiparameter_module_approximation/unordered_set_column.h	/^inline Unordered_set_column::Unordered_set_column()$/;"	f	class:Vineyard::Unordered_set_column
Unordered_set_column	multipers/multiparameter_module_approximation/unordered_set_column.h	/^inline Unordered_set_column::Unordered_set_column(Unordered_set_column &&column) noexcept$/;"	f	class:Vineyard::Unordered_set_column
Unordered_set_column	multipers/multiparameter_module_approximation/unordered_set_column.h	/^inline Unordered_set_column::Unordered_set_column(Unordered_set_column &column)$/;"	f	class:Vineyard::Unordered_set_column
Unordered_set_column	multipers/multiparameter_module_approximation/unordered_set_column.h	/^inline Unordered_set_column::Unordered_set_column(boundary_type &boundary)$/;"	f	class:Vineyard::Unordered_set_column
Uvect_	multipers/gudhi/gudhi/Persistent_cohomology/Multi_field.h	/^  std::vector<Element> Uvect_;$/;"	m	class:Gudhi::persistent_cohomology::Multi_field	typeref:typename:std::vector<Element>
VECTOR	multipers/gudhi/Persistence_slices_interface.h	/^enum Column_types_strs { LIST, SET, HEAP, VECTOR, NAIVE_VECTOR, UNORDERED_SET, INTRUSIVE_LIST, I/;"	e	enum:Column_types_strs
VECTOR	multipers/gudhi/gudhi/persistence_matrix_options.h	/^  VECTOR,         \/**< @ref Vector_column "": Underlying container is a std::vector<@ref Entry*/;"	e	enum:Gudhi::persistence_matrix::Column_types
VECTORCOLUMN_H	multipers/multiparameter_module_approximation/vector_column.h	/^#define VECTORCOLUMN_H$/;"	d
VECTOR_MATRIX_H	multipers/multiparameter_module_approximation/vector_matrix.h	/^#define VECTOR_MATRIX_H$/;"	d
VINEYARDS_H_INCLUDED	multipers/multiparameter_module_approximation/vineyards.h	/^#define VINEYARDS_H_INCLUDED$/;"	d
VINEYARDS_TRAJECTORIES_H_INCLUDED	multipers/multiparameter_module_approximation/vineyards_trajectories.h	/^#define VINEYARDS_TRAJECTORIES_H_INCLUDED$/;"	d
Vector_column	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^class Vector_column : public Master_matrix::Row_access_option,$/;"	c	namespace:Gudhi::persistence_matrix
Vector_column	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^inline Vector_column<Master_matrix>::Vector_column(Column_settings* colSettings)$/;"	f	class:Gudhi::persistence_matrix::Vector_column
Vector_column	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^inline Vector_column<Master_matrix>::Vector_column(Index columnIndex,$/;"	f	class:Gudhi::persistence_matrix::Vector_column
Vector_column	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^inline Vector_column<Master_matrix>::Vector_column(Vector_column&& column) noexcept$/;"	f	class:Gudhi::persistence_matrix::Vector_column
Vector_column	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^inline Vector_column<Master_matrix>::Vector_column(const Container& nonZeroRowIndices, Column_se/;"	f	class:Gudhi::persistence_matrix::Vector_column
Vector_column	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^inline Vector_column<Master_matrix>::Vector_column(const Container& nonZeroRowIndices,$/;"	f	class:Gudhi::persistence_matrix::Vector_column
Vector_column	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^inline Vector_column<Master_matrix>::Vector_column(const Vector_column& column, Column_settings*/;"	f	class:Gudhi::persistence_matrix::Vector_column
Vector_column	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^inline Vector_column<Master_matrix>::Vector_column(const Vector_column& column,$/;"	f	class:Gudhi::persistence_matrix::Vector_column
Vector_column	multipers/multiparameter_module_approximation/vector_column.h	/^class Vector_column$/;"	c	namespace:Vineyard
Vector_column	multipers/multiparameter_module_approximation/vector_column.h	/^inline Vector_column::Vector_column() : dim_(0)$/;"	f	class:Vineyard::Vector_column
Vector_column	multipers/multiparameter_module_approximation/vector_column.h	/^inline Vector_column::Vector_column(Vector_column &&column) noexcept$/;"	f	class:Vineyard::Vector_column
Vector_column	multipers/multiparameter_module_approximation/vector_column.h	/^inline Vector_column::Vector_column(Vector_column &column)$/;"	f	class:Vineyard::Vector_column
Vector_column	multipers/multiparameter_module_approximation/vector_column.h	/^inline Vector_column::Vector_column(boundary_type &boundary)$/;"	f	class:Vineyard::Vector_column
Vector_matrix	multipers/multiparameter_module_approximation/vector_matrix.h	/^class Vector_matrix$/;"	c	namespace:Gudhi::multiparameter::mma
Vector_matrix	multipers/multiparameter_module_approximation/vector_matrix.h	/^inline Vector_matrix<Column_type>::Vector_matrix($/;"	f	class:Gudhi::multiparameter::mma::Vector_matrix
Vector_matrix	multipers/multiparameter_module_approximation/vector_matrix.h	/^inline Vector_matrix<Column_type>::Vector_matrix() : maxDim_(0), rowSwapped_(false)$/;"	f	class:Gudhi::multiparameter::mma::Vector_matrix
Vector_matrix	multipers/multiparameter_module_approximation/vector_matrix.h	/^inline Vector_matrix<Column_type>::Vector_matrix(Vector_matrix<Column_type> &&other) noexcept$/;"	f	class:Gudhi::multiparameter::mma::Vector_matrix
Vector_matrix	multipers/multiparameter_module_approximation/vector_matrix.h	/^inline Vector_matrix<Column_type>::Vector_matrix(unsigned int numberOfColumns)$/;"	f	class:Gudhi::multiparameter::mma::Vector_matrix
Vertex	multipers/gudhi/gudhi/Flag_complex_edge_collapser.h	/^  using Vertex = std::decay_t<decltype(std::get<0>(*first_edge_itr))>;$/;"	t	function:Gudhi::collapse::flag_complex_collapse_edges
Vertex_handle	multipers/gudhi/Simplex_tree_interface.h	/^  typedef int Vertex_handle;$/;"	t	struct:Gudhi::Simplex_tree_options_for_python	typeref:typename:int
Vertex_handle	multipers/gudhi/Simplex_tree_interface.h	/^  using Vertex_handle = typename Base::Vertex_handle;$/;"	t	class:Gudhi::Simplex_tree_interface	typeref:typename:Base::Vertex_handle
Vertex_handle	multipers/gudhi/Simplex_tree_multi_interface.h	/^  using Vertex_handle = typename Base::Vertex_handle;$/;"	t	class:Gudhi::multiparameter::python_interface::Simplex_tree_multi_interface	typeref:typename:Base::Vertex_handle
Vertex_handle	multipers/gudhi/gudhi/Simplex_tree.h	/^  typedef typename Options::Vertex_handle Vertex_handle;$/;"	t	class:Gudhi::Simplex_tree	typeref:typename:Options::Vertex_handle
Vertex_handle	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  typedef typename SimplexTree::Vertex_handle Vertex_handle;$/;"	t	class:Gudhi::Simplex_tree_complex_simplex_iterator	typeref:typename:SimplexTree::Vertex_handle
Vertex_handle	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  typedef typename SimplexTree::Vertex_handle Vertex_handle;$/;"	t	class:Gudhi::Simplex_tree_simplex_vertex_iterator	typeref:typename:SimplexTree::Vertex_handle
Vertex_handle	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  typedef typename SimplexTree::Vertex_handle Vertex_handle;$/;"	t	class:Gudhi::Simplex_tree_skeleton_simplex_iterator	typeref:typename:SimplexTree::Vertex_handle
Vertex_handle	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  using Vertex_handle = typename SimplexTree::Vertex_handle;$/;"	t	class:Gudhi::Simplex_tree_boundary_opposite_vertex_simplex_iterator	typeref:typename:SimplexTree::Vertex_handle
Vertex_handle	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  using Vertex_handle = typename SimplexTree::Vertex_handle;$/;"	t	class:Gudhi::Simplex_tree_boundary_simplex_iterator	typeref:typename:SimplexTree::Vertex_handle
Vertex_handle	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_siblings.h	/^  typedef typename SimplexTree::Vertex_handle Vertex_handle;$/;"	t	class:Gudhi::Simplex_tree_siblings	typeref:typename:SimplexTree::Vertex_handle
Vertex_handle	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_star_simplex_iterators.h	/^  using Vertex_handle = typename SimplexTree::Vertex_handle;$/;"	t	class:Gudhi::Simplex_tree_optimized_cofaces_rooted_subtrees_simplex_iterator	typeref:typename:SimplexTree::Vertex_handle
Vertex_handle	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_star_simplex_iterators.h	/^  using Vertex_handle = typename SimplexTree::Vertex_handle;$/;"	t	class:Gudhi::Simplex_tree_optimized_star_simplex_iterator	typeref:typename:SimplexTree::Vertex_handle
Vertex_handle	multipers/gudhi/gudhi/Simplex_tree/simplex_tree_options.h	/^  typedef int Vertex_handle;$/;"	t	struct:Gudhi::Simplex_tree_options_default	typeref:typename:int
Vertex_handle	multipers/gudhi/gudhi/Simplex_tree/simplex_tree_options.h	/^  typedef int Vertex_handle;$/;"	t	struct:Gudhi::Simplex_tree_options_fast_persistence	typeref:typename:int
Vertex_handle	multipers/gudhi/gudhi/Simplex_tree/simplex_tree_options.h	/^  typedef int Vertex_handle;$/;"	t	struct:Gudhi::Simplex_tree_options_full_featured	typeref:typename:int
Vertex_handle	multipers/gudhi/gudhi/Simplex_tree/simplex_tree_options.h	/^  typedef int Vertex_handle;$/;"	t	struct:Gudhi::Simplex_tree_options_minimal	typeref:typename:int
Vertex_handle	multipers/gudhi/gudhi/Simplex_tree_multi.h	/^  typedef int Vertex_handle;$/;"	t	struct:Gudhi::multi_persistence::Simplex_tree_options_multidimensional_filtration	typeref:typename:int
Vertex_handle	multipers/gudhi/gudhi/graph_simplicial_complex.h	/^  using Vertex_handle = typename SimplicialComplexForProximityGraph::Vertex_handle;$/;"	t	function:Gudhi::compute_proximity_graph	typeref:typename:SimplicialComplexForProximityGraph::Vertex_handle
Vertex_handle	multipers/multi_parameter_rank_invariant/persistence_slices.h	/^  typedef std::int32_t Vertex_handle;$/;"	t	struct:Gudhi::multiparameter::Simplex_tree_float	typeref:typename:std::int32_t
Vertices_iterator	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^    Vertices_iterator(Bitmap_cubical_complex_base* b) : counter(b->dimension()), b(b) {}$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base::Vertices_iterator
Vertices_iterator	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^  class Vertices_iterator {$/;"	c	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base
Vertices_iterator	multipers/gudhi/gudhi/Bitmap_cubical_complex_periodic_boundary_conditions_base.h	/^    Vertices_iterator(Bitmap_cubical_complex_periodic_boundary_conditions_base* b) : counter(b->/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_periodic_boundary_conditions_base::Vertices_iterator
Vertices_iterator	multipers/gudhi/gudhi/Bitmap_cubical_complex_periodic_boundary_conditions_base.h	/^  class Vertices_iterator {$/;"	c	class:Gudhi::cubical_complex::Bitmap_cubical_complex_periodic_boundary_conditions_base
Vertices_range	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^    Vertices_range(Bitmap_cubical_complex_base* b) : b(b) {}$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base::Vertices_range
Vertices_range	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^  class Vertices_range {$/;"	c	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base
Vertices_range	multipers/gudhi/gudhi/Bitmap_cubical_complex_periodic_boundary_conditions_base.h	/^    Vertices_range(Bitmap_cubical_complex_periodic_boundary_conditions_base* b) : b(b) {}$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_periodic_boundary_conditions_base::Vertices_range
Vertices_range	multipers/gudhi/gudhi/Bitmap_cubical_complex_periodic_boundary_conditions_base.h	/^  class Vertices_range {$/;"	c	class:Gudhi::cubical_complex::Bitmap_cubical_complex_periodic_boundary_conditions_base
Vineyard	multipers/multiparameter_module_approximation/heap_column.h	/^namespace Vineyard {$/;"	n
Vineyard	multipers/multiparameter_module_approximation/list_column.h	/^namespace Vineyard {$/;"	n
Vineyard	multipers/multiparameter_module_approximation/list_column_2.h	/^namespace Vineyard {$/;"	n
Vineyard	multipers/multiparameter_module_approximation/unordered_set_column.h	/^namespace Vineyard {$/;"	n
Vineyard	multipers/multiparameter_module_approximation/vector_column.h	/^namespace Vineyard {$/;"	n
Vineyard_persistence	multipers/multiparameter_module_approximation/vineyards.h	/^class Vineyard_persistence$/;"	c	namespace:Gudhi::multiparameter::mma
Vineyard_persistence	multipers/multiparameter_module_approximation/vineyards.h	/^inline Vineyard_persistence<Vineyard_matrix_type>::Vineyard_persistence($/;"	f	class:Gudhi::multiparameter::mma::Vineyard_persistence
Vineyard_persistence	multipers/multiparameter_module_approximation/vineyards.h	/^inline Vineyard_persistence<Vineyard_matrix_type>::Vineyard_persistence()$/;"	f	class:Gudhi::multiparameter::mma::Vineyard_persistence
WassersteinDistance	multipers/ml/sliced_wasserstein.py	/^class WassersteinDistance(BaseEstimator, TransformerMixin):$/;"	c
X	compute.py	/^		X = ModuleTransformer.fit_transform(X)$/;"	v
X	compute.py	/^		X = SignedMeasureDistancesTransformer.fit_transform(X=X)$/;"	v
X	compute.py	/^		X = SignedMeasureTransformer.fit_transform(X=X)$/;"	v
X	compute.py	/^		X = compute_diagram_pipe.fit_transform(X)$/;"	v
X	compute.py	/^		X = mmo.DistanceMatrices2DistancesList().fit_transform(smds)$/;"	v
X	compute.py	/^		X = mmo.DistanceMatrices2DistancesList().fit_transform(swds)$/;"	v
X	compute.py	/^	X = xtrain + xtest$/;"	v
X	compute.py	/^	X,Y = get_orbit5k(num_data=args.num_samples, num_pts=args.num_pts)$/;"	v
X	compute.py	/^	X,Y = graphs.get(dataset = args.dataset, filtration=filtrations[0]) # Fills X and Y$/;"	v
X	compute.py	/^	X,Y = immuno_regions.get()$/;"	v
X	compute.py	/^	X,Y = shape3d.get(dataset = args.dataset, num_graph=args.num_samples, node_per_graph = args.num/;"	v
X	compute.py	/^	X=[X[i] for i in indices]$/;"	v
Y	compute.py	/^	X,Y = get_orbit5k(num_data=args.num_samples, num_pts=args.num_pts)$/;"	v
Y	compute.py	/^	X,Y = graphs.get(dataset = args.dataset, filtration=filtrations[0]) # Fills X and Y$/;"	v
Y	compute.py	/^	X,Y = immuno_regions.get()$/;"	v
Y	compute.py	/^	X,Y = shape3d.get(dataset = args.dataset, num_graph=args.num_samples, node_per_graph = args.num/;"	v
Y	compute.py	/^	Y = np.concatenate([ytrain, ytest])$/;"	v
Y	compute.py	/^	Y=[i%2 for i in indices]$/;"	v
Z2_field_element	multipers/gudhi/gudhi/Fields/Z2_field.h	/^class Z2_field_element$/;"	c	namespace:Gudhi::persistence_fields
Z2_field_element	multipers/gudhi/gudhi/Fields/Z2_field.h	/^inline Z2_field_element::Z2_field_element() : element_(false) {}$/;"	f	class:Gudhi::persistence_fields::Z2_field_element
Z2_field_element	multipers/gudhi/gudhi/Fields/Z2_field.h	/^inline Z2_field_element::Z2_field_element(Integer_type element) : element_(_get_value(element)) /;"	f	class:Gudhi::persistence_fields::Z2_field_element
Z2_field_element	multipers/gudhi/gudhi/Fields/Z2_field.h	/^inline Z2_field_element::Z2_field_element(Z2_field_element&& toMove) noexcept$/;"	f	class:Gudhi::persistence_fields::Z2_field_element
Z2_field_element	multipers/gudhi/gudhi/Fields/Z2_field.h	/^inline Z2_field_element::Z2_field_element(const Z2_field_element& toCopy) : element_(toCopy.elem/;"	f	class:Gudhi::persistence_fields::Z2_field_element
Z2_field_operators	multipers/gudhi/gudhi/Fields/Z2_field_operators.h	/^  Z2_field_operators(){};$/;"	f	class:Gudhi::persistence_fields::Z2_field_operators
Z2_field_operators	multipers/gudhi/gudhi/Fields/Z2_field_operators.h	/^class Z2_field_operators$/;"	c	namespace:Gudhi::persistence_fields
Zigzag_options	multipers/gudhi/gudhi/persistence_matrix_options.h	/^struct Zigzag_options : Default_options<column_type, true> $/;"	s	namespace:Gudhi::persistence_matrix
Zp_field_element	multipers/gudhi/gudhi/Fields/Zp_field.h	/^  Zp_field_element() : element_(0) { static_assert(_is_prime(), "Characteristic has to be a prim/;"	f	class:Gudhi::persistence_fields::Zp_field_element
Zp_field_element	multipers/gudhi/gudhi/Fields/Zp_field.h	/^  Zp_field_element(Integer_type element) : element_(_get_value(element)) {$/;"	f	class:Gudhi::persistence_fields::Zp_field_element
Zp_field_element	multipers/gudhi/gudhi/Fields/Zp_field.h	/^  Zp_field_element(Zp_field_element&& toMove) noexcept : element_(std::exchange(toMove.element_,/;"	f	class:Gudhi::persistence_fields::Zp_field_element
Zp_field_element	multipers/gudhi/gudhi/Fields/Zp_field.h	/^  Zp_field_element(const Zp_field_element& toCopy) : element_(toCopy.element_) {}$/;"	f	class:Gudhi::persistence_fields::Zp_field_element
Zp_field_element	multipers/gudhi/gudhi/Fields/Zp_field.h	/^class Zp_field_element {$/;"	c	namespace:Gudhi::persistence_fields
Zp_field_operators	multipers/gudhi/gudhi/Fields/Zp_field_operators.h	/^  Zp_field_operators(Characteristic characteristic = 0) : characteristic_(0) {$/;"	f	class:Gudhi::persistence_fields::Zp_field_operators
Zp_field_operators	multipers/gudhi/gudhi/Fields/Zp_field_operators.h	/^  Zp_field_operators(Zp_field_operators&& toMove) noexcept$/;"	f	class:Gudhi::persistence_fields::Zp_field_operators
Zp_field_operators	multipers/gudhi/gudhi/Fields/Zp_field_operators.h	/^  Zp_field_operators(const Zp_field_operators& toCopy)$/;"	f	class:Gudhi::persistence_fields::Zp_field_operators
Zp_field_operators	multipers/gudhi/gudhi/Fields/Zp_field_operators.h	/^class Zp_field_operators$/;"	c	namespace:Gudhi::persistence_fields
_FilteredComplexType	multipers/ml/mma.py	/^_FilteredComplexType = Union[$/;"	v
_Polygon	multipers/plots.py	/^        from shapely.geometry import Polygon as _Polygon$/;"	Y	function:plot2d_PyModule	file:	nameref:unknown:Polygon
_X	compute.py	/^	_X = deepcopy(X[:3])$/;"	v
_Y	compute.py	/^	_Y = [0,1,0] ## svm needs at least 2 classes$/;"	v
__add_vineyard_trajectory_to_module	multipers/multiparameter_module_approximation/approximation.h	/^inline void __add_vineyard_trajectory_to_module(Module<typename Filtration_value::value_type> &m/;"	f	namespace:Gudhi::multiparameter::mma	typeref:typename:void
__all__	multipers/__init__.py	/^__all__ = [$/;"	v
__anon00bfa84e0102	multipers/multi_parameter_rank_invariant/hilbert_function.h	/^  tbb::parallel_for(0, J, [&](index_type height) {$/;"	f	function:Gudhi::multiparameter::hilbert_function::compute_2d_hilbert_surface	file:
__anon00bfa84e0202	multipers/multi_parameter_rank_invariant/hilbert_function.h	/^  tbb::parallel_for(0, grid_shape[coordinate_to_iterate + 1], [&](index_type z) {$/;"	f	function:Gudhi::multiparameter::hilbert_function::_rec_get_hilbert_surface	file:
__anon00bfa84e0302	multipers/multi_parameter_rank_invariant/hilbert_function.h	/^  arena.execute([&] {$/;"	f	function:Gudhi::multiparameter::hilbert_function::get_hilbert_signed_measure	file:
__anon00bfa84e0402	multipers/multi_parameter_rank_invariant/hilbert_function.h	/^  arena.execute([&] {$/;"	f	function:Gudhi::multiparameter::hilbert_function::get_hilbert_surface_python	file:
__anon00bfa84e0502	multipers/multi_parameter_rank_invariant/hilbert_function.h	/^  tbb::parallel_for(0, J, [&](index_type height) {$/;"	f	function:Gudhi::multiparameter::hilbert_function::compute_2d_hilbert_surface	file:
__anon00bfa84e0602	multipers/multi_parameter_rank_invariant/hilbert_function.h	/^  tbb::parallel_for(0, grid_shape[coordinate_to_iterate + 1], [&](index_type z) {$/;"	f	function:Gudhi::multiparameter::hilbert_function::_rec_get_hilbert_surface	file:
__anon00bfa84e0702	multipers/multi_parameter_rank_invariant/hilbert_function.h	/^  arena.execute([&] {$/;"	f	function:Gudhi::multiparameter::hilbert_function::get_hilbert_surface_python	file:
__anon00bfa84e0802	multipers/multi_parameter_rank_invariant/hilbert_function.h	/^  arena.execute([&] {$/;"	f	function:Gudhi::multiparameter::hilbert_function::get_hilbert_signed_measure	file:
__anon0151fca70102	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^      Chain_opt([&] {$/;"	f	namespace:Gudhi::persistence_matrix	file:
__anon0151fca70202	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^      Chain_opt([&] {$/;"	f	namespace:Gudhi::persistence_matrix	file:
__anon0151fca70302	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^      Chain_opt([&] {$/;"	f	namespace:Gudhi::persistence_matrix	file:
__anon0151fca70402	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^      [&](const Entry& oldEntry, Entry* newEntry) {$/;"	f	function:Gudhi::persistence_matrix::Unordered_set_column::_add	file:
__anon0151fca70502	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^      [&](Entry* targetEntry, const Entry& sourceEntry) {$/;"	f	function:Gudhi::persistence_matrix::Unordered_set_column::_add	file:
__anon0151fca70602	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^      [&](const Entry& oldEntry, Entry* newEntry) {$/;"	f	function:Gudhi::persistence_matrix::Unordered_set_column::_multiply_source_and_add	file:
__anon0151fca70702	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^      [&](Entry* targetEntry, const Entry& sourceEntry) {$/;"	f	function:Gudhi::persistence_matrix::Unordered_set_column::_multiply_source_and_add	file:
__anon03620b000102	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^      Chain_opt([&] {$/;"	f	namespace:Gudhi::persistence_matrix	file:
__anon03620b000202	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^      Chain_opt([&] {$/;"	f	namespace:Gudhi::persistence_matrix	file:
__anon03620b000302	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^      Chain_opt([&] {$/;"	f	namespace:Gudhi::persistence_matrix	file:
__anon058077a60102	multipers/gudhi/gudhi/Persistence_matrix/ru_rep_cycles.h	/^  auto add_to = [](const std::vector<Index>& b, Cycle_borders_tmp& borders){$/;"	f	function:Gudhi::persistence_matrix::RU_representative_cycles::_get_initial_borders	file:
__anon058077a60202	multipers/gudhi/gudhi/Persistence_matrix/ru_rep_cycles.h	/^  auto add = [](const Master_matrix::Column& col, Cycle_unreduced_borders_tmp& b){$/;"	f	function:Gudhi::persistence_matrix::RU_representative_cycles::_get_dependent_border	file:
__anon0bbade2e0102	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^    std::sort(colToSwap.begin(), colToSwap.end(), [&](Index c1, Index c2) {$/;"	f	function:Gudhi::persistence_matrix::Chain_matrix::remove_maximal_cell	file:
__anon0bbade2e0202	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^  _add_to(col, [&]() { col += get_column(sourceColumnIndex); });$/;"	f	function:Gudhi::persistence_matrix::Chain_matrix::add_to	file:
__anon0bbade2e0302	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^  _add_to(col, [&]() { col.multiply_target_and_add(coefficient, get_column(sourceColumnIndex)); /;"	f	function:Gudhi::persistence_matrix::Chain_matrix::multiply_target_and_add_to	file:
__anon0bbade2e0402	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^  _add_to(col, [&]() { col.multiply_source_and_add(get_column(sourceColumnIndex), coefficient); /;"	f	function:Gudhi::persistence_matrix::Chain_matrix::multiply_source_and_add_to	file:
__anon0bbade2e0502	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^  auto get_last = [&column]() {$/;"	f	function:Gudhi::persistence_matrix::Chain_matrix::_reduce_boundary	file:
__anon1a8533c80102	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^      Chain_opt([&] {$/;"	f	namespace:Gudhi::persistence_matrix	file:
__anon1a8533c80202	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^      Chain_opt([&] {$/;"	f	namespace:Gudhi::persistence_matrix	file:
__anon1a8533c80302	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^      Chain_opt([&] {$/;"	f	namespace:Gudhi::persistence_matrix	file:
__anon1f9dcb960102	multipers/multi_parameter_rank_invariant/rank_invariant.h	/^  tbb::parallel_for(0, X, [&](index_type I) {$/;"	f	function:Gudhi::multiparameter::rank_invariant::compute_2d_rank_invariant	file:
__anon1f9dcb960202	multipers/multi_parameter_rank_invariant/rank_invariant.h	/^    tbb::parallel_for(0, Y, [&](index_type J) {$/;"	f	function:Gudhi::multiparameter::rank_invariant::compute_2d_rank_invariant::__anon1f9dcb960102	file:
__anon1f9dcb960302	multipers/multi_parameter_rank_invariant/rank_invariant.h	/^  arena.execute([&] {$/;"	f	function:Gudhi::multiparameter::rank_invariant::compute_rank_invariant_python	file:
__anon1f9dcb960402	multipers/multi_parameter_rank_invariant/rank_invariant.h	/^  tbb::parallel_for(0, X, [&](index_type I) {$/;"	f	function:Gudhi::multiparameter::rank_invariant::compute_2d_rank_invariant	file:
__anon1f9dcb960502	multipers/multi_parameter_rank_invariant/rank_invariant.h	/^    tbb::parallel_for(0, Y, [&](index_type J) {$/;"	f	function:Gudhi::multiparameter::rank_invariant::compute_2d_rank_invariant::__anon1f9dcb960402	file:
__anon1f9dcb960602	multipers/multi_parameter_rank_invariant/rank_invariant.h	/^  arena.execute([&] { compute_2d_rank_invariant(slicer, container, grid_shape, degrees, false, i/;"	f	function:Gudhi::multiparameter::rank_invariant::compute_rank_invariant_python	file:
__anon1f9dcb960702	multipers/multi_parameter_rank_invariant/rank_invariant.h	/^  arena.execute([&] { compute_2d_rank_invariant(slicer, container, grid_shape, degrees, flip_dea/;"	f	function:Gudhi::multiparameter::rank_invariant::compute_rank_signed_measure	file:
__anon2d31e3b80102	multipers/gudhi/gudhi/Flag_complex_edge_collapser.h	/^        auto cmp1=[](auto const&a, auto const&b){return a.first > b.first;};$/;"	f	function:Gudhi::collapse::Flag_complex_edge_collapser::process_edges	file:
__anon2d31e3b80202	multipers/gudhi/gudhi/Flag_complex_edge_collapser.h	/^        [](auto const&a, auto const&b){return std::get<2>(a)>std::get<2>(b);});$/;"	f	function:Gudhi::collapse::flag_complex_collapse_edges	file:
__anon2d31e3b80302	multipers/gudhi/gudhi/Flag_complex_edge_collapser.h	/^    std::sort(edges2.begin(), edges2.end(), [](auto const&a, auto const&b){return std::get<2>(a)/;"	f	function:Gudhi::collapse::flag_complex_collapse_edges	file:
__anon2d31e3b80402	multipers/gudhi/gudhi/Flag_complex_edge_collapser.h	/^  return flag_complex_collapse_edges(edges, [](auto const&d){return d;});$/;"	f	function:Gudhi::collapse::flag_complex_collapse_edges	file:
__anon37a8855b0102	multipers/gudhi/gudhi/Persistence_matrix/base_pairing.h	/^    std::sort(barcode_.begin(), barcode_.end(), [](const Bar& b1, const Bar& b2) { return b1.bir/;"	f	function:Gudhi::persistence_matrix::Base_pairing::_reduce	file:
__anon3e89307f0102	multipers/gudhi/scc_io.h	/^    auto error = [&file](std::string msg){$/;"	f	function:read_scc_file	file:
__anon3e89307f0202	multipers/gudhi/scc_io.h	/^    auto is_comment_or_empty_line = [](const std::string& line)->bool{$/;"	f	function:read_scc_file	typeref:typename:bool	file:
__anon3e89307f0302	multipers/gudhi/scc_io.h	/^                                                      std::size_t shift) -> std::vector<unsigned/;"	f	function:read_scc_file	typeref:typename:std::vector<unsigned int>	file:
__anon3e89307f0402	multipers/gudhi/scc_io.h	/^    auto get_filtration_value = [](const std::string& line, std::size_t end)->Filtration_value{$/;"	f	function:read_scc_file	typeref:typename:Filtration_value	file:
__anon3e89307f0502	multipers/gudhi/scc_io.h	/^  auto print_fil_values = [&](const Filtration_value& fil) {$/;"	f	function:write_scc_file	file:
__anon52d9fcb20102	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^      Chain_opt([&] {$/;"	f	namespace:Gudhi::persistence_matrix	file:
__anon52d9fcb20202	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^      Chain_opt([&] {$/;"	f	namespace:Gudhi::persistence_matrix	file:
__anon52d9fcb20302	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^      Chain_opt([&] {$/;"	f	namespace:Gudhi::persistence_matrix	file:
__anon5a42c5720102	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^  auto get_column_with_pivot_ = [&](ID_index pivot) -> Index {$/;"	f	function:Gudhi::persistence_matrix::RU_matrix::_reduce_column	typeref:typename:Index	file:
__anon60a4593e0102	multipers/gudhi/gudhi/Persistence_matrix/Id_to_index_overlay.h	/^                 [&](ID_index id) { return _id_to_index(id); });$/;"	f	function:Gudhi::persistence_matrix::Id_to_index_overlay::remove_maximal_cell	file:
__anon62365a640102	multipers/multiparameter_module_approximation/approximation.h	/^          module_.begin(), module_.end(), [](const Summand<value_type> &s) { return s.get_upset(/;"	f	function:Gudhi::multiparameter::mma::Module::clean	file:
__anon62365a640202	multipers/multiparameter_module_approximation/approximation.h	/^  arena.execute([&] {$/;"	f	function:Gudhi::multiparameter::mma::Module::compute_distances_to	file:
__anon62365a640302	multipers/multiparameter_module_approximation/approximation.h	/^    tbb::parallel_for(std::size_t(0u), pts.size(), [&](std::size_t i) {$/;"	f	function:Gudhi::multiparameter::mma::Module::compute_distances_to::__anon62365a640202	file:
__anon62365a640402	multipers/multiparameter_module_approximation/approximation.h	/^      tbb::parallel_for(std::size_t(0u), std::size_t(this->size()), [&](std::size_t j) {$/;"	f	function:Gudhi::multiparameter::mma::Module::compute_distances_to::__anon62365a640202::__anon62365a640302	file:
__anon62365a640502	multipers/multiparameter_module_approximation/approximation.h	/^  arena.execute([&] {$/;"	f	function:Gudhi::multiparameter::mma::Module::compute_distances_to	file:
__anon62365a640602	multipers/multiparameter_module_approximation/approximation.h	/^    tbb::parallel_for(std::size_t(0u), pts.size(), [&](std::size_t i) {$/;"	f	function:Gudhi::multiparameter::mma::Module::compute_distances_to::__anon62365a640502	file:
__anon62365a640702	multipers/multiparameter_module_approximation/approximation.h	/^  arena.execute([&] {$/;"	f	function:Gudhi::multiparameter::mma::Module::compute_distances_idx_to	file:
__anon62365a640802	multipers/multiparameter_module_approximation/approximation.h	/^    tbb::parallel_for(std::size_t(0u), pts.size(), [&](std::size_t i) {$/;"	f	function:Gudhi::multiparameter::mma::Module::compute_distances_idx_to::__anon62365a640702	file:
__anon62365a640902	multipers/multiparameter_module_approximation/approximation.h	/^      tbb::parallel_for(std::size_t(0u), std::size_t(this->size()), [&](std::size_t j) {$/;"	f	function:Gudhi::multiparameter::mma::Module::compute_distances_idx_to::__anon62365a640702::__anon62365a640802	file:
__anon62365a640a02	multipers/multiparameter_module_approximation/approximation.h	/^  std::sort(out.begin(), out.end(), [](const value_type x, const value_type y) { return x > y; }/;"	f	function:Gudhi::multiparameter::mma::Module::get_landscape_values	file:
__anon62365a640b02	multipers/multiparameter_module_approximation/approximation.h	/^  tbb::parallel_for(0U, resolution[0], [&](unsigned int i) {$/;"	f	function:Gudhi::multiparameter::mma::Module::get_landscape	file:
__anon62365a640c02	multipers/multiparameter_module_approximation/approximation.h	/^    tbb::parallel_for(0U, resolution[1], [&](unsigned int j) {$/;"	f	function:Gudhi::multiparameter::mma::Module::get_landscape::__anon62365a640b02	file:
__anon62365a640d02	multipers/multiparameter_module_approximation/approximation.h	/^  tbb::parallel_for(0U, resolution[0], [&](unsigned int i) {$/;"	f	function:Gudhi::multiparameter::mma::Module::get_landscapes	file:
__anon62365a640e02	multipers/multiparameter_module_approximation/approximation.h	/^    tbb::parallel_for(0U, resolution[1], [&](unsigned int j) {$/;"	f	function:Gudhi::multiparameter::mma::Module::get_landscapes::__anon62365a640d02	file:
__anon62365a640f02	multipers/multiparameter_module_approximation/approximation.h	/^  tbb::parallel_for(0U, nlines, [&](unsigned int i) {$/;"	f	function:Gudhi::multiparameter::mma::Module::get_barcodes	file:
__anon62365a641002	multipers/multiparameter_module_approximation/approximation.h	/^  tbb::parallel_for(0U, nlines, [&](unsigned int i) {$/;"	f	function:Gudhi::multiparameter::mma::Module::get_barcodes2	file:
__anon62365a641102	multipers/multiparameter_module_approximation/approximation.h	/^  tbb::parallel_for(0U, nlines, [&](unsigned int i) {$/;"	f	function:Gudhi::multiparameter::mma::Module::get_barcodes	file:
__anon62365a641202	multipers/multiparameter_module_approximation/approximation.h	/^  tbb::parallel_for(0U, static_cast<unsigned int>(out.size()), [&](unsigned int i) {$/;"	f	function:Gudhi::multiparameter::mma::Module::euler_curve	file:
__anon62365a641302	multipers/multiparameter_module_approximation/approximation.h	/^  arena.execute([&] {$/;"	f	function:Gudhi::multiparameter::mma::Module::compute_pixels_of_degree	file:
__anon62365a641402	multipers/multiparameter_module_approximation/approximation.h	/^    tbb::parallel_for(0u, num_pixels, [&](unsigned int i) {$/;"	f	function:Gudhi::multiparameter::mma::Module::compute_pixels_of_degree::__anon62365a641302	file:
__anon62365a641502	multipers/multiparameter_module_approximation/approximation.h	/^    tbb::parallel_for(0U, horizontalResolution, [&](unsigned int i) {$/;"	f	function:Gudhi::multiparameter::mma::Module::_compute_2D_image	file:
__anon62365a641602	multipers/multiparameter_module_approximation/approximation.h	/^      tbb::parallel_for(0U, verticalResolution, [&](unsigned int j) {$/;"	f	function:Gudhi::multiparameter::mma::Module::_compute_2D_image::__anon62365a641502	file:
__anon62365a641702	multipers/multiparameter_module_approximation/approximation.h	/^    tbb::parallel_for(0U, horizontalResolution, [&](unsigned int i) {$/;"	f	function:Gudhi::multiparameter::mma::Module::_compute_2D_image	file:
__anon62365a641802	multipers/multiparameter_module_approximation/approximation.h	/^      tbb::parallel_for(0U, verticalResolution, [&](unsigned int j) {$/;"	f	function:Gudhi::multiparameter::mma::Module::_compute_2D_image::__anon62365a641702	file:
__anon62365a641902	multipers/multiparameter_module_approximation/approximation.h	/^                            [keep_inf](filtration_type &a) {$/;"	f	function:Gudhi::multiparameter::mma::Summand::_clean	file:
__anon6f8702e20102	multipers/multi_parameter_rank_invariant/function_rips.h	/^  tbb::parallel_for(0, J, [&](index_type function_value) {$/;"	f	function:Gudhi::multiparameter::function_rips::compute_2d_function_rips	file:
__anon6f8702e20202	multipers/multi_parameter_rank_invariant/function_rips.h	/^  arena.execute([&] {$/;"	f	function:Gudhi::multiparameter::function_rips::compute_function_rips_surface_python	file:
__anon6f8702e20302	multipers/multi_parameter_rank_invariant/function_rips.h	/^  arena.execute([&] {$/;"	f	function:Gudhi::multiparameter::function_rips::compute_function_rips_signed_measure_python	file:
__anon7dbbc6b00102	multipers/gudhi/Simplex_tree_interface.h	/^    Base::expansion_with_blockers(dimension, [&](Simplex_handle sh){$/;"	f	function:Gudhi::Simplex_tree_interface::expansion_with_blockers_callback	file:
__anon7eb8645f0102	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^                                           [include_infinities](const Generator &a) {$/;"	f	function:Gudhi::multi_filtration::Multi_critical_filtration::remove_empty_generators	file:
__anon855fe6d20102	multipers/gudhi/gudhi/reader_utils.h	/^      filename, boost::make_function_output_iterator([&ret](std::tuple<int, double, double> t) {$/;"	f	function:Gudhi::read_persistence_intervals_grouped_by_dimension	file:
__anon855fe6d20202	multipers/gudhi/gudhi/reader_utils.h	/^      filename, boost::make_function_output_iterator([only_this_dim, &ret](std::tuple<int, doubl/;"	f	function:Gudhi::read_persistence_intervals_in_dimension	file:
__anon8677bcff0102	multipers/gudhi/gudhi/Persistent_cohomology.h	/^      transverse_ref.second.row_->clear_and_dispose([&](Cell*p){p->~Cell();});$/;"	f	function:Gudhi::persistent_cohomology::Persistent_cohomology::~Persistent_cohomology	file:
__anon8677bcff0202	multipers/gudhi/gudhi/Persistent_cohomology.h	/^              [](annotation_t const& a, annotation_t const& b) { return a.first < b.first; });$/;"	f	function:Gudhi::persistent_cohomology::Persistent_cohomology::annotation_of_the_boundary	file:
__anon8677bcff0302	multipers/gudhi/gudhi/Persistent_cohomology.h	/^            curr_col->col_.clear_and_dispose([&](Cell*p){cell_pool_.destroy(p);});$/;"	f	function:Gudhi::persistent_cohomology::Persistent_cohomology::destroy_cocycle	file:
__anon8748a1190102	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^      Chain_opt([&] {$/;"	f	namespace:Gudhi::persistence_matrix	file:
__anon8748a1190202	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^      Chain_opt([&] {$/;"	f	namespace:Gudhi::persistence_matrix	file:
__anon8748a1190302	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^      Chain_opt([&] {$/;"	f	namespace:Gudhi::persistence_matrix	file:
__anon8748a1190402	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^                            [](const Entry* a, const Entry* b) { return a->get_row_index() < b->/;"	f	function:Gudhi::persistence_matrix::Naive_vector_column::is_non_zero	file:
__anon8748a1190502	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^  std::sort(column_.begin(), column_.end(), [](const Entry* c1, const Entry* c2) { return *c1 < /;"	f	function:Gudhi::persistence_matrix::Naive_vector_column::reorder	file:
__anon8748a1190602	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^      [&](Entry* entryTarget) { newColumn.push_back(entryTarget); },$/;"	f	function:Gudhi::persistence_matrix::Naive_vector_column::_add	file:
__anon8748a1190702	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^          [[maybe_unused]] const typename Column_support::iterator& itTarget) {$/;"	f	function:Gudhi::persistence_matrix::Naive_vector_column::_add	file:
__anon8748a1190802	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^      [&](Field_element& targetElement, typename Entry_range::const_iterator& itSource) {$/;"	f	function:Gudhi::persistence_matrix::Naive_vector_column::_add	file:
__anon8748a1190902	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^      [&](Entry* entryTarget) { newColumn.push_back(entryTarget); },$/;"	f	function:Gudhi::persistence_matrix::Naive_vector_column::_add	file:
__anon8748a1190a02	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^      [&](typename Column_support::iterator& itTarget) {$/;"	f	function:Gudhi::persistence_matrix::Naive_vector_column::_add	file:
__anon8748a1190b02	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^      [&](Entry* entryTarget) {$/;"	f	function:Gudhi::persistence_matrix::Naive_vector_column::_multiply_target_and_add	file:
__anon8748a1190c02	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^      [&](typename Entry_range::const_iterator& itSource, const typename Column_support::iterato/;"	f	function:Gudhi::persistence_matrix::Naive_vector_column::_multiply_target_and_add	file:
__anon8748a1190d02	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^      [&](Field_element& targetElement, typename Entry_range::const_iterator& itSource) {$/;"	f	function:Gudhi::persistence_matrix::Naive_vector_column::_multiply_target_and_add	file:
__anon8748a1190e02	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^      [&](Entry* entryTarget) { newColumn.push_back(entryTarget); },$/;"	f	function:Gudhi::persistence_matrix::Naive_vector_column::_multiply_target_and_add	file:
__anon8748a1190f02	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^      [&](typename Column_support::iterator& itTarget) {$/;"	f	function:Gudhi::persistence_matrix::Naive_vector_column::_multiply_target_and_add	file:
__anon8748a1191002	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^      [&](Entry* entryTarget) { newColumn.push_back(entryTarget); },$/;"	f	function:Gudhi::persistence_matrix::Naive_vector_column::_multiply_source_and_add	file:
__anon8748a1191102	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^      [&](typename Entry_range::const_iterator& itSource, const typename Column_support::iterato/;"	f	function:Gudhi::persistence_matrix::Naive_vector_column::_multiply_source_and_add	file:
__anon8748a1191202	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^      [&](Field_element& targetElement, typename Entry_range::const_iterator& itSource) {$/;"	f	function:Gudhi::persistence_matrix::Naive_vector_column::_multiply_source_and_add	file:
__anon8748a1191302	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^      [&](Entry* entryTarget) { newColumn.push_back(entryTarget); },$/;"	f	function:Gudhi::persistence_matrix::Naive_vector_column::_multiply_source_and_add	file:
__anon8748a1191402	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^      [&](typename Column_support::iterator& itTarget) {$/;"	f	function:Gudhi::persistence_matrix::Naive_vector_column::_multiply_source_and_add	file:
__anon90bd604e0102	multipers/multiparameter_module_approximation/vineyards.h	/^    {$/;"	f	function:Gudhi::multiparameter::mma::Vineyard_persistence::_sort_matrix	file:
__anon92a0d1e00102	multipers/gudhi/naive_merge_tree.h	/^    auto get_weight = [&](index id) {$/;"	f	function:Naive_bottleneck_forest::get_bootleneck_weight	file:
__anon9334898f0102	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^               [](int i){ return i-1;});$/;"	f	function:Gudhi::cubical_complex::Bitmap_cubical_complex_base::setup_bitmap_based_on_vertices	file:
__anon9334898f0202	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^  for_each_vertex([this, &vertices, index=(std::size_t)0] (auto cell) mutable { get_cell_data(ce/;"	f	function:Gudhi::cubical_complex::Bitmap_cubical_complex_base::setup_bitmap_based_on_vertices	file:
__anon9fbbc3bb0102	multipers/gudhi/gudhi/Fields/Multi_field_small.h	/^  static inline const std::vector<Characteristic> primes_ = []() {$/;"	f	class:Gudhi::persistence_fields::Multi_field_element_with_small_characteristics	file:
__anon9fbbc3bb0202	multipers/gudhi/gudhi/Fields/Multi_field_small.h	/^  static inline constexpr Characteristic productOfAllCharacteristics_ = []() {$/;"	f	class:Gudhi::persistence_fields::Multi_field_element_with_small_characteristics	file:
__anon9fbbc3bb0302	multipers/gudhi/gudhi/Fields/Multi_field_small.h	/^  static inline const std::vector<Characteristic> partials_ = []() {$/;"	f	class:Gudhi::persistence_fields::Multi_field_element_with_small_characteristics	file:
__anonba250c4d0102	multipers/gudhi/truc.h	/^                                       [&](std::size_t val) {$/;"	f	function:Gudhi::multiparameter::truc_interface::Truc::get_current_boundary_matrix	file:
__anonba250c4d0202	multipers/gudhi/truc.h	/^    std::sort(permutation.begin(), permutation.end(), [&](std::size_t i, std::size_t j) {$/;"	f	function:Gudhi::multiparameter::truc_interface::Truc::get_current_boundary_matrix	file:
__anonba250c4d0302	multipers/gudhi/truc.h	/^    std::sort(out_gen_order.begin(), out_gen_order.end(), [&](index_type i, index_type j) {$/;"	f	function:Gudhi::multiparameter::truc_interface::Truc::compute_persistence_out	file:
__anonba250c4d0402	multipers/gudhi/truc.h	/^      tbb::parallel_for(static_cast<std::size_t>(0), args.size(), [&](const std::size_t &i) {$/;"	f	function:Gudhi::multiparameter::truc_interface::Truc::barcodes	file:
__anonba250c4d0502	multipers/gudhi/truc.h	/^        [](const std::vector<value_type> &basepoint) { return Gudhi::multi_persistence::Line<val/;"	f	function:Gudhi::multiparameter::truc_interface::Truc::persistence_on_lines	file:
__anonba250c4d0602	multipers/gudhi/truc.h	/^        [](const std::pair<std::vector<value_type>, std::vector<value_type>> &bpdir) {$/;"	f	function:Gudhi::multiparameter::truc_interface::Truc::persistence_on_lines	file:
__anonbc0e27190102	multipers/gudhi/gudhi/Bitmap_cubical_complex_periodic_boundary_conditions_base.h	/^      std::back_inserter(top_cells_sizes), [](unsigned i, bool b){ return i - !b;});$/;"	f	function:Gudhi::cubical_complex::Bitmap_cubical_complex_periodic_boundary_conditions_base::construct_complex_based_on_vertices	file:
__anonbce40b300102	multipers/gudhi/gudhi/Persistence_matrix/columns/column_utilities.h	/^      [&]([[maybe_unused]] typename Column::Entry* entryTarget) {},$/;"	f	function:Gudhi::persistence_matrix::_add_to_column	file:
__anonbce40b300202	multipers/gudhi/gudhi/Persistence_matrix/columns/column_utilities.h	/^      [&](typename Entry_range::const_iterator& itSource, const typename Column::Column_support:/;"	f	function:Gudhi::persistence_matrix::_add_to_column	file:
__anonbce40b300302	multipers/gudhi/gudhi/Persistence_matrix/columns/column_utilities.h	/^      [&](typename Column::Field_element& targetElement, typename Entry_range::const_iterator& i/;"	f	function:Gudhi::persistence_matrix::_add_to_column	file:
__anonbce40b300402	multipers/gudhi/gudhi/Persistence_matrix/columns/column_utilities.h	/^      [&]([[maybe_unused]] typename Column::Entry* entryTarget) {},$/;"	f	function:Gudhi::persistence_matrix::_add_to_column	file:
__anonbce40b300502	multipers/gudhi/gudhi/Persistence_matrix/columns/column_utilities.h	/^      [&]([[maybe_unused]] typename Column::Column_support::iterator& itTarget) {}$/;"	f	function:Gudhi::persistence_matrix::_add_to_column	file:
__anonbce40b300602	multipers/gudhi/gudhi/Persistence_matrix/columns/column_utilities.h	/^      [&](typename Column::Entry* entryTarget) {$/;"	f	function:Gudhi::persistence_matrix::_multiply_target_and_add_to_column	file:
__anonbce40b300702	multipers/gudhi/gudhi/Persistence_matrix/columns/column_utilities.h	/^      [&](typename Entry_range::const_iterator& itSource, const typename Column::Column_support:/;"	f	function:Gudhi::persistence_matrix::_multiply_target_and_add_to_column	file:
__anonbce40b300802	multipers/gudhi/gudhi/Persistence_matrix/columns/column_utilities.h	/^      [&](typename Column::Field_element& targetElement, typename Entry_range::const_iterator& i/;"	f	function:Gudhi::persistence_matrix::_multiply_target_and_add_to_column	file:
__anonbce40b300902	multipers/gudhi/gudhi/Persistence_matrix/columns/column_utilities.h	/^      [&]([[maybe_unused]] typename Column::Entry* entryTarget) {},$/;"	f	function:Gudhi::persistence_matrix::_multiply_target_and_add_to_column	file:
__anonbce40b300a02	multipers/gudhi/gudhi/Persistence_matrix/columns/column_utilities.h	/^      [&](typename Column::Column_support::iterator& itTarget) {$/;"	f	function:Gudhi::persistence_matrix::_multiply_target_and_add_to_column	file:
__anonbce40b300b02	multipers/gudhi/gudhi/Persistence_matrix/columns/column_utilities.h	/^      []([[maybe_unused]] typename Column::Entry* entryTarget) {},$/;"	f	function:Gudhi::persistence_matrix::_multiply_source_and_add_to_column	file:
__anonbce40b300c02	multipers/gudhi/gudhi/Persistence_matrix/columns/column_utilities.h	/^      [&](typename Entry_range::const_iterator& itSource, const typename Column::Column_support:/;"	f	function:Gudhi::persistence_matrix::_multiply_source_and_add_to_column	file:
__anonbce40b300d02	multipers/gudhi/gudhi/Persistence_matrix/columns/column_utilities.h	/^      [&](typename Column::Field_element& targetElement, typename Entry_range::const_iterator& i/;"	f	function:Gudhi::persistence_matrix::_multiply_source_and_add_to_column	file:
__anonbce40b300e02	multipers/gudhi/gudhi/Persistence_matrix/columns/column_utilities.h	/^      [&]([[maybe_unused]] typename Column::Entry* entryTarget) {},$/;"	f	function:Gudhi::persistence_matrix::_multiply_source_and_add_to_column	file:
__anonbce40b300f02	multipers/gudhi/gudhi/Persistence_matrix/columns/column_utilities.h	/^      []([[maybe_unused]] typename Column::Column_support::iterator& itTarget) {});$/;"	f	function:Gudhi::persistence_matrix::_multiply_source_and_add_to_column	file:
__anonc05add180102	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^      Chain_opt([&] {$/;"	f	namespace:Gudhi::persistence_matrix	file:
__anonc05add180202	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^      Chain_opt([&] {$/;"	f	namespace:Gudhi::persistence_matrix	file:
__anonc05add180302	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^      Chain_opt([&] {$/;"	f	namespace:Gudhi::persistence_matrix	file:
__anonc4d29b500102	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^      Chain_opt([&] {$/;"	f	namespace:Gudhi::persistence_matrix	file:
__anonc4d29b500202	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^      Chain_opt([&] {$/;"	f	namespace:Gudhi::persistence_matrix	file:
__anonc4d29b500302	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^      Chain_opt([&] {$/;"	f	namespace:Gudhi::persistence_matrix	file:
__anonc4d29b500402	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^  column_.sort([](const Entry* c1, const Entry* c2) { return *c1 < *c2; });$/;"	f	function:Gudhi::persistence_matrix::List_column::reorder	file:
__anonc7f292030102	multipers/gudhi/gudhi/Fields/Multi_field.h	/^  static inline const std::vector<unsigned int> primes_ = []() {$/;"	f	class:Gudhi::persistence_fields::Multi_field_element	file:
__anonc7f292030202	multipers/gudhi/gudhi/Fields/Multi_field.h	/^  static inline const Characteristic productOfAllCharacteristics_ = []() {$/;"	f	class:Gudhi::persistence_fields::Multi_field_element	file:
__anonc7f292030302	multipers/gudhi/gudhi/Fields/Multi_field.h	/^  static inline const std::vector<Characteristic> partials_ = []() {$/;"	f	class:Gudhi::persistence_fields::Multi_field_element	file:
__anonc95988800102	multipers/gudhi/gudhi/Simplex_tree.h	/^        &root_, &root_source, [](const Filtration_value& fil) -> const Filtration_value& { retur/;"	f	function:Gudhi::Simplex_tree::copy_from	typeref:typename:const Filtration_value &	file:
__anonc95988800202	multipers/gudhi/gudhi/Simplex_tree.h	/^    auto fun = [&res](Simplex_handle, int dim) -> void { ++res[dim]; };$/;"	f	function:Gudhi::Simplex_tree::num_simplices_by_dimension	typeref:typename:void	file:
__anonc95988800302	multipers/gudhi/gudhi/Simplex_tree.h	/^      initialize_filtration(is_before_in_totally_ordered_filtration(this), [&](Simplex_handle sh/;"	f	function:Gudhi::Simplex_tree::initialize_filtration	typeref:typename:bool	file:
__anonc95988800402	multipers/gudhi/gudhi/Simplex_tree.h	/^                            [](Simplex_handle) -> bool { return false; });$/;"	f	function:Gudhi::Simplex_tree::initialize_filtration	typeref:typename:bool	file:
__anonc95988800502	multipers/gudhi/gudhi/Simplex_tree.h	/^    auto verts = vertices(skel_graph) | boost::adaptors::transformed([&](auto v) {$/;"	f	function:Gudhi::Simplex_tree::insert_graph	file:
__anonc95988800602	multipers/gudhi/gudhi/Simplex_tree.h	/^    auto verts = vertices | boost::adaptors::transformed([&](auto v) { return Dit_value_t(v, Nod/;"	f	function:Gudhi::Simplex_tree::insert_batch_vertices	file:
__anonc95988800702	multipers/gudhi/gudhi/Simplex_tree.h	/^    auto f = [&fun](Simplex_handle sh, int dim) -> bool {$/;"	f	function:Gudhi::Simplex_tree::for_each_simplex	typeref:typename:bool	file:
__anonc95988800802	multipers/gudhi/gudhi/Simplex_tree.h	/^    auto fun = [&modified, this](Simplex_handle sh, int dim) -> void {$/;"	f	function:Gudhi::Simplex_tree::make_filtration_non_decreasing	typeref:typename:void	file:
__anonc95988800902	multipers/gudhi/gudhi/Simplex_tree.h	/^    auto to_remove = [this, filt](Dit_value_t& simplex) {$/;"	f	function:Gudhi::Simplex_tree::rec_prune_above_filtration	file:
__anondea458df0102	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^      Chain_opt([&] {$/;"	f	namespace:Gudhi::persistence_matrix	file:
__anondea458df0202	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^      Chain_opt([&] {$/;"	f	namespace:Gudhi::persistence_matrix	file:
__anondea458df0302	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^      Chain_opt([&] {$/;"	f	namespace:Gudhi::persistence_matrix	file:
__anondea458df0402	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^                            [](const Entry* a, const Entry* b) { return a->get_row_index() < b->/;"	f	function:Gudhi::persistence_matrix::Small_vector_column::is_non_zero	file:
__anondea458df0502	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^  std::sort(column_.begin(), column_.end(), [](const Entry* c1, const Entry* c2) { return *c1 < /;"	f	function:Gudhi::persistence_matrix::Small_vector_column::reorder	file:
__anondea458df0602	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^      [&](Entry* entryTarget) { newColumn.push_back(entryTarget); },$/;"	f	function:Gudhi::persistence_matrix::Small_vector_column::_add	file:
__anondea458df0702	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^          [[maybe_unused]] const typename Column_support::iterator& itTarget) {$/;"	f	function:Gudhi::persistence_matrix::Small_vector_column::_add	file:
__anondea458df0802	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^      [&](Field_element& targetElement, typename Entry_range::const_iterator& itSource) {$/;"	f	function:Gudhi::persistence_matrix::Small_vector_column::_add	file:
__anondea458df0902	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^      [&](Entry* entryTarget) { newColumn.push_back(entryTarget); },$/;"	f	function:Gudhi::persistence_matrix::Small_vector_column::_add	file:
__anondea458df0a02	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^      [&](typename Column_support::iterator& itTarget) {$/;"	f	function:Gudhi::persistence_matrix::Small_vector_column::_add	file:
__anondea458df0b02	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^      [&](Entry* entryTarget) {$/;"	f	function:Gudhi::persistence_matrix::Small_vector_column::_multiply_target_and_add	file:
__anondea458df0c02	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^      [&](typename Entry_range::const_iterator& itSource, const typename Column_support::iterato/;"	f	function:Gudhi::persistence_matrix::Small_vector_column::_multiply_target_and_add	file:
__anondea458df0d02	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^      [&](Field_element& targetElement, typename Entry_range::const_iterator& itSource) {$/;"	f	function:Gudhi::persistence_matrix::Small_vector_column::_multiply_target_and_add	file:
__anondea458df0e02	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^      [&](Entry* entryTarget) { newColumn.push_back(entryTarget); },$/;"	f	function:Gudhi::persistence_matrix::Small_vector_column::_multiply_target_and_add	file:
__anondea458df0f02	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^      [&](typename Column_support::iterator& itTarget) {$/;"	f	function:Gudhi::persistence_matrix::Small_vector_column::_multiply_target_and_add	file:
__anondea458df1002	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^      [&](Entry* entryTarget) { newColumn.push_back(entryTarget); },$/;"	f	function:Gudhi::persistence_matrix::Small_vector_column::_multiply_source_and_add	file:
__anondea458df1102	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^      [&](typename Entry_range::const_iterator& itSource, const typename Column_support::iterato/;"	f	function:Gudhi::persistence_matrix::Small_vector_column::_multiply_source_and_add	file:
__anondea458df1202	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^      [&](Field_element& targetElement, typename Entry_range::const_iterator& itSource) {$/;"	f	function:Gudhi::persistence_matrix::Small_vector_column::_multiply_source_and_add	file:
__anondea458df1302	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^      [&](Entry* entryTarget) { newColumn.push_back(entryTarget); },$/;"	f	function:Gudhi::persistence_matrix::Small_vector_column::_multiply_source_and_add	file:
__anondea458df1402	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^      [&](typename Column_support::iterator& itTarget) {$/;"	f	function:Gudhi::persistence_matrix::Small_vector_column::_multiply_source_and_add	file:
__anonee8085670102	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^      Chain_opt([&] {$/;"	f	namespace:Gudhi::persistence_matrix	file:
__anonee8085670202	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^      Chain_opt([&] {$/;"	f	namespace:Gudhi::persistence_matrix	file:
__anonee8085670302	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^      Chain_opt([&] {$/;"	f	namespace:Gudhi::persistence_matrix	file:
__anonee8085670402	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^                            [](const Entry* a, const Entry* b) { return a->get_row_index() < b->/;"	f	function:Gudhi::persistence_matrix::Vector_column::is_non_zero	file:
__anonee8085670502	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^    std::sort(column_.begin(), column_.end(), [](const Entry* c1, const Entry* c2) { return *c1 /;"	f	function:Gudhi::persistence_matrix::Vector_column::reorder	file:
__anonee8085670602	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^    std::sort(newColumn.begin(), newColumn.end(), [](const Entry* c1, const Entry* c2) { return /;"	f	function:Gudhi::persistence_matrix::Vector_column::reorder	file:
__anonee8085670702	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^      [&](Entry* entryTarget) { newColumn.push_back(entryTarget); },$/;"	f	function:Gudhi::persistence_matrix::Vector_column::_add	file:
__anonee8085670802	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^          [[maybe_unused]] const typename Column_support::iterator& itTarget) {$/;"	f	function:Gudhi::persistence_matrix::Vector_column::_add	file:
__anonee8085670902	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^      [&](Field_element& targetElement, typename Entry_range::const_iterator& itSource) {$/;"	f	function:Gudhi::persistence_matrix::Vector_column::_add	file:
__anonee8085670a02	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^      [&](Entry* entryTarget) { newColumn.push_back(entryTarget); }$/;"	f	function:Gudhi::persistence_matrix::Vector_column::_add	file:
__anonee8085670b02	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^      [&](Entry* entryTarget) {$/;"	f	function:Gudhi::persistence_matrix::Vector_column::_multiply_target_and_add	file:
__anonee8085670c02	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^      [&](typename Entry_range::const_iterator& itSource, const typename Column_support::iterato/;"	f	function:Gudhi::persistence_matrix::Vector_column::_multiply_target_and_add	file:
__anonee8085670d02	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^      [&](Field_element& targetElement, typename Entry_range::const_iterator& itSource) {$/;"	f	function:Gudhi::persistence_matrix::Vector_column::_multiply_target_and_add	file:
__anonee8085670e02	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^      [&](Entry* entryTarget) { newColumn.push_back(entryTarget); }$/;"	f	function:Gudhi::persistence_matrix::Vector_column::_multiply_target_and_add	file:
__anonee8085670f02	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^      [&](Entry* entryTarget) { newColumn.push_back(entryTarget); },$/;"	f	function:Gudhi::persistence_matrix::Vector_column::_multiply_source_and_add	file:
__anonee8085671002	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^      [&](typename Entry_range::const_iterator& itSource, const typename Column_support::iterato/;"	f	function:Gudhi::persistence_matrix::Vector_column::_multiply_source_and_add	file:
__anonee8085671102	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^      [&](Field_element& targetElement, typename Entry_range::const_iterator& itSource) {$/;"	f	function:Gudhi::persistence_matrix::Vector_column::_multiply_source_and_add	file:
__anonee8085671202	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^      [&](Entry* entryTarget) { newColumn.push_back(entryTarget); }$/;"	f	function:Gudhi::persistence_matrix::Vector_column::_multiply_source_and_add	file:
__anonee8085671302	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^  auto updateTargetIterator = [&](typename Column_support::iterator& itTarget) {$/;"	f	function:Gudhi::persistence_matrix::Vector_column::_generic_add	file:
__anonee8085671402	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^  auto updateSourceIterator = [&](typename Entry_range::const_iterator& itSource) {$/;"	f	function:Gudhi::persistence_matrix::Vector_column::_generic_add	file:
__author__	multipers/simplex_tree_multi.pxd	/^__author__ = "Vincent Rouvreau"$/;"	v
__call__	multipers/ml/sliced_wasserstein.py	/^    def __call__(self, meas1, meas2):$/;"	m	class:SlicedWassersteinDistance
__call__	multipers/ml/sliced_wasserstein.py	/^    def __call__(self, meas1, meas2):$/;"	m	class:WassersteinDistance
__copyright__	multipers/simplex_tree_multi.pxd	/^__copyright__ = "Copyright (C) 2016 Inria"$/;"	v
__for_python_plot_type	multipers/multiparameter_module_approximation/utilities.h	/^  using __for_python_plot_type =$/;"	t	struct:Gudhi::multiparameter::mma::MultiDiagrams	typeref:typename:std::pair<std::vector<std::pair<double,double>>,std::vector<unsigned int>>
__init__	compute.py	/^	def __init__(self):$/;"	m	class:Identity
__init__	multipers/data/MOL2.py	/^    def __init__($/;"	m	class:Molecule2SimplexTree	typeref:typename:None
__init__	multipers/data/graphs.py	/^    def __init__($/;"	m	class:Graph2SimplexTrees
__init__	multipers/data/pytorch2simplextree.py	/^	def __init__(self, filtrations:Iterable[str]=[]):$/;"	m	class:Torch2SimplexTree
__init__	multipers/ml/convolutions.py	/^    def __init__($/;"	m	class:KDE
__init__	multipers/ml/convolutions.py	/^    def __init__(self, masses, metric: str = "euclidean", **_kdtree_kwargs):$/;"	m	class:DTM
__init__	multipers/ml/kernels.py	/^    def __init__($/;"	m	class:DistanceMatrix2Kernel	typeref:typename:None
__init__	multipers/ml/kernels.py	/^    def __init__(self) -> None:$/;"	m	class:DistanceList2DistanceMatrix	typeref:typename:None
__init__	multipers/ml/kernels.py	/^    def __init__(self) -> None:$/;"	m	class:DistanceMatrices2DistancesList	typeref:typename:None
__init__	multipers/ml/kernels.py	/^    def __init__(self) -> None:$/;"	m	class:DistanceMatrix2DistanceList	typeref:typename:None
__init__	multipers/ml/kernels.py	/^    def __init__(self) -> None:$/;"	m	class:DistancesLists2DistanceMatrices	typeref:typename:None
__init__	multipers/ml/mma.py	/^    def __init__($/;"	m	class:FilteredComplex2MMA	typeref:typename:None
__init__	multipers/ml/mma.py	/^    def __init__($/;"	m	class:MMA2IMG
__init__	multipers/ml/mma.py	/^    def __init__($/;"	m	class:MMA2Landscape	typeref:typename:None
__init__	multipers/ml/mma.py	/^    def __init__($/;"	m	class:MMAFormatter
__init__	multipers/ml/mma.py	/^    def __init__($/;"	m	class:SimplexTree2MMA
__init__	multipers/ml/one.py	/^	def __init__(self, ) -> None:$/;"	m	class:DiagramShuffle	typeref:typename:None
__init__	multipers/ml/one.py	/^	def __init__(self, bandwidth:float=1, resolution:tuple[int,int]=(20,20),  n_jobs:int=1) -> None/;"	m	class:Dgms2Image	typeref:typename:None
__init__	multipers/ml/one.py	/^	def __init__(self, degrees:list[int]|None = None, extended:list[int]|bool=[], n_jobs=1, progres/;"	m	class:SimplexTree2Dgm	typeref:typename:None
__init__	multipers/ml/one.py	/^	def __init__(self, delayed:bool = False, threshold = np.inf):$/;"	m	class:PointCloud2SimplexTree
__init__	multipers/ml/one.py	/^	def __init__(self, f:str="ricciCurvature",dtype=gd.SimplexTree, reverse_filtration:bool=False):$/;"	m	class:Graph2SimplexTree
__init__	multipers/ml/one.py	/^	def __init__(self, f:str="ricciCurvature",quantile:float=0., bins:int=100, n_jobs:int=1):$/;"	m	class:FilvecGetter
__init__	multipers/ml/one.py	/^	def __init__(self, n_jobs:int=1, distance_matrix_path:str|None=None, progress:bool = False) -> /;"	m	class:Dgms2SignedMeasureDistance	typeref:typename:None
__init__	multipers/ml/one.py	/^	def __init__(self, num:int=5, resolution:int=100,  n_jobs:int=1) -> None:$/;"	m	class:Dgms2Landscapes	typeref:typename:None
__init__	multipers/ml/one.py	/^	def __init__(self, num_directions:int=10, bandwidth:float=1.0, n_jobs:int=1, distance_matrix_pa/;"	m	class:Dgms2SWK	typeref:typename:None
__init__	multipers/ml/one.py	/^	def __init__(self, num_directions:int=10, n_jobs:int=1) -> None:$/;"	m	class:Dgms2SlicedWassersteinDistanceMatrices	typeref:typename:None
__init__	multipers/ml/one.py	/^	def __init__(self, quantile:float=0., bins:int=100, n_jobs:int=1):$/;"	m	class:Dgm2Histogram
__init__	multipers/ml/one.py	/^	def __init__(self, quantile:float=0., bins:int=100, n_jobs:int=1, progress:bool=False, density:/;"	m	class:SimplexTree2Histogram
__init__	multipers/ml/one.py	/^	def __init__(self, ranges:None|Iterable[Iterable[float]]=None, resolution:int=100, quantile:flo/;"	m	class:Dgms2SignedMeasureImage	typeref:typename:None
__init__	multipers/ml/one.py	/^	def __init__(self, ranges:None|list[tuple[float,float]]=None, bins:int=100, quantile:float=0) -/;"	m	class:Dgms2SignedMeasureHistogram	typeref:typename:None
__init__	multipers/ml/point_clouds.py	/^    def __init__($/;"	m	class:PointCloud2FilteredComplex	typeref:typename:None
__init__	multipers/ml/point_clouds.py	/^    def __init__($/;"	m	class:PointCloud2SimplexTree	typeref:typename:None
__init__	multipers/ml/signed_measures.py	/^    def __init__($/;"	m	class:DegreeRips2SignedMeasure	typeref:typename:None
__init__	multipers/ml/signed_measures.py	/^    def __init__($/;"	m	class:FilteredComplex2SignedMeasure
__init__	multipers/ml/signed_measures.py	/^    def __init__($/;"	m	class:SignedMeasure2Convolution
__init__	multipers/ml/signed_measures.py	/^    def __init__($/;"	m	class:SignedMeasure2SlicedWassersteinDistance
__init__	multipers/ml/signed_measures.py	/^    def __init__($/;"	m	class:SignedMeasureFormatter
__init__	multipers/ml/signed_measures.py	/^    def __init__($/;"	m	class:SignedMeasures2SlicedWassersteinDistances
__init__	multipers/ml/signed_measures.py	/^    def __init__($/;"	m	class:SimplexTree2RectangleDecomposition
__init__	multipers/ml/signed_measures.py	/^    def __init__($/;"	m	class:SimplexTree2SignedMeasure
__init__	multipers/ml/sliced_wasserstein.py	/^    def __init__(self, epsilon=1.0, ground_norm=1, n_jobs=None):$/;"	m	class:WassersteinDistance
__init__	multipers/ml/sliced_wasserstein.py	/^    def __init__(self, num_directions=10, scales=None, n_jobs=None):$/;"	m	class:SlicedWassersteinDistance
__init__	multipers/ml/tools.py	/^    def __init__($/;"	m	class:SimplexTreeEdgeCollapser	typeref:typename:None
__init__	multipers_old.py	/^	def __init__(self, bdw=1., power=0, step=1):$/;"	m	class:MultiPersistenceImageWrapper
__init__	multipers_old.py	/^	def __init__(self, bdw=1., power=0, step=1):$/;"	m	class:PersistenceImageWrapper
__init__	multipers_old.py	/^	def __init__(self, power=0, step=1, k=None):$/;"	m	class:MultiPersistenceLandscapeWrapper
__init__	multipers_old.py	/^	def __init__(self, step=1):$/;"	m	class:SubsampleWrapper
__license__	multipers/simplex_tree_multi.pxd	/^__license__ = "MIT"$/;"	v
__version__	multipers/__init__.py	/^__version__ = _version("multipers")$/;"	v
_add	multipers/gudhi/gudhi/Fields/Multi_field_small.h	/^  static constexpr Element _add(Element element, Element v) {$/;"	f	class:Gudhi::persistence_fields::Multi_field_element_with_small_characteristics	typeref:typename:Element
_add	multipers/gudhi/gudhi/Fields/Multi_field_small_operators.h	/^Multi_field_operators_with_small_characteristics::_add(Element element, Element v,$/;"	f	class:Gudhi::persistence_fields::Multi_field_operators_with_small_characteristics	typeref:typename:Multi_field_operators_with_small_characteristics::Element
_add	multipers/gudhi/gudhi/Fields/Multi_field_small_shared.h	/^  static Element _add(Element element, Element v) {$/;"	f	class:Gudhi::persistence_fields::Shared_multi_field_element_with_small_characteristics	typeref:typename:Element
_add	multipers/gudhi/gudhi/Fields/Zp_field.h	/^  static Element _add(Element element, Element v) {$/;"	f	class:Gudhi::persistence_fields::Zp_field_element	typeref:typename:Element
_add	multipers/gudhi/gudhi/Fields/Zp_field_operators.h	/^  static Element _add(Element e1, Element e2, Characteristic characteristic) {$/;"	f	class:Gudhi::persistence_fields::Zp_field_operators	typeref:typename:Element
_add	multipers/gudhi/gudhi/Fields/Zp_field_shared.h	/^  static Element _add(Element element, Element v) {$/;"	f	class:Gudhi::persistence_fields::Shared_Zp_field_element	typeref:typename:Element
_add	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^inline bool Heap_column<Master_matrix>::_add(const Entry_range& column)$/;"	f	class:Gudhi::persistence_matrix::Heap_column	typeref:typename:bool
_add	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^inline bool Intrusive_list_column<Master_matrix>::_add(const Entry_range& column)$/;"	f	class:Gudhi::persistence_matrix::Intrusive_list_column	typeref:typename:bool
_add	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^inline bool Intrusive_set_column<Master_matrix>::_add(const Entry_range& column)$/;"	f	class:Gudhi::persistence_matrix::Intrusive_set_column	typeref:typename:bool
_add	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^inline bool List_column<Master_matrix>::_add(const Entry_range& column)$/;"	f	class:Gudhi::persistence_matrix::List_column	typeref:typename:bool
_add	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^inline bool Naive_vector_column<Master_matrix>::_add(const Entry_range& column)$/;"	f	class:Gudhi::persistence_matrix::Naive_vector_column	typeref:typename:bool
_add	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^inline bool Set_column<Master_matrix>::_add(const Entry_range& column)$/;"	f	class:Gudhi::persistence_matrix::Set_column	typeref:typename:bool
_add	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^inline bool Small_vector_column<Master_matrix>::_add(const Entry_range& column)$/;"	f	class:Gudhi::persistence_matrix::Small_vector_column	typeref:typename:bool
_add	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^inline bool Unordered_set_column<Master_matrix>::_add(const Entry_range& column)$/;"	f	class:Gudhi::persistence_matrix::Unordered_set_column	typeref:typename:bool
_add	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^inline bool Vector_column<Master_matrix>::_add(const Entry_range& column)$/;"	f	class:Gudhi::persistence_matrix::Vector_column	typeref:typename:bool
_add_bar	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^inline void Chain_matrix<Master_matrix>::_add_bar(Dimension dim)$/;"	f	class:Gudhi::persistence_matrix::Chain_matrix	typeref:typename:void
_add_bar	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^inline void RU_matrix<Master_matrix>::_add_bar(Dimension dim, Pos_index birth)$/;"	f	class:Gudhi::persistence_matrix::RU_matrix	typeref:typename:void
_add_bar	multipers/gudhi/gudhi/Persistence_matrix/ru_pairing.h	/^  void _add_bar(Dimension dim, Pos_index birth) {$/;"	f	class:Gudhi::persistence_matrix::RU_pairing	typeref:typename:void
_add_bar_with_threshold	multipers/multiparameter_module_approximation/approximation.h	/^inline void Module<value_type>::_add_bar_with_threshold(const Line<value_type> &line,$/;"	f	class:Gudhi::multiparameter::mma::Module	typeref:typename:void
_add_birth	multipers/multiparameter_module_approximation/approximation.h	/^inline void Summand<value_type>::_add_birth(const filtration_type &birth) {$/;"	f	class:Gudhi::multiparameter::mma::Summand	typeref:typename:void
_add_death	multipers/multiparameter_module_approximation/approximation.h	/^inline void Summand<value_type>::_add_death(const filtration_type &death) {$/;"	f	class:Gudhi::multiparameter::mma::Summand	typeref:typename:void
_add_to	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^inline void Chain_matrix<Master_matrix>::_add_to(Column& target, F&& addition)$/;"	f	class:Gudhi::persistence_matrix::Chain_matrix	typeref:typename:void
_add_to	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^inline void Chain_matrix<Master_matrix>::_add_to(const Column& column,$/;"	f	class:Gudhi::persistence_matrix::Chain_matrix	typeref:typename:void
_add_to	multipers/gudhi/gudhi/Persistence_matrix/ru_vine_swap.h	/^inline void RU_vine_swap<Master_matrix>::_add_to(Index sourceIndex, Index targetIndex) $/;"	f	class:Gudhi::persistence_matrix::RU_vine_swap	typeref:typename:void
_add_to	multipers/multiparameter_module_approximation/ru_matrix.h	/^inline void RU_matrix<Column_type>::_add_to(index sourceIndex,$/;"	f	class:Gudhi::multiparameter::mma::RU_matrix	typeref:typename:void
_add_to_column	multipers/gudhi/gudhi/Persistence_matrix/columns/column_utilities.h	/^bool _add_to_column(const Entry_range& source, Column& targetColumn)$/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:bool
_assert_options	multipers/gudhi/gudhi/Matrix.h	/^inline constexpr void Matrix<PersistenceMatrixOptions>::_assert_options() $/;"	f	class:Gudhi::persistence_matrix::Matrix	typeref:typename:void
_barcode	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^inline constexpr typename Chain_matrix<Master_matrix>::Barcode& Chain_matrix<Master_matrix>::_ba/;"	f	class:Gudhi::persistence_matrix::Chain_matrix	typeref:typename:Chain_matrix<Master_matrix>::Barcode &
_bc2py	multipers/mma_structures.pxd	/^cdef inline list[tuple[list[double],list[double]]] _bc2py(vector[pair[vector[double],vector[doub/;"	f
_birth	multipers/gudhi/gudhi/Persistence_matrix/chain_vine_swap.h	/^  Pos_index& _birth(Pos_index simplexIndex) {$/;"	f	class:Gudhi::persistence_matrix::Chain_barcode_swap	typeref:typename:Pos_index &
_birth	multipers/gudhi/gudhi/Persistence_matrix/ru_vine_swap.h	/^inline typename RU_vine_swap<Master_matrix>::Pos_index& RU_vine_swap<Master_matrix>::_birth(Pos_/;"	f	class:Gudhi::persistence_matrix::RU_vine_swap	typeref:typename:RU_vine_swap<Master_matrix>::Pos_index &
_blocks2boundary_dimension_grades	multipers/_slicer_meta.py	/^def _blocks2boundary_dimension_grades($/;"	f
_bottom	multipers/ml/mma.py	/^            def _bottom(mod):$/;"	f	member:MMA2Landscape.fit	file:
_build_from_H	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^inline void Chain_matrix<Master_matrix>::_build_from_H(ID_index cellID,$/;"	f	class:Gudhi::persistence_matrix::Chain_matrix	typeref:typename:void
_cc	multipers/data/graphs.py	/^    def _cc(g):$/;"	f	function:compute_cc	file:
_check_available	multipers/io.pyx	/^def _check_available(soft:str):$/;"	f
_check_axis	multipers/ml/signed_measures.py	/^    def _check_axis(self, X):$/;"	m	class:SignedMeasureFormatter
_check_backend	multipers/ml/signed_measures.py	/^    def _check_backend(self, X):$/;"	m	class:SignedMeasureFormatter
_check_installed	multipers/data/graphs.py	/^def _check_installed(dataset: str):$/;"	f
_check_measures	multipers/ml/signed_measures.py	/^    def _check_measures(self, X):$/;"	m	class:SignedMeasureFormatter
_check_resolution	multipers/ml/signed_measures.py	/^    def _check_resolution(self):$/;"	m	class:SignedMeasureFormatter
_check_sm	multipers/ml/signed_measures.py	/^    def _check_sm(sm) -> bool:$/;"	m	class:SignedMeasureFormatter	typeref:typename:bool
_check_weights	multipers/ml/signed_measures.py	/^    def _check_weights(self):$/;"	m	class:SignedMeasureFormatter
_clean	multipers/multiparameter_module_approximation/approximation.h	/^  static inline void _clean(births_type &list, bool keep_inf = true) { list.remove_empty_generat/;"	f	class:Gudhi::multiparameter::mma::Summand	typeref:typename:void
_clean	multipers/multiparameter_module_approximation/approximation.h	/^  static inline void _clean(deaths_type &list, bool keep_inf = true) { list.remove_empty_generat/;"	f	class:Gudhi::multiparameter::mma::Summand	typeref:typename:void
_clean	multipers/multiparameter_module_approximation/approximation.h	/^inline void Summand<value_type>::_clean(std::vector<filtration_type> &list, bool keep_inf) {$/;"	f	class:Gudhi::multiparameter::mma::Summand	typeref:typename:void
_cleanValues	multipers/multiparameter_module_approximation/list_column_2.h	/^inline void List_column::_cleanValues()$/;"	f	class:Vineyard::List_column	typeref:typename:void
_cleanValues	multipers/multiparameter_module_approximation/vector_column.h	/^inline void Vector_column::_cleanValues()$/;"	f	class:Vineyard::Vector_column	typeref:typename:void
_clear_column	multipers/multiparameter_module_approximation/vector_matrix.h	/^inline void Vector_matrix<Column_type>::_clear_column(index columnIndex)$/;"	f	class:Gudhi::multiparameter::mma::Vector_matrix	typeref:typename:void
_collapse_edge_list	multipers/multiparameter_edge_collapse.py	/^def _collapse_edge_list($/;"	f
_compute_2D_image	multipers/multiparameter_module_approximation/approximation.h	/^inline void Module<value_type>::_compute_2D_image(Module::image_type &image,$/;"	f	class:Gudhi::multiparameter::mma::Module	typeref:typename:void
_compute_grid_numpy	multipers/grids.pyx	/^def _compute_grid_numpy($/;"	f
_compute_interleaving	multipers/multiparameter_module_approximation/approximation.h	/^inline void Summand<value_type>::_compute_interleaving(const Box<value_type> &box) {$/;"	f	class:Gudhi::multiparameter::mma::Summand	typeref:typename:void
_compute_signed_measure_parts	multipers/ml/sliced_wasserstein.py	/^def _compute_signed_measure_parts(X):$/;"	f
_compute_signed_measure_projections	multipers/ml/sliced_wasserstein.py	/^def _compute_signed_measure_projections(X, num_directions, scales):$/;"	f
_container_insert	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix.h	/^inline void Base_matrix<Master_matrix>::_container_insert(const Column& column, [[maybe_unused]]/;"	f	class:Gudhi::persistence_matrix::Base_matrix	typeref:typename:void
_container_insert	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix.h	/^inline void Base_matrix<Master_matrix>::_container_insert(const Container& column, Index pos, Di/;"	f	class:Gudhi::persistence_matrix::Base_matrix	typeref:typename:void
_container_insert	multipers/gudhi/gudhi/Persistence_matrix/Boundary_matrix.h	/^inline void Boundary_matrix<Master_matrix>::_container_insert(const Column& column, [[maybe_unus/;"	f	class:Gudhi::persistence_matrix::Boundary_matrix	typeref:typename:void
_container_insert	multipers/gudhi/gudhi/Persistence_matrix/Boundary_matrix.h	/^inline void Boundary_matrix<Master_matrix>::_container_insert(const Container& column,$/;"	f	class:Gudhi::persistence_matrix::Boundary_matrix	typeref:typename:void
_container_insert	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^inline void Chain_matrix<Master_matrix>::_container_insert(const Column& column, [[maybe_unused]/;"	f	class:Gudhi::persistence_matrix::Chain_matrix	typeref:typename:void
_container_insert	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^inline void Chain_matrix<Master_matrix>::_container_insert(const Container& column, Index pos, D/;"	f	class:Gudhi::persistence_matrix::Chain_matrix	typeref:typename:void
_contains	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  static bool _contains(const Generator &a, const Generator &b) {$/;"	f	class:Gudhi::multi_filtration::Multi_critical_filtration	typeref:typename:bool
_d_inf	multipers/plots.py	/^def _d_inf(a, b):$/;"	f
_death	multipers/gudhi/gudhi/Persistence_matrix/chain_vine_swap.h	/^  Pos_index& _death(Pos_index simplexIndex) {$/;"	f	class:Gudhi::persistence_matrix::Chain_barcode_swap	typeref:typename:Pos_index &
_death	multipers/gudhi/gudhi/Persistence_matrix/ru_vine_swap.h	/^inline typename RU_vine_swap<Master_matrix>::Pos_index& RU_vine_swap<Master_matrix>::_death(Pos_/;"	f	class:Gudhi::persistence_matrix::RU_vine_swap	typeref:typename:RU_vine_swap<Master_matrix>::Pos_index &
_define_bandwidths	multipers/ml/point_clouds.py	/^    def _define_bandwidths(self, X):$/;"	m	class:PointCloud2FilteredComplex
_define_sts	multipers/ml/point_clouds.py	/^    def _define_sts(self):$/;"	m	class:PointCloud2FilteredComplex
_degree	multipers/data/graphs.py	/^    def _degree(g):$/;"	f	function:compute_degree	file:
_delete_entry	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^inline void Intrusive_list_column<Master_matrix>::_delete_entry(iterator& it)$/;"	f	class:Gudhi::persistence_matrix::Intrusive_list_column	typeref:typename:void
_delete_entry	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^inline void Intrusive_set_column<Master_matrix>::_delete_entry(iterator& it)$/;"	f	class:Gudhi::persistence_matrix::Intrusive_set_column	typeref:typename:void
_delete_entry	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^inline void List_column<Master_matrix>::_delete_entry(typename Column_support::iterator& it)$/;"	f	class:Gudhi::persistence_matrix::List_column	typeref:typename:void
_delete_entry	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^inline void Naive_vector_column<Master_matrix>::_delete_entry(Entry* entry)$/;"	f	class:Gudhi::persistence_matrix::Naive_vector_column	typeref:typename:void
_delete_entry	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^inline void Naive_vector_column<Master_matrix>::_delete_entry(typename Column_support::iterator&/;"	f	class:Gudhi::persistence_matrix::Naive_vector_column	typeref:typename:void
_delete_entry	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^inline void Set_column<Master_matrix>::_delete_entry(typename Column_support::iterator& it)$/;"	f	class:Gudhi::persistence_matrix::Set_column	typeref:typename:void
_delete_entry	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^inline void Small_vector_column<Master_matrix>::_delete_entry(Entry* entry)$/;"	f	class:Gudhi::persistence_matrix::Small_vector_column	typeref:typename:void
_delete_entry	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^inline void Small_vector_column<Master_matrix>::_delete_entry(typename Column_support::iterator&/;"	f	class:Gudhi::persistence_matrix::Small_vector_column	typeref:typename:void
_delete_entry	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^inline void Unordered_set_column<Master_matrix>::_delete_entry(typename Column_support::iterator/;"	f	class:Gudhi::persistence_matrix::Unordered_set_column	typeref:typename:void
_delete_entry	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^inline void Vector_column<Master_matrix>::_delete_entry(Entry* entry)$/;"	f	class:Gudhi::persistence_matrix::Vector_column	typeref:typename:void
_delete_entry	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^inline void Vector_column<Master_matrix>::_delete_entry(typename Column_support::iterator& it)$/;"	f	class:Gudhi::persistence_matrix::Vector_column	typeref:typename:void
_dgm2smi	multipers/ml/one.py	/^	def _dgm2smi(self, dgms:Iterable[np.ndarray]):$/;"	m	class:Dgms2SignedMeasureImage
_ds	multipers/ml/one.py	/^	def _ds(mu:list[np.ndarray], nus:list[list[np.ndarray]], dim:int): # mu and nu are lists of dia/;"	m	class:Dgms2SignedMeasureDistance
_exact_grid	multipers/torch/diff_grids.py	/^def _exact_grid(filtration_values, r=None):$/;"	f
_f	multipers/data/graphs.py	/^    def _f(g: nx.Graph):$/;"	f	function:compute_geodesic	file:
_f	multipers/data/graphs.py	/^    def _f(g: nx.Graph):$/;"	f	function:compute_intrinsic	file:
_factorize_max	multipers/multiparameter_module_approximation/approximation.h	/^inline void Summand<value_type>::_factorize_max(filtration_type &a, const filtration_type &b) {$/;"	f	class:Gudhi::multiparameter::mma::Summand	typeref:typename:void
_factorize_min	multipers/multiparameter_module_approximation/approximation.h	/^inline void Summand<value_type>::_factorize_min(filtration_type &a, const filtration_type &b) {$/;"	f	class:Gudhi::multiparameter::mma::Summand	typeref:typename:void
_fiedler	multipers/data/graphs.py	/^    def _fiedler(g):$/;"	f	function:compute_fiedler	file:
_first_dominates	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  static bool _first_dominates(const Generator &a, const Generator &b) {$/;"	f	class:Gudhi::multi_filtration::Multi_critical_filtration	typeref:typename:bool
_first_strictly_dominates	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  static bool _first_strictly_dominates(const Generator &a, const Generator &b) {$/;"	f	class:Gudhi::multi_filtration::Multi_critical_filtration	typeref:typename:bool
_for_python_plot	multipers/multiparameter_module_approximation/utilities.h	/^  __for_python_plot_type _for_python_plot(dimension_type dimension = -1,$/;"	f	struct:Gudhi::multiparameter::mma::MultiDiagrams	typeref:typename:__for_python_plot_type
_generator_can_be_added	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  bool _generator_can_be_added(const Generator &x, std::size_t curr, std::size_t &end) {$/;"	f	class:Gudhi::multi_filtration::Multi_critical_filtration	typeref:typename:bool
_generic_add	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^inline bool Unordered_set_column<Master_matrix>::_generic_add(const Entry_range& source,$/;"	f	class:Gudhi::persistence_matrix::Unordered_set_column	typeref:typename:bool
_generic_add	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^inline bool Vector_column<Master_matrix>::_generic_add(const Entry_range& column,$/;"	f	class:Gudhi::persistence_matrix::Vector_column	typeref:typename:bool
_generic_add_to_column	multipers/gudhi/gudhi/Persistence_matrix/columns/column_utilities.h	/^bool _generic_add_to_column(const Entry_range& source,$/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:bool
_generic_merge_entry_to_column	multipers/gudhi/gudhi/Persistence_matrix/columns/column_utilities.h	/^void _generic_merge_entry_to_column(Column& targetColumn,$/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:void
_get_bc_ST	multipers/distances.py	/^    def _get_bc_ST(st, basepoint, degree: int):$/;"	f	function:estimate_error	file:
_get_birth	multipers/gudhi/gudhi/Persistence_matrix/ru_vine_swap.h	/^inline typename RU_vine_swap<Master_matrix>::Pos_index RU_vine_swap<Master_matrix>::_get_birth($/;"	f	class:Gudhi::persistence_matrix::RU_vine_swap	typeref:typename:RU_vine_swap<Master_matrix>::Pos_index
_get_border	multipers/gudhi/gudhi/Persistence_matrix/ru_rep_cycles.h	/^RU_representative_cycles<Master_matrix>::_get_border(Index uIndex) {$/;"	f	class:Gudhi::persistence_matrix::RU_representative_cycles	typeref:typename:RU_representative_cycles<Master_matrix>::Cycle_border
_get_codensities	multipers/ml/point_clouds.py	/^    def _get_codensities(self, x_fit, x_sample):$/;"	m	class:PointCloud2FilteredComplex
_get_column	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix.h	/^inline const typename Base_matrix<Master_matrix>::Column& Base_matrix<Master_matrix>::_get_colum/;"	f	class:Gudhi::persistence_matrix::Base_matrix	typeref:typename:const typename Base_matrix<Master_matrix>::Column &
_get_column	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix.h	/^inline typename Base_matrix<Master_matrix>::Column& Base_matrix<Master_matrix>::_get_column(Inde/;"	f	class:Gudhi::persistence_matrix::Base_matrix	typeref:typename:Base_matrix<Master_matrix>::Column &
_get_column	multipers/gudhi/gudhi/Persistence_matrix/Boundary_matrix.h	/^inline const typename Boundary_matrix<Master_matrix>::Column& Boundary_matrix<Master_matrix>::_g/;"	f	class:Gudhi::persistence_matrix::Boundary_matrix	typeref:typename:const typename Boundary_matrix<Master_matrix>::Column &
_get_column	multipers/gudhi/gudhi/Persistence_matrix/Boundary_matrix.h	/^inline typename Boundary_matrix<Master_matrix>::Column& Boundary_matrix<Master_matrix>::_get_col/;"	f	class:Gudhi::persistence_matrix::Boundary_matrix	typeref:typename:Boundary_matrix<Master_matrix>::Column &
_get_current_filtration_value	multipers/multiparameter_module_approximation/vineyards.h	/^Vineyard_persistence<Vineyard_matrix_type>::_get_current_filtration_value($/;"	f	class:Gudhi::multiparameter::mma::Vineyard_persistence	typeref:typename:value_type
_get_death	multipers/gudhi/gudhi/Persistence_matrix/ru_vine_swap.h	/^inline typename RU_vine_swap<Master_matrix>::Pos_index RU_vine_swap<Master_matrix>::_get_death(I/;"	f	class:Gudhi::persistence_matrix::RU_vine_swap	typeref:typename:RU_vine_swap<Master_matrix>::Pos_index
_get_default_filtration_value	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  constexpr static Generators _get_default_filtration_value() { return Generators{Generator{_get/;"	f	class:Gudhi::multi_filtration::Multi_critical_filtration	typeref:typename:Generators
_get_default_value	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  constexpr static T _get_default_value() { return co ? Generator::T_inf : -Generator::T_inf; }$/;"	f	class:Gudhi::multi_filtration::Multi_critical_filtration	typeref:typename:T
_get_dependent_border	multipers/gudhi/gudhi/Persistence_matrix/ru_rep_cycles.h	/^RU_representative_cycles<Master_matrix>::_get_dependent_border(Index uIndex) {$/;"	f	class:Gudhi::persistence_matrix::RU_representative_cycles	typeref:typename:RU_representative_cycles<Master_matrix>::Cycle_border
_get_distance	multipers/ml/one.py	/^	def _get_distance(diagrams, SWD):$/;"	m	class:Dgms2SlicedWassersteinDistanceMatrices
_get_distance_quantiles_and_threshold	multipers/ml/point_clouds.py	/^    def _get_distance_quantiles_and_threshold(self, X, qs):$/;"	m	class:PointCloud2FilteredComplex
_get_domination_relation	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  static Rel _get_domination_relation(const Generator &a, const Generator &b) {$/;"	f	class:Gudhi::multi_filtration::Multi_critical_filtration	typeref:typename:Rel
_get_edge	multipers/gudhi/naive_merge_tree.h	/^  std::pair<index, index> _get_edge(index id1, index id2) const {$/;"	f	class:Naive_bottleneck_forest	typeref:typename:std::pair<index,index>
_get_entry	multipers/gudhi/gudhi/Persistence_matrix/columns/column_utilities.h	/^Entry* _get_entry(const Entry_iterator& itTarget)$/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:Entry *
_get_filtration_bounds	multipers/ml/signed_measures.py	/^    def _get_filtration_bounds(self, X, axis):$/;"	m	class:SignedMeasureFormatter
_get_initial_borders	multipers/gudhi/gudhi/Persistence_matrix/ru_rep_cycles.h	/^inline void RU_representative_cycles<Master_matrix>::_get_initial_borders(Index idx,$/;"	f	class:Gudhi::persistence_matrix::RU_representative_cycles	typeref:typename:void
_get_inverse	multipers/gudhi/gudhi/Fields/Multi_field_small.h	/^  static constexpr int _get_inverse(Element element, const Element mod) {$/;"	f	class:Gudhi::persistence_fields::Multi_field_element_with_small_characteristics	typeref:typename:int
_get_inverse	multipers/gudhi/gudhi/Fields/Multi_field_small_operators.h	/^inline constexpr long int Multi_field_operators_with_small_characteristics::_get_inverse(Element/;"	f	class:Gudhi::persistence_fields::Multi_field_operators_with_small_characteristics	typeref:typename:long int
_get_inverse	multipers/gudhi/gudhi/Fields/Multi_field_small_shared.h	/^  static constexpr int _get_inverse(Element element, const Characteristic mod) {$/;"	f	class:Gudhi::persistence_fields::Shared_multi_field_element_with_small_characteristics	typeref:typename:int
_get_inverse	multipers/gudhi/gudhi/Fields/Zp_field.h	/^  static int _get_inverse(Element element) {$/;"	f	class:Gudhi::persistence_fields::Zp_field_element	typeref:typename:int
_get_max_diagonal	multipers/multiparameter_module_approximation/approximation.h	/^inline value_type Summand<value_type>::_get_max_diagonal(const filtration_type &birth,$/;"	f	class:Gudhi::multiparameter::mma::Summand	typeref:typename:value_type
_get_module_bound	multipers/ml/mma.py	/^    def _get_module_bound(x, degree):$/;"	m	class:MMAFormatter
_get_mols_in_path	multipers/data/MOL2.py	/^def _get_mols_in_path(folder):$/;"	f
_get_nearest_common_ancestor	multipers/gudhi/naive_merge_tree.h	/^  index _get_nearest_common_ancestor(index firstIndex,$/;"	f	class:Naive_merge_forest	typeref:typename:index
_get_pivot_position	multipers/gudhi/gudhi/Persistence_matrix/chain_vine_swap.h	/^  Pos_index _get_pivot_position(ID_index pivot) const {$/;"	f	class:Gudhi::persistence_matrix::Chain_barcode_swap	typeref:typename:Pos_index
_get_pixel_value	multipers/multiparameter_module_approximation/approximation.h	/^inline value_type Module<value_type>::_get_pixel_value(const typename module_type::iterator star/;"	f	class:Gudhi::multiparameter::mma::Module	typeref:typename:value_type
_get_point_cloud_diameter	multipers/ml/one.py	/^	def _get_point_cloud_diameter(x):$/;"	m	class:PointCloud2SimplexTree
_get_real_row_index	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix.h	/^inline typename Base_matrix<Master_matrix>::Index Base_matrix<Master_matrix>::_get_real_row_inde/;"	f	class:Gudhi::persistence_matrix::Base_matrix	typeref:typename:Base_matrix<Master_matrix>::Index
_get_real_row_index	multipers/gudhi/gudhi/Persistence_matrix/Boundary_matrix.h	/^inline typename Boundary_matrix<Master_matrix>::Index Boundary_matrix<Master_matrix>::_get_real_/;"	f	class:Gudhi::persistence_matrix::Boundary_matrix	typeref:typename:Boundary_matrix<Master_matrix>::Index
_get_root	multipers/gudhi/naive_merge_tree.h	/^  index _get_root(index node) const {$/;"	f	class:Naive_merge_forest	typeref:typename:index
_get_row_id_from_position	multipers/gudhi/gudhi/Persistence_matrix/ru_vine_swap.h	/^inline typename RU_vine_swap<Master_matrix>::ID_index RU_vine_swap<Master_matrix>::_get_row_id_f/;"	f	class:Gudhi::persistence_matrix::RU_vine_swap	typeref:typename:RU_vine_swap<Master_matrix>::ID_index
_get_sts_alpha	multipers/ml/point_clouds.py	/^    def _get_sts_alpha(self, x: np.ndarray, return_alpha=False):$/;"	m	class:PointCloud2FilteredComplex
_get_sts_delaunay	multipers/ml/point_clouds.py	/^    def _get_sts_delaunay(self, x: np.ndarray):$/;"	m	class:PointCloud2FilteredComplex
_get_sts_rips	multipers/ml/point_clouds.py	/^    def _get_sts_rips(self, x):$/;"	m	class:PointCloud2FilteredComplex
_get_value	multipers/gudhi/gudhi/Fields/Multi_field_small.h	/^  static constexpr Element _get_value(Integer_type e) {$/;"	f	class:Gudhi::persistence_fields::Multi_field_element_with_small_characteristics	typeref:typename:Element
_get_value	multipers/gudhi/gudhi/Fields/Multi_field_small_shared.h	/^  static constexpr Element _get_value(Integer_type e) {$/;"	f	class:Gudhi::persistence_fields::Shared_multi_field_element_with_small_characteristics	typeref:typename:Element
_get_value	multipers/gudhi/gudhi/Fields/Z2_field.h	/^  static constexpr Element _get_value(Integer_type e) {$/;"	f	class:Gudhi::persistence_fields::Z2_field_element	typeref:typename:Element
_get_value	multipers/gudhi/gudhi/Fields/Zp_field.h	/^  static constexpr Element _get_value(Integer_type e) {$/;"	f	class:Gudhi::persistence_fields::Zp_field_element	typeref:typename:Element
_get_value	multipers/gudhi/gudhi/Fields/Zp_field_shared.h	/^  static constexpr Element _get_value(Integer_type e) {$/;"	f	class:Gudhi::persistence_fields::Shared_Zp_field_element	typeref:typename:Element
_hks	multipers/data/graphs.py	/^    def _hks(g: nx.Graph):$/;"	f	function:compute_hks	file:
_id_to_index	multipers/gudhi/gudhi/Persistence_matrix/Id_to_index_overlay.h	/^Id_to_index_overlay<Underlying_matrix, Master_matrix>::_id_to_index(ID_index id) const $/;"	f	class:Gudhi::persistence_matrix::Id_to_index_overlay	typeref:typename:Id_to_index_overlay<Underlying_matrix,Master_matrix>::Index
_id_to_index	multipers/gudhi/gudhi/Persistence_matrix/Id_to_index_overlay.h	/^Id_to_index_overlay<Underlying_matrix, Master_matrix>::_id_to_index(ID_index id)$/;"	f	class:Gudhi::persistence_matrix::Id_to_index_overlay	typeref:typename:Id_to_index_overlay<Underlying_matrix,Master_matrix>::Index &
_indexToBar	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^Chain_matrix<Master_matrix>::_indexToBar()$/;"	f	class:Gudhi::persistence_matrix::Chain_matrix	typeref:typename:Chain_matrix<Master_matrix>::Bar_dictionary &
_indexToBar	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^inline constexpr typename RU_matrix<Master_matrix>::Bar_dictionary& RU_matrix<Master_matrix>::_i/;"	f	class:Gudhi::persistence_matrix::RU_matrix	typeref:typename:RU_matrix<Master_matrix>::Bar_dictionary &
_infer_axis	multipers/ml/mma.py	/^    def _infer_axis(X):$/;"	m	class:MMAFormatter
_infer_bounding_box	multipers/ml/mma.py	/^    def _infer_bounding_box(self, X):$/;"	m	class:FilteredComplex2MMA
_infer_bounds	multipers/ml/mma.py	/^    def _infer_bounds(X, degrees=None, axis=[slice(None)], quantiles=None):$/;"	m	class:MMAFormatter
_infer_degrees	multipers/ml/mma.py	/^    def _infer_degrees(self, X):$/;"	m	class:MMAFormatter
_infer_filtration	multipers/ml/signed_measures.py	/^    def _infer_filtration(self, X):$/;"	m	class:FilteredComplex2SignedMeasure
_infer_grid	multipers/ml/mma.py	/^    def _infer_grid($/;"	m	class:MMAFormatter
_infer_grids	multipers/ml/signed_measures.py	/^    def _infer_grids(self, X):$/;"	m	class:SignedMeasureFormatter
_infer_num_parameters	multipers/ml/mma.py	/^    def _infer_num_parameters(X, ax=slice(None)):$/;"	m	class:MMAFormatter
_init_external_softwares	multipers/io.pyx	/^def _init_external_softwares(requires=[]):$/;"	f
_initialize_U	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^inline void RU_matrix<Master_matrix>::_initialize_U()$/;"	f	class:Gudhi::persistence_matrix::RU_matrix	typeref:typename:void
_initialize_U	multipers/multiparameter_module_approximation/ru_matrix.h	/^inline void RU_matrix<Column_type>::_initialize_U() {$/;"	f	class:Gudhi::multiparameter::mma::RU_matrix	typeref:typename:void
_initialize_filter	multipers/multiparameter_module_approximation/vineyards.h	/^inline void Vineyard_persistence<Vineyard_matrix_type>::_initialize_filter()$/;"	f	class:Gudhi::multiparameter::mma::Vineyard_persistence	typeref:typename:void
_initialize_map	multipers/gudhi/gudhi/Persistence_matrix/Id_to_index_overlay.h	/^inline void Id_to_index_overlay<Underlying_matrix, Master_matrix>::_initialize_map([[maybe_unuse/;"	f	class:Gudhi::persistence_matrix::Id_to_index_overlay	typeref:typename:void
_initialize_permutations	multipers/multiparameter_module_approximation/vineyards.h	/^inline void Vineyard_persistence<Vineyard_matrix_type>::_initialize_permutations()$/;"	f	class:Gudhi::multiparameter::mma::Vineyard_persistence	typeref:typename:void
_input_checks	multipers/ml/mma.py	/^    def _input_checks(self, X):$/;"	m	class:FilteredComplex2MMA
_input_checks	multipers/ml/signed_measures.py	/^    def _input_checks(self, X):$/;"	m	class:FilteredComplex2SignedMeasure
_insert	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix.h	/^inline void Base_matrix<Master_matrix>::_insert(const Container& column, Index columnIndex, Dime/;"	f	class:Gudhi::persistence_matrix::Base_matrix	typeref:typename:void
_insert_boundary	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^inline void RU_matrix<Master_matrix>::_insert_boundary(Index currentIndex)$/;"	f	class:Gudhi::persistence_matrix::RU_matrix	typeref:typename:void
_insert_chain	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^inline void Chain_matrix<Master_matrix>::_insert_chain(const Tmp_column& column, Dimension dimen/;"	f	class:Gudhi::persistence_matrix::Chain_matrix	typeref:typename:void
_insert_column	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix_with_column_compression.h	/^inline void Base_matrix_with_column_compression<Master_matrix>::_insert_column(Index columnIndex/;"	f	class:Gudhi::persistence_matrix::Base_matrix_with_column_compression	typeref:typename:void
_insert_double_column	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix_with_column_compression.h	/^inline void Base_matrix_with_column_compression<Master_matrix>::_insert_double_column($/;"	f	class:Gudhi::persistence_matrix::Base_matrix_with_column_compression	typeref:typename:void
_insert_entry	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^inline typename Intrusive_list_column<Master_matrix>::Entry* Intrusive_list_column<Master_matrix/;"	f	class:Gudhi::persistence_matrix::Intrusive_list_column	typeref:typename:Intrusive_list_column<Master_matrix>::Entry *
_insert_entry	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^inline void Intrusive_list_column<Master_matrix>::_insert_entry(ID_index rowIndex, const iterato/;"	f	class:Gudhi::persistence_matrix::Intrusive_list_column	typeref:typename:void
_insert_entry	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^inline typename Intrusive_set_column<Master_matrix>::Entry* Intrusive_set_column<Master_matrix>:/;"	f	class:Gudhi::persistence_matrix::Intrusive_set_column	typeref:typename:Intrusive_set_column<Master_matrix>::Entry *
_insert_entry	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^inline void Intrusive_set_column<Master_matrix>::_insert_entry(ID_index rowIndex, const iterator/;"	f	class:Gudhi::persistence_matrix::Intrusive_set_column	typeref:typename:void
_insert_entry	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^inline typename List_column<Master_matrix>::Entry* List_column<Master_matrix>::_insert_entry($/;"	f	class:Gudhi::persistence_matrix::List_column	typeref:typename:List_column<Master_matrix>::Entry *
_insert_entry	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^inline void List_column<Master_matrix>::_insert_entry(ID_index rowIndex,$/;"	f	class:Gudhi::persistence_matrix::List_column	typeref:typename:void
_insert_entry	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^inline typename Naive_vector_column<Master_matrix>::Entry* Naive_vector_column<Master_matrix>::_/;"	f	class:Gudhi::persistence_matrix::Naive_vector_column	typeref:typename:Naive_vector_column<Master_matrix>::Entry *
_insert_entry	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^inline void Naive_vector_column<Master_matrix>::_insert_entry(ID_index rowIndex, Column_support&/;"	f	class:Gudhi::persistence_matrix::Naive_vector_column	typeref:typename:void
_insert_entry	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^inline typename Set_column<Master_matrix>::Entry* Set_column<Master_matrix>::_insert_entry($/;"	f	class:Gudhi::persistence_matrix::Set_column	typeref:typename:Set_column<Master_matrix>::Entry *
_insert_entry	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^inline void Set_column<Master_matrix>::_insert_entry(ID_index rowIndex,$/;"	f	class:Gudhi::persistence_matrix::Set_column	typeref:typename:void
_insert_entry	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^inline typename Small_vector_column<Master_matrix>::Entry* Small_vector_column<Master_matrix>::_/;"	f	class:Gudhi::persistence_matrix::Small_vector_column	typeref:typename:Small_vector_column<Master_matrix>::Entry *
_insert_entry	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^inline void Small_vector_column<Master_matrix>::_insert_entry(ID_index rowIndex, Column_support&/;"	f	class:Gudhi::persistence_matrix::Small_vector_column	typeref:typename:void
_insert_entry	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^inline typename Unordered_set_column<Master_matrix>::Entry* Unordered_set_column<Master_matrix>:/;"	f	class:Gudhi::persistence_matrix::Unordered_set_column	typeref:typename:Unordered_set_column<Master_matrix>::Entry *
_insert_entry	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^inline void Unordered_set_column<Master_matrix>::_insert_entry(ID_index rowIndex)$/;"	f	class:Gudhi::persistence_matrix::Unordered_set_column	typeref:typename:void
_insert_entry	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^inline typename Vector_column<Master_matrix>::Entry* Vector_column<Master_matrix>::_insert_entry/;"	f	class:Gudhi::persistence_matrix::Vector_column	typeref:typename:Vector_column<Master_matrix>::Entry *
_insert_entry	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^inline void Vector_column<Master_matrix>::_insert_entry(ID_index rowIndex, Column_support& colum/;"	f	class:Gudhi::persistence_matrix::Vector_column	typeref:typename:void
_integrate_measure	multipers/ml/signed_measures.py	/^    def _integrate_measure(sm, filtrations):$/;"	m	class:SignedMeasureFormatter
_is_ancestor_of	multipers/gudhi/naive_merge_tree.h	/^  index _is_ancestor_of(index ancID, index descID, index endID = -1) const {$/;"	f	class:Naive_merge_forest	typeref:typename:index
_is_filtered_complex	multipers/ml/mma.py	/^    def _is_filtered_complex(input):$/;"	m	class:FilteredComplex2MMA
_is_filtered_complex	multipers/ml/signed_measures.py	/^    def _is_filtered_complex(input):$/;"	m	class:FilteredComplex2SignedMeasure
_is_negative_in_pair	multipers/gudhi/gudhi/Persistence_matrix/chain_vine_swap.h	/^inline bool Chain_vine_swap<Master_matrix>::_is_negative_in_pair(Index columnIndex) $/;"	f	class:Gudhi::persistence_matrix::Chain_vine_swap	typeref:typename:bool
_is_paired	multipers/gudhi/gudhi/Persistence_matrix/ru_vine_swap.h	/^inline bool RU_vine_swap<Master_matrix>::_is_paired(Index columnIndex) $/;"	f	class:Gudhi::persistence_matrix::RU_vine_swap	typeref:typename:bool
_is_positive_edge	multipers/gudhi/naive_merge_tree.h	/^  bool _is_positive_edge(index position) const {$/;"	f	class:Naive_merge_forest	typeref:typename:bool
_is_prime	multipers/gudhi/gudhi/Fields/Multi_field.h	/^inline constexpr bool Multi_field_element<minimum, maximum>::_is_prime(const int p) {$/;"	f	class:Gudhi::persistence_fields::Multi_field_element	typeref:typename:bool
_is_prime	multipers/gudhi/gudhi/Fields/Multi_field_operators.h	/^  static constexpr bool _is_prime(const int p) {$/;"	f	class:Gudhi::persistence_fields::Multi_field_operators	typeref:typename:bool
_is_prime	multipers/gudhi/gudhi/Fields/Multi_field_shared.h	/^inline constexpr bool Shared_multi_field_element::_is_prime(const int p) {$/;"	f	class:Gudhi::persistence_fields::Shared_multi_field_element	typeref:typename:bool
_is_prime	multipers/gudhi/gudhi/Fields/Multi_field_small.h	/^  static constexpr bool _is_prime(const unsigned int p) {$/;"	f	class:Gudhi::persistence_fields::Multi_field_element_with_small_characteristics	typeref:typename:bool
_is_prime	multipers/gudhi/gudhi/Fields/Multi_field_small_operators.h	/^inline constexpr bool Multi_field_operators_with_small_characteristics::_is_prime(const int p) {$/;"	f	class:Gudhi::persistence_fields::Multi_field_operators_with_small_characteristics	typeref:typename:bool
_is_prime	multipers/gudhi/gudhi/Fields/Multi_field_small_shared.h	/^  static constexpr bool _is_prime(const unsigned int p) {$/;"	f	class:Gudhi::persistence_fields::Shared_multi_field_element_with_small_characteristics	typeref:typename:bool
_is_prime	multipers/gudhi/gudhi/Fields/Zp_field.h	/^  static constexpr bool _is_prime() {$/;"	f	class:Gudhi::persistence_fields::Zp_field_element	typeref:typename:bool
_is_trivial	multipers/ml/signed_measures.py	/^    def _is_trivial(rectangle: np.ndarray):$/;"	f	function:tensor_möbius_inversion	file:
_is_vertex	multipers/gudhi/naive_merge_tree.h	/^  bool _is_vertex(index nodeIndex) const {$/;"	f	class:Naive_merge_forest	typeref:typename:bool
_kernel	multipers/ml/convolutions.py	/^def _kernel($/;"	f
_matrix	multipers/gudhi/gudhi/Persistence_matrix/base_pairing.h	/^  constexpr Base_matrix* _matrix() { return static_cast<Base_matrix*>(this); }$/;"	f	class:Gudhi::persistence_matrix::Base_pairing	typeref:typename:Base_matrix *
_matrix	multipers/gudhi/gudhi/Persistence_matrix/base_pairing.h	/^  constexpr const Base_matrix* _matrix() const { return static_cast<const Base_matrix*>(this); }$/;"	f	class:Gudhi::persistence_matrix::Base_pairing	typeref:typename:const Base_matrix *
_matrix	multipers/gudhi/gudhi/Persistence_matrix/base_swap.h	/^  constexpr Base_matrix* _matrix() { return static_cast<Base_matrix*>(this); }$/;"	f	class:Gudhi::persistence_matrix::Base_swap	typeref:typename:Base_matrix *
_matrix	multipers/gudhi/gudhi/Persistence_matrix/base_swap.h	/^  constexpr const Base_matrix* _matrix() const { return static_cast<const Base_matrix*>(this); }$/;"	f	class:Gudhi::persistence_matrix::Base_swap	typeref:typename:const Base_matrix *
_matrix	multipers/gudhi/gudhi/Persistence_matrix/chain_rep_cycles.h	/^  constexpr Master_chain_matrix* _matrix() { return static_cast<Master_chain_matrix*>(this); }$/;"	f	class:Gudhi::persistence_matrix::Chain_representative_cycles	typeref:typename:Master_chain_matrix *
_matrix	multipers/gudhi/gudhi/Persistence_matrix/chain_rep_cycles.h	/^  constexpr const Master_chain_matrix* _matrix() const { return static_cast<const Master_chain_m/;"	f	class:Gudhi::persistence_matrix::Chain_representative_cycles	typeref:typename:const Master_chain_matrix *
_matrix	multipers/gudhi/gudhi/Persistence_matrix/chain_vine_swap.h	/^  constexpr Master_chain_matrix* _matrix() { return static_cast<Master_chain_matrix*>(this); }$/;"	f	class:Gudhi::persistence_matrix::Chain_vine_swap	typeref:typename:Master_chain_matrix *
_matrix	multipers/gudhi/gudhi/Persistence_matrix/chain_vine_swap.h	/^  constexpr const Master_chain_matrix* _matrix() const { return static_cast<const Master_chain_m/;"	f	class:Gudhi::persistence_matrix::Chain_vine_swap	typeref:typename:const Master_chain_matrix *
_matrix	multipers/gudhi/gudhi/Persistence_matrix/ru_rep_cycles.h	/^  constexpr Master_RU_matrix* _matrix() { return static_cast<Master_RU_matrix*>(this); }$/;"	f	class:Gudhi::persistence_matrix::RU_representative_cycles	typeref:typename:Master_RU_matrix *
_matrix	multipers/gudhi/gudhi/Persistence_matrix/ru_rep_cycles.h	/^  constexpr const Master_RU_matrix* _matrix() const { return static_cast<const Master_RU_matrix*/;"	f	class:Gudhi::persistence_matrix::RU_representative_cycles	typeref:typename:const Master_RU_matrix *
_matrix	multipers/gudhi/gudhi/Persistence_matrix/ru_vine_swap.h	/^  constexpr Master_RU_matrix* _matrix() { return static_cast<Master_RU_matrix*>(this); }$/;"	f	class:Gudhi::persistence_matrix::RU_vine_swap	typeref:typename:Master_RU_matrix *
_matrix	multipers/gudhi/gudhi/Persistence_matrix/ru_vine_swap.h	/^  constexpr const Master_RU_matrix* _matrix() const { return static_cast<const Master_RU_matrix*/;"	f	class:Gudhi::persistence_matrix::RU_vine_swap	typeref:typename:const Master_RU_matrix *
_maybe_from_dump	multipers/ml/mma.py	/^    def _maybe_from_dump(X_in):$/;"	m	class:MMAFormatter
_mol2graphst	multipers/data/MOL2.py	/^def _mol2graphst($/;"	f
_mol2ripsst	multipers/data/MOL2.py	/^def _mol2ripsst($/;"	f
_multifiltration	multipers/multi_parameter_rank_invariant/function_rips.h	/^using _multifiltration = typename Gudhi::multi_filtration::One_critical_filtration<value_type>;$/;"	t	namespace:Gudhi::multiparameter::function_rips	typeref:typename:Gudhi::multi_filtration::One_critical_filtration<value_type>
_multiply	multipers/gudhi/gudhi/Fields/Multi_field_small.h	/^  static constexpr Element _multiply(Element a, Element b) {$/;"	f	class:Gudhi::persistence_fields::Multi_field_element_with_small_characteristics	typeref:typename:Element
_multiply	multipers/gudhi/gudhi/Fields/Multi_field_small_operators.h	/^Multi_field_operators_with_small_characteristics::_multiply(Element a, Element b,$/;"	f	class:Gudhi::persistence_fields::Multi_field_operators_with_small_characteristics	typeref:typename:Multi_field_operators_with_small_characteristics::Element
_multiply	multipers/gudhi/gudhi/Fields/Multi_field_small_shared.h	/^  static Element _multiply(Element a, Element b) {$/;"	f	class:Gudhi::persistence_fields::Shared_multi_field_element_with_small_characteristics	typeref:typename:Element
_multiply	multipers/gudhi/gudhi/Fields/Zp_field.h	/^  static Element _multiply(Element element, Element v) {$/;"	f	class:Gudhi::persistence_fields::Zp_field_element	typeref:typename:Element
_multiply	multipers/gudhi/gudhi/Fields/Zp_field_operators.h	/^  static Element _multiply(Element e1, Element e2, Characteristic characteristic) {$/;"	f	class:Gudhi::persistence_fields::Zp_field_operators	typeref:typename:Element
_multiply	multipers/gudhi/gudhi/Fields/Zp_field_shared.h	/^  static Element _multiply(Element element, Element v) {$/;"	f	class:Gudhi::persistence_fields::Shared_Zp_field_element	typeref:typename:Element
_multiply_source_and_add	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^inline bool Heap_column<Master_matrix>::_multiply_source_and_add(const Entry_range& column, cons/;"	f	class:Gudhi::persistence_matrix::Heap_column	typeref:typename:bool
_multiply_source_and_add	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^inline bool Intrusive_list_column<Master_matrix>::_multiply_source_and_add(const Entry_range& co/;"	f	class:Gudhi::persistence_matrix::Intrusive_list_column	typeref:typename:bool
_multiply_source_and_add	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^inline bool Intrusive_set_column<Master_matrix>::_multiply_source_and_add(const Entry_range& col/;"	f	class:Gudhi::persistence_matrix::Intrusive_set_column	typeref:typename:bool
_multiply_source_and_add	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^inline bool List_column<Master_matrix>::_multiply_source_and_add(const Entry_range& column, cons/;"	f	class:Gudhi::persistence_matrix::List_column	typeref:typename:bool
_multiply_source_and_add	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^inline bool Naive_vector_column<Master_matrix>::_multiply_source_and_add(const Entry_range& colu/;"	f	class:Gudhi::persistence_matrix::Naive_vector_column	typeref:typename:bool
_multiply_source_and_add	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^inline bool Set_column<Master_matrix>::_multiply_source_and_add(const Entry_range& column, const/;"	f	class:Gudhi::persistence_matrix::Set_column	typeref:typename:bool
_multiply_source_and_add	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^inline bool Small_vector_column<Master_matrix>::_multiply_source_and_add(const Entry_range& colu/;"	f	class:Gudhi::persistence_matrix::Small_vector_column	typeref:typename:bool
_multiply_source_and_add	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^inline bool Unordered_set_column<Master_matrix>::_multiply_source_and_add(const Entry_range& col/;"	f	class:Gudhi::persistence_matrix::Unordered_set_column	typeref:typename:bool
_multiply_source_and_add	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^inline bool Vector_column<Master_matrix>::_multiply_source_and_add(const Entry_range& column, co/;"	f	class:Gudhi::persistence_matrix::Vector_column	typeref:typename:bool
_multiply_source_and_add_to_column	multipers/gudhi/gudhi/Persistence_matrix/columns/column_utilities.h	/^bool _multiply_source_and_add_to_column(const typename Column::Field_element& val,$/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:bool
_multiply_target_and_add	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^inline bool Heap_column<Master_matrix>::_multiply_target_and_add(const Field_element& val, const/;"	f	class:Gudhi::persistence_matrix::Heap_column	typeref:typename:bool
_multiply_target_and_add	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^inline bool Intrusive_list_column<Master_matrix>::_multiply_target_and_add(const Field_element& /;"	f	class:Gudhi::persistence_matrix::Intrusive_list_column	typeref:typename:bool
_multiply_target_and_add	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^inline bool Intrusive_set_column<Master_matrix>::_multiply_target_and_add(const Field_element& v/;"	f	class:Gudhi::persistence_matrix::Intrusive_set_column	typeref:typename:bool
_multiply_target_and_add	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^inline bool List_column<Master_matrix>::_multiply_target_and_add(const Field_element& val, const/;"	f	class:Gudhi::persistence_matrix::List_column	typeref:typename:bool
_multiply_target_and_add	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^inline bool Naive_vector_column<Master_matrix>::_multiply_target_and_add(const Field_element& va/;"	f	class:Gudhi::persistence_matrix::Naive_vector_column	typeref:typename:bool
_multiply_target_and_add	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^inline bool Set_column<Master_matrix>::_multiply_target_and_add(const Field_element& val, const /;"	f	class:Gudhi::persistence_matrix::Set_column	typeref:typename:bool
_multiply_target_and_add	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^inline bool Small_vector_column<Master_matrix>::_multiply_target_and_add(const Field_element& va/;"	f	class:Gudhi::persistence_matrix::Small_vector_column	typeref:typename:bool
_multiply_target_and_add	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^inline bool Unordered_set_column<Master_matrix>::_multiply_target_and_add(const Field_element& v/;"	f	class:Gudhi::persistence_matrix::Unordered_set_column	typeref:typename:bool
_multiply_target_and_add	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^inline bool Vector_column<Master_matrix>::_multiply_target_and_add(const Field_element& val, con/;"	f	class:Gudhi::persistence_matrix::Vector_column	typeref:typename:bool
_multiply_target_and_add_to_column	multipers/gudhi/gudhi/Persistence_matrix/columns/column_utilities.h	/^bool _multiply_target_and_add_to_column(const typename Column::Field_element& val,$/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:bool
_multist	multipers/multi_parameter_rank_invariant/function_rips.h	/^using _multist = python_interface::Simplex_tree_multi_interface<_multifiltration>;$/;"	t	namespace:Gudhi::multiparameter::function_rips	typeref:typename:python_interface::Simplex_tree_multi_interface<_multifiltration>
_neg_edge_neg_edge_switch	multipers/gudhi/naive_merge_tree.h	/^  void _neg_edge_neg_edge_switch(index position, index e1V1Position,$/;"	f	class:Naive_merge_forest	typeref:typename:void
_neg_edge_pos_edge_switch	multipers/gudhi/naive_merge_tree.h	/^  void _neg_edge_pos_edge_switch(index position, index e1V1Position,$/;"	f	class:Naive_merge_forest	typeref:typename:void
_negative_positive_transpose	multipers/gudhi/gudhi/Persistence_matrix/ru_vine_swap.h	/^inline void RU_vine_swap<Master_matrix>::_negative_positive_transpose(Index columnIndex) $/;"	f	class:Gudhi::persistence_matrix::RU_vine_swap	typeref:typename:void
_negative_positive_vine_swap	multipers/gudhi/gudhi/Persistence_matrix/chain_vine_swap.h	/^inline typename Chain_vine_swap<Master_matrix>::Index Chain_vine_swap<Master_matrix>::_negative_/;"	f	class:Gudhi::persistence_matrix::Chain_vine_swap	typeref:typename:Chain_vine_swap<Master_matrix>::Index
_negative_positive_vine_swap	multipers/gudhi/gudhi/Persistence_matrix/ru_vine_swap.h	/^inline bool RU_vine_swap<Master_matrix>::_negative_positive_vine_swap(Index columnIndex) $/;"	f	class:Gudhi::persistence_matrix::RU_vine_swap	typeref:typename:bool
_negative_positive_vine_swap	multipers/multiparameter_module_approximation/ru_matrix.h	/^inline void RU_matrix<Column_type>::_negative_positive_vine_swap(index index) {$/;"	f	class:Gudhi::multiparameter::mma::RU_matrix	typeref:typename:void
_negative_transpose	multipers/gudhi/gudhi/Persistence_matrix/ru_vine_swap.h	/^inline void RU_vine_swap<Master_matrix>::_negative_transpose(Index columnIndex) $/;"	f	class:Gudhi::persistence_matrix::RU_vine_swap	typeref:typename:void
_negative_vine_swap	multipers/gudhi/gudhi/Persistence_matrix/chain_vine_swap.h	/^inline typename Chain_vine_swap<Master_matrix>::Index Chain_vine_swap<Master_matrix>::_negative_/;"	f	class:Gudhi::persistence_matrix::Chain_vine_swap	typeref:typename:Chain_vine_swap<Master_matrix>::Index
_negative_vine_swap	multipers/gudhi/gudhi/Persistence_matrix/ru_vine_swap.h	/^inline bool RU_vine_swap<Master_matrix>::_negative_vine_swap(Index columnIndex) $/;"	f	class:Gudhi::persistence_matrix::RU_vine_swap	typeref:typename:bool
_negative_vine_swap	multipers/multiparameter_module_approximation/ru_matrix.h	/^inline void RU_matrix<Column_type>::_negative_vine_swap(index index) {$/;"	f	class:Gudhi::multiparameter::mma::RU_matrix	typeref:typename:void
_nextPosition	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^inline constexpr typename Chain_matrix<Master_matrix>::Pos_index& Chain_matrix<Master_matrix>::_/;"	f	class:Gudhi::persistence_matrix::Chain_matrix	typeref:typename:Chain_matrix<Master_matrix>::Pos_index &
_no_G_death_comparator	multipers/gudhi/gudhi/Persistence_matrix/chain_vine_swap.h	/^constexpr bool _no_G_death_comparator([[maybe_unused]] unsigned int columnIndex1,$/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:bool
_orderRows	multipers/gudhi/gudhi/Persistence_matrix/base_swap.h	/^inline void Base_swap<Master_matrix, Base_matrix>::_orderRows()$/;"	f	class:Gudhi::persistence_matrix::Base_swap	typeref:typename:void
_orderRows	multipers/multiparameter_module_approximation/vector_matrix.h	/^inline void Vector_matrix<Column_type>::_orderRows()$/;"	f	class:Gudhi::multiparameter::mma::Vector_matrix	typeref:typename:void
_orderRowsIfNecessary	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix.h	/^inline void Base_matrix<Master_matrix>::_orderRowsIfNecessary() $/;"	f	class:Gudhi::persistence_matrix::Base_matrix	typeref:typename:void
_orderRowsIfNecessary	multipers/gudhi/gudhi/Persistence_matrix/Boundary_matrix.h	/^inline void Boundary_matrix<Master_matrix>::_orderRowsIfNecessary() $/;"	f	class:Gudhi::persistence_matrix::Boundary_matrix	typeref:typename:void
_pairwise	multipers/ml/sliced_wasserstein.py	/^def _pairwise(fallback, skipdiag, X, Y, metric, n_jobs):$/;"	f
_params_check	multipers/ml/signed_measures.py	/^    def _params_check(self):$/;"	m	class:FilteredComplex2SignedMeasure
_path_init	multipers/io.pyx	/^def _path_init(soft:str|os.PathLike):$/;"	f
_plot_imgs	multipers/ml/signed_measures.py	/^    def _plot_imgs(self, imgs: Iterable[np.ndarray], size=4):$/;"	m	class:SignedMeasure2Convolution
_plot_rectangle	multipers/ml/signed_measures.py	/^        def _plot_rectangle(rectangle: np.ndarray, weight: float):$/;"	f	function:tensor_möbius_inversion	file:
_plot_rectangle	multipers/plots.py	/^def _plot_rectangle(rectangle: np.ndarray, weight, **plt_kwargs):$/;"	f
_plot_signed_measure_2	multipers/plots.py	/^def _plot_signed_measure_2($/;"	f
_plot_signed_measure_4	multipers/plots.py	/^def _plot_signed_measure_4($/;"	f
_plot_signed_measures	multipers/ml/signed_measures.py	/^    def _plot_signed_measures(self, sms: Iterable[np.ndarray], size=4):$/;"	m	class:SignedMeasureFormatter
_pop_pivot	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^inline typename Heap_column<Master_matrix>::Entry* Heap_column<Master_matrix>::_pop_pivot()$/;"	f	class:Gudhi::persistence_matrix::Heap_column	typeref:typename:Heap_column<Master_matrix>::Entry *
_pop_pivot	multipers/multiparameter_module_approximation/heap_column.h	/^inline int Heap_column::_pop_pivot()$/;"	f	class:Vineyard::Heap_column	typeref:typename:int
_pos_edge_edge_switch	multipers/gudhi/naive_merge_tree.h	/^  void _pos_edge_edge_switch(index position, index e2V1Position,$/;"	f	class:Naive_merge_forest	typeref:typename:void
_positionToRowIdx	multipers/gudhi/gudhi/Persistence_matrix/ru_vine_swap.h	/^inline constexpr auto& RU_vine_swap<Master_matrix>::_positionToRowIdx()$/;"	f	class:Gudhi::persistence_matrix::RU_vine_swap	typeref:typename:auto &
_positive_negative_transpose	multipers/gudhi/gudhi/Persistence_matrix/ru_vine_swap.h	/^inline void RU_vine_swap<Master_matrix>::_positive_negative_transpose(Index columnIndex) $/;"	f	class:Gudhi::persistence_matrix::RU_vine_swap	typeref:typename:void
_positive_negative_vine_swap	multipers/gudhi/gudhi/Persistence_matrix/chain_vine_swap.h	/^inline typename Chain_vine_swap<Master_matrix>::Index Chain_vine_swap<Master_matrix>::_positive_/;"	f	class:Gudhi::persistence_matrix::Chain_vine_swap	typeref:typename:Chain_vine_swap<Master_matrix>::Index
_positive_negative_vine_swap	multipers/gudhi/gudhi/Persistence_matrix/ru_vine_swap.h	/^inline bool RU_vine_swap<Master_matrix>::_positive_negative_vine_swap(Index columnIndex) $/;"	f	class:Gudhi::persistence_matrix::RU_vine_swap	typeref:typename:bool
_positive_negative_vine_swap	multipers/multiparameter_module_approximation/ru_matrix.h	/^inline void RU_matrix<Column_type>::_positive_negative_vine_swap(index index) {$/;"	f	class:Gudhi::multiparameter::mma::RU_matrix	typeref:typename:void
_positive_transpose	multipers/gudhi/gudhi/Persistence_matrix/ru_vine_swap.h	/^inline void RU_vine_swap<Master_matrix>::_positive_transpose(Index columnIndex) $/;"	f	class:Gudhi::persistence_matrix::RU_vine_swap	typeref:typename:void
_positive_vine_swap	multipers/gudhi/gudhi/Persistence_matrix/chain_vine_swap.h	/^inline typename Chain_vine_swap<Master_matrix>::Index Chain_vine_swap<Master_matrix>::_positive_/;"	f	class:Gudhi::persistence_matrix::Chain_vine_swap	typeref:typename:Chain_vine_swap<Master_matrix>::Index
_positive_vine_swap	multipers/gudhi/gudhi/Persistence_matrix/ru_vine_swap.h	/^inline bool RU_vine_swap<Master_matrix>::_positive_vine_swap(Index columnIndex) $/;"	f	class:Gudhi::persistence_matrix::RU_vine_swap	typeref:typename:bool
_positive_vine_swap	multipers/multiparameter_module_approximation/ru_matrix.h	/^inline void RU_matrix<Column_type>::_positive_vine_swap(index index) {$/;"	f	class:Gudhi::multiparameter::mma::RU_matrix	typeref:typename:void
_print_stats	multipers/ml/signed_measures.py	/^    def _print_stats(self, X):$/;"	m	class:SignedMeasureFormatter
_print_subtree	multipers/gudhi/naive_merge_tree.h	/^  void _print_subtree(std::ostream &stream, const std::string& prefix, index id, bool isLeft){$/;"	f	class:Naive_merge_forest	typeref:typename:void
_prune	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^inline void Heap_column<Master_matrix>::_prune()$/;"	f	class:Gudhi::persistence_matrix::Heap_column	typeref:typename:void
_prune	multipers/multiparameter_module_approximation/heap_column.h	/^inline void Heap_column::_prune()$/;"	f	class:Vineyard::Heap_column	typeref:typename:void
_pts_convolution_pykeops	multipers/ml/convolutions.py	/^def _pts_convolution_pykeops($/;"	f
_pts_convolution_sparse_old	multipers/ml/convolutions.py	/^def _pts_convolution_sparse_old($/;"	f
_put_temp_files_to_ram	multipers/io.pyx	/^def _put_temp_files_to_ram():$/;"	f
_quantile_grid	multipers/torch/diff_grids.py	/^def _quantile_grid(filtration_values, r: int):$/;"	f
_rec_add_cone	multipers/tensor/tensor.h	/^  void _rec_add_cone(const std::vector<indices_type> &basepoint,$/;"	f	class:tensor::static_tensor_view	typeref:typename:void
_rec_add_cone_boundary	multipers/tensor/tensor.h	/^  void _rec_add_cone_boundary(const std::vector<indices_type> &basepoint,$/;"	f	class:tensor::static_tensor_view	typeref:typename:void
_rec_get_hilbert_surface	multipers/multi_parameter_rank_invariant/hilbert_function.h	/^void _rec_get_hilbert_surface($/;"	f	namespace:Gudhi::multiparameter::hilbert_function	typeref:typename:void
_rec_get_hilbert_surface	multipers/multi_parameter_rank_invariant/hilbert_function.h	/^void _rec_get_hilbert_surface(python_interface::Simplex_tree_multi_interface<Filtration> &st_mul/;"	f	namespace:Gudhi::multiparameter::hilbert_function	typeref:typename:void
_rec_mma	multipers/multiparameter_module_approximation/approximation.h	/^void _rec_mma(Module<typename Filtration_value::value_type> &module,$/;"	f	namespace:Gudhi::multiparameter::mma	typeref:typename:void
_rec_mma2	multipers/multiparameter_module_approximation/approximation.h	/^void _rec_mma2(Module<typename Filtration_value::value_type> &module,$/;"	f	namespace:Gudhi::multiparameter::mma	typeref:typename:void
_rectangle	multipers/plots.py	/^def _rectangle(x, y, color, alpha):$/;"	f
_rectangle_box	multipers/plots.py	/^        from shapely.geometry import box as _rectangle_box$/;"	Y	function:plot2d_PyModule	file:	nameref:unknown:box
_rectangle_volume	multipers/multiparameter_module_approximation/approximation.h	/^inline value_type Summand<value_type>::_rectangle_volume(const filtration_type &a, const filtrat/;"	f	class:Gudhi::multiparameter::mma::Summand	typeref:typename:value_type
_reduce	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^inline void RU_matrix<Master_matrix>::_reduce()$/;"	f	class:Gudhi::persistence_matrix::RU_matrix	typeref:typename:void
_reduce	multipers/gudhi/gudhi/Persistence_matrix/base_pairing.h	/^inline void Base_pairing<Master_matrix>::_reduce() $/;"	f	class:Gudhi::persistence_matrix::Base_pairing	typeref:typename:void
_reduce_boundary	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^inline std::vector<typename Master_matrix::Entry_representative> Chain_matrix<Master_matrix>::_r/;"	f	class:Gudhi::persistence_matrix::Chain_matrix	typeref:typename:std::vector<typename Master_matrix::Entry_representative>
_reduce_by_F	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^inline void Chain_matrix<Master_matrix>::_reduce_by_F(Tmp_column& column, $/;"	f	class:Gudhi::persistence_matrix::Chain_matrix	typeref:typename:void
_reduce_by_G	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^inline void Chain_matrix<Master_matrix>::_reduce_by_G(Tmp_column& column,$/;"	f	class:Gudhi::persistence_matrix::Chain_matrix	typeref:typename:void
_reduce_column	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^inline void RU_matrix<Master_matrix>::_reduce_column(Index target, Index eventIndex)$/;"	f	class:Gudhi::persistence_matrix::RU_matrix	typeref:typename:void
_reduce_column_by	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^inline void RU_matrix<Master_matrix>::_reduce_column_by(Index target, Index source)$/;"	f	class:Gudhi::persistence_matrix::RU_matrix	typeref:typename:void
_reduce_last_column	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^inline void RU_matrix<Master_matrix>::_reduce_last_column(Index lastIndex)$/;"	f	class:Gudhi::persistence_matrix::RU_matrix	typeref:typename:void
_regular_closest	multipers/torch/diff_grids.py	/^def _regular_closest(f, r: int, unique: bool = True):$/;"	f
_regular_closest_grid	multipers/torch/diff_grids.py	/^def _regular_closest_grid(filtration_values, r: int):$/;"	f
_regular_left	multipers/torch/diff_grids.py	/^def _regular_left(f, r: int, unique: bool = True):$/;"	f
_regular_left_grid	multipers/torch/diff_grids.py	/^def _regular_left_grid(filtration_values, r: int):$/;"	f
_remove_last	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^inline void Chain_matrix<Master_matrix>::_remove_last(Index lastIndex)$/;"	f	class:Gudhi::persistence_matrix::Chain_matrix	typeref:typename:void
_remove_last	multipers/gudhi/gudhi/Persistence_matrix/base_pairing.h	/^inline void Base_pairing<Master_matrix>::_remove_last(Pos_index columnIndex) $/;"	f	class:Gudhi::persistence_matrix::Base_pairing	typeref:typename:void
_remove_last	multipers/gudhi/gudhi/Persistence_matrix/ru_pairing.h	/^  void _remove_last(Pos_index eventIndex) {$/;"	f	class:Gudhi::persistence_matrix::RU_pairing	typeref:typename:void
_remove_last_in_barcode	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^inline void RU_matrix<Master_matrix>::_remove_last_in_barcode(Pos_index eventIndex)$/;"	f	class:Gudhi::persistence_matrix::RU_matrix	typeref:typename:void
_reroot	multipers/gudhi/naive_merge_tree.h	/^  void _reroot(index id) {$/;"	f	class:Naive_bottleneck_forest	typeref:typename:void
_rescale_measures	multipers/ml/signed_measures.py	/^    def _rescale_measures(self, X):$/;"	m	class:SignedMeasureFormatter
_root	multipers/gudhi/naive_merge_tree.h	/^  void _root(index id) {$/;"	f	class:Naive_bottleneck_forest	typeref:typename:void
_signed_measure_from_scc	multipers/_signed_measure_meta.py	/^def _signed_measure_from_scc($/;"	f	typeref:typename:list[tuple[np.ndarray,np.ndarray]]
_signed_measure_from_slicer	multipers/_signed_measure_meta.py	/^def _signed_measure_from_slicer($/;"	f	typeref:typename:list[tuple[np.ndarray,np.ndarray]]
_size	multipers/tensor/tensor.h	/^  std::size_t _size() const {  \/\/ for construction$/;"	f	class:tensor::static_tensor_view_view	typeref:typename:std::size_t
_sklearn_wrapper	multipers/ml/sliced_wasserstein.py	/^def _sklearn_wrapper(metric, X, Y, **kwargs):$/;"	f
_sliced_wasserstein_distance	multipers/ml/sliced_wasserstein.py	/^def _sliced_wasserstein_distance(meas1, meas2, num_directions, scales=None):$/;"	f
_sliced_wasserstein_distance_on_projections	multipers/ml/sliced_wasserstein.py	/^def _sliced_wasserstein_distance_on_projections(meas1, meas2, scales=None):$/;"	f
_slicer_from_blocks	multipers/_slicer_meta.py	/^def _slicer_from_blocks($/;"	f
_slicer_from_simplextree	multipers/_slicer_meta.py	/^def _slicer_from_simplextree(st, backend, vineyard):$/;"	f
_sm2smi	multipers/ml/signed_measures.py	/^    def _sm2smi(self, signed_measures: Iterable[np.ndarray]):$/;"	m	class:SignedMeasure2Convolution
_sort_matrix	multipers/multiparameter_module_approximation/vineyards.h	/^inline void Vineyard_persistence<Vineyard_matrix_type>::_sort_matrix($/;"	f	class:Gudhi::multiparameter::mma::Vineyard_persistence	typeref:typename:void
_st2ranktensor	multipers/ml/signed_measures.py	/^def _st2ranktensor($/;"	f
_strictly_contains	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  static bool _strictly_contains(const Generator &a, const Generator &b) {$/;"	f	class:Gudhi::multi_filtration::Multi_critical_filtration	typeref:typename:bool
_subtract	multipers/gudhi/gudhi/Fields/Multi_field_small.h	/^  static constexpr Element _subtract(Element element, Element v) {$/;"	f	class:Gudhi::persistence_fields::Multi_field_element_with_small_characteristics	typeref:typename:Element
_subtract	multipers/gudhi/gudhi/Fields/Multi_field_small_operators.h	/^Multi_field_operators_with_small_characteristics::_subtract(Element element, Element v,$/;"	f	class:Gudhi::persistence_fields::Multi_field_operators_with_small_characteristics	typeref:typename:Multi_field_operators_with_small_characteristics::Element
_subtract	multipers/gudhi/gudhi/Fields/Multi_field_small_shared.h	/^  static Element _subtract(Element element, Element v) {$/;"	f	class:Gudhi::persistence_fields::Shared_multi_field_element_with_small_characteristics	typeref:typename:Element
_subtract	multipers/gudhi/gudhi/Fields/Zp_field.h	/^  static Element _subtract(Element element, Element v) {$/;"	f	class:Gudhi::persistence_fields::Zp_field_element	typeref:typename:Element
_subtract	multipers/gudhi/gudhi/Fields/Zp_field_operators.h	/^  static Element _subtract(Element e1, Element e2, Characteristic characteristic) {$/;"	f	class:Gudhi::persistence_fields::Zp_field_operators	typeref:typename:Element
_subtract	multipers/gudhi/gudhi/Fields/Zp_field_shared.h	/^  static Element _subtract(Element element, Element v) {$/;"	f	class:Gudhi::persistence_fields::Shared_Zp_field_element	typeref:typename:Element
_swap_at_index	multipers/gudhi/gudhi/Persistence_matrix/ru_vine_swap.h	/^inline void RU_vine_swap<Master_matrix>::_swap_at_index(Index columnIndex)$/;"	f	class:Gudhi::persistence_matrix::RU_vine_swap	typeref:typename:void
_swap_at_index	multipers/multiparameter_module_approximation/ru_matrix.h	/^inline void RU_matrix<Column_type>::_swap_at_index(index index) {$/;"	f	class:Gudhi::multiparameter::mma::RU_matrix	typeref:typename:void
_test_signed_betti	multipers/tests/test_signed_betti.py	/^def _test_signed_betti():$/;"	f
_to_boundary	multipers/gudhi/cubical_to_boundary.h	/^inline void _to_boundary(const std::vector<unsigned int>& shape,$/;"	f	typeref:typename:void
_todo_partition	multipers/grids.pyx	/^def _todo_partition(some_float[:] data,int resolution, bool unique):$/;"	f
_todo_regular_closest	multipers/grids.pyx	/^def _todo_regular_closest(some_float[:] f, int r, bool unique):$/;"	f
_todo_regular_left	multipers/grids.pyx	/^def _todo_regular_left(some_float[:] f, int r, bool unique):$/;"	f
_top	multipers/ml/mma.py	/^            def _top(mod):$/;"	f	member:MMA2Landscape.fit	file:
_torch_regular_closest	multipers/grids.pyx	/^def _torch_regular_closest(f, int r, bool unique=True):$/;"	f
_transform1	multipers/ml/signed_measures.py	/^    def _transform1(self, data: np.ndarray):$/;"	m	class:DegreeRips2SignedMeasure
_transform_from_sparse	multipers/ml/signed_measures.py	/^    def _transform_from_sparse(self, X):$/;"	m	class:SignedMeasure2Convolution
_unique_any	multipers/torch/diff_grids.py	/^def _unique_any(x, assume_sorted=False, remove_inf: bool = True):$/;"	f
_update_barcode	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^inline void Chain_matrix<Master_matrix>::_update_barcode(Pos_index birth)$/;"	f	class:Gudhi::persistence_matrix::Chain_matrix	typeref:typename:void
_update_barcode	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^inline void RU_matrix<Master_matrix>::_update_barcode(ID_index birthPivot, Pos_index death)$/;"	f	class:Gudhi::persistence_matrix::RU_matrix	typeref:typename:void
_update_barcode	multipers/gudhi/gudhi/Persistence_matrix/ru_pairing.h	/^  void _update_barcode(ID_index birthPivot, Pos_index death) {$/;"	f	class:Gudhi::persistence_matrix::RU_pairing	typeref:typename:void
_update_entry	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^inline void List_column<Master_matrix>::_update_entry(ID_index rowIndex,$/;"	f	class:Gudhi::persistence_matrix::List_column	typeref:typename:void
_update_entry	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^inline void List_column<Master_matrix>::_update_entry(const Field_element& value,$/;"	f	class:Gudhi::persistence_matrix::List_column	typeref:typename:void
_update_entry	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^inline void Naive_vector_column<Master_matrix>::_update_entry(ID_index rowIndex, Index position)$/;"	f	class:Gudhi::persistence_matrix::Naive_vector_column	typeref:typename:void
_update_entry	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^inline void Naive_vector_column<Master_matrix>::_update_entry(const Field_element& value,$/;"	f	class:Gudhi::persistence_matrix::Naive_vector_column	typeref:typename:void
_update_entry	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^inline void Small_vector_column<Master_matrix>::_update_entry(ID_index rowIndex, Index position)$/;"	f	class:Gudhi::persistence_matrix::Small_vector_column	typeref:typename:void
_update_entry	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^inline void Small_vector_column<Master_matrix>::_update_entry(const Field_element& value,$/;"	f	class:Gudhi::persistence_matrix::Small_vector_column	typeref:typename:void
_update_entry	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^inline void Vector_column<Master_matrix>::_update_entry(ID_index rowIndex, Index position)$/;"	f	class:Gudhi::persistence_matrix::Vector_column	typeref:typename:void
_update_entry	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^inline void Vector_column<Master_matrix>::_update_entry(const Field_element& value, ID_index row/;"	f	class:Gudhi::persistence_matrix::Vector_column	typeref:typename:void
_update_largest_death_in_F	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^inline void Chain_matrix<Master_matrix>::_update_largest_death_in_F(const std::vector<Entry_repr/;"	f	class:Gudhi::persistence_matrix::Chain_matrix	typeref:typename:void
_update_permutation_ptr	multipers/gudhi/mma_interface_coh.h	/^  void _update_permutation_ptr(std::vector<Index> &perm) { matrix_.set_permutation(perm); }$/;"	f	class:Gudhi::multiparameter::truc_interface::Persistence_backend_cohomology	typeref:typename:void
_update_permutation_ptr	multipers/gudhi/mma_interface_h0.h	/^  inline void _update_permutation_ptr(std::vector<std::size_t> &perm) {$/;"	f	class:Gudhi::multiparameter::truc_interface::Persistence_backend_h0	typeref:typename:void
_update_permutation_ptr	multipers/gudhi/mma_interface_matrix.h	/^  inline void _update_permutation_ptr(std::vector<Index> &perm) { permutation_ = &perm; }$/;"	f	class:Gudhi::multiparameter::truc_interface::Persistence_backend_matrix	typeref:typename:void
_update_representative	multipers/gudhi/naive_merge_tree.h	/^  void _update_representative(index pos, index oldRep, index newRep) {$/;"	f	class:Naive_merge_forest	typeref:typename:void
_version	multipers/__init__.py	/^from importlib.metadata import version as _version$/;"	Y	nameref:unknown:version
_wasserstein_distance	multipers/ml/sliced_wasserstein.py	/^def _wasserstein_distance(meas1, meas2, epsilon, ground_norm):$/;"	f
_wasserstein_distance_on_parts	multipers/ml/sliced_wasserstein.py	/^def _wasserstein_distance_on_parts(ground_norm=1, epsilon=1.0):$/;"	f
_xtest	compute.py	/^	_xtrain, _xtest, _ytrain, _ytest = train_test_split(X, Y, shuffle=shuffle, test_size=args.test_/;"	v
_xtrain	compute.py	/^	_xtrain, _xtest, _ytrain, _ytest = train_test_split(X, Y, shuffle=shuffle, test_size=args.test_/;"	v
_ytest	compute.py	/^	_xtrain, _xtest, _ytrain, _ytest = train_test_split(X, Y, shuffle=shuffle, test_size=args.test_/;"	v
_ytrain	compute.py	/^	_xtrain, _xtest, _ytrain, _ytest = train_test_split(X, Y, shuffle=shuffle, test_size=args.test_/;"	v
`multipers` : Multiparameter Persistence for Machine Learning	docs/index.rst	/^`multipers` : Multiparameter Persistence for Machine Learning$/;"	c
`multipers` compilation	docs/compilation.rst	/^`multipers` compilation$/;"	c	title:Compilation from sources
accuracy_to_csv	multipers/ml/accuracies.py	/^def accuracy_to_csv($/;"	f
activated_	multipers/multiparameter_module_approximation/debug.h	/^  bool activated_;$/;"	m	class:Gudhi::multiparameter::mma::Debug::Timer	typeref:typename:bool
activeDimOption	multipers/gudhi/gudhi/Persistence_matrix/Boundary_matrix.h	/^  static constexpr bool activeDimOption =$/;"	m	class:Gudhi::persistence_matrix::Boundary_matrix	typeref:typename:bool
activePairingOption	multipers/gudhi/gudhi/Persistence_matrix/Boundary_matrix.h	/^  static constexpr bool activePairingOption = Master_matrix::Option_list::has_column_pairings &&$/;"	m	class:Gudhi::persistence_matrix::Boundary_matrix	typeref:typename:bool
activeSwapOption	multipers/gudhi/gudhi/Persistence_matrix/Boundary_matrix.h	/^  static constexpr bool activeSwapOption =$/;"	m	class:Gudhi::persistence_matrix::Boundary_matrix	typeref:typename:bool
add	multipers/gudhi/gudhi/Fields/Multi_field_operators.h	/^  Element add(Element e1, const Element& e2) const {$/;"	f	class:Gudhi::persistence_fields::Multi_field_operators	typeref:typename:Element
add	multipers/gudhi/gudhi/Fields/Multi_field_small_operators.h	/^  Element add(Element e1, Element e2) const {$/;"	f	class:Gudhi::persistence_fields::Multi_field_operators_with_small_characteristics	typeref:typename:Element
add	multipers/gudhi/gudhi/Fields/Z2_field_operators.h	/^  static Element add(Unsigned_integer_type e1, Unsigned_integer_type e2) {$/;"	f	class:Gudhi::persistence_fields::Z2_field_operators	typeref:typename:Element
add	multipers/gudhi/gudhi/Fields/Zp_field_operators.h	/^  Element add(Element e1, Element e2) const {$/;"	f	class:Gudhi::persistence_fields::Zp_field_operators	typeref:typename:Element
add	multipers/multiparameter_module_approximation/heap_column.h	/^inline void Heap_column::add(Heap_column &column)$/;"	f	class:Vineyard::Heap_column	typeref:typename:void
add	multipers/multiparameter_module_approximation/list_column.h	/^inline void List_column::add(List_column &column)$/;"	f	class:Vineyard::List_column	typeref:typename:void
add	multipers/multiparameter_module_approximation/list_column_2.h	/^inline void List_column::add(List_column &column)$/;"	f	class:Vineyard::List_column	typeref:typename:void
add	multipers/multiparameter_module_approximation/set_column.h	/^inline void Set_column::add(Set_column &column)$/;"	f	class:Gudhi::multiparameter::mma::Set_column	typeref:typename:void
add	multipers/multiparameter_module_approximation/unordered_set_column.h	/^inline void Unordered_set_column::add(Unordered_set_column &column)$/;"	f	class:Vineyard::Unordered_set_column	typeref:typename:void
add	multipers/multiparameter_module_approximation/vector_column.h	/^inline void Vector_column::add(Vector_column &column)$/;"	f	class:Vineyard::Vector_column	typeref:typename:void
add_	multipers/gudhi/gudhi/One_critical_filtration.h	/^  constexpr static bool add_(T &v1, T v2) {$/;"	f	class:Gudhi::multi_filtration::One_critical_filtration	typeref:typename:bool
add_and_multiply	multipers/gudhi/gudhi/Fields/Multi_field_operators.h	/^  Element add_and_multiply(Element e, const Element& a, const Element& m) const {$/;"	f	class:Gudhi::persistence_fields::Multi_field_operators	typeref:typename:Element
add_and_multiply	multipers/gudhi/gudhi/Fields/Multi_field_small_operators.h	/^  Element add_and_multiply(Element e, Element a, Element m) const { return get_value((e + a) * m/;"	f	class:Gudhi::persistence_fields::Multi_field_operators_with_small_characteristics	typeref:typename:Element
add_and_multiply	multipers/gudhi/gudhi/Fields/Z2_field_operators.h	/^  static Element add_and_multiply(Unsigned_integer_type e, Unsigned_integer_type a, Unsigned_int/;"	f	class:Gudhi::persistence_fields::Z2_field_operators	typeref:typename:Element
add_and_multiply	multipers/gudhi/gudhi/Fields/Zp_field_operators.h	/^  Element add_and_multiply(Element e, Element a, Element m) const { return get_value((e + a) * m/;"	f	class:Gudhi::persistence_fields::Zp_field_operators	typeref:typename:Element
add_and_multiply_inplace_back	multipers/gudhi/gudhi/Fields/Multi_field_operators.h	/^  void add_and_multiply_inplace_back(const Element& e, const Element& a, Element& m) const {$/;"	f	class:Gudhi::persistence_fields::Multi_field_operators	typeref:typename:void
add_and_multiply_inplace_back	multipers/gudhi/gudhi/Fields/Multi_field_small_operators.h	/^  void add_and_multiply_inplace_back(Element e, Element a, Element& m) const {$/;"	f	class:Gudhi::persistence_fields::Multi_field_operators_with_small_characteristics	typeref:typename:void
add_and_multiply_inplace_back	multipers/gudhi/gudhi/Fields/Z2_field_operators.h	/^  static void add_and_multiply_inplace_back(Unsigned_integer_type& e, Unsigned_integer_type a, U/;"	f	class:Gudhi::persistence_fields::Z2_field_operators	typeref:typename:void
add_and_multiply_inplace_back	multipers/gudhi/gudhi/Fields/Zp_field_operators.h	/^  void add_and_multiply_inplace_back(Element e, Element a, Element& m) const {$/;"	f	class:Gudhi::persistence_fields::Zp_field_operators	typeref:typename:void
add_and_multiply_inplace_front	multipers/gudhi/gudhi/Fields/Multi_field_operators.h	/^  void add_and_multiply_inplace_front(Element& e, const Element& a, const Element& m) const {$/;"	f	class:Gudhi::persistence_fields::Multi_field_operators	typeref:typename:void
add_and_multiply_inplace_front	multipers/gudhi/gudhi/Fields/Multi_field_small_operators.h	/^  void add_and_multiply_inplace_front(Element& e, Element a, Element m) const {$/;"	f	class:Gudhi::persistence_fields::Multi_field_operators_with_small_characteristics	typeref:typename:void
add_and_multiply_inplace_front	multipers/gudhi/gudhi/Fields/Z2_field_operators.h	/^  static void add_and_multiply_inplace_front(Unsigned_integer_type& e, Unsigned_integer_type a, /;"	f	class:Gudhi::persistence_fields::Z2_field_operators	typeref:typename:void
add_and_multiply_inplace_front	multipers/gudhi/gudhi/Fields/Zp_field_operators.h	/^  void add_and_multiply_inplace_front(Element& e, Element a, Element m) const {$/;"	f	class:Gudhi::persistence_fields::Zp_field_operators	typeref:typename:void
add_bar	multipers/multiparameter_module_approximation/approximation.h	/^inline void Summand<value_type>::add_bar(const filtration_type &basepoint,$/;"	f	class:Gudhi::multiparameter::mma::Summand	typeref:typename:void
add_bar	multipers/multiparameter_module_approximation/approximation.h	/^inline void Summand<value_type>::add_bar(const filtration_type &birth, const filtration_type &de/;"	f	class:Gudhi::multiparameter::mma::Summand	typeref:typename:void
add_bar	multipers/multiparameter_module_approximation/approximation.h	/^inline void Summand<value_type>::add_bar(value_type baseBirth,$/;"	f	class:Gudhi::multiparameter::mma::Summand	typeref:typename:void
add_barcode	multipers/multiparameter_module_approximation/approximation.h	/^inline void Module<value_type>::add_barcode($/;"	f	class:Gudhi::multiparameter::mma::Module	typeref:typename:void
add_barcode	multipers/multiparameter_module_approximation/approximation.h	/^inline void Module<value_type>::add_barcode(const Barcode &barcode) {$/;"	f	class:Gudhi::multiparameter::mma::Module	typeref:typename:void
add_barcode	multipers/multiparameter_module_approximation/approximation.h	/^inline void Module<value_type>::add_barcode(const Line<value_type> &line,$/;"	f	class:Gudhi::multiparameter::mma::Module	typeref:typename:void
add_birth	multipers/gudhi/naive_merge_tree.h	/^    void add_birth(index birth) {$/;"	f	struct:Naive_merge_forest::Barcode	typeref:typename:void
add_cone	multipers/tensor/tensor.h	/^  inline void add_cone(const std::vector<indices_type> &basepoint, dtype value) const {$/;"	f	class:tensor::static_tensor_view	typeref:typename:void
add_cone_boundary	multipers/tensor/tensor.h	/^  inline void add_cone_boundary(const std::vector<indices_type> &basepoint, dtype value) const {$/;"	f	class:tensor::static_tensor_view	typeref:typename:void
add_edge	multipers/gudhi/naive_merge_tree.h	/^  bool add_edge(index edgeIndex, index firstVertexIndex,$/;"	f	class:Naive_merge_forest	typeref:typename:bool
add_edge	multipers/gudhi/naive_merge_tree.h	/^  void add_edge(index firstVertexIndex, index secondVertexIndex,$/;"	f	class:Naive_bottleneck_forest	typeref:typename:void
add_generator	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  bool add_generator(const Generator &x) {$/;"	f	class:Gudhi::multi_filtration::Multi_critical_filtration	typeref:typename:bool
add_guaranteed_generator	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  void add_guaranteed_generator(const Generator &x) { multi_filtration_.push_back(x); }$/;"	f	class:Gudhi::multi_filtration::Multi_critical_filtration	typeref:typename:void
add_id_all	multipers/gudhi/gudhi/Persistent_cohomology/Multi_field.h	/^  const Element add_id_all;$/;"	m	class:Gudhi::persistent_cohomology::Multi_field	typeref:typename:const Element
add_inplace	multipers/gudhi/gudhi/Fields/Multi_field_operators.h	/^  void add_inplace(Element& e1, const Element& e2) const {$/;"	f	class:Gudhi::persistence_fields::Multi_field_operators	typeref:typename:void
add_inplace	multipers/gudhi/gudhi/Fields/Multi_field_small_operators.h	/^  void add_inplace(Element& e1, Element e2) const {$/;"	f	class:Gudhi::persistence_fields::Multi_field_operators_with_small_characteristics	typeref:typename:void
add_inplace	multipers/gudhi/gudhi/Fields/Z2_field_operators.h	/^  static void add_inplace(Unsigned_integer_type& e1, Unsigned_integer_type e2) {$/;"	f	class:Gudhi::persistence_fields::Z2_field_operators	typeref:typename:void
add_inplace	multipers/gudhi/gudhi/Fields/Zp_field_operators.h	/^  void add_inplace(Element& e1, Element e2) const {$/;"	f	class:Gudhi::persistence_fields::Zp_field_operators	typeref:typename:void
add_negative_edge	multipers/gudhi/naive_merge_tree.h	/^    void add_negative_edge(index birth, index death) {$/;"	f	struct:Naive_merge_forest::Barcode	typeref:typename:void
add_positive_edge	multipers/gudhi/naive_merge_tree.h	/^    void add_positive_edge(index birth) {$/;"	f	struct:Naive_merge_forest::Barcode	typeref:typename:void
add_summand	multipers/multiparameter_module_approximation/approximation.h	/^inline void Module<value_type>::add_summand(Summand<value_type> summand, int degree) {$/;"	f	class:Gudhi::multiparameter::mma::Module	typeref:typename:void
add_to	multipers/gudhi/gudhi/Matrix.h	/^inline std::enable_if_t<!std::is_integral_v<Entry_range> > Matrix<PersistenceMatrixOptions>::add/;"	f	class:Gudhi::persistence_matrix::Matrix	typeref:typename:std::enable_if_t<!std::is_integral_v<Entry_range>>
add_to	multipers/gudhi/gudhi/Matrix.h	/^inline std::enable_if_t<std::is_integral_v<Integer_index> > Matrix<PersistenceMatrixOptions>::ad/;"	f	class:Gudhi::persistence_matrix::Matrix	typeref:typename:std::enable_if_t<std::is_integral_v<Integer_index>>
add_to	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix.h	/^inline void Base_matrix<Master_matrix>::add_to(const Entry_range_or_column_index& sourceColumn,$/;"	f	class:Gudhi::persistence_matrix::Base_matrix	typeref:typename:void
add_to	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix_with_column_compression.h	/^inline void Base_matrix_with_column_compression<Master_matrix>::add_to(const Entry_range_or_colu/;"	f	class:Gudhi::persistence_matrix::Base_matrix_with_column_compression	typeref:typename:void
add_to	multipers/gudhi/gudhi/Persistence_matrix/Boundary_matrix.h	/^inline void Boundary_matrix<Master_matrix>::add_to(Index sourceColumnIndex, Index targetColumnIn/;"	f	class:Gudhi::persistence_matrix::Boundary_matrix	typeref:typename:void
add_to	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^inline void Chain_matrix<Master_matrix>::add_to(Index sourceColumnIndex, Index targetColumnIndex/;"	f	class:Gudhi::persistence_matrix::Chain_matrix	typeref:typename:void
add_to	multipers/gudhi/gudhi/Persistence_matrix/Id_to_index_overlay.h	/^inline void Id_to_index_overlay<Underlying_matrix, Master_matrix>::add_to(ID_index sourceCellID,/;"	f	class:Gudhi::persistence_matrix::Id_to_index_overlay	typeref:typename:void
add_to	multipers/gudhi/gudhi/Persistence_matrix/Position_to_index_overlay.h	/^inline void Position_to_index_overlay<Underlying_matrix, Master_matrix>::add_to(Pos_index source/;"	f	class:Gudhi::persistence_matrix::Position_to_index_overlay	typeref:typename:void
add_to	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^inline void RU_matrix<Master_matrix>::add_to(Index sourceColumnIndex, Index targetColumnIndex)$/;"	f	class:Gudhi::persistence_matrix::RU_matrix	typeref:typename:void
add_to	multipers/multiparameter_module_approximation/vector_matrix.h	/^inline void Vector_matrix<Column_type>::add_to(index sourceColumnIndex, index targetColumnIndex)$/;"	f	class:Gudhi::multiparameter::mma::Vector_matrix	typeref:typename:void
add_vertex	multipers/gudhi/naive_merge_tree.h	/^    void add_vertex(index birth) {$/;"	f	struct:Naive_merge_forest::Barcode	typeref:typename:void
add_vertex	multipers/gudhi/naive_merge_tree.h	/^  void add_vertex(index vertexIndex) {$/;"	f	class:Naive_merge_forest	typeref:typename:void
additiveID_	multipers/gudhi/gudhi/Fields/Multi_field_operators.h	/^  inline static const Element additiveID_ = 0;$/;"	m	class:Gudhi::persistence_fields::Multi_field_operators	typeref:typename:const Element
additive_identity	multipers/gudhi/gudhi/Persistent_cohomology/Field_Zp.h	/^  Element additive_identity() const {$/;"	f	class:Gudhi::persistent_cohomology::Field_Zp	typeref:typename:Element
additive_identity	multipers/gudhi/gudhi/Persistent_cohomology/Multi_field.h	/^  const Element& additive_identity() const {$/;"	f	class:Gudhi::persistent_cohomology::Multi_field	typeref:typename:const Element &
all_cells_iterator_begin	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^  All_cells_iterator all_cells_iterator_begin() const { return All_cells_iterator(0); }$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base	typeref:typename:All_cells_iterator
all_cells_iterator_end	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^  All_cells_iterator all_cells_iterator_end() const { return All_cells_iterator(data.size()); }$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base	typeref:typename:All_cells_iterator
all_cells_range	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^  All_cells_range all_cells_range() const { return All_cells_range(all_cells_iterator_begin(), a/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base	typeref:typename:All_cells_range
annotation_of_the_boundary	multipers/gudhi/gudhi/Persistent_cohomology.h	/^  void annotation_of_the_boundary($/;"	f	class:Gudhi::persistent_cohomology::Persistent_cohomology	typeref:typename:void
annotation_t	multipers/gudhi/gudhi/Persistent_cohomology.h	/^    typedef std::pair<Column *, int> annotation_t;$/;"	t	function:Gudhi::persistent_cohomology::Persistent_cohomology::annotation_of_the_boundary	typeref:typename:std::pair<Column *,int>
apply_operation_with_finite_values_	multipers/gudhi/gudhi/One_critical_filtration.h	/^  static One_critical_filtration &apply_operation_with_finite_values_(One_critical_filtration &r/;"	f	class:Gudhi::multi_filtration::One_critical_filtration	typeref:typename:One_critical_filtration &
apply_pipeline	multipers/data/MOL2.py	/^def apply_pipeline(pathes: dict, pipeline):$/;"	f
apply_scalar_operation_on_finite_value_	multipers/gudhi/gudhi/One_critical_filtration.h	/^  static One_critical_filtration &apply_scalar_operation_on_finite_value_(One_critical_filtratio/;"	f	class:Gudhi::multi_filtration::One_critical_filtration	typeref:typename:One_critical_filtration &
apply_scalar_operation_on_finite_value_with_all_nan_possible_	multipers/gudhi/gudhi/One_critical_filtration.h	/^  static One_critical_filtration &apply_scalar_operation_on_finite_value_with_all_nan_possible_($/;"	f	class:Gudhi::multi_filtration::One_critical_filtration	typeref:typename:One_critical_filtration &
are_adjacent	multipers/gudhi/gudhi/Persistence_matrix/chain_vine_swap.h	/^  bool are_adjacent(ID_index pivot1, ID_index pivot2) const {$/;"	f	class:Gudhi::persistence_matrix::Chain_barcode_swap	typeref:typename:bool
are_equal	multipers/gudhi/gudhi/Fields/Multi_field_operators.h	/^  bool are_equal(const Element& e1, const Element& e2) const {$/;"	f	class:Gudhi::persistence_fields::Multi_field_operators	typeref:typename:bool
are_equal	multipers/gudhi/gudhi/Fields/Multi_field_small_operators.h	/^  bool are_equal(Element e1, Element e2) const { return get_value(e1) == get_value(e2); }$/;"	f	class:Gudhi::persistence_fields::Multi_field_operators_with_small_characteristics	typeref:typename:bool
are_equal	multipers/gudhi/gudhi/Fields/Z2_field_operators.h	/^  static bool are_equal(Unsigned_integer_type e1, Unsigned_integer_type e2) {$/;"	f	class:Gudhi::persistence_fields::Z2_field_operators	typeref:typename:bool
are_equal	multipers/gudhi/gudhi/Fields/Zp_field_operators.h	/^  bool are_equal(Element e1, Element e2) const { return get_value(e1) == get_value(e2); }$/;"	f	class:Gudhi::persistence_fields::Zp_field_operators	typeref:typename:bool
args	compute.py	/^args = p.parse_args()$/;"	v
as_type	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  Multi_critical_filtration<U> as_type() const {$/;"	f	class:Gudhi::multi_filtration::Multi_critical_filtration	typeref:typename:Multi_critical_filtration<U>
as_type	multipers/gudhi/gudhi/One_critical_filtration.h	/^  One_critical_filtration<U> as_type() const {$/;"	f	class:Gudhi::multi_filtration::One_critical_filtration	typeref:typename:One_critical_filtration<U>
assert_sm	multipers/tests/__init__.py	/^def assert_sm(*args, exact=True, max_error=1e-5, reg=0.1):$/;"	f
assert_sm_pair	multipers/tests/__init__.py	/^def assert_sm_pair(sm1, sm2, exact=True, max_error=1e-3, reg=0.1):$/;"	f
assert_st_simplices	multipers/tests/__init__.py	/^def assert_st_simplices(st, dump):$/;"	f
assign_children	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_node_explicit_storage.h	/^  void assign_children(Siblings * children) {$/;"	f	struct:Gudhi::Simplex_tree_node_explicit_storage	typeref:typename:void
assign_filtration	multipers/gudhi/gudhi/Simplex_tree.h	/^    void assign_filtration(const Filtration_value& GUDHI_CHECK_code(f)) {$/;"	f	struct:Gudhi::Simplex_tree::Filtration_simplex_base_dummy	typeref:typename:void
assign_filtration	multipers/gudhi/gudhi/Simplex_tree.h	/^    void assign_filtration(const Filtration_value& f) { filt_ = f; }$/;"	f	struct:Gudhi::Simplex_tree::Filtration_simplex_base_real	typeref:typename:void
assign_filtration	multipers/gudhi/gudhi/Simplex_tree.h	/^  void assign_filtration(Simplex_handle sh, const Filtration_value& fv) {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:void
assign_key	multipers/gudhi/gudhi/Bitmap_cubical_complex.h	/^  void assign_key(Simplex_handle sh, Simplex_key key) {$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex	typeref:typename:void
assign_key	multipers/gudhi/gudhi/Simplex_tree.h	/^    void assign_key(Simplex_key k) { key_ = k; }$/;"	f	struct:Gudhi::Simplex_tree::Key_simplex_base_real	typeref:typename:void
assign_key	multipers/gudhi/gudhi/Simplex_tree.h	/^  void assign_key(Simplex_handle sh, Simplex_key key) { sh->second.assign_key(key); }$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:void
assign_key	multipers/gudhi/mma_interface_coh.h	/^  void assign_key(Simplex_handle sh, Simplex_key key) {$/;"	f	class:Gudhi::multiparameter::truc_interface::Boundary_matrix_as_filtered_complex_for_coh	typeref:typename:void
assign_paired_chain	multipers/gudhi/gudhi/Persistence_matrix/columns/chain_column_extra_properties.h	/^  void assign_paired_chain(Index other_col) { pairedColumn_ = other_col; }$/;"	f	class:Gudhi::persistence_matrix::Chain_column_extra_properties	typeref:typename:void
assign_simplex_filtration	multipers/gudhi/Simplex_tree_interface.h	/^  void assign_simplex_filtration(const Simplex& simplex, Filtration_value filtration) {$/;"	f	class:Gudhi::Simplex_tree_interface	typeref:typename:void
assign_simplex_filtration	multipers/gudhi/Simplex_tree_multi_interface.h	/^  void assign_simplex_filtration(const Simplex &simplex,$/;"	f	class:Gudhi::multiparameter::python_interface::Simplex_tree_multi_interface	typeref:typename:void
at	multipers/multiparameter_module_approximation/approximation.h	/^inline Summand<value_type> &Module<value_type>::at(const unsigned int index) {$/;"	f	class:Gudhi::multiparameter::mma::Module	typeref:typename:Summand<value_type> &
at	multipers/multiparameter_module_approximation/utilities.h	/^  MultiDiagram<filtration_type, value_type> &at(const unsigned int i) {$/;"	f	struct:Gudhi::multiparameter::mma::MultiDiagrams	typeref:typename:MultiDiagram<filtration_type,value_type> &
at	multipers/multiparameter_module_approximation/utilities.h	/^  MultiDiagram_point<filtration_type> &at(const unsigned int i) {$/;"	f	struct:Gudhi::multiparameter::mma::MultiDiagram	typeref:typename:MultiDiagram_point<filtration_type> &
author	docs/conf.py	/^author = "David Loiseaux, Hannah Schreiber"$/;"	v
autodoc_typehints	docs/conf.py	/^autodoc_typehints = "description"$/;"	v
available_dataset	benchmarks/stuff.py	/^available_dataset: dict[str, Callable] = {$/;"	v	typeref:typename:dict[str, Callable]
available_dtype	benchmarks/stuff.py	/^available_dtype = [np.float64]$/;"	v
available_kernels	multipers/ml/convolutions.py	/^available_kernels = Union[$/;"	v
available_reduce_softs	multipers/io.pyx	/^available_reduce_softs = Literal["mpfree","multi_chunk","2pac"]$/;"	v
available_strategies	multipers/grids.pyx	/^available_strategies = ["regular","regular_closest", "regular_left", "partition", "quantile", "p/;"	v
b	multipers/gudhi/gudhi/Bitmap_cubical_complex.h	/^    Bitmap_cubical_complex<T>* b;$/;"	m	class:Gudhi::cubical_complex::Bitmap_cubical_complex::Skeleton_simplex_iterator	typeref:typename:Bitmap_cubical_complex<T> *
b	multipers/gudhi/gudhi/Bitmap_cubical_complex.h	/^    Bitmap_cubical_complex<T>* b;$/;"	m	class:Gudhi::cubical_complex::Bitmap_cubical_complex::Skeleton_simplex_range	typeref:typename:Bitmap_cubical_complex<T> *
b	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^    Bitmap_cubical_complex_base* b;$/;"	m	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base::Top_dimensional_cells_iterator	typeref:typename:Bitmap_cubical_complex_base *
b	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^    Bitmap_cubical_complex_base* b;$/;"	m	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base::Vertices_iterator	typeref:typename:Bitmap_cubical_complex_base *
b	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^    Bitmap_cubical_complex_base* b;$/;"	m	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base::Vertices_range	typeref:typename:Bitmap_cubical_complex_base *
b	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^    Bitmap_cubical_complex_base<T>* b;$/;"	m	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base::Top_dimensional_cells_range	typeref:typename:Bitmap_cubical_complex_base<T> *
b	multipers/gudhi/gudhi/Bitmap_cubical_complex_periodic_boundary_conditions_base.h	/^    Bitmap_cubical_complex_periodic_boundary_conditions_base* b;$/;"	m	class:Gudhi::cubical_complex::Bitmap_cubical_complex_periodic_boundary_conditions_base::Vertices_iterator	typeref:typename:Bitmap_cubical_complex_periodic_boundary_conditions_base *
b	multipers/gudhi/gudhi/Bitmap_cubical_complex_periodic_boundary_conditions_base.h	/^    Bitmap_cubical_complex_periodic_boundary_conditions_base* b;$/;"	m	class:Gudhi::cubical_complex::Bitmap_cubical_complex_periodic_boundary_conditions_base::Vertices_range	typeref:typename:Bitmap_cubical_complex_periodic_boundary_conditions_base *
backend_concatenate	multipers/distances.py	/^        def backend_concatenate(a, b):$/;"	f	function:sm2diff	file:
backend_tensor	multipers/distances.py	/^        def backend_tensor(x):$/;"	f	function:sm2diff	file:
baov_	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  std::pair<Simplex_handle, Vertex_handle> baov_;  \/\/ a pair containing the current Simplex_ha/;"	m	class:Gudhi::Simplex_tree_boundary_opposite_vertex_simplex_iterator	typeref:typename:std::pair<Simplex_handle,Vertex_handle>
bar	multipers/gudhi/mma_interface_coh.h	/^  using bar = Gudhi::persistence_matrix::Persistence_interval<dimension_type, typename MatrixCom/;"	t	class:Gudhi::multiparameter::truc_interface::Persistence_backend_cohomology	typeref:typename:Gudhi::persistence_matrix::Persistence_interval<dimension_type,typename MatrixComplex::Simplex_handle>
bar	multipers/gudhi/mma_interface_matrix.h	/^  using bar = typename matrix_type::Bar;$/;"	t	class:Gudhi::multiparameter::truc_interface::Persistence_backend_matrix	typeref:typename:matrix_type::Bar
barcode_	multipers/gudhi/gudhi/Persistence_matrix/base_pairing.h	/^  Barcode barcode_;       \/**< Bar container. *\/$/;"	m	class:Gudhi::persistence_matrix::Base_pairing	typeref:typename:Barcode
barcode_	multipers/gudhi/gudhi/Persistence_matrix/chain_pairing.h	/^  Barcode barcode_;         \/**< Bar container. *\/$/;"	m	class:Gudhi::persistence_matrix::Chain_pairing	typeref:typename:Barcode
barcode_	multipers/gudhi/gudhi/Persistence_matrix/ru_pairing.h	/^  Barcode barcode_;       \/**< Bar container. *\/$/;"	m	class:Gudhi::persistence_matrix::RU_pairing	typeref:typename:Barcode
barcode_	multipers/gudhi/mma_interface_h0.h	/^    const std::vector<Bar> *barcode_;$/;"	m	class:Gudhi::multiparameter::truc_interface::Persistence_backend_h0::Barcode	typeref:typename:const std::vector<Bar> *
barcode_	multipers/gudhi/mma_interface_h0.h	/^    const std::vector<Bar> *barcode_;$/;"	m	class:Gudhi::multiparameter::truc_interface::Persistence_backend_h0::Barcode_iterator	typeref:typename:const std::vector<Bar> *
barcode_	multipers/gudhi/mma_interface_matrix.h	/^    const typename matrix_type::Barcode *barcode_;$/;"	m	class:Gudhi::multiparameter::truc_interface::Persistence_backend_matrix::Barcode	typeref:typename:const typename matrix_type::Barcode *
barcode_	multipers/gudhi/mma_interface_matrix.h	/^    const typename matrix_type::Barcode *barcode_;$/;"	m	class:Gudhi::multiparameter::truc_interface::Persistence_backend_matrix::Barcode_iterator	typeref:typename:const typename matrix_type::Barcode *
barcode_	multipers/gudhi/naive_merge_tree.h	/^    std::vector<Bar> barcode_;$/;"	m	struct:Naive_merge_forest::Barcode	typeref:typename:std::vector<Bar>
barcode_	multipers/gudhi/naive_merge_tree.h	/^  Barcode barcode_;$/;"	m	class:Naive_merge_forest	typeref:typename:Barcode
barcode_	multipers/multiparameter_module_approximation/ru_matrix.h	/^  barcode_type barcode_;$/;"	m	class:Gudhi::multiparameter::mma::RU_matrix	typeref:typename:barcode_type
barcode_from_rank_sm	multipers/point_measure.pyx	/^def barcode_from_rank_sm($/;"	f
barcode_type	multipers/multiparameter_module_approximation/utilities.h	/^using barcode_type = std::vector<Bar>;$/;"	t	namespace:Gudhi::multiparameter::mma	typeref:typename:std::vector<Bar>
barcodes	multipers/gudhi/truc.h	/^  inline std::vector<split_barcode> barcodes(Fun &&f, const std::vector<Fun_arg> &args, const bo/;"	f	class:Gudhi::multiparameter::truc_interface::Truc	typeref:typename:std::vector<split_barcode>
barcodes	multipers/multiparameter_module_approximation/utilities.h	/^  using barcodes = std::vector<std::vector<python_bar>>;$/;"	t	struct:Gudhi::multiparameter::mma::MultiDiagrams	typeref:typename:std::vector<std::vector<python_bar>>
barycentric_subdivision	multipers_old.py	/^def barycentric_subdivision(st, list_splx=None, use_sqrt=False, use_mean=False):$/;"	f
base	multipers/gudhi/gudhi/Simple_object_pool.h	/^  Base const& base()const {$/;"	f	class:Gudhi::Simple_object_pool	typeref:typename:Base const &
base	multipers/gudhi/gudhi/Simple_object_pool.h	/^  Base& base() {$/;"	f	class:Gudhi::Simple_object_pool	typeref:typename:Base &
base	multipers/tensor/tensor.h	/^  using base = static_tensor_view<dtype, indices_type>;$/;"	t	class:tensor::static_tensor_view_view	typeref:typename:static_tensor_view<dtype,indices_type>
basePoint_	multipers/gudhi/gudhi/Multi_persistence/Line.h	/^  Point basePoint_; \/**< Any point on the line. *\/$/;"	m	class:Gudhi::multi_persistence::Line	typeref:typename:Point
base_hook_cam_h	multipers/gudhi/gudhi/Persistent_cohomology/Persistent_cohomology_column.h	/^> base_hook_cam_h;$/;"	t	namespace:Gudhi::persistent_cohomology	typeref:typename:boost::intrusive::list_base_hook<boost::intrusive::tag<cam_h_tag>,boost::intrusive::link_mode<boost::intrusive::auto_unlink>>
base_hook_cam_v	multipers/gudhi/gudhi/Persistent_cohomology/Persistent_cohomology_column.h	/^> base_hook_cam_v;$/;"	t	namespace:Gudhi::persistent_cohomology	typeref:typename:boost::intrusive::list_base_hook<boost::intrusive::tag<cam_v_tag>,boost::intrusive::link_mode<boost::intrusive::normal_link>>
base_point	multipers/gudhi/gudhi/Multi_persistence/Line.h	/^  Point &base_point() { return basePoint_; }$/;"	f	class:Gudhi::multi_persistence::Line	typeref:typename:Point &
base_point	multipers/gudhi/gudhi/Multi_persistence/Line.h	/^  const Point &base_point() const { return basePoint_; }$/;"	f	class:Gudhi::multi_persistence::Line	typeref:typename:const Point &
basepoints	benchmarks/stuff.py	/^        basepoints = np.random.uniform($/;"	v
batch_signed_measure_convolutions	multipers/ml/convolutions.py	/^def batch_signed_measure_convolutions($/;"	f
bc_type	multipers/multi_parameter_rank_invariant/hilbert_function.h	/^    using bc_type = typename truc_interface::Truc<PersBackend, Structure, Filtration>::split_bar/;"	t	function:Gudhi::multiparameter::hilbert_function::compute_2d_hilbert_surface::__anon00bfa84e0502	typeref:typename:truc_interface::Truc<PersBackend,Structure,Filtration>::split_barcode
bc_type	multipers/multi_parameter_rank_invariant/rank_invariant.h	/^  using bc_type = typename truc_interface::Truc<PersBackend, Structure, MultiFiltration>::split_/;"	t	function:Gudhi::multiparameter::rank_invariant::compute_2d_rank_invariant_of_elbow	typeref:typename:truc_interface::Truc<PersBackend,Structure,MultiFiltration>::split_barcode
begin	multipers/gudhi/gudhi/Bitmap_cubical_complex.h	/^    Skeleton_simplex_iterator begin() {$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex::Skeleton_simplex_range	typeref:typename:Skeleton_simplex_iterator
begin	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^    Top_dimensional_cells_iterator begin() { return b->top_dimensional_cells_iterator_begin(); }$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base::Top_dimensional_cells_range	typeref:typename:Top_dimensional_cells_iterator
begin	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^    Vertices_iterator begin() { return b->vertices_iterator_begin(); }$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base::Vertices_range	typeref:typename:Vertices_iterator
begin	multipers/gudhi/gudhi/Bitmap_cubical_complex_periodic_boundary_conditions_base.h	/^    Vertices_iterator begin() { return b->vertices_iterator_begin(); }$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_periodic_boundary_conditions_base::Vertices_range	typeref:typename:Vertices_iterator
begin	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  const_iterator begin() const { return multi_filtration_.begin(); }$/;"	f	class:Gudhi::multi_filtration::Multi_critical_filtration	typeref:typename:const_iterator
begin	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  iterator begin() { return multi_filtration_.begin(); }$/;"	f	class:Gudhi::multi_filtration::Multi_critical_filtration	typeref:typename:iterator
begin	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^inline typename Heap_column<Master_matrix>::const_iterator Heap_column<Master_matrix>::begin() c/;"	f	class:Gudhi::persistence_matrix::Heap_column	typeref:typename:Heap_column<Master_matrix>::const_iterator
begin	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^inline typename Heap_column<Master_matrix>::iterator Heap_column<Master_matrix>::begin() noexcep/;"	f	class:Gudhi::persistence_matrix::Heap_column	typeref:typename:Heap_column<Master_matrix>::iterator
begin	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^inline typename Intrusive_list_column<Master_matrix>::const_iterator Intrusive_list_column<Maste/;"	f	class:Gudhi::persistence_matrix::Intrusive_list_column	typeref:typename:Intrusive_list_column<Master_matrix>::const_iterator
begin	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^inline typename Intrusive_list_column<Master_matrix>::iterator Intrusive_list_column<Master_matr/;"	f	class:Gudhi::persistence_matrix::Intrusive_list_column	typeref:typename:Intrusive_list_column<Master_matrix>::iterator
begin	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^inline typename Intrusive_set_column<Master_matrix>::const_iterator Intrusive_set_column<Master_/;"	f	class:Gudhi::persistence_matrix::Intrusive_set_column	typeref:typename:Intrusive_set_column<Master_matrix>::const_iterator
begin	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^inline typename Intrusive_set_column<Master_matrix>::iterator Intrusive_set_column<Master_matrix/;"	f	class:Gudhi::persistence_matrix::Intrusive_set_column	typeref:typename:Intrusive_set_column<Master_matrix>::iterator
begin	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^inline typename List_column<Master_matrix>::const_iterator List_column<Master_matrix>::begin() c/;"	f	class:Gudhi::persistence_matrix::List_column	typeref:typename:List_column<Master_matrix>::const_iterator
begin	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^inline typename List_column<Master_matrix>::iterator List_column<Master_matrix>::begin() noexcep/;"	f	class:Gudhi::persistence_matrix::List_column	typeref:typename:List_column<Master_matrix>::iterator
begin	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^inline typename Naive_vector_column<Master_matrix>::const_iterator Naive_vector_column<Master_ma/;"	f	class:Gudhi::persistence_matrix::Naive_vector_column	typeref:typename:Naive_vector_column<Master_matrix>::const_iterator
begin	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^inline typename Naive_vector_column<Master_matrix>::iterator Naive_vector_column<Master_matrix>:/;"	f	class:Gudhi::persistence_matrix::Naive_vector_column	typeref:typename:Naive_vector_column<Master_matrix>::iterator
begin	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^inline typename Set_column<Master_matrix>::const_iterator Set_column<Master_matrix>::begin() con/;"	f	class:Gudhi::persistence_matrix::Set_column	typeref:typename:Set_column<Master_matrix>::const_iterator
begin	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^inline typename Set_column<Master_matrix>::iterator Set_column<Master_matrix>::begin() noexcept$/;"	f	class:Gudhi::persistence_matrix::Set_column	typeref:typename:Set_column<Master_matrix>::iterator
begin	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^inline typename Small_vector_column<Master_matrix>::const_iterator Small_vector_column<Master_ma/;"	f	class:Gudhi::persistence_matrix::Small_vector_column	typeref:typename:Small_vector_column<Master_matrix>::const_iterator
begin	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^inline typename Small_vector_column<Master_matrix>::iterator Small_vector_column<Master_matrix>:/;"	f	class:Gudhi::persistence_matrix::Small_vector_column	typeref:typename:Small_vector_column<Master_matrix>::iterator
begin	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^inline typename Unordered_set_column<Master_matrix>::const_iterator Unordered_set_column<Master_/;"	f	class:Gudhi::persistence_matrix::Unordered_set_column	typeref:typename:Unordered_set_column<Master_matrix>::const_iterator
begin	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^inline typename Unordered_set_column<Master_matrix>::iterator Unordered_set_column<Master_matrix/;"	f	class:Gudhi::persistence_matrix::Unordered_set_column	typeref:typename:Unordered_set_column<Master_matrix>::iterator
begin	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^inline typename Vector_column<Master_matrix>::const_iterator Vector_column<Master_matrix>::begin/;"	f	class:Gudhi::persistence_matrix::Vector_column	typeref:typename:Vector_column<Master_matrix>::const_iterator
begin	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^inline typename Vector_column<Master_matrix>::iterator Vector_column<Master_matrix>::begin() noe/;"	f	class:Gudhi::persistence_matrix::Vector_column	typeref:typename:Vector_column<Master_matrix>::iterator
begin	multipers/gudhi/mma_interface_coh.h	/^    iterator begin() const { return iterator(new_to_old_perm_); }$/;"	f	class:Gudhi::multiparameter::truc_interface::Boundary_matrix_as_filtered_complex_for_coh::Filtration_simplex_range	typeref:typename:iterator
begin	multipers/gudhi/mma_interface_h0.h	/^    iterator begin() const { return Barcode_iterator(barcode_, perm_); }$/;"	f	class:Gudhi::multiparameter::truc_interface::Persistence_backend_h0::Barcode	typeref:typename:iterator
begin	multipers/gudhi/mma_interface_matrix.h	/^    iterator begin() const {$/;"	f	class:Gudhi::multiparameter::truc_interface::Persistence_backend_matrix::Barcode	typeref:typename:iterator
begin	multipers/multiparameter_module_approximation/approximation.h	/^inline typename Module<value_type>::module_type::iterator Module<value_type>::begin() {$/;"	f	class:Gudhi::multiparameter::mma::Module	typeref:typename:Module<value_type>::module_type::iterator
begin	multipers/multiparameter_module_approximation/utilities.h	/^  iterator begin() const { return this->multiDiagram.begin(); }$/;"	f	struct:Gudhi::multiparameter::mma::MultiDiagram	typeref:typename:iterator
begin	multipers/multiparameter_module_approximation/utilities.h	/^  iterator begin() const {$/;"	f	struct:Gudhi::multiparameter::mma::MultiDiagrams	typeref:typename:iterator
betti_number	multipers/gudhi/gudhi/Persistent_cohomology.h	/^  int betti_number(int dimension) const {$/;"	f	class:Gudhi::persistent_cohomology::Persistent_cohomology	typeref:typename:int
betti_numbers	multipers/gudhi/gudhi/Persistent_cohomology.h	/^  std::vector<int> betti_numbers() const {$/;"	f	class:Gudhi::persistent_cohomology::Persistent_cohomology	typeref:typename:std::vector<int>
bibtex_bibfiles	docs/conf.py	/^bibtex_bibfiles = ["paper.bib"]$/;"	v
bibtex_encoding	docs/conf.py	/^bibtex_encoding = "latin"$/;"	v
birth	multipers/gudhi/gudhi/Persistence_matrix/chain_vine_swap.h	/^  Pos_index birth(ID_index pivot) const {$/;"	f	class:Gudhi::persistence_matrix::Chain_barcode_swap	typeref:typename:Pos_index
birth	multipers/gudhi/gudhi/persistence_interval.h	/^  Event_value birth; \/**< Birth value of the cycle. *\/$/;"	m	struct:Gudhi::persistence_matrix::Persistence_interval	typeref:typename:Event_value
birth	multipers/gudhi/naive_merge_tree.h	/^  int birth;$/;"	m	struct:Bar	typeref:typename:int
birth	multipers/multiparameter_module_approximation/utilities.h	/^  filtration_type birth;$/;"	m	struct:Gudhi::multiparameter::mma::MultiDiagram_point	typeref:typename:filtration_type
birth	multipers/multiparameter_module_approximation/utilities.h	/^  int birth;$/;"	m	struct:Gudhi::multiparameter::mma::Bar	typeref:typename:int
birth	multipers/multiparameter_module_approximation/utilities.h	/^  value_type birth;$/;"	m	struct:Gudhi::multiparameter::mma::Diagram_point	typeref:typename:value_type
birthComp_	multipers/gudhi/gudhi/Persistence_matrix/chain_vine_swap.h	/^  std::function<bool(Pos_index,Pos_index)> birthComp_;  \/**< for F x F & H x H. *\/$/;"	m	class:Gudhi::persistence_matrix::Chain_vine_swap	typeref:typename:std::function<bool (Pos_index,Pos_index)>
birthToCycle_	multipers/gudhi/gudhi/Persistence_matrix/chain_rep_cycles.h	/^  std::vector<typename Master_matrix::Index> birthToCycle_; \/**< Map from birth index to cycle /;"	m	class:Gudhi::persistence_matrix::Chain_representative_cycles	typeref:typename:std::vector<typename Master_matrix::Index>
birth_birth_swap	multipers/gudhi/naive_merge_tree.h	/^    void birth_birth_swap(index position) {$/;"	f	struct:Naive_merge_forest::Barcode	typeref:typename:void
birth_corners_	multipers/multiparameter_module_approximation/approximation.h	/^      birth_corners_;  \/\/ TODO : use Multi_critical_filtration$/;"	m	class:Gudhi::multiparameter::mma::Summand	typeref:typename:Gudhi::multi_filtration::Multi_critical_filtration<value_type,false>
birth_death_swap	multipers/gudhi/naive_merge_tree.h	/^    void birth_death_swap(index position) {$/;"	f	struct:Naive_merge_forest::Barcode	typeref:typename:void
births_type	multipers/multiparameter_module_approximation/approximation.h	/^  using births_type = Gudhi::multi_filtration::Multi_critical_filtration<value_type, false>;$/;"	t	class:Gudhi::multiparameter::mma::Summand	typeref:typename:Gudhi::multi_filtration::Multi_critical_filtration<value_type,false>
blocker_func_t	multipers/gudhi/Simplex_tree_interface.h	/^  typedef bool (*blocker_func_t)(Simplex simplex, void *user_data);$/;"	t	class:Gudhi::Simplex_tree_interface	typeref:typename:bool (*)(Simplex simplex,void * user_data)
blocker_func_t	multipers/gudhi/Simplex_tree_multi_interface.h	/^  typedef bool (*blocker_func_t)(Simplex simplex, void *user_data);$/;"	t	class:Gudhi::multiparameter::python_interface::Simplex_tree_multi_interface	typeref:typename:bool (*)(Simplex simplex,void * user_data)
boundaries	multipers/gudhi/truc.h	/^  std::vector<std::vector<index_type>> boundaries;$/;"	m	class:Gudhi::multiparameter::truc_interface::SimplicialStructure	typeref:typename:std::vector<std::vector<index_type>>
boundaries_	multipers/gudhi/mma_interface_coh.h	/^  Structure const *boundaries_;$/;"	m	class:Gudhi::multiparameter::truc_interface::Boundary_matrix_as_filtered_complex_for_coh	typeref:typename:Structure const *
boundaries_	multipers/gudhi/mma_interface_h0.h	/^  const Boundary_matrix_type *boundaries_;$/;"	m	class:Gudhi::multiparameter::truc_interface::Persistence_backend_h0	typeref:typename:const Boundary_matrix_type *
boundary_matrix	multipers/gudhi/Simplex_tree_multi_interface.h	/^  using boundary_matrix = std::vector<boundary_type>;$/;"	t	class:Gudhi::multiparameter::python_interface::Simplex_tree_multi_interface	typeref:typename:std::vector<boundary_type>
boundary_matrix	multipers/multiparameter_module_approximation/utilities.h	/^using boundary_matrix = std::vector<boundary_type>;$/;"	t	namespace:Gudhi::multiparameter::mma	typeref:typename:std::vector<boundary_type>
boundary_opposite_vertex_simplex_range	multipers/gudhi/gudhi/Simplex_tree.h	/^  Boundary_opposite_vertex_simplex_range boundary_opposite_vertex_simplex_range(SimplexHandle sh/;"	f	class:Gudhi::Simplex_tree	typeref:typename:Boundary_opposite_vertex_simplex_range
boundary_range	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^  Boundary_range boundary_range(std::size_t sh) { return this->get_boundary_of_a_cell(sh); }$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base	typeref:typename:Boundary_range
boundary_simplex_range	multipers/gudhi/gudhi/Bitmap_cubical_complex.h	/^  Boundary_simplex_range boundary_simplex_range(Simplex_handle sh) { return this->get_boundary_o/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex	typeref:typename:Boundary_simplex_range
boundary_simplex_range	multipers/gudhi/gudhi/Simplex_tree.h	/^  Boundary_simplex_range boundary_simplex_range(SimplexHandle sh) {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:Boundary_simplex_range
boundary_simplex_range	multipers/gudhi/mma_interface_coh.h	/^  const std::vector<Simplex_handle> &boundary_simplex_range(Simplex_handle sh) const { return (*/;"	f	class:Gudhi::multiparameter::truc_interface::Boundary_matrix_as_filtered_complex_for_coh	typeref:typename:const std::vector<Simplex_handle> &
boundary_type	multipers/gudhi/Simplex_tree_multi_interface.h	/^  using boundary_type = std::vector<unsigned int>;$/;"	t	class:Gudhi::multiparameter::python_interface::Simplex_tree_multi_interface	typeref:typename:std::vector<unsigned int>
boundary_type	multipers/multiparameter_module_approximation/utilities.h	/^using boundary_type = std::vector<index>;$/;"	t	namespace:Gudhi::multiparameter::mma	typeref:typename:std::vector<index>
box	benchmarks/stuff.py	/^    box = mpg.compute_bounding_box(s).T$/;"	v
box	multipers/multiparameter_module_approximation/images.h	/^	Box box;								\/\/ Possible sub-box.$/;"	m	struct:Gudhi::multiparameter::mma::representation::ImageArgs	typeref:typename:Box
box_	multipers/multiparameter_module_approximation/approximation.h	/^  Box<value_type> box_;$/;"	m	class:Gudhi::multiparameter::mma::Module	typeref:typename:Box<value_type>
build_from_scc_file	multipers/gudhi/truc.h	/^  void build_from_scc_file(const std::string &inFilePath,$/;"	f	class:Gudhi::multiparameter::truc_interface::Truc	typeref:typename:void
build_idx_map	multipers/gudhi/Simplex_tree_multi_interface.h	/^  inline idx_map_type build_idx_map(const std::vector<int> &simplices_dimensions){$/;"	f	class:Gudhi::multiparameter::python_interface::Simplex_tree_multi_interface	typeref:typename:idx_map_type
build_idx_map	multipers/multi_parameter_rank_invariant/diff_helpers.h	/^build_idx_map(const intptr_t simplextree_ptr, Args... args) {$/;"	f	namespace:Gudhi::multiparameter::differentiation	typeref:typename:idx_map_type<Filtration>
build_idx_map	multipers/multi_parameter_rank_invariant/diff_helpers.h	/^build_idx_map(interface_multi<Filtration> &st,$/;"	f	namespace:Gudhi::multiparameter::differentiation	typeref:typename:idx_map_type<Filtration>
cam_	multipers/gudhi/gudhi/Persistent_cohomology.h	/^  Cam cam_;$/;"	m	class:Gudhi::persistent_cohomology::Persistent_cohomology	typeref:typename:Cam
can_retrieve_representative_cycles	multipers/gudhi/gudhi/persistence_matrix_options.h	/^  static const bool can_retrieve_representative_cycles = false;$/;"	m	struct:Gudhi::persistence_matrix::Default_options	typeref:typename:const bool
can_retrieve_representative_cycles	multipers/gudhi/gudhi/persistence_matrix_options.h	/^  static const bool can_retrieve_representative_cycles = true;$/;"	m	struct:Gudhi::persistence_matrix::Representative_cycles_options	typeref:typename:const bool
can_retrieve_representative_cycles	multipers/gudhi/mma_interface_matrix.h	/^  static const bool can_retrieve_representative_cycles = true;$/;"	m	struct:Gudhi::multiparameter::truc_interface::Multi_persistence_Clement_options	typeref:typename:const bool
can_retrieve_representative_cycles	multipers/gudhi/mma_interface_matrix.h	/^  static const bool can_retrieve_representative_cycles = true;$/;"	m	struct:Gudhi::multiparameter::truc_interface::Multi_persistence_options	typeref:typename:const bool
cart_product	multipers/tensor/tensor.h	/^std::vector<std::vector<T>> cart_product(const std::vector<std::vector<T>> &v) {$/;"	f	namespace:tensor	typeref:typename:std::vector<std::vector<T>>
cc	docs/icon.svg	/^   xmlns:dc="http:\/\/purl.org\/dc\/elements\/1.1\/">$/;"	n	uri:http://creativecommons.org/ns#
cell_pool_	multipers/gudhi/gudhi/Persistent_cohomology.h	/^  Simple_object_pool<Cell> cell_pool_;$/;"	m	class:Gudhi::persistent_cohomology::Persistent_cohomology	typeref:typename:Simple_object_pool<Cell>
characteristic	multipers/gudhi/gudhi/Persistent_cohomology/Field_Zp.h	/^  int characteristic() const {$/;"	f	class:Gudhi::persistent_cohomology::Field_Zp	typeref:typename:int
characteristic	multipers/gudhi/gudhi/Persistent_cohomology/Multi_field.h	/^  const Element& characteristic() const {$/;"	f	class:Gudhi::persistent_cohomology::Multi_field	typeref:typename:const Element &
characteristic_	multipers/gudhi/gudhi/Fields/Zp_field_operators.h	/^  Characteristic characteristic_;  \/**< Current characteristic of the field. *\/$/;"	m	class:Gudhi::persistence_fields::Zp_field_operators	typeref:typename:Characteristic
characteristic_	multipers/gudhi/gudhi/Fields/Zp_field_shared.h	/^  static inline Characteristic characteristic_;  \/**< Current characteristic of the field. *\/$/;"	m	class:Gudhi::persistence_fields::Shared_Zp_field_element	typeref:typename:Characteristic
characteristics_	multipers/gudhi/gudhi/Persistent_cohomology.h	/^    Arith_element characteristics_;  \/\/ product of field characteristics for which the cocycle/;"	m	struct:Gudhi::persistent_cohomology::Persistent_cohomology::cocycle	typeref:typename:Arith_element
check_combination	_tempita_grid_gen.py	/^def check_combination(backend_type, is_vine, is_kcritical, value_type, column_type):$/;"	f
check_direction_	multipers/gudhi/gudhi/Multi_persistence/Line.h	/^  void check_direction_() const {$/;"	f	class:Gudhi::multi_persistence::Line	typeref:typename:void
children	multipers/gudhi/gudhi/Simplex_tree.h	/^  Siblings* children(Simplex_handle sh) const {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:Siblings *
children	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_node_explicit_storage.h	/^  Siblings * children() {$/;"	f	struct:Gudhi::Simplex_tree_node_explicit_storage	typeref:typename:Siblings *
children	multipers/gudhi/naive_merge_tree.h	/^    std::set<index> children = {};$/;"	m	struct:Naive_bottleneck_forest::Node	typeref:typename:std::set<index>
children_	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_node_explicit_storage.h	/^  Siblings * children_;$/;"	m	struct:Gudhi::Simplex_tree_node_explicit_storage	typeref:typename:Siblings *
children_stack_	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_star_simplex_iterators.h	/^  std::vector<Siblings*> children_stack_;$/;"	m	class:Gudhi::Simplex_tree_optimized_star_simplex_iterator	typeref:typename:std::vector<Siblings * >
class_key	multipers/gudhi/gudhi/Persistent_cohomology/Persistent_cohomology_column.h	/^  SimplexKey class_key() const {$/;"	f	class:Gudhi::persistent_cohomology::Persistent_cohomology_column	typeref:typename:SimplexKey
class_key_	multipers/gudhi/gudhi/Persistent_cohomology/Persistent_cohomology_column.h	/^  SimplexKey class_key_;$/;"	m	class:Gudhi::persistent_cohomology::Persistent_cohomology_column	typeref:typename:SimplexKey
classifier	compute.py	/^classifier = GridSearchCV($/;"	v
clean	multipers/distances.py	/^    def clean(dgm):$/;"	f	function:estimate_error	file:
clean	multipers/multiparameter_module_approximation/approximation.h	/^inline void Module<value_type>::clean() {$/;"	f	class:Gudhi::multiparameter::mma::Module	typeref:typename:void
clean	multipers/multiparameter_module_approximation/approximation.h	/^inline void Summand<value_type>::clean() {$/;"	f	class:Gudhi::multiparameter::mma::Summand	typeref:typename:void
clean_signed_measure	multipers/point_measure.pyx	/^def clean_signed_measure(some_float[:,:] pts, some_int[:] weights, dtype = np.float32):$/;"	f
clean_sms	multipers/point_measure.pyx	/^def clean_sms(sms):$/;"	f
clear	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^inline void Heap_column<Master_matrix>::clear()$/;"	f	class:Gudhi::persistence_matrix::Heap_column	typeref:typename:void
clear	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^inline void Heap_column<Master_matrix>::clear(ID_index rowIndex)$/;"	f	class:Gudhi::persistence_matrix::Heap_column	typeref:typename:void
clear	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^inline void Intrusive_list_column<Master_matrix>::clear()$/;"	f	class:Gudhi::persistence_matrix::Intrusive_list_column	typeref:typename:void
clear	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^inline void Intrusive_list_column<Master_matrix>::clear(ID_index rowIndex)$/;"	f	class:Gudhi::persistence_matrix::Intrusive_list_column	typeref:typename:void
clear	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^inline void Intrusive_set_column<Master_matrix>::clear()$/;"	f	class:Gudhi::persistence_matrix::Intrusive_set_column	typeref:typename:void
clear	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^inline void Intrusive_set_column<Master_matrix>::clear(ID_index rowIndex)$/;"	f	class:Gudhi::persistence_matrix::Intrusive_set_column	typeref:typename:void
clear	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^inline void List_column<Master_matrix>::clear()$/;"	f	class:Gudhi::persistence_matrix::List_column	typeref:typename:void
clear	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^inline void List_column<Master_matrix>::clear(ID_index rowIndex)$/;"	f	class:Gudhi::persistence_matrix::List_column	typeref:typename:void
clear	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^inline void Naive_vector_column<Master_matrix>::clear()$/;"	f	class:Gudhi::persistence_matrix::Naive_vector_column	typeref:typename:void
clear	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^inline void Naive_vector_column<Master_matrix>::clear(ID_index rowIndex)$/;"	f	class:Gudhi::persistence_matrix::Naive_vector_column	typeref:typename:void
clear	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^inline void Set_column<Master_matrix>::clear()$/;"	f	class:Gudhi::persistence_matrix::Set_column	typeref:typename:void
clear	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^inline void Set_column<Master_matrix>::clear(ID_index rowIndex)$/;"	f	class:Gudhi::persistence_matrix::Set_column	typeref:typename:void
clear	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^inline void Small_vector_column<Master_matrix>::clear()$/;"	f	class:Gudhi::persistence_matrix::Small_vector_column	typeref:typename:void
clear	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^inline void Small_vector_column<Master_matrix>::clear(ID_index rowIndex)$/;"	f	class:Gudhi::persistence_matrix::Small_vector_column	typeref:typename:void
clear	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^inline void Unordered_set_column<Master_matrix>::clear()$/;"	f	class:Gudhi::persistence_matrix::Unordered_set_column	typeref:typename:void
clear	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^inline void Unordered_set_column<Master_matrix>::clear(ID_index rowIndex)$/;"	f	class:Gudhi::persistence_matrix::Unordered_set_column	typeref:typename:void
clear	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^inline void Vector_column<Master_matrix>::clear()$/;"	f	class:Gudhi::persistence_matrix::Vector_column	typeref:typename:void
clear	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^inline void Vector_column<Master_matrix>::clear(ID_index rowIndex)$/;"	f	class:Gudhi::persistence_matrix::Vector_column	typeref:typename:void
clear	multipers/gudhi/gudhi/Simplex_tree.h	/^  void clear() {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:void
clear	multipers/multiparameter_module_approximation/heap_column.h	/^inline void Heap_column::clear()$/;"	f	class:Vineyard::Heap_column	typeref:typename:void
clear	multipers/multiparameter_module_approximation/heap_column.h	/^inline void Heap_column::clear(unsigned int value)$/;"	f	class:Vineyard::Heap_column	typeref:typename:void
clear	multipers/multiparameter_module_approximation/list_column.h	/^inline void List_column::clear()$/;"	f	class:Vineyard::List_column	typeref:typename:void
clear	multipers/multiparameter_module_approximation/list_column.h	/^inline void List_column::clear(unsigned int value)$/;"	f	class:Vineyard::List_column	typeref:typename:void
clear	multipers/multiparameter_module_approximation/list_column_2.h	/^inline void List_column::clear()$/;"	f	class:Vineyard::List_column	typeref:typename:void
clear	multipers/multiparameter_module_approximation/list_column_2.h	/^inline void List_column::clear(unsigned int value)$/;"	f	class:Vineyard::List_column	typeref:typename:void
clear	multipers/multiparameter_module_approximation/set_column.h	/^inline void Set_column::clear()$/;"	f	class:Gudhi::multiparameter::mma::Set_column	typeref:typename:void
clear	multipers/multiparameter_module_approximation/set_column.h	/^inline void Set_column::clear(unsigned int value)$/;"	f	class:Gudhi::multiparameter::mma::Set_column	typeref:typename:void
clear	multipers/multiparameter_module_approximation/unordered_set_column.h	/^inline void Unordered_set_column::clear()$/;"	f	class:Vineyard::Unordered_set_column	typeref:typename:void
clear	multipers/multiparameter_module_approximation/unordered_set_column.h	/^inline void Unordered_set_column::clear(unsigned int value)$/;"	f	class:Vineyard::Unordered_set_column	typeref:typename:void
clear	multipers/multiparameter_module_approximation/vector_column.h	/^inline void Vector_column::clear()$/;"	f	class:Vineyard::Vector_column	typeref:typename:void
clear	multipers/multiparameter_module_approximation/vector_column.h	/^inline void Vector_column::clear(unsigned int value)$/;"	f	class:Vineyard::Vector_column	typeref:typename:void
clear_filtration	multipers/gudhi/gudhi/Simplex_tree.h	/^  void clear_filtration() { filtration_vect_.clear(); }$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:void
clear_io	multipers/io.pyx	/^def clear_io(*args):$/;"	f
clk	multipers/multiparameter_module_approximation/debug.h	/^using clk = std::chrono::high_resolution_clock;$/;"	t	namespace:Gudhi::multiparameter::mma::Debug	typeref:typename:std::chrono::high_resolution_clock
cmp_intervals_by_length	multipers/gudhi/gudhi/Persistent_cohomology.h	/^    explicit cmp_intervals_by_length(FilteredComplex * sc)$/;"	f	struct:Gudhi::persistent_cohomology::Persistent_cohomology::cmp_intervals_by_length
cmp_intervals_by_length	multipers/gudhi/gudhi/Persistent_cohomology.h	/^  struct cmp_intervals_by_length {$/;"	s	class:Gudhi::persistent_cohomology::Persistent_cohomology
cnp	multipers/function_rips.pyx	/^cimport numpy as cnp$/;"	I	nameref:module:numpy
cnp	multipers/grids.pyx	/^cimport numpy as cnp$/;"	I	nameref:module:numpy
cnp	multipers/multiparameter_module_approximation.pyx	/^cimport numpy as cnp$/;"	I	nameref:module:numpy
cnp	multipers/point_measure.pyx	/^cimport numpy as cnp$/;"	I	nameref:module:numpy
coarsen_on_grid	multipers/gudhi/truc.h	/^  auto coarsen_on_grid(const std::vector<std::vector<typename MultiFiltration::value_type>> grid/;"	f	class:Gudhi::multiparameter::truc_interface::Truc	typeref:typename:auto
coarsen_on_grid_inplace	multipers/gudhi/truc.h	/^    inline void coarsen_on_grid_inplace(const std::vector<std::vector<typename MultiFiltration::/;"	f	class:Gudhi::multiparameter::truc_interface::Truc::TrucThread	typeref:typename:void
coarsen_on_grid_inplace	multipers/gudhi/truc.h	/^  inline void coarsen_on_grid_inplace(const std::vector<std::vector<typename MultiFiltration::va/;"	f	class:Gudhi::multiparameter::truc_interface::Truc	typeref:typename:void
coarsen_points	multipers/grids.pyx	/^def coarsen_points(some_float[:,:] points, strategy="exact", int resolution=-1, bool coordinate=/;"	f
coboundary_range	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^  Coboundary_range coboundary_range(std::size_t sh) { return this->get_coboundary_of_a_cell(sh);/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base	typeref:typename:Coboundary_range
cocycle	multipers/gudhi/gudhi/Persistent_cohomology.h	/^    cocycle()$/;"	f	struct:Gudhi::persistent_cohomology::Persistent_cohomology::cocycle
cocycle	multipers/gudhi/gudhi/Persistent_cohomology.h	/^    cocycle(Arith_element characteristics, Hcell * row)$/;"	f	struct:Gudhi::persistent_cohomology::Persistent_cohomology::cocycle
cocycle	multipers/gudhi/gudhi/Persistent_cohomology.h	/^  struct cocycle {$/;"	s	class:Gudhi::persistent_cohomology::Persistent_cohomology
codim_	multipers/gudhi/gudhi/Simplex_tree.h	/^    int codim_;$/;"	m	class:Gudhi::Simplex_tree::Fast_cofaces_predicate	typeref:typename:int
coeff_field_	multipers/gudhi/gudhi/Persistent_cohomology.h	/^  CoefficientField coeff_field_;$/;"	m	class:Gudhi::persistent_cohomology::Persistent_cohomology	typeref:typename:CoefficientField
coefficient_	multipers/gudhi/gudhi/Persistent_cohomology/Persistent_cohomology_column.h	/^  ArithmeticElement coefficient_;$/;"	m	class:Gudhi::persistent_cohomology::Persistent_cohomology_cell	typeref:typename:ArithmeticElement
cofaces_simplex_range	multipers/gudhi/gudhi/Simplex_tree.h	/^  Cofaces_simplex_range cofaces_simplex_range(const Simplex_handle simplex, int codimension) {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:Cofaces_simplex_range
col	benchmarks/stuff.py	/^    n, dataset, cplx, inv, degree, vine, dtype, col = args$/;"	v
colSettings_	multipers/gudhi/gudhi/Matrix.h	/^  Column_settings* colSettings_;  \/\/pointer because the of swap operator on matrix_ which also/;"	m	class:Gudhi::persistence_matrix::Matrix	typeref:typename:Column_settings *
colSettings_	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix.h	/^  Column_settings* colSettings_;  \/**< Entry factory. *\/$/;"	m	class:Gudhi::persistence_matrix::Base_matrix	typeref:typename:Column_settings *
colSettings_	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix_with_column_compression.h	/^  Column_settings* colSettings_;                      \/**< Entry factory. *\/$/;"	m	class:Gudhi::persistence_matrix::Base_matrix_with_column_compression	typeref:typename:Column_settings *
colSettings_	multipers/gudhi/gudhi/Persistence_matrix/Boundary_matrix.h	/^  Column_settings* colSettings_;  \/**< Entry factory. *\/$/;"	m	class:Gudhi::persistence_matrix::Boundary_matrix	typeref:typename:Column_settings *
colSettings_	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^  Column_settings* colSettings_;  \/**< Entry factory. *\/$/;"	m	class:Gudhi::persistence_matrix::Chain_matrix	typeref:typename:Column_settings *
col_	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^    Intrusive_list_column* col_;$/;"	m	struct:Gudhi::persistence_matrix::Intrusive_list_column::Delete_disposer	typeref:typename:Intrusive_list_column *
col_	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^    Intrusive_set_column* col_;$/;"	m	struct:Gudhi::persistence_matrix::Intrusive_set_column::Delete_disposer	typeref:typename:Intrusive_set_column *
col_	multipers/gudhi/gudhi/Persistent_cohomology/Persistent_cohomology_column.h	/^  Col_type col_;$/;"	m	class:Gudhi::persistent_cohomology::Persistent_cohomology_column	typeref:typename:Col_type
col_opt	multipers/gudhi/gudhi/Persistence_matrix/columns/entry_types.h	/^  using col_opt = typename Master_matrix::Entry_column_index_option;$/;"	t	class:Gudhi::persistence_matrix::Entry	typeref:typename:Master_matrix::Entry_column_index_option
collapse	multipers/gudhi/gudhi/Flag_complex_edge_collapser.h	/^namespace collapse {$/;"	n	namespace:Gudhi
collapse_edges	multipers/gudhi/Simplex_tree_interface.h	/^  Simplex_tree_interface* collapse_edges(int nb_collapse_iteration) {$/;"	f	class:Gudhi::Simplex_tree_interface	typeref:typename:Simplex_tree_interface *
collapse_edges	multipers/gudhi/Simplex_tree_multi_interface.h	/^  Simplex_tree_multi_interface *collapse_edges(int nb_collapse_iteration) {$/;"	f	class:Gudhi::multiparameter::python_interface::Simplex_tree_multi_interface	typeref:typename:Simplex_tree_multi_interface *
collapse_edges	multipers/multi_parameter_rank_invariant/persistence_slices.h	/^inline simplextree_like collapse_edges(simplextree_like &st, int num_collapses) {$/;"	f	namespace:Gudhi::multiparameter	typeref:typename:simplextree_like
columnClasses_	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix_with_column_compression.h	/^  boost::disjoint_sets_with_storage<> columnClasses_; \/**< Union-find structure,$/;"	m	class:Gudhi::persistence_matrix::Base_matrix_with_column_compression	typeref:typename:boost::disjoint_sets_with_storage<>
columnIndex_	multipers/gudhi/gudhi/Persistence_matrix/columns/entry_types.h	/^  Index columnIndex_;   \/**< Column index. *\/$/;"	m	class:Gudhi::persistence_matrix::Entry_column_index	typeref:typename:Index
columnIndex_	multipers/gudhi/gudhi/Persistence_matrix/columns/row_access.h	/^  Index columnIndex_;         \/**< Column index. *\/$/;"	m	class:Gudhi::persistence_matrix::Row_access	typeref:typename:Index
columnPool_	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix_with_column_compression.h	/^  std::unique_ptr<Simple_object_pool<Column> > columnPool_;$/;"	m	class:Gudhi::persistence_matrix::Base_matrix_with_column_compression	typeref:typename:std::unique_ptr<Simple_object_pool<Column>>
columnToRep_	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix_with_column_compression.h	/^  Col_dict columnToRep_;                              \/**< Map from a column to the index of it/;"	m	class:Gudhi::persistence_matrix::Base_matrix_with_column_compression	typeref:typename:Col_dict
column_	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^  Column_support column_;$/;"	m	class:Gudhi::persistence_matrix::Heap_column	typeref:typename:Column_support
column_	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^  Column_support column_;$/;"	m	class:Gudhi::persistence_matrix::Intrusive_list_column	typeref:typename:Column_support
column_	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^  Column_support column_;$/;"	m	class:Gudhi::persistence_matrix::Intrusive_set_column	typeref:typename:Column_support
column_	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^  Column_support column_;$/;"	m	class:Gudhi::persistence_matrix::List_column	typeref:typename:Column_support
column_	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^  Column_support column_;$/;"	m	class:Gudhi::persistence_matrix::Naive_vector_column	typeref:typename:Column_support
column_	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^  Column_support column_;$/;"	m	class:Gudhi::persistence_matrix::Set_column	typeref:typename:Column_support
column_	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^  Column_support column_;$/;"	m	class:Gudhi::persistence_matrix::Small_vector_column	typeref:typename:Column_support
column_	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^  Column_support column_;$/;"	m	class:Gudhi::persistence_matrix::Unordered_set_column	typeref:typename:Column_support
column_	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^  Column_support column_;$/;"	m	class:Gudhi::persistence_matrix::Vector_column	typeref:typename:Column_support
column_	multipers/multiparameter_module_approximation/heap_column.h	/^    std::vector<unsigned int> column_;$/;"	m	class:Vineyard::Heap_column	typeref:typename:std::vector<unsigned int>
column_	multipers/multiparameter_module_approximation/list_column.h	/^    std::list<unsigned int> column_;$/;"	m	class:Vineyard::List_column	typeref:typename:std::list<unsigned int>
column_	multipers/multiparameter_module_approximation/list_column_2.h	/^    std::list<unsigned int> column_;$/;"	m	class:Vineyard::List_column	typeref:typename:std::list<unsigned int>
column_	multipers/multiparameter_module_approximation/set_column.h	/^    std::set<unsigned int> column_;$/;"	m	class:Gudhi::multiparameter::mma::Set_column	typeref:typename:std::set<unsigned int>
column_	multipers/multiparameter_module_approximation/unordered_set_column.h	/^    std::unordered_set<unsigned int> column_;$/;"	m	class:Vineyard::Unordered_set_column	typeref:typename:std::unordered_set<unsigned int>
column_	multipers/multiparameter_module_approximation/vector_column.h	/^    std::vector<unsigned int> column_;$/;"	m	class:Vineyard::Vector_column	typeref:typename:std::vector<unsigned int>
column_indexation_type	multipers/gudhi/gudhi/persistence_matrix_options.h	/^  static const Column_indexation_types column_indexation_type = Column_indexation_types::CONTAIN/;"	m	struct:Gudhi::persistence_matrix::Default_options	typeref:typename:const Column_indexation_types
column_indexation_type	multipers/gudhi/mma_interface_matrix.h	/^  static const Gudhi::persistence_matrix::Column_indexation_types column_indexation_type =$/;"	m	struct:Gudhi::multiparameter::truc_interface::Multi_persistence_Clement_options	typeref:typename:const Gudhi::persistence_matrix::Column_indexation_types
column_pool_	multipers/gudhi/gudhi/Persistent_cohomology.h	/^  Simple_object_pool<Column> column_pool_;$/;"	m	class:Gudhi::persistent_cohomology::Persistent_cohomology	typeref:typename:Simple_object_pool<Column>
column_type	multipers/gudhi/gudhi/persistence_matrix_options.h	/^  static const Column_types column_type = col_type;$/;"	m	struct:Gudhi::persistence_matrix::Default_options	typeref:typename:const Column_types
columns_name	_tempita_grid_gen.py	/^columns_name = [  # only one column is necessary$/;"	v
common_neighbors	multipers/gudhi/gudhi/Flag_complex_edge_collapser.h	/^  void common_neighbors(boost::container::flat_set<Vertex>& e_ngb,$/;"	f	struct:Gudhi::collapse::Flag_complex_edge_collapser	typeref:typename:void
compareFirstElementsOfTuples	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^bool compareFirstElementsOfTuples(const std::pair<std::pair<T, std::size_t>, char>& first,$/;"	f	namespace:Gudhi::cubical_complex	typeref:typename:bool
complete_birth	multipers/multiparameter_module_approximation/approximation.h	/^inline void Summand<value_type>::complete_birth(const value_type precision) {$/;"	f	class:Gudhi::multiparameter::mma::Summand	typeref:typename:void
complete_death	multipers/multiparameter_module_approximation/approximation.h	/^inline void Summand<value_type>::complete_death(const value_type precision) {$/;"	f	class:Gudhi::multiparameter::mma::Summand	typeref:typename:void
complete_lower_star_filters_list	multipers/multiparameter_module_approximation/vineyards.h	/^    static void complete_lower_star_filters_list($/;"	f	struct:Gudhi::multiparameter::mma::Filtration_creator	typeref:typename:void
complex_simplex_range	multipers/gudhi/gudhi/Simplex_tree.h	/^  Complex_simplex_range complex_simplex_range() {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:Complex_simplex_range
complex_vertex_range	multipers/gudhi/gudhi/Simplex_tree.h	/^  Complex_vertex_range complex_vertex_range() {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:Complex_vertex_range
complexes	benchmarks/stuff.py	/^complexes = ["delaunay", "rips"]$/;"	v
compose	multipers/multiparameter_module_approximation/combinatory.h	/^void compose(std::vector<T> &p,const permutation_type &q){$/;"	f	namespace:Gudhi::multiparameter::mma::Combinatorics	typeref:typename:void
compute_2d_function_rips	multipers/multi_parameter_rank_invariant/function_rips.h	/^compute_2d_function_rips(_multist &st_multi, \/\/ Function rips$/;"	f	namespace:Gudhi::multiparameter::function_rips	typeref:typename:void
compute_2d_hilbert_surface	multipers/multi_parameter_rank_invariant/hilbert_function.h	/^inline void compute_2d_hilbert_surface($/;"	f	namespace:Gudhi::multiparameter::hilbert_function	typeref:typename:void
compute_2d_rank_invariant	multipers/multi_parameter_rank_invariant/rank_invariant.h	/^inline void compute_2d_rank_invariant($/;"	f	namespace:Gudhi::multiparameter::rank_invariant	typeref:typename:void
compute_2d_rank_invariant_of_elbow	multipers/multi_parameter_rank_invariant/rank_invariant.h	/^inline void compute_2d_rank_invariant_of_elbow($/;"	f	namespace:Gudhi::multiparameter::rank_invariant	typeref:typename:void
compute_backward_cumprod	multipers/tensor/tensor.h	/^inline std::vector<indices_type> compute_backward_cumprod(const std::vector<indices_type> &resol/;"	f	namespace:tensor	typeref:typename:std::vector<indices_type>
compute_backward_intersection	multipers/gudhi/gudhi/Multi_persistence/Line.h	/^  U compute_backward_intersection(const K_critical_point &x) const {$/;"	f	class:Gudhi::multi_persistence::Line	typeref:typename:U
compute_backward_intersection	multipers/gudhi/gudhi/Multi_persistence/Line.h	/^  U compute_backward_intersection(const Point &x) const {$/;"	f	class:Gudhi::multi_persistence::Line	typeref:typename:U
compute_bounding_box	multipers/grids.pyx	/^def compute_bounding_box(stuff, inflate = 0.):$/;"	f
compute_cc	multipers/data/graphs.py	/^def compute_cc(graphs: list[nx.Graph], progress=1):$/;"	f
compute_coordinates_in_grid	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  friend Multi_critical_filtration<out_type> compute_coordinates_in_grid(Multi_critical_filtrati/;"	f	namespace:Gudhi::multi_filtration	typeref:typename:Multi_critical_filtration<out_type>
compute_coordinates_in_grid	multipers/gudhi/gudhi/One_critical_filtration.h	/^  friend One_critical_filtration<out_type> compute_coordinates_in_grid(One_critical_filtration f/;"	f	namespace:Gudhi::multi_filtration	typeref:typename:One_critical_filtration<out_type>
compute_counter_for_given_cell	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^  std::vector<unsigned> compute_counter_for_given_cell(std::size_t cell) const {$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base	typeref:typename:std::vector<unsigned>
compute_degree	multipers/data/graphs.py	/^def compute_degree(graphs: list[nx.Graph], progress=1):$/;"	f
compute_dgm	multipers/multi_parameter_rank_invariant/persistence_slices.h	/^inline Barcode compute_dgm(Simplex_tree_std &st, int degree) {$/;"	f	namespace:Gudhi::multiparameter	typeref:typename:Barcode
compute_dgms	multipers/multi_parameter_rank_invariant/persistence_slices.h	/^inline std::vector<Barcode> compute_dgms(interface_std_like &st,$/;"	f	namespace:Gudhi::multiparameter	typeref:typename:std::vector<Barcode>
compute_diagram_pipe	compute.py	/^compute_diagram_pipe = Pipeline([$/;"	v
compute_distance_idx_to	multipers/multiparameter_module_approximation/approximation.h	/^typename Module<value_type>::distance_to_idx_type inline Module<value_type>::compute_distance_id/;"	f	class:Gudhi::multiparameter::mma::Module	typeref:typename:Module<value_type>::distance_to_idx_type
compute_distance_to	multipers/multiparameter_module_approximation/approximation.h	/^std::vector<value_type> inline Module<value_type>::compute_distance_to(const std::vector<value_t/;"	f	class:Gudhi::multiparameter::mma::Module	typeref:typename:std::vector<value_type>
compute_distances_idx_to	multipers/multiparameter_module_approximation/approximation.h	/^typename Module<value_type>::distances_to_idx_type inline Module<value_type>::compute_distances_/;"	f	class:Gudhi::multiparameter::mma::Module	typeref:typename:Module<value_type>::distances_to_idx_type
compute_distances_to	multipers/multiparameter_module_approximation/approximation.h	/^std::vector<std::vector<value_type>> inline Module<value_type>::compute_distances_to($/;"	f	class:Gudhi::multiparameter::mma::Module	typeref:typename:std::vector<std::vector<value_type>>
compute_distances_to	multipers/multiparameter_module_approximation/approximation.h	/^void inline Module<value_type>::compute_distances_to(dtype *data_ptr,$/;"	f	class:Gudhi::multiparameter::mma::Module	typeref:typename:void
compute_euclidean_distance_to	multipers/gudhi/gudhi/One_critical_filtration.h	/^  friend T compute_euclidean_distance_to(const One_critical_filtration &f, const One_critical_fi/;"	f	namespace:Gudhi::multi_filtration	typeref:typename:T
compute_extended_filtration	multipers/gudhi/Simplex_tree_interface.h	/^  void compute_extended_filtration() {$/;"	f	class:Gudhi::Simplex_tree_interface	typeref:typename:void
compute_extended_filtration	multipers/gudhi/Simplex_tree_multi_interface.h	/^  void compute_extended_filtration() {$/;"	f	class:Gudhi::multiparameter::python_interface::Simplex_tree_multi_interface	typeref:typename:void
compute_fiedler	multipers/data/graphs.py	/^def compute_fiedler(graphs: list[nx.Graph], progress=1):$/;"	f
compute_filtration	multipers/data/graphs.py	/^def compute_filtration(dataset: str, filtration: str = "ALL", **kwargs):$/;"	f
compute_forward_intersection	multipers/gudhi/gudhi/Multi_persistence/Line.h	/^  U compute_forward_intersection(const K_critical_point &x) const {$/;"	f	class:Gudhi::multi_persistence::Line	typeref:typename:U
compute_forward_intersection	multipers/gudhi/gudhi/Multi_persistence/Line.h	/^  U compute_forward_intersection(const Point &x) const {$/;"	f	class:Gudhi::multi_persistence::Line	typeref:typename:U
compute_function_rips_signed_measure_python	multipers/multi_parameter_rank_invariant/function_rips.h	/^compute_function_rips_signed_measure_python($/;"	f	namespace:Gudhi::multiparameter::function_rips	typeref:typename:std::pair<std::vector<std::vector<indices_type>>,std::vector<dtype>>
compute_function_rips_surface_python	multipers/multi_parameter_rank_invariant/function_rips.h	/^void compute_function_rips_surface_python($/;"	f	namespace:Gudhi::multiparameter::function_rips	typeref:typename:void
compute_geodesic	multipers/data/graphs.py	/^def compute_geodesic(graphs: list[nx.Graph], progress=1):$/;"	f
compute_grid	multipers/grids.pyx	/^def compute_grid($/;"	f
compute_hash_value	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^inline std::size_t Heap_column<Master_matrix>::compute_hash_value()$/;"	f	class:Gudhi::persistence_matrix::Heap_column	typeref:typename:std::size_t
compute_hash_value	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^inline std::size_t Vector_column<Master_matrix>::compute_hash_value()$/;"	f	class:Gudhi::persistence_matrix::Vector_column	typeref:typename:std::size_t
compute_hks	multipers/data/graphs.py	/^def compute_hks(graphs: list[nx.Graph], t: float, progress=1):$/;"	f
compute_incidence_between_cells	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^  virtual int compute_incidence_between_cells(std::size_t coface, std::size_t face) const {$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base	typeref:typename:int
compute_incidence_between_cells	multipers/gudhi/gudhi/Bitmap_cubical_complex_periodic_boundary_conditions_base.h	/^  virtual int compute_incidence_between_cells(std::size_t coface, std::size_t face) const overri/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_periodic_boundary_conditions_base	typeref:typename:int
compute_index_in_bitmap	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^    std::size_t compute_index_in_bitmap() const {$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base::Top_dimensional_cells_iterator	typeref:typename:std::size_t
compute_index_in_bitmap	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^    std::size_t compute_index_in_bitmap() const {$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base::Vertices_iterator	typeref:typename:std::size_t
compute_index_in_bitmap	multipers/gudhi/gudhi/Bitmap_cubical_complex_periodic_boundary_conditions_base.h	/^    std::size_t compute_index_in_bitmap() const {$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_periodic_boundary_conditions_base::Vertices_iterator	typeref:typename:std::size_t
compute_intrinsic	multipers/data/graphs.py	/^def compute_intrinsic(graphs: list[nx.Graph], progress=1, nowarning=False):$/;"	f
compute_linear_projection	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  friend U compute_linear_projection(const Multi_critical_filtration &f, const std::vector<U> &x/;"	f	namespace:Gudhi::multi_filtration	typeref:typename:U
compute_linear_projection	multipers/gudhi/gudhi/One_critical_filtration.h	/^  friend U compute_linear_projection(const One_critical_filtration &f, const std::vector<U> &x) /;"	f	namespace:Gudhi::multi_filtration	typeref:typename:U
compute_max_scale	multipers/ml/point_clouds.py	/^        def compute_max_scale(x):$/;"	f	member:PointCloud2FilteredComplex._get_distance_quantiles_and_threshold	file:
compute_norm	multipers/gudhi/gudhi/One_critical_filtration.h	/^  friend T compute_norm(const One_critical_filtration &f) {$/;"	f	namespace:Gudhi::multi_filtration	typeref:typename:T
compute_persistence	multipers/gudhi/truc.h	/^    inline void compute_persistence(const bool ignore_inf=true) {$/;"	f	class:Gudhi::multiparameter::truc_interface::Truc::TrucThread	typeref:typename:void
compute_persistence	multipers/gudhi/truc.h	/^  inline void compute_persistence(const bool ignore_inf = true) {$/;"	f	class:Gudhi::multiparameter::truc_interface::Truc	typeref:typename:void
compute_persistence_out	multipers/gudhi/truc.h	/^  inline PersBackend compute_persistence_out($/;"	f	class:Gudhi::multiparameter::truc_interface::Truc	typeref:typename:PersBackend
compute_persistent_cohomology	multipers/gudhi/gudhi/Persistent_cohomology.h	/^  void compute_persistent_cohomology(Filtration_value min_interval_length = 0,$/;"	f	class:Gudhi::persistent_cohomology::Persistent_cohomology	typeref:typename:void
compute_pixels	multipers/multiparameter_module_approximation/approximation.h	/^inline std::vector<std::vector<value_type>> Module<value_type>::compute_pixels($/;"	f	class:Gudhi::multiparameter::mma::Module	typeref:typename:std::vector<std::vector<value_type>>
compute_pixels_of_degree	multipers/multiparameter_module_approximation/approximation.h	/^inline std::vector<value_type> Module<value_type>::compute_pixels_of_degree($/;"	f	class:Gudhi::multiparameter::mma::Module	typeref:typename:std::vector<value_type>
compute_position_in_bitmap	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^  std::size_t compute_position_in_bitmap(const std::vector<unsigned>& counter) {$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base	typeref:typename:std::size_t
compute_proximity_graph	multipers/gudhi/gudhi/graph_simplicial_complex.h	/^Proximity_graph<SimplicialComplexForProximityGraph> compute_proximity_graph($/;"	f	namespace:Gudhi	typeref:typename:Proximity_graph<SimplicialComplexForProximityGraph>
compute_ptrs	multipers/tensor/tensor.h	/^  inline void compute_ptrs(const std::vector<std::vector<indices_type>> &free_coordinates, bool /;"	f	class:tensor::static_tensor_view_view	typeref:typename:void
compute_ptrs_dense	multipers/tensor/tensor.h	/^  void compute_ptrs_dense(const std::vector<std::vector<indices_type>> &free_coordinates) {  \/\//;"	f	class:tensor::static_tensor_view_view	typeref:typename:void
compute_ptrs_sparse	multipers/tensor/tensor.h	/^  inline void compute_ptrs_sparse(const std::vector<std::vector<indices_type>> &free_coordinates/;"	f	class:tensor::static_tensor_view_view	typeref:typename:void
compute_punctual_expansion	multipers/gudhi/gudhi/Simplex_tree.h	/^  void compute_punctual_expansion($/;"	f	class:Gudhi::Simplex_tree	typeref:typename:void
compute_rank_invariant_python	multipers/multi_parameter_rank_invariant/rank_invariant.h	/^void compute_rank_invariant_python($/;"	f	namespace:Gudhi::multiparameter::rank_invariant	typeref:typename:void
compute_rank_invariant_python	multipers/multi_parameter_rank_invariant/rank_invariant.h	/^void compute_rank_invariant_python(truc_interface::Truc<PersBackend, Structure, MultiFiltration>/;"	f	namespace:Gudhi::multiparameter::rank_invariant	typeref:typename:void
compute_rank_signed_measure	multipers/multi_parameter_rank_invariant/rank_invariant.h	/^std::pair<std::vector<std::vector<indices_type>>, std::vector<dtype>> compute_rank_signed_measur/;"	f	namespace:Gudhi::multiparameter::rank_invariant	typeref:typename:std::pair<std::vector<std::vector<indices_type>>,std::vector<dtype>>
compute_resolution	multipers/tensor/tensor.h	/^  std::vector<indices_type> compute_resolution(const std::vector<std::vector<indices_type>> &fre/;"	f	class:tensor::static_tensor_view_view	typeref:typename:std::vector<indices_type>
compute_ricci	multipers/data/graphs.py	/^def compute_ricci(graphs: list[nx.Graph], alpha=0.5, progress=1):$/;"	f
compute_vineyard_barcode	multipers/multiparameter_module_approximation/vineyards_trajectories.h	/^compute_vineyard_barcode(boundary_matrix &boundaryMatrix,$/;"	f	namespace:Gudhi::multiparameter::mma	typeref:typename:std::vector<std::vector<std::vector<interval_type>>>
compute_vineyard_barcode_in_dimension	multipers/multiparameter_module_approximation/vineyards_trajectories.h	/^std::vector<std::vector<interval_type>> compute_vineyard_barcode_in_dimension($/;"	f	namespace:Gudhi::multiparameter::mma	typeref:typename:std::vector<std::vector<interval_type>>
compute_vineyard_barcode_recursively	multipers/multiparameter_module_approximation/vineyards_trajectories.h	/^void compute_vineyard_barcode_recursively($/;"	f	namespace:Gudhi::multiparameter::mma	typeref:typename:void
compute_vineyard_barcode_recursively_in_higher_dimension	multipers/multiparameter_module_approximation/vineyards_trajectories.h	/^void compute_vineyard_barcode_recursively_in_higher_dimension($/;"	f	namespace:Gudhi::multiparameter::mma	typeref:typename:void
const_iterator	multipers/gudhi/gudhi/Bitmap_cubical_complex.h	/^    typedef Skeleton_simplex_iterator const_iterator;$/;"	t	class:Gudhi::cubical_complex::Bitmap_cubical_complex::Skeleton_simplex_range	typeref:typename:Skeleton_simplex_iterator
const_iterator	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  using const_iterator = typename Generators::const_iterator; \/**< Const iterator type for the /;"	t	class:Gudhi::multi_filtration::Multi_critical_filtration	typeref:typename:Generators::const_iterator
const_iterator	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^  using const_iterator = boost::indirect_iterator<typename Column_support::const_iterator>;$/;"	t	class:Gudhi::persistence_matrix::Heap_column	typeref:typename:boost::indirect_iterator<typename Column_support::const_iterator>
const_iterator	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^  using const_iterator = typename Column_support::const_iterator;$/;"	t	class:Gudhi::persistence_matrix::Intrusive_list_column	typeref:typename:Column_support::const_iterator
const_iterator	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^  using const_iterator = typename Column_support::const_iterator;$/;"	t	class:Gudhi::persistence_matrix::Intrusive_set_column	typeref:typename:Column_support::const_iterator
const_iterator	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^  using const_iterator = boost::indirect_iterator<typename Column_support::const_iterator>;$/;"	t	class:Gudhi::persistence_matrix::List_column	typeref:typename:boost::indirect_iterator<typename Column_support::const_iterator>
const_iterator	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^  using const_iterator = boost::indirect_iterator<typename Column_support::const_iterator>;$/;"	t	class:Gudhi::persistence_matrix::Naive_vector_column	typeref:typename:boost::indirect_iterator<typename Column_support::const_iterator>
const_iterator	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^  using const_iterator = boost::indirect_iterator<typename Column_support::const_iterator>;$/;"	t	class:Gudhi::persistence_matrix::Set_column	typeref:typename:boost::indirect_iterator<typename Column_support::const_iterator>
const_iterator	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^  using const_iterator = boost::indirect_iterator<typename Column_support::const_iterator>;$/;"	t	class:Gudhi::persistence_matrix::Small_vector_column	typeref:typename:boost::indirect_iterator<typename Column_support::const_iterator>
const_iterator	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^  using const_iterator = boost::indirect_iterator<typename Column_support::const_iterator>;$/;"	t	class:Gudhi::persistence_matrix::Unordered_set_column	typeref:typename:boost::indirect_iterator<typename Column_support::const_iterator>
const_iterator	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^  using const_iterator = boost::indirect_iterator<typename Column_support::const_iterator>;$/;"	t	class:Gudhi::persistence_matrix::Vector_column	typeref:typename:boost::indirect_iterator<typename Column_support::const_iterator>
const_reverse_iterator	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^  using const_reverse_iterator = boost::indirect_iterator<typename Column_support::const_reverse/;"	t	class:Gudhi::persistence_matrix::Heap_column	typeref:typename:boost::indirect_iterator<typename Column_support::const_reverse_iterator>
const_reverse_iterator	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^  using const_reverse_iterator = typename Column_support::const_reverse_iterator;$/;"	t	class:Gudhi::persistence_matrix::Intrusive_list_column	typeref:typename:Column_support::const_reverse_iterator
const_reverse_iterator	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^  using const_reverse_iterator = typename Column_support::const_reverse_iterator;$/;"	t	class:Gudhi::persistence_matrix::Intrusive_set_column	typeref:typename:Column_support::const_reverse_iterator
const_reverse_iterator	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^  using const_reverse_iterator = boost::indirect_iterator<typename Column_support::const_reverse/;"	t	class:Gudhi::persistence_matrix::List_column	typeref:typename:boost::indirect_iterator<typename Column_support::const_reverse_iterator>
const_reverse_iterator	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^  using const_reverse_iterator = boost::indirect_iterator<typename Column_support::const_reverse/;"	t	class:Gudhi::persistence_matrix::Naive_vector_column	typeref:typename:boost::indirect_iterator<typename Column_support::const_reverse_iterator>
const_reverse_iterator	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^  using const_reverse_iterator = boost::indirect_iterator<typename Column_support::const_reverse/;"	t	class:Gudhi::persistence_matrix::Set_column	typeref:typename:boost::indirect_iterator<typename Column_support::const_reverse_iterator>
const_reverse_iterator	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^  using const_reverse_iterator = boost::indirect_iterator<typename Column_support::const_reverse/;"	t	class:Gudhi::persistence_matrix::Small_vector_column	typeref:typename:boost::indirect_iterator<typename Column_support::const_reverse_iterator>
const_reverse_iterator	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^  using const_reverse_iterator = boost::indirect_iterator<typename Column_support::const_reverse/;"	t	class:Gudhi::persistence_matrix::Vector_column	typeref:typename:boost::indirect_iterator<typename Column_support::const_reverse_iterator>
construct	multipers/gudhi/gudhi/Persistence_matrix/allocators/entry_constructors.h	/^  Entry* construct(U&&... u) const {$/;"	f	struct:Gudhi::persistence_matrix::New_entry_constructor	typeref:typename:Entry *
construct	multipers/gudhi/gudhi/Persistence_matrix/allocators/entry_constructors.h	/^  Entry* construct(U&&... u) {$/;"	f	struct:Gudhi::persistence_matrix::Pool_entry_constructor	typeref:typename:Entry *
construct	multipers/gudhi/gudhi/Simple_object_pool.h	/^  pointer construct(U&&...u) {$/;"	f	class:Gudhi::Simple_object_pool	typeref:typename:pointer
construct_complex_based_on_top_dimensional_cells	multipers/gudhi/gudhi/Bitmap_cubical_complex_periodic_boundary_conditions_base.h	/^void Bitmap_cubical_complex_periodic_boundary_conditions_base<T>::construct_complex_based_on_top/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_periodic_boundary_conditions_base	typeref:typename:void
construct_complex_based_on_vertices	multipers/gudhi/gudhi/Bitmap_cubical_complex_periodic_boundary_conditions_base.h	/^void Bitmap_cubical_complex_periodic_boundary_conditions_base<T>::construct_complex_based_on_ver/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_periodic_boundary_conditions_base	typeref:typename:void
contains	multipers/gudhi/gudhi/Multi_persistence/Box.h	/^  bool contains(const Point &point) const {$/;"	f	class:Gudhi::multi_persistence::Box	typeref:typename:bool
contains	multipers/multiparameter_module_approximation/approximation.h	/^inline bool Summand<value_type>::contains(const filtration_type &x) const {$/;"	f	class:Gudhi::multiparameter::mma::Summand	typeref:typename:bool
contains	multipers/multiparameter_module_approximation/heap_column.h	/^inline bool Heap_column::contains(unsigned int value) const$/;"	f	class:Vineyard::Heap_column	typeref:typename:bool
contains	multipers/multiparameter_module_approximation/list_column.h	/^inline bool List_column::contains(unsigned int value) const$/;"	f	class:Vineyard::List_column	typeref:typename:bool
contains	multipers/multiparameter_module_approximation/list_column_2.h	/^inline bool List_column::contains(unsigned int value) const$/;"	f	class:Vineyard::List_column	typeref:typename:bool
contains	multipers/multiparameter_module_approximation/set_column.h	/^inline bool Set_column::contains(unsigned int value) const$/;"	f	class:Gudhi::multiparameter::mma::Set_column	typeref:typename:bool
contains	multipers/multiparameter_module_approximation/unordered_set_column.h	/^inline bool Unordered_set_column::contains(unsigned int value) const$/;"	f	class:Vineyard::Unordered_set_column	typeref:typename:bool
contains	multipers/multiparameter_module_approximation/vector_column.h	/^inline bool Vector_column::contains(unsigned int value) const$/;"	f	class:Vineyard::Vector_column	typeref:typename:bool
contiguous_vertices	multipers/gudhi/Simplex_tree_interface.h	/^  static const bool contiguous_vertices = false;$/;"	m	struct:Gudhi::Simplex_tree_options_for_python	typeref:typename:const bool
contiguous_vertices	multipers/gudhi/gudhi/Simplex_tree.h	/^  bool contiguous_vertices() const {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:bool
contiguous_vertices	multipers/gudhi/gudhi/Simplex_tree/simplex_tree_options.h	/^  static const bool contiguous_vertices = false;$/;"	m	struct:Gudhi::Simplex_tree_options_default	typeref:typename:const bool
contiguous_vertices	multipers/gudhi/gudhi/Simplex_tree/simplex_tree_options.h	/^  static const bool contiguous_vertices = false;$/;"	m	struct:Gudhi::Simplex_tree_options_full_featured	typeref:typename:const bool
contiguous_vertices	multipers/gudhi/gudhi/Simplex_tree/simplex_tree_options.h	/^  static const bool contiguous_vertices = false;$/;"	m	struct:Gudhi::Simplex_tree_options_minimal	typeref:typename:const bool
contiguous_vertices	multipers/gudhi/gudhi/Simplex_tree/simplex_tree_options.h	/^  static const bool contiguous_vertices = true;$/;"	m	struct:Gudhi::Simplex_tree_options_fast_persistence	typeref:typename:const bool
contiguous_vertices	multipers/gudhi/gudhi/Simplex_tree_multi.h	/^  static const bool contiguous_vertices = false;$/;"	m	struct:Gudhi::multi_persistence::Simplex_tree_options_multidimensional_filtration	typeref:typename:const bool
contiguous_vertices	multipers/multi_parameter_rank_invariant/persistence_slices.h	/^  static const bool contiguous_vertices = false;  \/\/ TODO OPTIMIZATION : maybe make the simple/;"	m	struct:Gudhi::multiparameter::Simplex_tree_float	typeref:typename:const bool
convert_barcodes	multipers_old.py	/^def convert_barcodes(barcodes):$/;"	f
convert_summand	multipers_old.py	/^def convert_summand(summand):$/;"	f
convolution_signed_measures	multipers/ml/convolutions.py	/^def convolution_signed_measures($/;"	f
convolution_signed_measures_on_grid	multipers/ml/convolutions.py	/^            def convolution_signed_measures_on_grid($/;"	f	function:convolution_signed_measures	file:
convolution_signed_measures_on_grid	multipers/ml/convolutions.py	/^            def convolution_signed_measures_on_grid($/;"	f	function:convolution_signed_measures	typeref:typename:np.ndarray	file:
copy_data	multipers/tensor/tensor.h	/^  inline std::vector<dtype> copy_data() {$/;"	f	class:tensor::static_tensor_view_view	typeref:typename:std::vector<dtype>
copy_from	multipers/gudhi/gudhi/Simplex_tree.h	/^  void copy_from(const Simplex_tree& complex_source) {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:void
copy_from	multipers/gudhi/gudhi/Simplex_tree.h	/^  void copy_from(const Simplex_tree<OtherSimplexTreeOptions>& complex_source, F&& translate_filt/;"	f	class:Gudhi::Simplex_tree	typeref:typename:void
copy_transform	multipers/ml/mma.py	/^    def copy_transform(mod, degrees, translation, rescale_factors, new_box):$/;"	m	class:MMAFormatter
copyright	docs/conf.py	/^copyright = "2024, David Loiseaux, Mathieu Carrière, Hannah Schreiber"$/;"	v
corner_type	multipers/multiparameter_module_approximation/utilities.h	/^using corner_type = Gudhi::multi_filtration::$/;"	t	namespace:Gudhi::multiparameter::mma	typeref:typename:Gudhi::multi_filtration::One_critical_filtration<value_type>
corners_type	multipers/multiparameter_module_approximation/utilities.h	/^using corners_type =$/;"	t	namespace:Gudhi::multiparameter::mma	typeref:typename:std::pair<std::vector<corner_type>,std::vector<corner_type>>
counter	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^    std::vector<std::size_t> counter;$/;"	m	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base::Top_dimensional_cells_iterator	typeref:typename:std::vector<std::size_t>
counter	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^    std::vector<std::size_t> counter;$/;"	m	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base::Vertices_iterator	typeref:typename:std::vector<std::size_t>
counter	multipers/gudhi/gudhi/Bitmap_cubical_complex_periodic_boundary_conditions_base.h	/^    std::vector<std::size_t> counter;$/;"	m	class:Gudhi::cubical_complex::Bitmap_cubical_complex_periodic_boundary_conditions_base::Vertices_iterator	typeref:typename:std::vector<std::size_t>
cplx	benchmarks/stuff.py	/^    n, dataset, cplx, inv, degree, vine, dtype, col = args$/;"	v
cpp_dirs	setup.py	/^cpp_dirs = [$/;"	v
cpp_dirs	setup.py	/^cpp_dirs = [str(Path(stuff).expanduser().resolve()) for stuff in cpp_dirs]$/;"	v
cpx_	multipers/gudhi/gudhi/Persistent_cohomology.h	/^    FilteredComplex * cpx_;$/;"	m	struct:Gudhi::persistent_cohomology::Persistent_cohomology::length_interval	typeref:typename:FilteredComplex *
cpx_	multipers/gudhi/gudhi/Persistent_cohomology.h	/^  FilteredComplex * cpx_;$/;"	m	class:Gudhi::persistent_cohomology::Persistent_cohomology	typeref:typename:FilteredComplex *
cpx_	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_star_simplex_iterators.h	/^    SimplexTree* cpx_;$/;"	m	class:Gudhi::Simplex_tree_optimized_cofaces_rooted_subtrees_simplex_iterator::is_coface	typeref:typename:SimplexTree *
create_cocycle	multipers/gudhi/gudhi/Persistent_cohomology.h	/^  void create_cocycle(Simplex_handle sigma, Arith_element x,$/;"	f	class:Gudhi::persistent_cohomology::Persistent_cohomology	typeref:typename:void
create_expansion	multipers/gudhi/gudhi/Simplex_tree.h	/^  void create_expansion(Siblings* siblings,$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:void
create_local_expansion	multipers/gudhi/gudhi/Simplex_tree.h	/^  void create_local_expansion(Simplex_handle sh_v  \/\/ Node with label v which has just been in/;"	f	class:Gudhi::Simplex_tree	typeref:typename:void
cubical_complex	multipers/gudhi/gudhi/Bitmap_cubical_complex.h	/^namespace cubical_complex {$/;"	n	namespace:Gudhi
cubical_complex	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^namespace cubical_complex {$/;"	n	namespace:Gudhi
cubical_complex	multipers/gudhi/gudhi/Bitmap_cubical_complex_periodic_boundary_conditions_base.h	/^namespace cubical_complex {$/;"	n	namespace:Gudhi
cum_prod_resolution_	multipers/tensor/tensor.h	/^  std::vector<indices_type> cum_prod_resolution_;$/;"	m	class:tensor::static_tensor_view	typeref:typename:std::vector<indices_type>
currBar_	multipers/gudhi/mma_interface_h0.h	/^    Bar currBar_;$/;"	m	class:Gudhi::multiparameter::truc_interface::Persistence_backend_h0::Barcode_iterator	typeref:typename:Bar
currBar_	multipers/gudhi/mma_interface_matrix.h	/^    bar currBar_;$/;"	m	class:Gudhi::multiparameter::truc_interface::Persistence_backend_matrix::Barcode_iterator	typeref:typename:bar
currPos_	multipers/gudhi/mma_interface_coh.h	/^    std::size_t currPos_;$/;"	m	class:Gudhi::multiparameter::truc_interface::Boundary_matrix_as_filtered_complex_for_coh::Filtration_range_iterator	typeref:typename:std::size_t
currPos_	multipers/gudhi/mma_interface_h0.h	/^    std::size_t currPos_;$/;"	m	class:Gudhi::multiparameter::truc_interface::Persistence_backend_h0::Barcode_iterator	typeref:typename:std::size_t
currPos_	multipers/gudhi/mma_interface_matrix.h	/^    std::size_t currPos_;$/;"	m	class:Gudhi::multiparameter::truc_interface::Persistence_backend_matrix::Barcode_iterator	typeref:typename:std::size_t
curr_dim_	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  int curr_dim_;$/;"	m	class:Gudhi::Simplex_tree_skeleton_simplex_iterator	typeref:typename:int
currentToOriginalPositions_	multipers/multiparameter_module_approximation/vineyards.h	/^    permutation_type currentToOriginalPositions_;  \/\/new pos to origin pos$/;"	m	class:Gudhi::multiparameter::mma::Vineyard_persistence	typeref:typename:permutation_type
current_line	multipers/multiparameter_module_approximation/approximation.h	/^  Line<value_type> current_line;$/;"	m	class:Gudhi::multiparameter::mma::LineIterator	typeref:typename:Line<value_type>
cycle_type	multipers/gudhi/mma_interface_coh.h	/^  using cycle_type = void;$/;"	t	class:Gudhi::multiparameter::truc_interface::Persistence_backend_cohomology	typeref:typename:void
cycle_type	multipers/gudhi/mma_interface_h0.h	/^  using cycle_type = std::vector<unsigned int>;$/;"	t	class:Gudhi::multiparameter::truc_interface::Persistence_backend_h0	typeref:typename:std::vector<unsigned int>
cycle_type	multipers/gudhi/mma_interface_matrix.h	/^  using cycle_type = typename matrix_type::Cycle;$/;"	t	class:Gudhi::multiparameter::truc_interface::Persistence_backend_matrix	typeref:typename:matrix_type::Cycle
cython_compiler_directives	setup.py	/^cython_compiler_directives = {$/;"	v
cython_modules	setup.py	/^cython_modules = [$/;"	v
cythonize_flags	setup.py	/^cythonize_flags = {$/;"	v
d_inf	multipers/multiparameter_module_approximation/approximation.h	/^inline value_type Summand<value_type>::d_inf(const filtration_type &a, const filtration_type &b)/;"	f	class:Gudhi::multiparameter::mma::Summand	typeref:typename:value_type
data	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^  std::vector<T> data;$/;"	m	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base	typeref:typename:std::vector<T>
data	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_node_explicit_storage.h	/^  Simplex_data& data() { return boost::empty_value<Simplex_data>::get(); }$/;"	f	struct:Gudhi::Simplex_tree_node_explicit_storage	typeref:typename:Simplex_data &
data2graph	multipers/data/pytorch2simplextree.py	/^	def data2graph(data:Data):$/;"	f	function:modelnet2pts2gs	file:
data2graph	multipers/data/pytorch2simplextree.py	/^	def data2graph(data:Data):$/;"	f	function:torch_geometric_2nx	file:
data_at	multipers/tensor/tensor.h	/^  inline dtype &data_at(indice_type_like i) const {$/;"	f	class:tensor::static_tensor_view	typeref:typename:dtype &
data_at_index	multipers/tensor/tensor.h	/^  inline dtype &data_at_index(idx_type i) {$/;"	f	class:tensor::static_tensor_view	typeref:typename:dtype &
data_back	multipers/tensor/tensor.h	/^  inline dtype &data_back() const { return *(data_ptr_ + size_ - 1); }$/;"	f	class:tensor::static_tensor_view	typeref:typename:dtype &
data_index_inverse	multipers/tensor/tensor.h	/^  inline std::vector<indices_type> data_index_inverse(indice_type_like data_index,$/;"	f	class:tensor::static_tensor_view	typeref:typename:std::vector<indices_type>
data_ptr_	multipers/tensor/tensor.h	/^  dtype *data_ptr_;$/;"	m	class:tensor::static_tensor_view	typeref:typename:dtype *
dataset	benchmarks/stuff.py	/^    n, dataset, cplx, inv, degree, vine, dtype, col = args$/;"	v
dataset	compute.py	/^dataset = results_kwargs.pop("dataset")$/;"	v
datasets	benchmarks/stuff.py	/^datasets: Sequence[str] = list(available_dataset.keys())$/;"	v	typeref:typename:Sequence[str]
dc	docs/icon.svg	/^   xmlns:dc="http:\/\/purl.org\/dc\/elements\/1.1\/">$/;"	n	uri:http://purl.org/dc/elements/1.1/
death	multipers/gudhi/gudhi/Persistence_matrix/chain_vine_swap.h	/^  Pos_index death(ID_index pivot) const {$/;"	f	class:Gudhi::persistence_matrix::Chain_barcode_swap	typeref:typename:Pos_index
death	multipers/gudhi/gudhi/persistence_interval.h	/^  Event_value death; \/**< Death value of the cycle. *\/$/;"	m	struct:Gudhi::persistence_matrix::Persistence_interval	typeref:typename:Event_value
death	multipers/gudhi/naive_merge_tree.h	/^    index death(index birth) { return barcode_[positionToBar_[birth]].death; }$/;"	f	struct:Naive_merge_forest::Barcode	typeref:typename:index
death	multipers/gudhi/naive_merge_tree.h	/^  int death;$/;"	m	struct:Bar	typeref:typename:int
death	multipers/multiparameter_module_approximation/utilities.h	/^  filtration_type death;$/;"	m	struct:Gudhi::multiparameter::mma::MultiDiagram_point	typeref:typename:filtration_type
death	multipers/multiparameter_module_approximation/utilities.h	/^  int death;$/;"	m	struct:Gudhi::multiparameter::mma::Bar	typeref:typename:int
death	multipers/multiparameter_module_approximation/utilities.h	/^  value_type death;$/;"	m	struct:Gudhi::multiparameter::mma::Diagram_point	typeref:typename:value_type
deathComp_	multipers/gudhi/gudhi/Persistence_matrix/chain_vine_swap.h	/^  std::function<bool(Pos_index,Pos_index)> deathComp_;  \/**< for G x G. *\/$/;"	m	class:Gudhi::persistence_matrix::Chain_vine_swap	typeref:typename:std::function<bool (Pos_index,Pos_index)>
deathToBar_	multipers/gudhi/gudhi/Persistence_matrix/base_pairing.h	/^  Dictionary deathToBar_; \/**< Map from death index to bar index. *\/$/;"	m	class:Gudhi::persistence_matrix::Base_pairing	typeref:typename:Dictionary
death_birth_swap	multipers/gudhi/naive_merge_tree.h	/^    void death_birth_swap(index position) {$/;"	f	struct:Naive_merge_forest::Barcode	typeref:typename:void
death_corners_	multipers/multiparameter_module_approximation/approximation.h	/^  Gudhi::multi_filtration::Multi_critical_filtration<value_type, true> death_corners_;$/;"	m	class:Gudhi::multiparameter::mma::Summand	typeref:typename:Gudhi::multi_filtration::Multi_critical_filtration<value_type,true>
death_death_swap	multipers/gudhi/naive_merge_tree.h	/^    void death_death_swap(index position) {$/;"	f	struct:Naive_merge_forest::Barcode	typeref:typename:void
deaths_type	multipers/multiparameter_module_approximation/approximation.h	/^  using deaths_type = Gudhi::multi_filtration::Multi_critical_filtration<value_type, true>;$/;"	t	class:Gudhi::multiparameter::mma::Summand	typeref:typename:Gudhi::multi_filtration::Multi_critical_filtration<value_type,true>
debug	multipers/multiparameter_module_approximation/debug.h	/^constexpr bool debug = false;$/;"	v	namespace:Gudhi::multiparameter::mma::Debug	typeref:typename:bool
decode_extended_filtration	multipers/gudhi/gudhi/Simplex_tree.h	/^  std::pair<Filtration_value, Extended_simplex_type> decode_extended_filtration(const Filtration/;"	f	class:Gudhi::Simplex_tree	typeref:typename:std::pair<Filtration_value,Extended_simplex_type>
deep_format_measure	multipers/ml/signed_measures.py	/^    def deep_format_measure(signed_measure):$/;"	m	class:SignedMeasureFormatter
defaultEntryConstructor	multipers/gudhi/gudhi/Matrix.h	/^  inline static New_entry_constructor<Matrix_entry> defaultEntryConstructor;$/;"	m	class:Gudhi::persistence_matrix::Matrix	typeref:typename:New_entry_constructor<Matrix_entry>
defs1	docs/icon.svg	/^     id="defs1">$/;"	i
defs2	docs/icon.svg	/^       id="defs2">$/;"	i
defs501	docs/icon.svg	/^     id="defs501">$/;"	i
degree	benchmarks/stuff.py	/^    n, dataset, cplx, inv, degree, vine, dtype, col = args$/;"	v
degrees	benchmarks/stuff.py	/^degrees: Sequence[int] = [0, 1]$/;"	v	typeref:typename:Sequence[int]
degrees	compute.py	/^	degrees = args.degrees$/;"	v
degrees	compute.py	/^	degrees = list(range((max(extended) \/\/ 4)+1))$/;"	v
degrees	multipers/tests/test_signed_measure.py	/^degrees = [0, 1]$/;"	v
delay_neighbor	multipers/gudhi/gudhi/Flag_complex_edge_collapser.h	/^  void delay_neighbor(Vertex u, Vertex v, Filtration_value f) {$/;"	f	struct:Gudhi::collapse::Flag_complex_edge_collapser	typeref:typename:void
dereference	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  Simplex_handle const& dereference() const {$/;"	f	class:Gudhi::Simplex_tree_boundary_simplex_iterator	typeref:typename:Simplex_handle const &
dereference	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  Simplex_handle const& dereference() const {$/;"	f	class:Gudhi::Simplex_tree_complex_simplex_iterator	typeref:typename:Simplex_handle const &
dereference	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  Simplex_handle const& dereference() const {$/;"	f	class:Gudhi::Simplex_tree_skeleton_simplex_iterator	typeref:typename:Simplex_handle const &
dereference	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  Vertex_handle const& dereference() const {$/;"	f	class:Gudhi::Simplex_tree_simplex_vertex_iterator	typeref:typename:Vertex_handle const &
dereference	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  std::pair<Simplex_handle, Vertex_handle> const& dereference() const {$/;"	f	class:Gudhi::Simplex_tree_boundary_opposite_vertex_simplex_iterator	typeref:typename:std::pair<Simplex_handle,Vertex_handle> const &
dereference	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_star_simplex_iterators.h	/^  Simplex_handle const& dereference() const { return sh_; }$/;"	f	class:Gudhi::Simplex_tree_optimized_cofaces_rooted_subtrees_simplex_iterator	typeref:typename:Simplex_handle const &
dereference	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_star_simplex_iterators.h	/^  Simplex_handle const& dereference() const { return sh_; }$/;"	f	class:Gudhi::Simplex_tree_optimized_star_simplex_iterator	typeref:typename:Simplex_handle const &
dereference	multipers/gudhi/mma_interface_coh.h	/^    const Simplex_handle& dereference() const { return (*new_to_old_perm_)[currPos_]; }$/;"	f	class:Gudhi::multiparameter::truc_interface::Boundary_matrix_as_filtered_complex_for_coh::Filtration_range_iterator	typeref:typename:const Simplex_handle &
dereference	multipers/gudhi/mma_interface_h0.h	/^    const Bar &dereference() const { return currBar_; }$/;"	f	class:Gudhi::multiparameter::truc_interface::Persistence_backend_h0::Barcode_iterator	typeref:typename:const Bar &
dereference	multipers/gudhi/mma_interface_matrix.h	/^    const bar &dereference() const { return currBar_; }$/;"	f	class:Gudhi::multiparameter::truc_interface::Persistence_backend_matrix::Barcode_iterator	typeref:typename:const bar &
deserialize	multipers/gudhi/gudhi/Simplex_tree.h	/^  void deserialize(const char* buffer, const std::size_t buffer_size) {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:void
deserialize_trivial	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  friend const char *deserialize_trivial(Multi_critical_filtration &value, const char *start) {$/;"	f	namespace:Gudhi::multi_filtration	typeref:typename:const char *
deserialize_trivial	multipers/gudhi/gudhi/One_critical_filtration.h	/^  friend const char *deserialize_trivial(One_critical_filtration &value, const char *start) {$/;"	f	namespace:Gudhi::multi_filtration	typeref:typename:const char *
deserialize_trivial	multipers/gudhi/gudhi/Simplex_tree/serialization_utils.h	/^const char* deserialize_trivial(ArgumentType& value, const char* start) {$/;"	f	namespace:Gudhi::simplex_tree	typeref:typename:const char *
destroy	multipers/gudhi/gudhi/Persistence_matrix/allocators/entry_constructors.h	/^  void destroy(Entry* entry) const { delete entry; }$/;"	f	struct:Gudhi::persistence_matrix::New_entry_constructor	typeref:typename:void
destroy	multipers/gudhi/gudhi/Persistence_matrix/allocators/entry_constructors.h	/^  void destroy(Entry* entry) { entryPool_.destroy(entry); }$/;"	f	struct:Gudhi::persistence_matrix::Pool_entry_constructor	typeref:typename:void
destroy	multipers/gudhi/gudhi/Simple_object_pool.h	/^  void destroy(pointer p) {$/;"	f	class:Gudhi::Simple_object_pool	typeref:typename:void
destroy_cocycle	multipers/gudhi/gudhi/Persistent_cohomology.h	/^  void destroy_cocycle(Simplex_handle sigma, A_ds_type const& a_ds,$/;"	f	class:Gudhi::persistent_cohomology::Persistent_cohomology	typeref:typename:void
dgm2pervec	multipers/ml/one.py	/^def dgm2pervec(dgms, range:tuple[float, float], bins:int)->np.ndarray: #TODO : Anything to histo/;"	f	typeref:typename:np.ndarray
diagram_	multipers/multiparameter_module_approximation/vineyards.h	/^    diagram_type diagram_;$/;"	m	class:Gudhi::multiparameter::mma::Vineyard_persistence	typeref:typename:diagram_type
diagram_type	multipers/multiparameter_module_approximation/utilities.h	/^using diagram_type = std::vector<Diagram_point>;$/;"	t	namespace:Gudhi::multiparameter::mma	typeref:typename:std::vector<Diagram_point>
diagrams	compute.py	/^		diagrams = compute_diagram_pipe.fit_transform(X)$/;"	v
difference_type	multipers/gudhi/gudhi/Bitmap_cubical_complex.h	/^    typedef std::ptrdiff_t difference_type;$/;"	t	class:Gudhi::cubical_complex::Bitmap_cubical_complex::Skeleton_simplex_iterator	typeref:typename:std::ptrdiff_t
difference_type	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^    typedef std::ptrdiff_t difference_type;$/;"	t	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base::Top_dimensional_cells_iterator	typeref:typename:std::ptrdiff_t
difference_type	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^    typedef std::ptrdiff_t difference_type;$/;"	t	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base::Vertices_iterator	typeref:typename:std::ptrdiff_t
difference_type	multipers/gudhi/gudhi/Bitmap_cubical_complex_periodic_boundary_conditions_base.h	/^    typedef std::ptrdiff_t difference_type;$/;"	t	class:Gudhi::cubical_complex::Bitmap_cubical_complex_periodic_boundary_conditions_base::Vertices_iterator	typeref:typename:std::ptrdiff_t
difference_type	multipers/gudhi/gudhi/Simple_object_pool.h	/^  typedef typename Base::difference_type difference_type;$/;"	t	class:Gudhi::Simple_object_pool	typeref:typename:Base::difference_type
differentiate	multipers/tensor/tensor.h	/^void inline static_tensor_view<dtype, indices_type>::differentiate(indices_type axis) {$/;"	f	class:tensor::static_tensor_view	typeref:typename:void
differentiation	multipers/multi_parameter_rank_invariant/diff_helpers.h	/^namespace differentiation {$/;"	n	namespace:Gudhi::multiparameter
dim	multipers/gudhi/gudhi/Off_reader.h	/^    int dim;$/;"	m	struct:Gudhi::Off_reader::Off_info	typeref:typename:int
dim	multipers/gudhi/gudhi/persistence_interval.h	/^  Dimension dim;     \/**< Dimension of the cycle.*\/$/;"	m	struct:Gudhi::persistence_matrix::Persistence_interval	typeref:typename:Dimension
dim	multipers/gudhi/naive_merge_tree.h	/^  int dim;$/;"	m	struct:Bar	typeref:typename:int
dim	multipers/multiparameter_module_approximation/utilities.h	/^  dimension_type dim;$/;"	m	struct:Gudhi::multiparameter::mma::Bar	typeref:typename:dimension_type
dim	multipers/multiparameter_module_approximation/utilities.h	/^  dimension_type dim;$/;"	m	struct:Gudhi::multiparameter::mma::Diagram_point	typeref:typename:dimension_type
dim	multipers/multiparameter_module_approximation/utilities.h	/^  dimension_type dim;$/;"	m	struct:Gudhi::multiparameter::mma::MultiDiagram_point	typeref:typename:dimension_type
dim_	multipers/gudhi/gudhi/Persistence_matrix/columns/column_dimension_holder.h	/^  Dimension dim_;  \/**< Dimension of the column. *\/$/;"	m	struct:Gudhi::persistence_matrix::Column_dimension_holder	typeref:typename:Dimension
dim_	multipers/gudhi/gudhi/Simplex_tree.h	/^    int dim_;$/;"	m	class:Gudhi::Simplex_tree::Fast_cofaces_predicate	typeref:typename:int
dim_	multipers/multiparameter_module_approximation/heap_column.h	/^    int dim_;$/;"	m	class:Vineyard::Heap_column	typeref:typename:int
dim_	multipers/multiparameter_module_approximation/list_column.h	/^    int dim_;$/;"	m	class:Vineyard::List_column	typeref:typename:int
dim_	multipers/multiparameter_module_approximation/list_column_2.h	/^    int dim_;$/;"	m	class:Vineyard::List_column	typeref:typename:int
dim_	multipers/multiparameter_module_approximation/set_column.h	/^    int dim_;$/;"	m	class:Gudhi::multiparameter::mma::Set_column	typeref:typename:int
dim_	multipers/multiparameter_module_approximation/unordered_set_column.h	/^    int dim_;$/;"	m	class:Vineyard::Unordered_set_column	typeref:typename:int
dim_	multipers/multiparameter_module_approximation/vector_column.h	/^    int dim_;$/;"	m	class:Vineyard::Vector_column	typeref:typename:int
dim_max_	multipers/gudhi/gudhi/Persistent_cohomology.h	/^  int dim_max_;$/;"	m	class:Gudhi::persistent_cohomology::Persistent_cohomology	typeref:typename:int
dim_skel_	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  int dim_skel_;$/;"	m	class:Gudhi::Simplex_tree_skeleton_simplex_iterator	typeref:typename:int
dimension	multipers/gudhi/gudhi/Bitmap_cubical_complex.h	/^    unsigned dimension;$/;"	m	class:Gudhi::cubical_complex::Bitmap_cubical_complex::Skeleton_simplex_iterator	typeref:typename:unsigned
dimension	multipers/gudhi/gudhi/Bitmap_cubical_complex.h	/^    unsigned dimension;$/;"	m	class:Gudhi::cubical_complex::Bitmap_cubical_complex::Skeleton_simplex_range	typeref:typename:unsigned
dimension	multipers/gudhi/gudhi/Bitmap_cubical_complex.h	/^  inline std::size_t dimension() const { return this->sizes.size(); }$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex	typeref:typename:std::size_t
dimension	multipers/gudhi/gudhi/Bitmap_cubical_complex.h	/^  inline unsigned dimension(Simplex_handle sh) const {$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex	typeref:typename:unsigned
dimension	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^  inline unsigned dimension() const { return sizes.size(); }$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base	typeref:typename:unsigned
dimension	multipers/gudhi/gudhi/Multi_persistence/Box.h	/^  std::size_t dimension() const {$/;"	f	class:Gudhi::multi_persistence::Box	typeref:typename:std::size_t
dimension	multipers/gudhi/gudhi/Simplex_tree.h	/^  int dimension() {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:int
dimension	multipers/gudhi/gudhi/Simplex_tree.h	/^  int dimension(Siblings* curr_sib) {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:int
dimension	multipers/gudhi/gudhi/Simplex_tree.h	/^  int dimension(Simplex_handle sh) { return dimension(self_siblings(sh)); }$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:int
dimension	multipers/gudhi/mma_interface_coh.h	/^  Dimension dimension() const { return boundaries_->max_dimension(); }$/;"	f	class:Gudhi::multiparameter::truc_interface::Boundary_matrix_as_filtered_complex_for_coh	typeref:typename:Dimension
dimension	multipers/gudhi/mma_interface_coh.h	/^  Dimension dimension(Simplex_handle sh) const { return sh == null_simplex() ? -1 : boundaries_-/;"	f	class:Gudhi::multiparameter::truc_interface::Boundary_matrix_as_filtered_complex_for_coh	typeref:typename:Dimension
dimension	multipers/gudhi/truc.h	/^  inline int dimension(std::size_t i) const { return generator_dimensions[i]; };$/;"	f	class:Gudhi::multiparameter::truc_interface::PresentationStructure	typeref:typename:int
dimension	multipers/gudhi/truc.h	/^  int dimension(std::size_t i) const { return boundaries[i].size() == 0 ? 0 : boundaries[i].size/;"	f	class:Gudhi::multiparameter::truc_interface::SimplicialStructure	typeref:typename:int
dimension	multipers/multiparameter_module_approximation/images.h	/^	int dimension;							\/\/ if negative -> all dim$/;"	m	struct:Gudhi::multiparameter::mma::representation::ImageArgs	typeref:typename:int
dimension_	multipers/gudhi/gudhi/Simplex_tree.h	/^  int dimension_;$/;"	m	class:Gudhi::Simplex_tree	typeref:typename:int
dimension_	multipers/multiparameter_module_approximation/approximation.h	/^  dimension_type dimension_;$/;"	m	class:Gudhi::multiparameter::mma::Summand	typeref:typename:dimension_type
dimension_to_be_lowered_	multipers/gudhi/gudhi/Simplex_tree.h	/^  bool dimension_to_be_lowered_ = false;$/;"	m	class:Gudhi::Simplex_tree	typeref:typename:bool
dimension_type	multipers/gudhi/mma_interface_coh.h	/^  using dimension_type = typename MatrixComplex::Dimension;$/;"	t	class:Gudhi::multiparameter::truc_interface::Persistence_backend_cohomology	typeref:typename:MatrixComplex::Dimension
dimension_type	multipers/gudhi/mma_interface_h0.h	/^  using dimension_type = int;$/;"	t	class:Gudhi::multiparameter::truc_interface::Persistence_backend_h0	typeref:typename:int
dimension_type	multipers/gudhi/mma_interface_matrix.h	/^  using dimension_type = typename matrix_type::Dimension;$/;"	t	class:Gudhi::multiparameter::truc_interface::Persistence_backend_matrix	typeref:typename:matrix_type::Dimension
dimension_type	multipers/multiparameter_module_approximation/approximation.h	/^  using dimension_type = int;$/;"	t	class:Gudhi::multiparameter::mma::Summand	typeref:typename:int
dimension_type	multipers/multiparameter_module_approximation/utilities.h	/^using dimension_type = int;$/;"	t	namespace:Gudhi::multiparameter::mma	typeref:typename:int
dimensions_	multipers/gudhi/gudhi/Persistence_matrix/matrix_dimension_holders.h	/^  std::vector<unsigned int> dimensions_;  \/**< Number of cells by dimension. *\/$/;"	m	class:Gudhi::persistence_matrix::Matrix_all_dimension_holder	typeref:typename:std::vector<unsigned int>
direction	multipers/gudhi/gudhi/Multi_persistence/Line.h	/^  Point &direction() { return direction_; }$/;"	f	class:Gudhi::multi_persistence::Line	typeref:typename:Point &
direction	multipers/gudhi/gudhi/Multi_persistence/Line.h	/^  const Point &direction() const { return direction_; }$/;"	f	class:Gudhi::multi_persistence::Line	typeref:typename:const Point &
direction_	multipers/gudhi/gudhi/Multi_persistence/Line.h	/^  Point direction_; \/**< Direction of the line. *\/$/;"	m	class:Gudhi::multi_persistence::Line	typeref:typename:Point
directions	benchmarks/stuff.py	/^        directions = [np.ones(s.num_parameters)] * num_lines$/;"	v
directions_in_which_periodic_b_cond_are_to_be_imposed	multipers/gudhi/gudhi/Bitmap_cubical_complex_periodic_boundary_conditions_base.h	/^  std::vector<bool> directions_in_which_periodic_b_cond_are_to_be_imposed;$/;"	m	class:Gudhi::cubical_complex::Bitmap_cubical_complex_periodic_boundary_conditions_base	typeref:typename:std::vector<bool>
disp_vect	multipers/multiparameter_module_approximation/debug.h	/^template <typename T> void disp_vect(std::list<T> v) {$/;"	f	namespace:Gudhi::multiparameter::mma::Debug	typeref:typename:void
disp_vect	multipers/multiparameter_module_approximation/debug.h	/^template <typename T> void disp_vect(std::vector<T> v) {$/;"	f	namespace:Gudhi::multiparameter::mma::Debug	typeref:typename:void
disp_vect	multipers/multiparameter_module_approximation/debug.h	/^template <typename T> void disp_vect(std::vector<std::pair<T, T>> v) {$/;"	f	namespace:Gudhi::multiparameter::mma::Debug	typeref:typename:void
disp_vect	multipers/multiparameter_module_approximation/debug.h	/^void disp_vect(std::vector<std::vector<T>> v, bool show_small = true) {$/;"	f	namespace:Gudhi::multiparameter::mma::Debug	typeref:typename:void
display_diagram	multipers/multiparameter_module_approximation/vineyards.h	/^inline void Vineyard_persistence<Vineyard_matrix_type>::display_diagram()$/;"	f	class:Gudhi::multiparameter::mma::Vineyard_persistence	typeref:typename:void
display_filtration	multipers/multiparameter_module_approximation/vineyards.h	/^inline void Vineyard_persistence<Vineyard_matrix_type>::display_filtration()$/;"	f	class:Gudhi::multiparameter::mma::Vineyard_persistence	typeref:typename:void
distanceTo0_	multipers/multiparameter_module_approximation/approximation.h	/^  value_type distanceTo0_;$/;"	m	class:Gudhi::multiparameter::mma::Summand	typeref:typename:value_type
distance_idx_to	multipers/multiparameter_module_approximation/approximation.h	/^inline std::vector<int> Summand<value_type>::distance_idx_to(const filtration_type &x, bool full/;"	f	class:Gudhi::multiparameter::mma::Summand	typeref:typename:std::vector<int>
distance_idx_to_lower	multipers/multiparameter_module_approximation/approximation.h	/^inline std::tuple<int, int> Summand<value_type>::distance_idx_to_lower(const filtration_type &x)/;"	f	class:Gudhi::multiparameter::mma::Summand	typeref:typename:std::tuple<int,int>
distance_idx_to_upper	multipers/multiparameter_module_approximation/approximation.h	/^inline std::tuple<int, int> Summand<value_type>::distance_idx_to_upper(const filtration_type &x)/;"	f	class:Gudhi::multiparameter::mma::Summand	typeref:typename:std::tuple<int,int>
distance_to	multipers/multiparameter_module_approximation/approximation.h	/^inline value_type Summand<value_type>::distance_to(const filtration_type &x, bool negative) cons/;"	f	class:Gudhi::multiparameter::mma::Summand	typeref:typename:value_type
distance_to_idx_type	multipers/multiparameter_module_approximation/approximation.h	/^  using distance_to_idx_type = std::vector<std::vector<int>>;$/;"	t	class:Gudhi::multiparameter::mma::Module	typeref:typename:std::vector<std::vector<int>>
distance_to_lower	multipers/multiparameter_module_approximation/approximation.h	/^inline value_type Summand<value_type>::distance_to_lower(const filtration_type &x, bool negative/;"	f	class:Gudhi::multiparameter::mma::Summand	typeref:typename:value_type
distance_to_upper	multipers/multiparameter_module_approximation/approximation.h	/^inline value_type Summand<value_type>::distance_to_upper(const filtration_type &x, bool negative/;"	f	class:Gudhi::multiparameter::mma::Summand	typeref:typename:value_type
distances_to_idx_type	multipers/multiparameter_module_approximation/approximation.h	/^  using distances_to_idx_type = std::vector<distance_to_idx_type>;$/;"	t	class:Gudhi::multiparameter::mma::Module	typeref:typename:std::vector<distance_to_idx_type>
divide_	multipers/gudhi/gudhi/One_critical_filtration.h	/^  constexpr static bool divide_(T &v1, T v2) {$/;"	f	class:Gudhi::multi_filtration::One_critical_filtration	typeref:typename:bool
doc_soft_easy_install	multipers/io.pyx	/^doc_soft_easy_install = defaultdict(lambda:"<Unknown>", doc_soft_easy_install)$/;"	v
doc_soft_easy_install	multipers/io.pyx	/^doc_soft_easy_install = {$/;"	v
doc_soft_urls	multipers/io.pyx	/^doc_soft_urls = defaultdict(lambda:"<Unknown url>", doc_soft_urls)$/;"	v
doc_soft_urls	multipers/io.pyx	/^doc_soft_urls = {$/;"	v
done	multipers/gudhi/gudhi/Points_off_io.h	/^  void done() { }$/;"	f	class:Gudhi::Points_off_visitor_reader	typeref:typename:void
ds_parent_	multipers/gudhi/gudhi/Persistent_cohomology.h	/^  std::vector<Simplex_key> ds_parent_;$/;"	m	class:Gudhi::persistent_cohomology::Persistent_cohomology	typeref:typename:std::vector<Simplex_key>
ds_rank_	multipers/gudhi/gudhi/Persistent_cohomology.h	/^  std::vector<int> ds_rank_;$/;"	m	class:Gudhi::persistent_cohomology::Persistent_cohomology	typeref:typename:std::vector<int>
ds_repr_	multipers/gudhi/gudhi/Persistent_cohomology.h	/^  std::vector<Column *> ds_repr_;$/;"	m	class:Gudhi::persistent_cohomology::Persistent_cohomology	typeref:typename:std::vector<Column * >
dsets_	multipers/gudhi/gudhi/Persistent_cohomology.h	/^  boost::disjoint_sets<int *, Simplex_key *> dsets_;$/;"	m	class:Gudhi::persistent_cohomology::Persistent_cohomology	typeref:typename:boost::disjoint_sets<int *,Simplex_key * >
dtype	benchmarks/stuff.py	/^    n, dataset, cplx, inv, degree, vine, dtype, col = args$/;"	v
easy_graph	compute.py	/^		easy_graph="graphs\/COX2"$/;"	v
easypoint_cloud	compute.py	/^		easypoint_cloud="orbit"$/;"	v
edge_edge_swap	multipers/gudhi/naive_merge_tree.h	/^  void edge_edge_swap(index position, index e1V1Position, index e1V2Position,$/;"	f	class:Naive_merge_forest	typeref:typename:void
edge_filtration_t	multipers/gudhi/gudhi/graph_simplicial_complex.h	/^struct edge_filtration_t {$/;"	s	namespace:Gudhi
edge_list	multipers/gudhi/Simplex_tree_multi_interface.h	/^  using edge_list =$/;"	t	class:Gudhi::multiparameter::python_interface::Simplex_tree_multi_interface	typeref:typename:std::vector<std::pair<std::pair<int,int>,std::pair<double,double>>>
edge_vertex_swap	multipers/gudhi/naive_merge_tree.h	/^  void edge_vertex_swap(index position, index eV1Position, index eV2Position) {$/;"	f	class:Naive_merge_forest	typeref:typename:void
edge_with_same_filtration	multipers/gudhi/gudhi/Simplex_tree.h	/^  Simplex_handle edge_with_same_filtration(Simplex_handle sh) {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:Simplex_handle
efd	multipers/gudhi/Simplex_tree_interface.h	/^  Extended_filtration_data efd;$/;"	m	class:Gudhi::Simplex_tree_interface	typeref:typename:Extended_filtration_data
efd	multipers/gudhi/Simplex_tree_multi_interface.h	/^  Extended_filtration_data efd;$/;"	m	class:Gudhi::multiparameter::python_interface::Simplex_tree_multi_interface	typeref:typename:Extended_filtration_data
element_	multipers/gudhi/gudhi/Fields/Multi_field.h	/^  Element element_;$/;"	m	class:Gudhi::persistence_fields::Multi_field_element	typeref:typename:Element
element_	multipers/gudhi/gudhi/Fields/Multi_field_shared.h	/^  Element element_;                                       \/**< Element. *\/$/;"	m	class:Gudhi::persistence_fields::Shared_multi_field_element	typeref:typename:Element
element_	multipers/gudhi/gudhi/Fields/Multi_field_small.h	/^  Element element_;$/;"	m	class:Gudhi::persistence_fields::Multi_field_element_with_small_characteristics	typeref:typename:Element
element_	multipers/gudhi/gudhi/Fields/Multi_field_small_shared.h	/^  Element element_;                                          \/**< Element. *\/$/;"	m	class:Gudhi::persistence_fields::Shared_multi_field_element_with_small_characteristics	typeref:typename:Element
element_	multipers/gudhi/gudhi/Fields/Z2_field.h	/^  Element element_;$/;"	m	class:Gudhi::persistence_fields::Z2_field_element	typeref:typename:Element
element_	multipers/gudhi/gudhi/Fields/Zp_field.h	/^  Element element_;                                            \/**< Field element. *\/$/;"	m	class:Gudhi::persistence_fields::Zp_field_element	typeref:typename:Element
element_	multipers/gudhi/gudhi/Fields/Zp_field_shared.h	/^  Element element_;                              \/**< Field element. *\/$/;"	m	class:Gudhi::persistence_fields::Shared_Zp_field_element	typeref:typename:Element
element_	multipers/gudhi/gudhi/Persistence_matrix/columns/entry_types.h	/^  Field_element element_;  \/**< Value of the entry. *\/$/;"	m	class:Gudhi::persistence_matrix::Entry_field_element	typeref:typename:Field_element
element_type	multipers/gudhi/gudhi/Simple_object_pool.h	/^  typedef T element_type;$/;"	t	class:Gudhi::Simple_object_pool	typeref:typename:T
empty	multipers/tensor/tensor.h	/^  inline bool empty() const { return size_ == 0; }$/;"	f	class:tensor::static_tensor_view	typeref:typename:bool
empty_column_	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix_with_column_compression.h	/^  inline static const Column empty_column_;           \/**< Representative for empty columns. *\/$/;"	m	class:Gudhi::persistence_matrix::Base_matrix_with_column_compression	typeref:typename:const Column
empty_like	multipers/grids.pyx	/^        def empty_like(x):$/;"	f	function:evaluate_in_grid	file:
empty_like	multipers/grids.pyx	/^        def empty_like(x, weights):$/;"	f	function:sm_in_grid	file:
end	multipers/gudhi/gudhi/Bitmap_cubical_complex.h	/^    Skeleton_simplex_iterator end() {$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex::Skeleton_simplex_range	typeref:typename:Skeleton_simplex_iterator
end	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^    Top_dimensional_cells_iterator end() { return b->top_dimensional_cells_iterator_end(); }$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base::Top_dimensional_cells_range	typeref:typename:Top_dimensional_cells_iterator
end	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^    Vertices_iterator end() { return b->vertices_iterator_end(); }$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base::Vertices_range	typeref:typename:Vertices_iterator
end	multipers/gudhi/gudhi/Bitmap_cubical_complex_periodic_boundary_conditions_base.h	/^    Vertices_iterator end() { return b->vertices_iterator_end(); }$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_periodic_boundary_conditions_base::Vertices_range	typeref:typename:Vertices_iterator
end	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  const_iterator end() const { return multi_filtration_.end(); }$/;"	f	class:Gudhi::multi_filtration::Multi_critical_filtration	typeref:typename:const_iterator
end	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  iterator end() { return multi_filtration_.end(); }$/;"	f	class:Gudhi::multi_filtration::Multi_critical_filtration	typeref:typename:iterator
end	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^inline typename Heap_column<Master_matrix>::const_iterator Heap_column<Master_matrix>::end() con/;"	f	class:Gudhi::persistence_matrix::Heap_column	typeref:typename:Heap_column<Master_matrix>::const_iterator
end	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^inline typename Heap_column<Master_matrix>::iterator Heap_column<Master_matrix>::end() noexcept$/;"	f	class:Gudhi::persistence_matrix::Heap_column	typeref:typename:Heap_column<Master_matrix>::iterator
end	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^inline typename Intrusive_list_column<Master_matrix>::const_iterator Intrusive_list_column<Maste/;"	f	class:Gudhi::persistence_matrix::Intrusive_list_column	typeref:typename:Intrusive_list_column<Master_matrix>::const_iterator
end	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^inline typename Intrusive_list_column<Master_matrix>::iterator Intrusive_list_column<Master_matr/;"	f	class:Gudhi::persistence_matrix::Intrusive_list_column	typeref:typename:Intrusive_list_column<Master_matrix>::iterator
end	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^inline typename Intrusive_set_column<Master_matrix>::const_iterator Intrusive_set_column<Master_/;"	f	class:Gudhi::persistence_matrix::Intrusive_set_column	typeref:typename:Intrusive_set_column<Master_matrix>::const_iterator
end	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^inline typename Intrusive_set_column<Master_matrix>::iterator Intrusive_set_column<Master_matrix/;"	f	class:Gudhi::persistence_matrix::Intrusive_set_column	typeref:typename:Intrusive_set_column<Master_matrix>::iterator
end	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^inline typename List_column<Master_matrix>::const_iterator List_column<Master_matrix>::end() con/;"	f	class:Gudhi::persistence_matrix::List_column	typeref:typename:List_column<Master_matrix>::const_iterator
end	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^inline typename List_column<Master_matrix>::iterator List_column<Master_matrix>::end() noexcept$/;"	f	class:Gudhi::persistence_matrix::List_column	typeref:typename:List_column<Master_matrix>::iterator
end	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^inline typename Naive_vector_column<Master_matrix>::const_iterator Naive_vector_column<Master_ma/;"	f	class:Gudhi::persistence_matrix::Naive_vector_column	typeref:typename:Naive_vector_column<Master_matrix>::const_iterator
end	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^inline typename Naive_vector_column<Master_matrix>::iterator Naive_vector_column<Master_matrix>:/;"	f	class:Gudhi::persistence_matrix::Naive_vector_column	typeref:typename:Naive_vector_column<Master_matrix>::iterator
end	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^inline typename Set_column<Master_matrix>::const_iterator Set_column<Master_matrix>::end() const/;"	f	class:Gudhi::persistence_matrix::Set_column	typeref:typename:Set_column<Master_matrix>::const_iterator
end	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^inline typename Set_column<Master_matrix>::iterator Set_column<Master_matrix>::end() noexcept$/;"	f	class:Gudhi::persistence_matrix::Set_column	typeref:typename:Set_column<Master_matrix>::iterator
end	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^inline typename Small_vector_column<Master_matrix>::const_iterator Small_vector_column<Master_ma/;"	f	class:Gudhi::persistence_matrix::Small_vector_column	typeref:typename:Small_vector_column<Master_matrix>::const_iterator
end	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^inline typename Small_vector_column<Master_matrix>::iterator Small_vector_column<Master_matrix>:/;"	f	class:Gudhi::persistence_matrix::Small_vector_column	typeref:typename:Small_vector_column<Master_matrix>::iterator
end	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^inline typename Unordered_set_column<Master_matrix>::const_iterator Unordered_set_column<Master_/;"	f	class:Gudhi::persistence_matrix::Unordered_set_column	typeref:typename:Unordered_set_column<Master_matrix>::const_iterator
end	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^inline typename Unordered_set_column<Master_matrix>::iterator Unordered_set_column<Master_matrix/;"	f	class:Gudhi::persistence_matrix::Unordered_set_column	typeref:typename:Unordered_set_column<Master_matrix>::iterator
end	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^inline typename Vector_column<Master_matrix>::const_iterator Vector_column<Master_matrix>::end()/;"	f	class:Gudhi::persistence_matrix::Vector_column	typeref:typename:Vector_column<Master_matrix>::const_iterator
end	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^inline typename Vector_column<Master_matrix>::iterator Vector_column<Master_matrix>::end() noexc/;"	f	class:Gudhi::persistence_matrix::Vector_column	typeref:typename:Vector_column<Master_matrix>::iterator
end	multipers/gudhi/mma_interface_coh.h	/^    iterator end() const { return iterator(); }$/;"	f	class:Gudhi::multiparameter::truc_interface::Boundary_matrix_as_filtered_complex_for_coh::Filtration_simplex_range	typeref:typename:iterator
end	multipers/gudhi/mma_interface_h0.h	/^    iterator end() const { return Barcode_iterator(); }$/;"	f	class:Gudhi::multiparameter::truc_interface::Persistence_backend_h0::Barcode	typeref:typename:iterator
end	multipers/gudhi/mma_interface_matrix.h	/^    iterator end() const { return Barcode_iterator(); }$/;"	f	class:Gudhi::multiparameter::truc_interface::Persistence_backend_matrix::Barcode	typeref:typename:iterator
end	multipers/multiparameter_module_approximation/approximation.h	/^inline typename Module<value_type>::module_type::iterator Module<value_type>::end() {$/;"	f	class:Gudhi::multiparameter::mma::Module	typeref:typename:Module<value_type>::module_type::iterator
end	multipers/multiparameter_module_approximation/utilities.h	/^  iterator end() const { return this->multiDiagram.end(); }$/;"	f	struct:Gudhi::multiparameter::mma::MultiDiagram	typeref:typename:iterator
end	multipers/multiparameter_module_approximation/utilities.h	/^  iterator end() const { return this->multiDiagrams.end(); }$/;"	f	struct:Gudhi::multiparameter::mma::MultiDiagrams	typeref:typename:iterator
end_	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_star_simplex_iterators.h	/^  Filtered_cofaces_simplex_iterator end_;$/;"	m	class:Gudhi::Simplex_tree_optimized_cofaces_rooted_subtrees_simplex_iterator	typeref:typename:Filtered_cofaces_simplex_iterator
end_	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_star_simplex_iterators.h	/^  Simplex_tree_optimized_cofaces_rooted_subtrees_simplex_iterator<SimplexTree> end_;$/;"	m	class:Gudhi::Simplex_tree_optimized_star_simplex_iterator	typeref:typename:Simplex_tree_optimized_cofaces_rooted_subtrees_simplex_iterator<SimplexTree>
endpoints	multipers/gudhi/gudhi/Bitmap_cubical_complex.h	/^  std::pair<Simplex_handle, Simplex_handle> endpoints(Simplex_handle e) {$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex	typeref:typename:std::pair<Simplex_handle,Simplex_handle>
endpoints	multipers/gudhi/gudhi/Simplex_tree.h	/^  std::pair<Simplex_handle, Simplex_handle> endpoints(Simplex_handle sh) {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:std::pair<Simplex_handle,Simplex_handle>
endpoints	multipers/gudhi/mma_interface_coh.h	/^  std::pair<Simplex_handle, Simplex_handle> endpoints(Simplex_handle sh) const {$/;"	f	class:Gudhi::multiparameter::truc_interface::Boundary_matrix_as_filtered_complex_for_coh	typeref:typename:std::pair<Simplex_handle,Simplex_handle>
entryConstructor	multipers/gudhi/gudhi/Matrix.h	/^    Entry_constructor entryConstructor;   \/\/will be replaced by more specific allocators depen/;"	m	struct:Gudhi::persistence_matrix::Matrix::Column_z2_settings	typeref:typename:Entry_constructor
entryConstructor	multipers/gudhi/gudhi/Matrix.h	/^    Entry_constructor entryConstructor;   \/\/will be replaced by more specific allocators depen/;"	m	struct:Gudhi::persistence_matrix::Matrix::Column_zp_settings	typeref:typename:Entry_constructor
entryPointerComp_	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^  } entryPointerComp_;$/;"	m	class:Gudhi::persistence_matrix::Heap_column	typeref:struct:Gudhi::persistence_matrix::Heap_column::EntryPointerComp
entryPool_	multipers/gudhi/gudhi/Persistence_matrix/allocators/entry_constructors.h	/^  Simple_object_pool<Entry> entryPool_;   \/**< Entry pool. *\/$/;"	m	struct:Gudhi::persistence_matrix::Pool_entry_constructor	typeref:typename:Simple_object_pool<Entry>
entryPool_	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^  Entry_constructor* entryPool_;$/;"	m	class:Gudhi::persistence_matrix::Heap_column	typeref:typename:Entry_constructor *
entryPool_	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^    Entry_constructor* entryPool_;$/;"	m	struct:Gudhi::persistence_matrix::Intrusive_list_column::New_cloner	typeref:typename:Entry_constructor *
entryPool_	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^  Entry_constructor* entryPool_;$/;"	m	class:Gudhi::persistence_matrix::Intrusive_list_column	typeref:typename:Entry_constructor *
entryPool_	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^    Entry_constructor* entryPool_;$/;"	m	struct:Gudhi::persistence_matrix::Intrusive_set_column::New_cloner	typeref:typename:Entry_constructor *
entryPool_	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^  Entry_constructor* entryPool_;$/;"	m	class:Gudhi::persistence_matrix::Intrusive_set_column	typeref:typename:Entry_constructor *
entryPool_	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^  Entry_constructor* entryPool_;$/;"	m	class:Gudhi::persistence_matrix::List_column	typeref:typename:Entry_constructor *
entryPool_	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^  Entry_constructor* entryPool_;$/;"	m	class:Gudhi::persistence_matrix::Naive_vector_column	typeref:typename:Entry_constructor *
entryPool_	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^  Entry_constructor* entryPool_;$/;"	m	class:Gudhi::persistence_matrix::Set_column	typeref:typename:Entry_constructor *
entryPool_	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^  Entry_constructor* entryPool_;$/;"	m	class:Gudhi::persistence_matrix::Small_vector_column	typeref:typename:Entry_constructor *
entryPool_	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^  Entry_constructor* entryPool_;$/;"	m	class:Gudhi::persistence_matrix::Unordered_set_column	typeref:typename:Entry_constructor *
entryPool_	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^  Entry_constructor* entryPool_;$/;"	m	class:Gudhi::persistence_matrix::Vector_column	typeref:typename:Entry_constructor *
equal	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  bool equal(Simplex_tree_boundary_opposite_vertex_simplex_iterator const& other) const {$/;"	f	class:Gudhi::Simplex_tree_boundary_opposite_vertex_simplex_iterator	typeref:typename:bool
equal	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  bool equal(Simplex_tree_boundary_simplex_iterator const& other) const {$/;"	f	class:Gudhi::Simplex_tree_boundary_simplex_iterator	typeref:typename:bool
equal	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  bool equal(Simplex_tree_complex_simplex_iterator const& other) const {$/;"	f	class:Gudhi::Simplex_tree_complex_simplex_iterator	typeref:typename:bool
equal	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  bool equal(Simplex_tree_simplex_vertex_iterator const &other) const {$/;"	f	class:Gudhi::Simplex_tree_simplex_vertex_iterator	typeref:typename:bool
equal	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  bool equal(Simplex_tree_skeleton_simplex_iterator const& other) const {$/;"	f	class:Gudhi::Simplex_tree_skeleton_simplex_iterator	typeref:typename:bool
equal	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_star_simplex_iterators.h	/^  bool equal(Simplex_tree_optimized_cofaces_rooted_subtrees_simplex_iterator const& other) const/;"	f	class:Gudhi::Simplex_tree_optimized_cofaces_rooted_subtrees_simplex_iterator	typeref:typename:bool
equal	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_star_simplex_iterators.h	/^  bool equal(Simplex_tree_optimized_star_simplex_iterator const& other) const {$/;"	f	class:Gudhi::Simplex_tree_optimized_star_simplex_iterator	typeref:typename:bool
equal	multipers/gudhi/mma_interface_coh.h	/^    bool equal(Filtration_range_iterator const &other) const {$/;"	f	class:Gudhi::multiparameter::truc_interface::Boundary_matrix_as_filtered_complex_for_coh::Filtration_range_iterator	typeref:typename:bool
equal	multipers/gudhi/mma_interface_h0.h	/^    bool equal(Barcode_iterator const &other) const {$/;"	f	class:Gudhi::multiparameter::truc_interface::Persistence_backend_h0::Barcode_iterator	typeref:typename:bool
equal	multipers/gudhi/mma_interface_matrix.h	/^    bool equal(Barcode_iterator const &other) const {$/;"	f	class:Gudhi::multiparameter::truc_interface::Persistence_backend_matrix::Barcode_iterator	typeref:typename:bool
erase	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_siblings.h	/^  void erase(const Dictionary_it iterator) {$/;"	f	class:Gudhi::Simplex_tree_siblings	typeref:typename:void
erase_empty_row	multipers/gudhi/gudhi/Matrix.h	/^inline void Matrix<PersistenceMatrixOptions>::erase_empty_row(ID_index rowIndex) $/;"	f	class:Gudhi::persistence_matrix::Matrix	typeref:typename:void
erase_empty_row	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix.h	/^inline void Base_matrix<Master_matrix>::erase_empty_row(Index rowIndex) $/;"	f	class:Gudhi::persistence_matrix::Base_matrix	typeref:typename:void
erase_empty_row	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix_with_column_compression.h	/^inline void Base_matrix_with_column_compression<Master_matrix>::erase_empty_row(Index rowIndex) $/;"	f	class:Gudhi::persistence_matrix::Base_matrix_with_column_compression	typeref:typename:void
erase_empty_row	multipers/gudhi/gudhi/Persistence_matrix/Boundary_matrix.h	/^inline void Boundary_matrix<Master_matrix>::erase_empty_row(Index rowIndex) $/;"	f	class:Gudhi::persistence_matrix::Boundary_matrix	typeref:typename:void
erase_empty_row	multipers/gudhi/gudhi/Persistence_matrix/Id_to_index_overlay.h	/^inline void Id_to_index_overlay<Underlying_matrix, Master_matrix>::erase_empty_row(ID_index rowI/;"	f	class:Gudhi::persistence_matrix::Id_to_index_overlay	typeref:typename:void
erase_empty_row	multipers/gudhi/gudhi/Persistence_matrix/Position_to_index_overlay.h	/^inline void Position_to_index_overlay<Underlying_matrix, Master_matrix>::erase_empty_row(ID_inde/;"	f	class:Gudhi::persistence_matrix::Position_to_index_overlay	typeref:typename:void
erase_empty_row	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^inline void RU_matrix<Master_matrix>::erase_empty_row(Index rowIndex)$/;"	f	class:Gudhi::persistence_matrix::RU_matrix	typeref:typename:void
erase_empty_row	multipers/gudhi/gudhi/Persistence_matrix/matrix_row_access.h	/^  void erase_empty_row(ID_index rowIndex) {$/;"	f	class:Gudhi::persistence_matrix::Matrix_row_access	typeref:typename:void
erasedValues_	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^  std::unordered_set<ID_index> erasedValues_;  \/\/ TODO: test other containers? Useless when cl/;"	m	class:Gudhi::persistence_matrix::Vector_column	typeref:typename:std::unordered_set<ID_index>
erasedValues_	multipers/multiparameter_module_approximation/heap_column.h	/^    std::unordered_set<unsigned int> erasedValues_;$/;"	m	class:Vineyard::Heap_column	typeref:typename:std::unordered_set<unsigned int>
erasedValues_	multipers/multiparameter_module_approximation/list_column_2.h	/^    std::unordered_set<unsigned int> erasedValues_;$/;"	m	class:Vineyard::List_column	typeref:typename:std::unordered_set<unsigned int>
erasedValues_	multipers/multiparameter_module_approximation/vector_column.h	/^    std::unordered_set<unsigned int> erasedValues_;$/;"	m	class:Vineyard::Vector_column	typeref:typename:std::unordered_set<unsigned int>
estimate_error	multipers/distances.py	/^def estimate_error($/;"	f
estimate_matching	multipers/distances.py	/^def estimate_matching(b1: PyMultiDiagrams_type, b2: PyMultiDiagrams_type):$/;"	f
estimate_rank_from_rank_sm	multipers/point_measure.pyx	/^def estimate_rank_from_rank_sm(sm:tuple, a, b) -> int:$/;"	f	typeref:typename:int
euler_characteristic	multipers/multi_parameter_rank_invariant/euler_characteristic.h	/^namespace Gudhi::multiparameter::euler_characteristic{$/;"	n	namespace:Gudhi::multiparameter
euler_chars_type	multipers/gudhi/Simplex_tree_multi_interface.h	/^  using euler_chars_type = std::vector<int>;$/;"	t	class:Gudhi::multiparameter::python_interface::Simplex_tree_multi_interface	typeref:typename:std::vector<int>
euler_curve	multipers/multiparameter_module_approximation/approximation.h	/^std::vector<int> Module<value_type>::euler_curve(const std::vector<filtration_type> &points) con/;"	f	class:Gudhi::multiparameter::mma::Module	typeref:typename:std::vector<int>
evaluate_coordinates_in_grid	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  friend Multi_critical_filtration<U> evaluate_coordinates_in_grid(const Multi_critical_filtrati/;"	f	namespace:Gudhi::multi_filtration	typeref:typename:Multi_critical_filtration<U>
evaluate_coordinates_in_grid	multipers/gudhi/gudhi/One_critical_filtration.h	/^  friend One_critical_filtration<U> evaluate_coordinates_in_grid(const One_critical_filtration &/;"	f	namespace:Gudhi::multi_filtration	typeref:typename:One_critical_filtration<U>
evaluate_in_grid	multipers/grids.pyx	/^def evaluate_in_grid(pts, grid, mass_default=None):$/;"	f
evaluate_in_grid	multipers/torch/diff_grids.py	/^def evaluate_in_grid(pts, grid):$/;"	f
evaluate_mod_in_grid	multipers/torch/diff_grids.py	/^def evaluate_mod_in_grid(mod, grid, box=None):$/;"	f
evaluate_mod_in_grid__old	multipers/torch/diff_grids.py	/^def evaluate_mod_in_grid__old(mod, grid, box=None):$/;"	f
example_parameter	compute.py	/^	example_parameter = {a:choice(b) for a,b in parameters.items()}$/;"	v
exit_status	compute.py	/^	exit_status = system(" ".join(["python ",*argv," --test 1 --n_jobs 1"]))$/;"	v
expansion	multipers/gudhi/gudhi/Simplex_tree.h	/^  void expansion(int max_dim) {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:void
expansion_with_blockers	multipers/gudhi/gudhi/Simplex_tree.h	/^  void expansion_with_blockers(int max_dim, Blocker block_simplex) {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:void
expansion_with_blockers_callback	multipers/gudhi/Simplex_tree_interface.h	/^  void expansion_with_blockers_callback(int dimension, blocker_func_t user_func, void *user_data/;"	f	class:Gudhi::Simplex_tree_interface	typeref:typename:void
exponential_kernel	multipers/ml/convolutions.py	/^def exponential_kernel(x_i, y_j, bandwidth):$/;"	f
extend_filtration	multipers/gudhi/gudhi/Simplex_tree.h	/^  Extended_filtration_data extend_filtration() {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:Extended_filtration_data
extended	compute.py	/^	extended = False$/;"	v
extended	compute.py	/^	extended = [0,2,5,7] # ord0, ext+0, rel1, Ext-1$/;"	v
extended	compute.py	/^	extended = extended[1:]$/;"	v
extended	compute.py	/^extended = args.extended$/;"	v
extensions	docs/conf.py	/^extensions = [$/;"	v
extensions	setup.py	/^extensions = [$/;"	v
extract_diagrams	multipers_old.py	/^def extract_diagrams(decomposition, bnds, lines):$/;"	f
f	benchmarks/stuff.py	/^            f = lambda: 1$/;"	f
f	benchmarks/stuff.py	/^            f = lambda: mp.module_approximation(s)$/;"	f
f	benchmarks/stuff.py	/^        def f():$/;"	f
f	benchmarks/stuff.py	/^        f = lambda: mp.signed_measure(s, grid=grid, degree=degree, invariant="hilbert")$/;"	f
f	benchmarks/stuff.py	/^        f = lambda: mp.signed_measure(s, grid=grid, degree=degree, invariant="rank")$/;"	f
f	benchmarks/stuff.py	/^        f = lambda: s.persistence_on_lines(basepoints, directions)$/;"	f
factorize_above	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  friend Generator factorize_above(const Multi_critical_filtration &f) {$/;"	f	namespace:Gudhi::multi_filtration	typeref:typename:Generator
factorize_below	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  friend Generator factorize_below(const Multi_critical_filtration &f) {$/;"	f	namespace:Gudhi::multi_filtration	typeref:typename:Generator
fd_flag	multipers/tests/test_slicer.py	/^fd_flag = mp.io._check_available("function_delaunay")$/;"	v
field_opt	multipers/gudhi/gudhi/Persistence_matrix/columns/entry_types.h	/^  using field_opt = typename Master_matrix::Entry_field_element_option;$/;"	t	class:Gudhi::persistence_matrix::Entry	typeref:typename:Master_matrix::Entry_field_element_option
fill	multipers/multiparameter_module_approximation/approximation.h	/^inline void Module<value_type>::fill(const value_type precision) {$/;"	f	class:Gudhi::multiparameter::mma::Module	typeref:typename:void
fill_lowerstar	multipers/gudhi/Simplex_tree_multi_interface.h	/^  fill_lowerstar(const std::vector<typename Filtration::value_type> &filtration,$/;"	f	class:Gudhi::multiparameter::python_interface::Simplex_tree_multi_interface	typeref:typename:void
fill_st_slice	multipers/multi_parameter_rank_invariant/function_rips.h	/^inline void fill_st_slice(Simplex_tree_std &st_container,$/;"	f	namespace:Gudhi::multiparameter::function_rips	typeref:typename:void
fill_timing	benchmarks/stuff.py	/^def fill_timing(arg, f):$/;"	f
filt_	multipers/gudhi/gudhi/Simplex_tree.h	/^    Filtration_value filt_;$/;"	m	struct:Gudhi::Simplex_tree::Filtration_simplex_base_real	typeref:typename:Filtration_value
filter_	multipers/multiparameter_module_approximation/vineyards.h	/^    filtration_type filter_;$/;"	m	class:Gudhi::multiparameter::mma::Vineyard_persistence	typeref:typename:filtration_type
filtration	multipers/gudhi/gudhi/Bitmap_cubical_complex.h	/^  Filtration_value filtration(Simplex_handle sh) {$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex	typeref:typename:Filtration_value
filtration	multipers/gudhi/gudhi/Simplex_tree.h	/^    Filtration_value& filtration() { return filt_; }$/;"	f	struct:Gudhi::Simplex_tree::Filtration_simplex_base_real	typeref:typename:Filtration_value &
filtration	multipers/gudhi/gudhi/Simplex_tree.h	/^    const Filtration_value& filtration() const { return filt_; }$/;"	f	struct:Gudhi::Simplex_tree::Filtration_simplex_base_real	typeref:typename:const Filtration_value &
filtration	multipers/gudhi/gudhi/Simplex_tree.h	/^    const Filtration_value& filtration() const { return null_; }$/;"	f	struct:Gudhi::Simplex_tree::Filtration_simplex_base_dummy	typeref:typename:const Filtration_value &
filtration	multipers/gudhi/gudhi/Simplex_tree.h	/^  static const Filtration_value& filtration(Simplex_handle sh) {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:const Filtration_value &
filtration	multipers/gudhi/mma_interface_coh.h	/^  Filtration_value filtration(Simplex_handle sh) const {$/;"	f	class:Gudhi::multiparameter::truc_interface::Boundary_matrix_as_filtered_complex_for_coh	typeref:typename:Filtration_value
filtration_	multipers/gudhi/gudhi/Simplex_tree.h	/^  static const Filtration_value& filtration_(Simplex_handle sh) {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:const Filtration_value &
filtration_container	multipers/gudhi/truc.h	/^    std::vector<typename MultiFiltration::value_type> filtration_container;  \/\/ filtration of /;"	m	class:Gudhi::multiparameter::truc_interface::Truc::TrucThread	typeref:typename:std::vector<typename MultiFiltration::value_type>
filtration_container	multipers/gudhi/truc.h	/^  std::vector<typename MultiFiltration::value_type> filtration_container;  \/\/ filtration of th/;"	m	class:Gudhi::multiparameter::truc_interface::Truc	typeref:typename:std::vector<typename MultiFiltration::value_type>
filtration_grid_to_coordinates	multipers/ml/tools.py	/^def filtration_grid_to_coordinates(F, return_resolution):$/;"	f
filtration_lists	multipers/multi_parameter_rank_invariant/function_rips.h	/^  using filtration_lists = std::vector<std::vector<value_type>>;$/;"	t	function:Gudhi::multiparameter::function_rips::get_degree_filtrations	typeref:typename:std::vector<std::vector<value_type>>
filtration_mutable	multipers/gudhi/gudhi/Simplex_tree.h	/^  static Filtration_value& filtration_mutable(Simplex_handle sh) { return sh->second.filtration(/;"	f	class:Gudhi::Simplex_tree	typeref:typename:Filtration_value &
filtration_options	multipers/gudhi/Persistence_slices_interface.h	/^using filtration_options = std::conditional_t<is_kcritical,$/;"	t	typeref:typename:std::conditional_t<is_kcritical,Gudhi::multi_filtration::Multi_critical_filtration<value_type>,Gudhi::multi_filtration::One_critical_filtration<value_type>>
filtration_simplex_range	multipers/gudhi/gudhi/Bitmap_cubical_complex.h	/^  Filtration_simplex_range const& filtration_simplex_range() {$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex	typeref:typename:Filtration_simplex_range const &
filtration_simplex_range	multipers/gudhi/gudhi/Simplex_tree.h	/^  Filtration_simplex_range const& filtration_simplex_range(Indexing_tag = Indexing_tag()) {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:Filtration_simplex_range const &
filtration_simplex_range	multipers/gudhi/mma_interface_coh.h	/^  Filtration_simplex_range filtration_simplex_range() const { return Filtration_simplex_range(ne/;"	f	class:Gudhi::multiparameter::truc_interface::Boundary_matrix_as_filtered_complex_for_coh	typeref:typename:Filtration_simplex_range
filtration_type	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^  typedef T filtration_type;$/;"	t	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base	typeref:typename:T
filtration_type	multipers/multiparameter_module_approximation/approximation.h	/^  using filtration_type = Gudhi::multi_filtration::One_critical_filtration<value_type>;$/;"	t	class:Gudhi::multiparameter::mma::Module	typeref:typename:Gudhi::multi_filtration::One_critical_filtration<value_type>
filtration_type	multipers/multiparameter_module_approximation/approximation.h	/^  using filtration_type = typename births_type::Generator;  \/\/ same for death$/;"	t	class:Gudhi::multiparameter::mma::Summand	typeref:typename:births_type::Generator
filtration_type	multipers/multiparameter_module_approximation/utilities.h	/^using filtration_type = Gudhi::multi_filtration::$/;"	t	namespace:Gudhi::multiparameter::mma	typeref:typename:Gudhi::multi_filtration::One_critical_filtration<value_type>
filtration_vect_	multipers/gudhi/gudhi/Simplex_tree.h	/^  std::vector<Simplex_handle> filtration_vect_;$/;"	m	class:Gudhi::Simplex_tree	typeref:typename:std::vector<Simplex_handle>
filtrations	compute.py	/^		filtrations = [args.filtration]$/;"	v
filtrations	compute.py	/^	filtrations = args.filtrations$/;"	v
final_classifier	compute.py	/^		final_classifier = AdaBoostClassifier()$/;"	v
final_classifier	compute.py	/^		final_classifier = GaussianNB()$/;"	v
final_classifier	compute.py	/^		final_classifier = KNeighborsClassifier()$/;"	v
final_classifier	compute.py	/^		final_classifier = LGBMClassifier(verbose=-1, n_jobs=1)$/;"	v
final_classifier	compute.py	/^		final_classifier = LinearDiscriminantAnalysis()$/;"	v
final_classifier	compute.py	/^		final_classifier = MLPClassifier(hidden_layer_sizes=(100,), max_iter=1000)$/;"	v
final_classifier	compute.py	/^		final_classifier = QuadraticDiscriminantAnalysis()$/;"	v
final_classifier	compute.py	/^		final_classifier = RandomForestClassifier()$/;"	v
final_classifier	compute.py	/^		final_classifier = SVC(kernel="rbf")$/;"	v
final_classifier	compute.py	/^		final_classifier = XGBClassifier()$/;"	v
final_classifier_parameters	compute.py	/^		final_classifier_parameters={}$/;"	v
find	multipers/gudhi/gudhi/Simplex_tree.h	/^  Simplex_handle find(const InputVertexRange& s) {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:Simplex_handle
find	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_siblings.h	/^  Dictionary_it find(Vertex_handle v) {$/;"	f	class:Gudhi::Simplex_tree_siblings	typeref:typename:Dictionary_it
find_child	multipers/gudhi/gudhi/Simplex_tree.h	/^  Simplex_handle find_child(Simplex_handle sh, Vertex_handle vh) const {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:Simplex_handle
find_next_valid_index	multipers/gudhi/mma_interface_coh.h	/^    void find_next_valid_index() {$/;"	f	class:Gudhi::multiparameter::truc_interface::Boundary_matrix_as_filtered_complex_for_coh::Filtration_range_iterator	typeref:typename:void
find_simplex	multipers/gudhi/Simplex_tree_interface.h	/^  bool find_simplex(const Simplex& simplex) {$/;"	f	class:Gudhi::Simplex_tree_interface	typeref:typename:bool
find_simplex	multipers/gudhi/Simplex_tree_multi_interface.h	/^  bool find_simplex(const Simplex &simplex) {$/;"	f	class:Gudhi::multiparameter::python_interface::Simplex_tree_multi_interface	typeref:typename:bool
find_simplex	multipers/gudhi/gudhi/Simplex_tree.h	/^  Simplex_handle find_simplex(const std::vector<Vertex_handle>& simplex) {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:Simplex_handle
find_vertex	multipers/gudhi/gudhi/Simplex_tree.h	/^  Simplex_handle find_vertex(Vertex_handle v) {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:Simplex_handle
fit	compute.py	/^	def fit(self, x, y=None):$/;"	m	class:Identity
fit	multipers/data/MOL2.py	/^    def fit(self, X: Iterable[str], y=None):$/;"	m	class:Molecule2SimplexTree
fit	multipers/data/graphs.py	/^    def fit(self, X, y=None):$/;"	m	class:Graph2SimplexTrees
fit	multipers/data/pytorch2simplextree.py	/^	def fit(self, X, y=None):$/;"	m	class:Torch2SimplexTree
fit	multipers/ml/convolutions.py	/^    def fit(self, X, sample_weights=None, y=None):$/;"	m	class:DTM
fit	multipers/ml/convolutions.py	/^    def fit(self, X, sample_weights=None, y=None):$/;"	m	class:KDE
fit	multipers/ml/kernels.py	/^    def fit(self, X, y=None):$/;"	m	class:DistanceList2DistanceMatrix
fit	multipers/ml/kernels.py	/^    def fit(self, X, y=None):$/;"	m	class:DistanceMatrices2DistancesList
fit	multipers/ml/kernels.py	/^    def fit(self, X, y=None):$/;"	m	class:DistanceMatrix2DistanceList
fit	multipers/ml/kernels.py	/^    def fit(self, X, y=None):$/;"	m	class:DistanceMatrix2Kernel
fit	multipers/ml/kernels.py	/^    def fit(self, X: np.ndarray, y=None):$/;"	m	class:DistancesLists2DistanceMatrices
fit	multipers/ml/mma.py	/^    def fit(self, X, y=None):$/;"	m	class:FilteredComplex2MMA
fit	multipers/ml/mma.py	/^    def fit(self, X, y=None):$/;"	m	class:MMA2IMG
fit	multipers/ml/mma.py	/^    def fit(self, X, y=None):$/;"	m	class:MMA2Landscape
fit	multipers/ml/mma.py	/^    def fit(self, X_in, y=None):$/;"	m	class:MMAFormatter
fit	multipers/ml/one.py	/^	def fit(self, X, y=None): # X:list[diagrams]$/;"	m	class:Dgm2Histogram
fit	multipers/ml/one.py	/^	def fit(self, X, y=None): # X:list[diagrams]$/;"	m	class:Dgms2SignedMeasureHistogram
fit	multipers/ml/one.py	/^	def fit(self, X, y=None): # X:list[diagrams]$/;"	m	class:Dgms2SignedMeasureImage
fit	multipers/ml/one.py	/^	def fit(self, X, y=None): # X:list[diagrams]$/;"	m	class:SimplexTree2Histogram
fit	multipers/ml/one.py	/^	def fit(self, X, y=None):$/;"	m	class:Dgms2Image
fit	multipers/ml/one.py	/^	def fit(self, X, y=None):$/;"	m	class:Dgms2Landscapes
fit	multipers/ml/one.py	/^	def fit(self, X, y=None):$/;"	m	class:FilvecGetter
fit	multipers/ml/one.py	/^	def fit(self, X, y=None):$/;"	m	class:Graph2SimplexTree
fit	multipers/ml/one.py	/^	def fit(self, X, y=None):$/;"	m	class:PointCloud2SimplexTree
fit	multipers/ml/one.py	/^	def fit(self, X:list[gd.SimplexTree], y=None):$/;"	m	class:SimplexTree2Dgm
fit	multipers/ml/one.py	/^	def fit(self, X:list[list[np.ndarray]], y=None):$/;"	m	class:Dgms2SWK
fit	multipers/ml/one.py	/^	def fit(self, X:list[list[np.ndarray]], y=None):$/;"	m	class:Dgms2SlicedWassersteinDistanceMatrices
fit	multipers/ml/one.py	/^	def fit(self, X:list[list[np.ndarray]], y=None):$/;"	m	class:DiagramShuffle
fit	multipers/ml/one.py	/^	def fit(self, X:list[np.ndarray], y=None):$/;"	m	class:Dgms2SignedMeasureDistance
fit	multipers/ml/point_clouds.py	/^    def fit(self, X: np.ndarray | list, y=None):$/;"	m	class:PointCloud2FilteredComplex
fit	multipers/ml/signed_measures.py	/^    def fit(self, X, y=None):  # Todo : infer filtration grid ? quantiles ?$/;"	m	class:FilteredComplex2SignedMeasure
fit	multipers/ml/signed_measures.py	/^    def fit(self, X, y=None):$/;"	m	class:SignedMeasure2Convolution
fit	multipers/ml/signed_measures.py	/^    def fit(self, X, y=None):$/;"	m	class:SignedMeasure2SlicedWassersteinDistance
fit	multipers/ml/signed_measures.py	/^    def fit(self, X, y=None):$/;"	m	class:SignedMeasureFormatter
fit	multipers/ml/signed_measures.py	/^    def fit(self, X, y=None):$/;"	m	class:SignedMeasures2SlicedWassersteinDistances
fit	multipers/ml/signed_measures.py	/^    def fit(self, X, y=None):$/;"	m	class:SimplexTree2RectangleDecomposition
fit	multipers/ml/signed_measures.py	/^    def fit(self, X: np.ndarray | list, y=None):$/;"	m	class:DegreeRips2SignedMeasure
fit	multipers/ml/sliced_wasserstein.py	/^    def fit(self, X, y=None):$/;"	m	class:SlicedWassersteinDistance
fit	multipers/ml/sliced_wasserstein.py	/^    def fit(self, X, y=None):$/;"	m	class:WassersteinDistance
fit	multipers/ml/tools.py	/^    def fit(self, X: np.ndarray | list, y=None):$/;"	m	class:SimplexTreeEdgeCollapser
fit	multipers_old.py	/^	def fit(self, X, y=None):$/;"	m	class:MultiPersistenceImageWrapper
fit	multipers_old.py	/^	def fit(self, X, y=None):$/;"	m	class:MultiPersistenceLandscapeWrapper
fit	multipers_old.py	/^	def fit(self, X, y=None):$/;"	m	class:PersistenceImageWrapper
fit	multipers_old.py	/^	def fit(self, X, y=None):$/;"	m	class:SubsampleWrapper
flag_complex_collapse_edges	multipers/gudhi/gudhi/Flag_complex_edge_collapser.h	/^auto flag_complex_collapse_edges(FilteredEdgeRange&& edges, Delay&&delay) {$/;"	f	namespace:Gudhi::collapse	typeref:typename:auto
flag_complex_collapse_edges	multipers/gudhi/gudhi/Flag_complex_edge_collapser.h	/^template<class FilteredEdgeRange> auto flag_complex_collapse_edges(const FilteredEdgeRange& edge/;"	f	namespace:Gudhi::collapse	typeref:typename:auto
flat_barcode	multipers/gudhi/truc.h	/^  using flat_barcode = std::vector<std::pair<int, std::pair<value_type, value_type>>>;$/;"	t	class:Gudhi::multiparameter::truc_interface::Truc	typeref:typename:std::vector<std::pair<int,std::pair<value_type,value_type>>>
flat_map	multipers/gudhi/gudhi/Simplex_tree.h	/^  typedef typename boost::container::flat_map<Vertex_handle, Node> flat_map;$/;"	t	class:Gudhi::Simplex_tree	typeref:typename:boost::container::flat_map<Vertex_handle,Node>
flat_metric	multipers/ml/sliced_wasserstein.py	/^        def flat_metric(a, b):$/;"	f	function:_sklearn_wrapper	file:
flat_nodim_barcode	multipers/gudhi/truc.h	/^  using flat_nodim_barcode = std::vector<std::pair<value_type, value_type>>;$/;"	t	class:Gudhi::multiparameter::truc_interface::Truc	typeref:typename:std::vector<std::pair<value_type,value_type>>
flatten	multipers/gudhi/gudhi/Simplex_tree_multi.h	/^void flatten(simplextree_std &st, simplextree_multi &st_multi,$/;"	f	namespace:Gudhi::multi_persistence	typeref:typename:void
flatten_diag_from_ptr	multipers/gudhi/Simplex_tree_multi_interface.h	/^void inline flatten_diag_from_ptr($/;"	f	namespace:Gudhi::multiparameter::python_interface	typeref:typename:void
flatten_from_ptr	multipers/gudhi/Simplex_tree_multi_interface.h	/^void inline flatten_from_ptr(uintptr_t splxptr, uintptr_t newsplxptr,$/;"	f	namespace:Gudhi::multiparameter::python_interface	typeref:typename:void
flattened_scc_type	multipers/gudhi/Simplex_tree_multi_interface.h	/^using flattened_scc_type =$/;"	t	class:Gudhi::multiparameter::python_interface::Simplex_tree_multi_interface	typeref:typename:std::pair<std::vector<std::vector<value_type>>,std::vector<std::vector<unsigned int>>>
flattened_scc_type	multipers/multiparameter_module_approximation/format_python-cpp.h	/^using flattened_scc_type =$/;"	t	namespace:Gudhi::multiparameter::mma
for_each_simplex	multipers/gudhi/gudhi/Simplex_tree.h	/^  void for_each_simplex(Fun&& fun) {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:void
for_each_vertex	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^  template <class F> void for_each_vertex(F&&f) {$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base	typeref:typename:void
for_each_vertex_rec	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^void Bitmap_cubical_complex_base<T>::for_each_vertex_rec(F&&f, std::size_t base, int dim) {$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base	typeref:typename:void
forest_	multipers/gudhi/naive_merge_tree.h	/^  std::vector<Node> forest_;$/;"	m	class:Naive_bottleneck_forest	typeref:typename:std::vector<Node>
forest_	multipers/gudhi/naive_merge_tree.h	/^  std::vector<Node> forest_;$/;"	m	class:Naive_merge_forest	typeref:typename:std::vector<Node>
from_simplextree	multipers/gudhi/truc.h	/^  void from_simplextree(SimplexTree &st) {$/;"	f	class:Gudhi::multiparameter::truc_interface::SimplicialStructure	typeref:typename:void
from_std	multipers/gudhi/Simplex_tree_multi_interface.h	/^  void from_std(char* buffer_start, std::size_t buffer_size, int dimension, const Filtration &de/;"	f	class:Gudhi::multiparameter::python_interface::Simplex_tree_multi_interface	typeref:typename:void
full_build	setup.py	/^    full_build = True$/;"	v
full_build	setup.py	/^full_build = False$/;"	v
function_delaunay_presentation	multipers/io.pyx	/^def function_delaunay_presentation($/;"	f
function_delaunay_presentation_to_slicer	multipers/io.pyx	/^def function_delaunay_presentation_to_slicer($/;"	f
function_rips	multipers/multi_parameter_rank_invariant/function_rips.h	/^namespace function_rips {$/;"	n	namespace:Gudhi::multiparameter
function_rips_signed_measure	multipers/function_rips.pyx	/^def function_rips_signed_measure(st_multi, vector[indices_type] homological_degrees, bool mobius/;"	f
function_rips_signed_measure	multipers/torch/rips_density.py	/^def function_rips_signed_measure($/;"	f
function_rips_signed_measure_old	multipers/torch/rips_density.py	/^def function_rips_signed_measure_old($/;"	f
function_rips_surface	multipers/function_rips.pyx	/^def function_rips_surface(st_multi, vector[indices_type] homological_degrees, bool mobius_invers/;"	f
function_scc_type	multipers/gudhi/Simplex_tree_multi_interface.h	/^  using function_scc_type =$/;"	t	class:Gudhi::multiparameter::python_interface::Simplex_tree_multi_interface	typeref:typename:std::vector<std::pair<std::vector<std::vector<std::vector<value_type>>>,boundary_matrix>>
function_scc_type	multipers/multiparameter_module_approximation/format_python-cpp.h	/^using function_scc_type = std::vector<$/;"	t	namespace:Gudhi::multiparameter::mma	typeref:typename:std::vector<std::pair<std::vector<std::vector<std::vector<value_type>>>,boundary_matrix>>
function_simplextree_to_scc	multipers/gudhi/Simplex_tree_multi_interface.h	/^  function_scc_type inline function_simplextree_to_scc() {$/;"	f	class:Gudhi::multiparameter::python_interface::Simplex_tree_multi_interface	typeref:typename:function_scc_type
function_simplextree_to_scc	multipers/multiparameter_module_approximation/format_python-cpp.h	/^function_simplextree_to_scc(Gudhi::Simplex_tree<STOptions> &st) {$/;"	f	namespace:Gudhi::multiparameter::mma	typeref:typename:function_scc_type<typename STOptions::Filtration_value::value_type>
g10	docs/icon.svg	/^       id="g10">$/;"	i
g100	docs/icon.svg	/^       id="g100">$/;"	i
g101	docs/icon.svg	/^       id="g101">$/;"	i
g102	docs/icon.svg	/^       id="g102">$/;"	i
g103	docs/icon.svg	/^       id="g103">$/;"	i
g104	docs/icon.svg	/^       id="g104">$/;"	i
g105	docs/icon.svg	/^       id="g105">$/;"	i
g106	docs/icon.svg	/^       id="g106">$/;"	i
g107	docs/icon.svg	/^       id="g107">$/;"	i
g108	docs/icon.svg	/^       id="g108">$/;"	i
g109	docs/icon.svg	/^       id="g109">$/;"	i
g11	docs/icon.svg	/^       id="g11">$/;"	i
g110	docs/icon.svg	/^       id="g110">$/;"	i
g111	docs/icon.svg	/^       id="g111">$/;"	i
g112	docs/icon.svg	/^       id="g112">$/;"	i
g113	docs/icon.svg	/^       id="g113">$/;"	i
g114	docs/icon.svg	/^       id="g114">$/;"	i
g115	docs/icon.svg	/^       id="g115">$/;"	i
g116	docs/icon.svg	/^       id="g116">$/;"	i
g117	docs/icon.svg	/^       id="g117">$/;"	i
g118	docs/icon.svg	/^       id="g118">$/;"	i
g119	docs/icon.svg	/^       id="g119">$/;"	i
g12	docs/icon.svg	/^       id="g12">$/;"	i
g120	docs/icon.svg	/^       id="g120">$/;"	i
g121	docs/icon.svg	/^       id="g121">$/;"	i
g122	docs/icon.svg	/^       id="g122">$/;"	i
g123	docs/icon.svg	/^       id="g123">$/;"	i
g124	docs/icon.svg	/^       id="g124">$/;"	i
g125	docs/icon.svg	/^       id="g125">$/;"	i
g126	docs/icon.svg	/^       id="g126">$/;"	i
g127	docs/icon.svg	/^       id="g127">$/;"	i
g128	docs/icon.svg	/^       id="g128">$/;"	i
g129	docs/icon.svg	/^       id="g129">$/;"	i
g13	docs/icon.svg	/^       id="g13">$/;"	i
g130	docs/icon.svg	/^       id="g130">$/;"	i
g131	docs/icon.svg	/^       id="g131">$/;"	i
g132	docs/icon.svg	/^       id="g132">$/;"	i
g133	docs/icon.svg	/^       id="g133">$/;"	i
g134	docs/icon.svg	/^       id="g134">$/;"	i
g135	docs/icon.svg	/^       id="g135">$/;"	i
g136	docs/icon.svg	/^       id="g136">$/;"	i
g137	docs/icon.svg	/^       id="g137">$/;"	i
g138	docs/icon.svg	/^       id="g138">$/;"	i
g139	docs/icon.svg	/^       id="g139">$/;"	i
g14	docs/icon.svg	/^       id="g14">$/;"	i
g140	docs/icon.svg	/^       id="g140">$/;"	i
g141	docs/icon.svg	/^       id="g141">$/;"	i
g142	docs/icon.svg	/^       id="g142">$/;"	i
g143	docs/icon.svg	/^       id="g143">$/;"	i
g144	docs/icon.svg	/^       id="g144">$/;"	i
g145	docs/icon.svg	/^       id="g145">$/;"	i
g146	docs/icon.svg	/^       id="g146">$/;"	i
g147	docs/icon.svg	/^       id="g147">$/;"	i
g148	docs/icon.svg	/^       id="g148">$/;"	i
g149	docs/icon.svg	/^       id="g149">$/;"	i
g15	docs/icon.svg	/^       id="g15">$/;"	i
g150	docs/icon.svg	/^       id="g150">$/;"	i
g151	docs/icon.svg	/^       id="g151">$/;"	i
g152	docs/icon.svg	/^       id="g152">$/;"	i
g153	docs/icon.svg	/^       id="g153">$/;"	i
g154	docs/icon.svg	/^       id="g154">$/;"	i
g155	docs/icon.svg	/^       id="g155">$/;"	i
g156	docs/icon.svg	/^       id="g156">$/;"	i
g157	docs/icon.svg	/^       id="g157">$/;"	i
g158	docs/icon.svg	/^       id="g158">$/;"	i
g159	docs/icon.svg	/^       id="g159">$/;"	i
g16	docs/icon.svg	/^       id="g16">$/;"	i
g160	docs/icon.svg	/^       id="g160">$/;"	i
g161	docs/icon.svg	/^       id="g161">$/;"	i
g162	docs/icon.svg	/^       id="g162">$/;"	i
g163	docs/icon.svg	/^       id="g163">$/;"	i
g164	docs/icon.svg	/^       id="g164">$/;"	i
g165	docs/icon.svg	/^       id="g165">$/;"	i
g166	docs/icon.svg	/^       id="g166">$/;"	i
g167	docs/icon.svg	/^       id="g167">$/;"	i
g168	docs/icon.svg	/^       id="g168">$/;"	i
g169	docs/icon.svg	/^       id="g169">$/;"	i
g17	docs/icon.svg	/^       id="g17">$/;"	i
g170	docs/icon.svg	/^       id="g170">$/;"	i
g171	docs/icon.svg	/^       id="g171">$/;"	i
g172	docs/icon.svg	/^       id="g172">$/;"	i
g173	docs/icon.svg	/^       id="g173">$/;"	i
g174	docs/icon.svg	/^       id="g174">$/;"	i
g175	docs/icon.svg	/^       id="g175">$/;"	i
g176	docs/icon.svg	/^       id="g176">$/;"	i
g177	docs/icon.svg	/^       id="g177">$/;"	i
g178	docs/icon.svg	/^       id="g178">$/;"	i
g179	docs/icon.svg	/^       id="g179">$/;"	i
g18	docs/icon.svg	/^       id="g18">$/;"	i
g180	docs/icon.svg	/^       id="g180">$/;"	i
g181	docs/icon.svg	/^       id="g181">$/;"	i
g182	docs/icon.svg	/^       id="g182">$/;"	i
g183	docs/icon.svg	/^       id="g183">$/;"	i
g184	docs/icon.svg	/^       id="g184">$/;"	i
g185	docs/icon.svg	/^       id="g185">$/;"	i
g186	docs/icon.svg	/^       id="g186">$/;"	i
g187	docs/icon.svg	/^       id="g187">$/;"	i
g188	docs/icon.svg	/^       id="g188">$/;"	i
g189	docs/icon.svg	/^       id="g189">$/;"	i
g19	docs/icon.svg	/^       id="g19">$/;"	i
g190	docs/icon.svg	/^       id="g190">$/;"	i
g191	docs/icon.svg	/^       id="g191">$/;"	i
g192	docs/icon.svg	/^       id="g192">$/;"	i
g193	docs/icon.svg	/^       id="g193">$/;"	i
g194	docs/icon.svg	/^       id="g194">$/;"	i
g195	docs/icon.svg	/^       id="g195">$/;"	i
g196	docs/icon.svg	/^       id="g196">$/;"	i
g197	docs/icon.svg	/^       id="g197">$/;"	i
g198	docs/icon.svg	/^       id="g198">$/;"	i
g199	docs/icon.svg	/^       id="g199">$/;"	i
g2	docs/icon.svg	/^       id="g2">$/;"	i
g20	docs/icon.svg	/^       id="g20">$/;"	i
g200	docs/icon.svg	/^       id="g200">$/;"	i
g201	docs/icon.svg	/^       id="g201">$/;"	i
g202	docs/icon.svg	/^       id="g202">$/;"	i
g203	docs/icon.svg	/^       id="g203">$/;"	i
g204	docs/icon.svg	/^       id="g204">$/;"	i
g205	docs/icon.svg	/^       id="g205">$/;"	i
g206	docs/icon.svg	/^       id="g206">$/;"	i
g207	docs/icon.svg	/^       id="g207">$/;"	i
g208	docs/icon.svg	/^       id="g208">$/;"	i
g209	docs/icon.svg	/^       id="g209">$/;"	i
g21	docs/icon.svg	/^       id="g21">$/;"	i
g210	docs/icon.svg	/^       id="g210">$/;"	i
g211	docs/icon.svg	/^       id="g211">$/;"	i
g212	docs/icon.svg	/^       id="g212">$/;"	i
g213	docs/icon.svg	/^       id="g213">$/;"	i
g214	docs/icon.svg	/^       id="g214">$/;"	i
g215	docs/icon.svg	/^       id="g215">$/;"	i
g216	docs/icon.svg	/^       id="g216">$/;"	i
g217	docs/icon.svg	/^       id="g217">$/;"	i
g218	docs/icon.svg	/^       id="g218">$/;"	i
g219	docs/icon.svg	/^       id="g219">$/;"	i
g22	docs/icon.svg	/^       id="g22">$/;"	i
g220	docs/icon.svg	/^       id="g220">$/;"	i
g221	docs/icon.svg	/^       id="g221">$/;"	i
g222	docs/icon.svg	/^       id="g222">$/;"	i
g223	docs/icon.svg	/^       id="g223">$/;"	i
g224	docs/icon.svg	/^       id="g224">$/;"	i
g225	docs/icon.svg	/^       id="g225">$/;"	i
g226	docs/icon.svg	/^       id="g226">$/;"	i
g227	docs/icon.svg	/^       id="g227">$/;"	i
g228	docs/icon.svg	/^       id="g228">$/;"	i
g229	docs/icon.svg	/^       id="g229">$/;"	i
g23	docs/icon.svg	/^       id="g23">$/;"	i
g230	docs/icon.svg	/^       id="g230">$/;"	i
g231	docs/icon.svg	/^       id="g231">$/;"	i
g232	docs/icon.svg	/^       id="g232">$/;"	i
g233	docs/icon.svg	/^       id="g233">$/;"	i
g234	docs/icon.svg	/^       id="g234">$/;"	i
g235	docs/icon.svg	/^       id="g235">$/;"	i
g236	docs/icon.svg	/^       id="g236">$/;"	i
g237	docs/icon.svg	/^       id="g237">$/;"	i
g238	docs/icon.svg	/^       id="g238">$/;"	i
g239	docs/icon.svg	/^       id="g239">$/;"	i
g24	docs/icon.svg	/^       id="g24">$/;"	i
g240	docs/icon.svg	/^       id="g240">$/;"	i
g241	docs/icon.svg	/^       id="g241">$/;"	i
g242	docs/icon.svg	/^       id="g242">$/;"	i
g243	docs/icon.svg	/^       id="g243">$/;"	i
g244	docs/icon.svg	/^       id="g244">$/;"	i
g245	docs/icon.svg	/^       id="g245">$/;"	i
g246	docs/icon.svg	/^       id="g246">$/;"	i
g247	docs/icon.svg	/^       id="g247">$/;"	i
g248	docs/icon.svg	/^       id="g248">$/;"	i
g249	docs/icon.svg	/^       id="g249">$/;"	i
g25	docs/icon.svg	/^       id="g25">$/;"	i
g250	docs/icon.svg	/^       id="g250">$/;"	i
g251	docs/icon.svg	/^       id="g251">$/;"	i
g252	docs/icon.svg	/^       id="g252">$/;"	i
g253	docs/icon.svg	/^       id="g253">$/;"	i
g254	docs/icon.svg	/^       id="g254">$/;"	i
g255	docs/icon.svg	/^       id="g255">$/;"	i
g256	docs/icon.svg	/^       id="g256">$/;"	i
g257	docs/icon.svg	/^       id="g257">$/;"	i
g258	docs/icon.svg	/^       id="g258">$/;"	i
g259	docs/icon.svg	/^       id="g259">$/;"	i
g26	docs/icon.svg	/^       id="g26">$/;"	i
g260	docs/icon.svg	/^       id="g260">$/;"	i
g261	docs/icon.svg	/^       id="g261">$/;"	i
g262	docs/icon.svg	/^       id="g262">$/;"	i
g263	docs/icon.svg	/^       id="g263">$/;"	i
g264	docs/icon.svg	/^       id="g264">$/;"	i
g265	docs/icon.svg	/^       id="g265">$/;"	i
g266	docs/icon.svg	/^       id="g266">$/;"	i
g267	docs/icon.svg	/^       id="g267">$/;"	i
g268	docs/icon.svg	/^       id="g268">$/;"	i
g269	docs/icon.svg	/^       id="g269">$/;"	i
g27	docs/icon.svg	/^       id="g27">$/;"	i
g270	docs/icon.svg	/^       id="g270">$/;"	i
g271	docs/icon.svg	/^       id="g271">$/;"	i
g272	docs/icon.svg	/^       id="g272">$/;"	i
g273	docs/icon.svg	/^       id="g273">$/;"	i
g274	docs/icon.svg	/^       id="g274">$/;"	i
g275	docs/icon.svg	/^       id="g275">$/;"	i
g276	docs/icon.svg	/^       id="g276">$/;"	i
g277	docs/icon.svg	/^       id="g277">$/;"	i
g278	docs/icon.svg	/^       id="g278">$/;"	i
g279	docs/icon.svg	/^       id="g279">$/;"	i
g28	docs/icon.svg	/^       id="g28">$/;"	i
g280	docs/icon.svg	/^       id="g280">$/;"	i
g281	docs/icon.svg	/^       id="g281">$/;"	i
g282	docs/icon.svg	/^       id="g282">$/;"	i
g283	docs/icon.svg	/^       id="g283">$/;"	i
g284	docs/icon.svg	/^       id="g284">$/;"	i
g285	docs/icon.svg	/^       id="g285">$/;"	i
g286	docs/icon.svg	/^       id="g286">$/;"	i
g287	docs/icon.svg	/^       id="g287">$/;"	i
g288	docs/icon.svg	/^       id="g288">$/;"	i
g289	docs/icon.svg	/^       id="g289">$/;"	i
g29	docs/icon.svg	/^       id="g29">$/;"	i
g290	docs/icon.svg	/^       id="g290">$/;"	i
g291	docs/icon.svg	/^       id="g291">$/;"	i
g292	docs/icon.svg	/^       id="g292">$/;"	i
g293	docs/icon.svg	/^       id="g293">$/;"	i
g294	docs/icon.svg	/^       id="g294">$/;"	i
g295	docs/icon.svg	/^       id="g295">$/;"	i
g296	docs/icon.svg	/^       id="g296">$/;"	i
g297	docs/icon.svg	/^       id="g297">$/;"	i
g298	docs/icon.svg	/^       id="g298">$/;"	i
g299	docs/icon.svg	/^       id="g299">$/;"	i
g3	docs/icon.svg	/^       id="g3">$/;"	i
g30	docs/icon.svg	/^       id="g30">$/;"	i
g300	docs/icon.svg	/^       id="g300">$/;"	i
g301	docs/icon.svg	/^       id="g301">$/;"	i
g302	docs/icon.svg	/^       id="g302">$/;"	i
g303	docs/icon.svg	/^       id="g303">$/;"	i
g304	docs/icon.svg	/^       id="g304">$/;"	i
g305	docs/icon.svg	/^       id="g305">$/;"	i
g306	docs/icon.svg	/^       id="g306">$/;"	i
g307	docs/icon.svg	/^       id="g307">$/;"	i
g308	docs/icon.svg	/^       id="g308">$/;"	i
g309	docs/icon.svg	/^       id="g309">$/;"	i
g31	docs/icon.svg	/^       id="g31">$/;"	i
g310	docs/icon.svg	/^       id="g310">$/;"	i
g311	docs/icon.svg	/^       id="g311">$/;"	i
g312	docs/icon.svg	/^       id="g312">$/;"	i
g313	docs/icon.svg	/^       id="g313">$/;"	i
g314	docs/icon.svg	/^       id="g314">$/;"	i
g315	docs/icon.svg	/^       id="g315">$/;"	i
g316	docs/icon.svg	/^       id="g316">$/;"	i
g317	docs/icon.svg	/^       id="g317">$/;"	i
g318	docs/icon.svg	/^       id="g318">$/;"	i
g319	docs/icon.svg	/^       id="g319">$/;"	i
g32	docs/icon.svg	/^       id="g32">$/;"	i
g320	docs/icon.svg	/^       id="g320">$/;"	i
g321	docs/icon.svg	/^       id="g321">$/;"	i
g322	docs/icon.svg	/^       id="g322">$/;"	i
g323	docs/icon.svg	/^       id="g323">$/;"	i
g324	docs/icon.svg	/^       id="g324">$/;"	i
g325	docs/icon.svg	/^       id="g325">$/;"	i
g326	docs/icon.svg	/^       id="g326">$/;"	i
g327	docs/icon.svg	/^       id="g327">$/;"	i
g328	docs/icon.svg	/^       id="g328">$/;"	i
g329	docs/icon.svg	/^       id="g329">$/;"	i
g33	docs/icon.svg	/^       id="g33">$/;"	i
g330	docs/icon.svg	/^       id="g330">$/;"	i
g331	docs/icon.svg	/^       id="g331">$/;"	i
g332	docs/icon.svg	/^       id="g332">$/;"	i
g333	docs/icon.svg	/^       id="g333">$/;"	i
g334	docs/icon.svg	/^       id="g334">$/;"	i
g335	docs/icon.svg	/^       id="g335">$/;"	i
g336	docs/icon.svg	/^       id="g336">$/;"	i
g337	docs/icon.svg	/^       id="g337">$/;"	i
g338	docs/icon.svg	/^       id="g338">$/;"	i
g339	docs/icon.svg	/^       id="g339">$/;"	i
g34	docs/icon.svg	/^       id="g34">$/;"	i
g340	docs/icon.svg	/^       id="g340">$/;"	i
g341	docs/icon.svg	/^       id="g341">$/;"	i
g342	docs/icon.svg	/^       id="g342">$/;"	i
g343	docs/icon.svg	/^       id="g343">$/;"	i
g344	docs/icon.svg	/^       id="g344">$/;"	i
g345	docs/icon.svg	/^       id="g345">$/;"	i
g346	docs/icon.svg	/^       id="g346">$/;"	i
g347	docs/icon.svg	/^       id="g347">$/;"	i
g348	docs/icon.svg	/^       id="g348">$/;"	i
g349	docs/icon.svg	/^       id="g349">$/;"	i
g35	docs/icon.svg	/^       id="g35">$/;"	i
g350	docs/icon.svg	/^       id="g350">$/;"	i
g351	docs/icon.svg	/^       id="g351">$/;"	i
g352	docs/icon.svg	/^       id="g352">$/;"	i
g353	docs/icon.svg	/^       id="g353">$/;"	i
g354	docs/icon.svg	/^       id="g354">$/;"	i
g355	docs/icon.svg	/^       id="g355">$/;"	i
g356	docs/icon.svg	/^       id="g356">$/;"	i
g357	docs/icon.svg	/^       id="g357">$/;"	i
g358	docs/icon.svg	/^       id="g358">$/;"	i
g359	docs/icon.svg	/^       id="g359">$/;"	i
g36	docs/icon.svg	/^       id="g36">$/;"	i
g360	docs/icon.svg	/^       id="g360">$/;"	i
g361	docs/icon.svg	/^       id="g361">$/;"	i
g362	docs/icon.svg	/^       id="g362">$/;"	i
g363	docs/icon.svg	/^       id="g363">$/;"	i
g364	docs/icon.svg	/^       id="g364">$/;"	i
g365	docs/icon.svg	/^       id="g365">$/;"	i
g366	docs/icon.svg	/^       id="g366">$/;"	i
g367	docs/icon.svg	/^       id="g367">$/;"	i
g368	docs/icon.svg	/^       id="g368">$/;"	i
g369	docs/icon.svg	/^       id="g369">$/;"	i
g37	docs/icon.svg	/^       id="g37">$/;"	i
g370	docs/icon.svg	/^       id="g370">$/;"	i
g371	docs/icon.svg	/^       id="g371">$/;"	i
g372	docs/icon.svg	/^       id="g372">$/;"	i
g373	docs/icon.svg	/^       id="g373">$/;"	i
g374	docs/icon.svg	/^       id="g374">$/;"	i
g375	docs/icon.svg	/^       id="g375">$/;"	i
g376	docs/icon.svg	/^       id="g376">$/;"	i
g377	docs/icon.svg	/^       id="g377">$/;"	i
g378	docs/icon.svg	/^       id="g378">$/;"	i
g379	docs/icon.svg	/^       id="g379">$/;"	i
g38	docs/icon.svg	/^       id="g38">$/;"	i
g380	docs/icon.svg	/^       id="g380">$/;"	i
g381	docs/icon.svg	/^       id="g381">$/;"	i
g382	docs/icon.svg	/^       id="g382">$/;"	i
g383	docs/icon.svg	/^       id="g383">$/;"	i
g384	docs/icon.svg	/^       id="g384">$/;"	i
g385	docs/icon.svg	/^       id="g385">$/;"	i
g386	docs/icon.svg	/^       id="g386">$/;"	i
g387	docs/icon.svg	/^       id="g387">$/;"	i
g388	docs/icon.svg	/^       id="g388">$/;"	i
g389	docs/icon.svg	/^       id="g389">$/;"	i
g39	docs/icon.svg	/^       id="g39">$/;"	i
g390	docs/icon.svg	/^       id="g390">$/;"	i
g391	docs/icon.svg	/^       id="g391">$/;"	i
g392	docs/icon.svg	/^       id="g392">$/;"	i
g393	docs/icon.svg	/^       id="g393">$/;"	i
g394	docs/icon.svg	/^       id="g394">$/;"	i
g395	docs/icon.svg	/^       id="g395">$/;"	i
g396	docs/icon.svg	/^       id="g396">$/;"	i
g397	docs/icon.svg	/^       id="g397">$/;"	i
g398	docs/icon.svg	/^       id="g398">$/;"	i
g399	docs/icon.svg	/^       id="g399">$/;"	i
g4	docs/icon.svg	/^       id="g4">$/;"	i
g40	docs/icon.svg	/^       id="g40">$/;"	i
g400	docs/icon.svg	/^       id="g400">$/;"	i
g401	docs/icon.svg	/^       id="g401">$/;"	i
g402	docs/icon.svg	/^       id="g402">$/;"	i
g403	docs/icon.svg	/^       id="g403">$/;"	i
g404	docs/icon.svg	/^       id="g404">$/;"	i
g405	docs/icon.svg	/^       id="g405">$/;"	i
g406	docs/icon.svg	/^       id="g406">$/;"	i
g407	docs/icon.svg	/^       id="g407">$/;"	i
g408	docs/icon.svg	/^       id="g408">$/;"	i
g409	docs/icon.svg	/^       id="g409">$/;"	i
g41	docs/icon.svg	/^       id="g41">$/;"	i
g410	docs/icon.svg	/^       id="g410">$/;"	i
g411	docs/icon.svg	/^       id="g411">$/;"	i
g412	docs/icon.svg	/^       id="g412">$/;"	i
g413	docs/icon.svg	/^       id="g413">$/;"	i
g414	docs/icon.svg	/^       id="g414">$/;"	i
g415	docs/icon.svg	/^       id="g415">$/;"	i
g416	docs/icon.svg	/^       id="g416">$/;"	i
g417	docs/icon.svg	/^       id="g417">$/;"	i
g418	docs/icon.svg	/^       id="g418">$/;"	i
g419	docs/icon.svg	/^       id="g419">$/;"	i
g42	docs/icon.svg	/^       id="g42">$/;"	i
g420	docs/icon.svg	/^       id="g420">$/;"	i
g421	docs/icon.svg	/^       id="g421">$/;"	i
g422	docs/icon.svg	/^       id="g422">$/;"	i
g423	docs/icon.svg	/^       id="g423">$/;"	i
g424	docs/icon.svg	/^       id="g424">$/;"	i
g425	docs/icon.svg	/^       id="g425">$/;"	i
g426	docs/icon.svg	/^       id="g426">$/;"	i
g427	docs/icon.svg	/^       id="g427">$/;"	i
g428	docs/icon.svg	/^       id="g428">$/;"	i
g429	docs/icon.svg	/^       id="g429">$/;"	i
g43	docs/icon.svg	/^       id="g43">$/;"	i
g430	docs/icon.svg	/^       id="g430">$/;"	i
g431	docs/icon.svg	/^       id="g431">$/;"	i
g432	docs/icon.svg	/^       id="g432">$/;"	i
g433	docs/icon.svg	/^       id="g433">$/;"	i
g434	docs/icon.svg	/^       id="g434">$/;"	i
g435	docs/icon.svg	/^       id="g435">$/;"	i
g436	docs/icon.svg	/^       id="g436">$/;"	i
g437	docs/icon.svg	/^       id="g437">$/;"	i
g438	docs/icon.svg	/^       id="g438">$/;"	i
g439	docs/icon.svg	/^       id="g439">$/;"	i
g44	docs/icon.svg	/^       id="g44">$/;"	i
g440	docs/icon.svg	/^       id="g440">$/;"	i
g441	docs/icon.svg	/^       id="g441">$/;"	i
g442	docs/icon.svg	/^       id="g442">$/;"	i
g443	docs/icon.svg	/^       id="g443">$/;"	i
g444	docs/icon.svg	/^       id="g444">$/;"	i
g445	docs/icon.svg	/^       id="g445">$/;"	i
g446	docs/icon.svg	/^       id="g446">$/;"	i
g447	docs/icon.svg	/^       id="g447">$/;"	i
g448	docs/icon.svg	/^       id="g448">$/;"	i
g449	docs/icon.svg	/^       id="g449">$/;"	i
g45	docs/icon.svg	/^       id="g45">$/;"	i
g450	docs/icon.svg	/^       id="g450">$/;"	i
g451	docs/icon.svg	/^       id="g451">$/;"	i
g452	docs/icon.svg	/^       id="g452">$/;"	i
g453	docs/icon.svg	/^       id="g453">$/;"	i
g454	docs/icon.svg	/^       id="g454">$/;"	i
g455	docs/icon.svg	/^       id="g455">$/;"	i
g456	docs/icon.svg	/^       id="g456">$/;"	i
g457	docs/icon.svg	/^       id="g457">$/;"	i
g458	docs/icon.svg	/^       id="g458">$/;"	i
g459	docs/icon.svg	/^       id="g459">$/;"	i
g46	docs/icon.svg	/^       id="g46">$/;"	i
g460	docs/icon.svg	/^       id="g460">$/;"	i
g461	docs/icon.svg	/^       id="g461">$/;"	i
g462	docs/icon.svg	/^       id="g462">$/;"	i
g463	docs/icon.svg	/^       id="g463">$/;"	i
g464	docs/icon.svg	/^       id="g464">$/;"	i
g465	docs/icon.svg	/^       id="g465">$/;"	i
g466	docs/icon.svg	/^       id="g466">$/;"	i
g467	docs/icon.svg	/^       id="g467">$/;"	i
g468	docs/icon.svg	/^       id="g468">$/;"	i
g469	docs/icon.svg	/^       id="g469">$/;"	i
g47	docs/icon.svg	/^       id="g47">$/;"	i
g470	docs/icon.svg	/^       id="g470">$/;"	i
g471	docs/icon.svg	/^       id="g471">$/;"	i
g472	docs/icon.svg	/^       id="g472">$/;"	i
g473	docs/icon.svg	/^       id="g473">$/;"	i
g474	docs/icon.svg	/^       id="g474">$/;"	i
g475	docs/icon.svg	/^       id="g475">$/;"	i
g476	docs/icon.svg	/^       id="g476">$/;"	i
g477	docs/icon.svg	/^       id="g477">$/;"	i
g478	docs/icon.svg	/^       id="g478">$/;"	i
g479	docs/icon.svg	/^       id="g479">$/;"	i
g48	docs/icon.svg	/^       id="g48">$/;"	i
g480	docs/icon.svg	/^       id="g480">$/;"	i
g481	docs/icon.svg	/^       id="g481">$/;"	i
g482	docs/icon.svg	/^       id="g482">$/;"	i
g483	docs/icon.svg	/^       id="g483">$/;"	i
g484	docs/icon.svg	/^       id="g484">$/;"	i
g485	docs/icon.svg	/^       id="g485">$/;"	i
g486	docs/icon.svg	/^       id="g486">$/;"	i
g487	docs/icon.svg	/^       id="g487">$/;"	i
g488	docs/icon.svg	/^       id="g488">$/;"	i
g489	docs/icon.svg	/^       id="g489">$/;"	i
g49	docs/icon.svg	/^       id="g49">$/;"	i
g490	docs/icon.svg	/^       id="g490">$/;"	i
g491	docs/icon.svg	/^       id="g491">$/;"	i
g492	docs/icon.svg	/^       id="g492">$/;"	i
g493	docs/icon.svg	/^       id="g493">$/;"	i
g494	docs/icon.svg	/^       id="g494">$/;"	i
g495	docs/icon.svg	/^       id="g495">$/;"	i
g496	docs/icon.svg	/^       id="g496">$/;"	i
g497	docs/icon.svg	/^       id="g497">$/;"	i
g498	docs/icon.svg	/^       id="g498">$/;"	i
g499	docs/icon.svg	/^       id="g499">$/;"	i
g5	docs/icon.svg	/^       id="g5">$/;"	i
g50	docs/icon.svg	/^       id="g50">$/;"	i
g500	docs/icon.svg	/^       id="g500">$/;"	i
g501	docs/icon.svg	/^       id="g501">$/;"	i
g51	docs/icon.svg	/^       id="g51">$/;"	i
g52	docs/icon.svg	/^       id="g52">$/;"	i
g53	docs/icon.svg	/^       id="g53">$/;"	i
g54	docs/icon.svg	/^       id="g54">$/;"	i
g55	docs/icon.svg	/^       id="g55">$/;"	i
g56	docs/icon.svg	/^       id="g56">$/;"	i
g57	docs/icon.svg	/^       id="g57">$/;"	i
g58	docs/icon.svg	/^       id="g58">$/;"	i
g59	docs/icon.svg	/^       id="g59">$/;"	i
g6	docs/icon.svg	/^       id="g6">$/;"	i
g60	docs/icon.svg	/^       id="g60">$/;"	i
g61	docs/icon.svg	/^       id="g61">$/;"	i
g62	docs/icon.svg	/^       id="g62">$/;"	i
g63	docs/icon.svg	/^       id="g63">$/;"	i
g64	docs/icon.svg	/^       id="g64">$/;"	i
g65	docs/icon.svg	/^       id="g65">$/;"	i
g66	docs/icon.svg	/^       id="g66">$/;"	i
g67	docs/icon.svg	/^       id="g67">$/;"	i
g68	docs/icon.svg	/^       id="g68">$/;"	i
g69	docs/icon.svg	/^       id="g69">$/;"	i
g7	docs/icon.svg	/^       id="g7">$/;"	i
g70	docs/icon.svg	/^       id="g70">$/;"	i
g71	docs/icon.svg	/^       id="g71">$/;"	i
g72	docs/icon.svg	/^       id="g72">$/;"	i
g73	docs/icon.svg	/^       id="g73">$/;"	i
g74	docs/icon.svg	/^       id="g74">$/;"	i
g75	docs/icon.svg	/^       id="g75">$/;"	i
g76	docs/icon.svg	/^       id="g76">$/;"	i
g77	docs/icon.svg	/^       id="g77">$/;"	i
g78	docs/icon.svg	/^       id="g78">$/;"	i
g79	docs/icon.svg	/^       id="g79">$/;"	i
g8	docs/icon.svg	/^       id="g8">$/;"	i
g80	docs/icon.svg	/^       id="g80">$/;"	i
g81	docs/icon.svg	/^       id="g81">$/;"	i
g82	docs/icon.svg	/^       id="g82">$/;"	i
g83	docs/icon.svg	/^       id="g83">$/;"	i
g84	docs/icon.svg	/^       id="g84">$/;"	i
g85	docs/icon.svg	/^       id="g85">$/;"	i
g86	docs/icon.svg	/^       id="g86">$/;"	i
g87	docs/icon.svg	/^       id="g87">$/;"	i
g88	docs/icon.svg	/^       id="g88">$/;"	i
g89	docs/icon.svg	/^       id="g89">$/;"	i
g9	docs/icon.svg	/^       id="g9">$/;"	i
g90	docs/icon.svg	/^       id="g90">$/;"	i
g91	docs/icon.svg	/^       id="g91">$/;"	i
g92	docs/icon.svg	/^       id="g92">$/;"	i
g93	docs/icon.svg	/^       id="g93">$/;"	i
g94	docs/icon.svg	/^       id="g94">$/;"	i
g95	docs/icon.svg	/^       id="g95">$/;"	i
g96	docs/icon.svg	/^       id="g96">$/;"	i
g97	docs/icon.svg	/^       id="g97">$/;"	i
g98	docs/icon.svg	/^       id="g98">$/;"	i
g99	docs/icon.svg	/^       id="g99">$/;"	i
gaussian_kernel	multipers/ml/convolutions.py	/^def gaussian_kernel(x_i, y_j, bandwidth):$/;"	f
gd	multipers/data/MOL2.py	/^    import gudhi as gd$/;"	I	function:_mol2ripsst	file:	nameref:module:gudhi
gd	multipers/io.pyx	/^import gudhi as gd$/;"	I	nameref:module:gudhi
gd	multipers/ml/one.py	/^import gudhi as gd$/;"	I	nameref:module:gudhi
gd	multipers/ml/point_clouds.py	/^import gudhi as gd$/;"	I	nameref:module:gudhi
gd	multipers/multiparameter_module_approximation.pyx	/^import gudhi as gd$/;"	I	nameref:module:gudhi
gd	multipers/tests/__init__.py	/^    import gudhi as gd$/;"	I	function:random_st	file:	nameref:module:gudhi
gd	multipers/tests/test_diff_helper.py	/^import gudhi as gd$/;"	I	nameref:module:gudhi
gd	multipers/tests/test_python-cpp_conversion.py	/^import gudhi as gd$/;"	I	nameref:module:gudhi
gd	multipers/tests/test_simplextreemulti.py	/^import gudhi as gd$/;"	I	nameref:module:gudhi
gd	multipers_old.py	/^import gudhi as gd$/;"	I	nameref:module:gudhi
generator_dimensions	multipers/gudhi/truc.h	/^  std::vector<int> generator_dimensions;$/;"	m	class:Gudhi::multiparameter::truc_interface::PresentationStructure	typeref:typename:std::vector<int>
generator_filtration_values	multipers/gudhi/truc.h	/^  std::vector<MultiFiltration> generator_filtration_values;  \/\/ defined at construction time. /;"	m	class:Gudhi::multiparameter::truc_interface::Truc	typeref:typename:std::vector<MultiFiltration>
generator_order	multipers/gudhi/truc.h	/^    std::vector<index_type> generator_order;                                 \/\/ size fixed at /;"	m	class:Gudhi::multiparameter::truc_interface::Truc::TrucThread	typeref:typename:std::vector<index_type>
generator_order	multipers/gudhi/truc.h	/^  std::vector<index_type> generator_order;  \/\/ size fixed at construction time, \/\/ TODO : CH/;"	m	class:Gudhi::multiparameter::truc_interface::Truc	typeref:typename:std::vector<index_type>
generators	multipers/gudhi/truc.h	/^  std::vector<std::vector<index_type>> generators;$/;"	m	class:Gudhi::multiparameter::truc_interface::PresentationStructure	typeref:typename:std::vector<std::vector<index_type>>
get	multipers/data/UCR.py	/^def get(dataset:str="UCR\/Coffee", test:bool=False, DATASET_PATH:str=expanduser("~\/Datasets\/")/;"	f
get	multipers/data/graphs.py	/^def get(dataset: str, filtration: Optional[str] = None):$/;"	f
get	multipers/data/immuno_regions.py	/^def get(DATASET_PATH = expanduser("~\/Datasets\/")):$/;"	f
get	multipers/data/shape3d.py	/^def get(dataset:str, num_graph=0, seed=0, node_per_graph=0):$/;"	f
get	multipers/gudhi/gudhi/persistence_interval.h	/^  constexpr auto& get() & noexcept {$/;"	f	struct:Gudhi::persistence_matrix::Persistence_interval	typeref:typename:auto &
get	multipers/gudhi/gudhi/persistence_interval.h	/^  constexpr auto&& get() && noexcept {$/;"	f	struct:Gudhi::persistence_matrix::Persistence_interval	typeref:typename:auto &&
get	multipers/gudhi/gudhi/persistence_interval.h	/^  constexpr const auto& get() const& noexcept {$/;"	f	struct:Gudhi::persistence_matrix::Persistence_interval	typeref:typename:const auto &
get	multipers/gudhi/gudhi/persistence_interval.h	/^  constexpr const auto&& get() const&& noexcept {$/;"	f	struct:Gudhi::persistence_matrix::Persistence_interval	typeref:typename:const auto &&
get	multipers/gudhi/gudhi/persistence_interval.h	/^constexpr auto& get(Gudhi::persistence_matrix::Persistence_interval<Dimension, Event_value>& i) /;"	f	namespace:std	typeref:typename:auto &
get	multipers/gudhi/gudhi/persistence_interval.h	/^constexpr auto&& get(Gudhi::persistence_matrix::Persistence_interval<Dimension, Event_value>&& i/;"	f	namespace:std	typeref:typename:auto &&
get	multipers/gudhi/gudhi/persistence_interval.h	/^constexpr const auto& get(const Gudhi::persistence_matrix::Persistence_interval<Dimension, Event/;"	f	namespace:std	typeref:typename:const auto &
get	multipers/gudhi/gudhi/persistence_interval.h	/^constexpr const auto&& get(const Gudhi::persistence_matrix::Persistence_interval<Dimension, Even/;"	f	namespace:std	typeref:typename:const auto &&
get_	multipers/data/shape3d.py	/^def get_(dataset:str, dataset_num:int|None=None, num_sample:int=0, DATASET_PATH = expanduser("~\//;"	f
get_2D_image_from_boundary_matrix	multipers/multiparameter_module_approximation/images.h	/^std::vector<std::vector<std::vector<double> > > get_2D_image_from_boundary_matrix($/;"	f	namespace:Gudhi::multiparameter::mma::representation	typeref:typename:std::vector<std::vector<std::vector<double>>>
get_2dpixel_value_function_type	multipers/multiparameter_module_approximation/approximation.h	/^  using get_2dpixel_value_function_type = std::function<value_type(const typename module_type::c/;"	t	class:Gudhi::multiparameter::mma::Module
get_EF_vector_from_distances	multipers/data/MOL2.py	/^def get_EF_vector_from_distances(distances, ytest, alpha=0.05):$/;"	f
get_ModelNet	multipers/data/shape3d.py	/^def get_ModelNet(dataset, num_graph, seed):$/;"	f
get_additive_identity	multipers/gudhi/gudhi/Fields/Multi_field.h	/^inline Multi_field_element<minimum, maximum> Multi_field_element<minimum, maximum>::get_additive/;"	f	class:Gudhi::persistence_fields::Multi_field_element	typeref:typename:Multi_field_element<minimum,maximum>
get_additive_identity	multipers/gudhi/gudhi/Fields/Multi_field_operators.h	/^  static const Element& get_additive_identity() { return additiveID_; }$/;"	f	class:Gudhi::persistence_fields::Multi_field_operators	typeref:typename:const Element &
get_additive_identity	multipers/gudhi/gudhi/Fields/Multi_field_shared.h	/^inline Shared_multi_field_element Shared_multi_field_element::get_additive_identity() {$/;"	f	class:Gudhi::persistence_fields::Shared_multi_field_element	typeref:typename:Shared_multi_field_element
get_additive_identity	multipers/gudhi/gudhi/Fields/Multi_field_small.h	/^  static Multi_field_element_with_small_characteristics get_additive_identity() {$/;"	f	class:Gudhi::persistence_fields::Multi_field_element_with_small_characteristics	typeref:typename:Multi_field_element_with_small_characteristics
get_additive_identity	multipers/gudhi/gudhi/Fields/Multi_field_small_operators.h	/^  static constexpr Element get_additive_identity() { return 0; }$/;"	f	class:Gudhi::persistence_fields::Multi_field_operators_with_small_characteristics	typeref:typename:Element
get_additive_identity	multipers/gudhi/gudhi/Fields/Multi_field_small_shared.h	/^  static Shared_multi_field_element_with_small_characteristics get_additive_identity() {$/;"	f	class:Gudhi::persistence_fields::Shared_multi_field_element_with_small_characteristics	typeref:typename:Shared_multi_field_element_with_small_characteristics
get_additive_identity	multipers/gudhi/gudhi/Fields/Z2_field.h	/^inline Z2_field_element Z2_field_element::get_additive_identity() { return Z2_field_element(); }$/;"	f	class:Gudhi::persistence_fields::Z2_field_element	typeref:typename:Z2_field_element
get_additive_identity	multipers/gudhi/gudhi/Fields/Z2_field_operators.h	/^  static constexpr Element get_additive_identity() { return false; }$/;"	f	class:Gudhi::persistence_fields::Z2_field_operators	typeref:typename:Element
get_additive_identity	multipers/gudhi/gudhi/Fields/Zp_field.h	/^  static Zp_field_element get_additive_identity() { return Zp_field_element<characteristic>(); }$/;"	f	class:Gudhi::persistence_fields::Zp_field_element	typeref:typename:Zp_field_element
get_additive_identity	multipers/gudhi/gudhi/Fields/Zp_field_operators.h	/^  static constexpr Element get_additive_identity() { return 0; }$/;"	f	class:Gudhi::persistence_fields::Zp_field_operators	typeref:typename:Element
get_additive_identity	multipers/gudhi/gudhi/Fields/Zp_field_shared.h	/^  static Shared_Zp_field_element get_additive_identity() { return Shared_Zp_field_element(); }$/;"	f	class:Gudhi::persistence_fields::Shared_Zp_field_element	typeref:typename:Shared_Zp_field_element
get_all_JC_path	multipers/data/MOL2.py	/^def get_all_JC_path():$/;"	f
get_bar	multipers/multiparameter_module_approximation/approximation.h	/^Summand<value_type>::get_bar(const Line<value_type> &l) const {$/;"	f	class:Gudhi::multiparameter::mma::Summand	typeref:typename:std::pair<typename Summand<value_type>::filtration_type,typename Summand<value_type>::filtration_type>
get_bar2	multipers/multiparameter_module_approximation/approximation.h	/^inline std::pair<value_type, value_type> Summand<value_type>::get_bar2(const Line<value_type> &l/;"	f	class:Gudhi::multiparameter::mma::Summand	typeref:typename:std::pair<value_type,value_type>
get_barcode	multipers/gudhi/mma_interface_coh.h	/^  Barcode get_barcode() {$/;"	f	class:Gudhi::multiparameter::truc_interface::Persistence_backend_cohomology	typeref:typename:Barcode
get_barcode	multipers/gudhi/mma_interface_h0.h	/^  Barcode get_barcode() { return Barcode(pers_, permutation_); }$/;"	f	class:Gudhi::multiparameter::truc_interface::Persistence_backend_h0	typeref:typename:Barcode
get_barcode	multipers/gudhi/mma_interface_matrix.h	/^  inline Barcode get_barcode() { return Barcode(matrix_, permutation_); }$/;"	f	class:Gudhi::multiparameter::truc_interface::Persistence_backend_matrix	typeref:typename:Barcode
get_barcode	multipers/gudhi/naive_merge_tree.h	/^  const std::vector<Bar> &get_barcode() const { return barcode_.barcode_; }$/;"	f	class:Naive_merge_forest	typeref:typename:const std::vector<Bar> &
get_barcode	multipers/gudhi/truc.h	/^    inline split_barcode get_barcode() { return truc_ptr->get_barcode(this->persistence, this->f/;"	f	class:Gudhi::multiparameter::truc_interface::Truc::TrucThread	typeref:typename:split_barcode
get_barcode	multipers/gudhi/truc.h	/^  inline split_barcode get_barcode($/;"	f	class:Gudhi::multiparameter::truc_interface::Truc	typeref:typename:split_barcode
get_barcode	multipers/gudhi/truc.h	/^  inline split_barcode get_barcode() { return get_barcode(this->persistence, this->filtration_co/;"	f	class:Gudhi::multiparameter::truc_interface::Truc	typeref:typename:split_barcode
get_barcode	multipers/multiparameter_module_approximation/approximation.h	/^Module<value_type>::get_barcode(const Line<value_type> &l, const dimension_type dimension, const/;"	f	class:Gudhi::multiparameter::mma::Module	typeref:typename:MultiDiagram<typename Module<value_type>::filtration_type,value_type>
get_barcode2	multipers/multiparameter_module_approximation/approximation.h	/^std::vector<std::vector<std::pair<value_type, value_type>>> Module<value_type>::get_barcode2($/;"	f	class:Gudhi::multiparameter::mma::Module	typeref:typename:std::vector<std::vector<std::pair<value_type,value_type>>>
get_barcodes	multipers/multiparameter_module_approximation/approximation.h	/^MultiDiagrams<typename Module<value_type>::filtration_type, value_type> Module<value_type>::get_/;"	f	class:Gudhi::multiparameter::mma::Module	typeref:typename:MultiDiagrams<typename Module<value_type>::filtration_type,value_type>
get_barcodes2	multipers/multiparameter_module_approximation/approximation.h	/^std::vector<std::vector<std::vector<std::pair<value_type, value_type>>>> Module<value_type>::get/;"	f	class:Gudhi::multiparameter::mma::Module	typeref:typename:std::vector<std::vector<std::vector<std::pair<value_type,value_type>>>>
get_bc	multipers/distances.py	/^    def get_bc(b: PyMultiDiagrams_type, i: int) -> np.ndarray:$/;"	f	function:estimate_matching	typeref:typename:np.ndarray	file:
get_birth	multipers/multiparameter_module_approximation/utilities.h	/^  const filtration_type& get_birth() const { return birth; }$/;"	f	struct:Gudhi::multiparameter::mma::MultiDiagram_point	typeref:typename:const filtration_type &
get_birth_list	multipers/multiparameter_module_approximation/approximation.h	/^inline const std::vector<typename Summand<value_type>::filtration_type> &Summand<value_type>::ge/;"	f	class:Gudhi::multiparameter::mma::Summand	typeref:typename:const std::vector<typename Summand<value_type>::filtration_type> &
get_bootleneck_weight	multipers/gudhi/naive_merge_tree.h	/^  index get_bootleneck_weight(index id1, index id2) const {$/;"	f	class:Naive_bottleneck_forest	typeref:typename:index
get_boundaries	multipers/gudhi/truc.h	/^    inline const std::vector<std::vector<index_type>> &get_boundaries() const { return truc_ptr-/;"	f	class:Gudhi::multiparameter::truc_interface::Truc::TrucThread	typeref:typename:const std::vector<std::vector<index_type>> &
get_boundaries	multipers/gudhi/truc.h	/^  inline const std::vector<std::vector<index_type>> get_boundaries() {$/;"	f	class:Gudhi::multiparameter::truc_interface::Truc	typeref:typename:const std::vector<std::vector<index_type>>
get_boundary	multipers/multiparameter_module_approximation/vector_matrix.h	/^inline void Vector_matrix<Column_type>::get_boundary($/;"	f	class:Gudhi::multiparameter::mma::Vector_matrix	typeref:typename:void
get_boundary_iterators	multipers/gudhi/Simplex_tree_interface.h	/^  std::pair<Boundary_simplex_iterator, Boundary_simplex_iterator> get_boundary_iterators(const S/;"	f	class:Gudhi::Simplex_tree_interface	typeref:typename:std::pair<Boundary_simplex_iterator,Boundary_simplex_iterator>
get_boundary_of_a_cell	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^std::vector<std::size_t> Bitmap_cubical_complex_base<T>::get_boundary_of_a_cell(std::size_t cell/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base	typeref:typename:std::vector<std::size_t>
get_boundary_of_a_cell	multipers/gudhi/gudhi/Bitmap_cubical_complex_periodic_boundary_conditions_base.h	/^std::vector<std::size_t> Bitmap_cubical_complex_periodic_boundary_conditions_base<T>::get_bounda/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_periodic_boundary_conditions_base	typeref:typename:std::vector<std::size_t>
get_bounding_box	multipers/gudhi/truc.h	/^    inline std::pair<MultiFiltration, MultiFiltration> get_bounding_box() const { return truc_pt/;"	f	class:Gudhi::multiparameter::truc_interface::Truc::TrucThread	typeref:typename:std::pair<MultiFiltration,MultiFiltration>
get_bounding_box	multipers/gudhi/truc.h	/^  inline std::pair<typename MultiFiltration::Generator, typename MultiFiltration::Generator> get/;"	f	class:Gudhi::multiparameter::truc_interface::Truc	typeref:typename:std::pair<typename MultiFiltration::Generator,typename MultiFiltration::Generator>
get_bounding_corners	multipers/gudhi/gudhi/Multi_persistence/Box.h	/^  std::pair<Point &, Point &> get_bounding_corners() { return {lowerCorner_, upperCorner_}; }$/;"	f	class:Gudhi::multi_persistence::Box	typeref:typename:std::pair<Point &,Point &>
get_bounding_corners	multipers/gudhi/gudhi/Multi_persistence/Box.h	/^  std::pair<const Point &, const Point &> get_bounding_corners() const { return {lowerCorner_, u/;"	f	class:Gudhi::multi_persistence::Box	typeref:typename:std::pair<const Point &,const Point &>
get_bounds	multipers/gudhi/gudhi/Multi_persistence/Line.h	/^  std::pair<T, T> get_bounds(const Box<T> &box) const {$/;"	f	class:Gudhi::multi_persistence::Line	typeref:typename:std::pair<T,T>
get_bounds	multipers/multiparameter_module_approximation/approximation.h	/^  inline Box<value_type> get_bounds() const {$/;"	f	class:Gudhi::multiparameter::mma::Summand	typeref:typename:Box<value_type>
get_bounds	multipers/multiparameter_module_approximation/approximation.h	/^inline Box<value_type> Module<value_type>::get_bounds() const {$/;"	f	class:Gudhi::multiparameter::mma::Module	typeref:typename:Box<value_type>
get_box	multipers/multiparameter_module_approximation/approximation.h	/^inline Box<value_type> Module<value_type>::get_box() const {$/;"	f	class:Gudhi::multiparameter::mma::Module	typeref:typename:Box<value_type>
get_cell_data	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^inline T& Bitmap_cubical_complex_base<T>::get_cell_data(std::size_t cell) {$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base	typeref:typename:T &
get_characteristic	multipers/gudhi/gudhi/Fields/Multi_field.h	/^Multi_field_element<minimum, maximum>::get_characteristic() {$/;"	f	class:Gudhi::persistence_fields::Multi_field_element	typeref:typename:Multi_field_element<minimum,maximum>::Characteristic
get_characteristic	multipers/gudhi/gudhi/Fields/Multi_field_operators.h	/^  const Characteristic& get_characteristic() const { return productOfAllCharacteristics_; }$/;"	f	class:Gudhi::persistence_fields::Multi_field_operators	typeref:typename:const Characteristic &
get_characteristic	multipers/gudhi/gudhi/Fields/Multi_field_shared.h	/^inline Shared_multi_field_element::Characteristic Shared_multi_field_element::get_characteristic/;"	f	class:Gudhi::persistence_fields::Shared_multi_field_element	typeref:typename:Shared_multi_field_element::Characteristic
get_characteristic	multipers/gudhi/gudhi/Fields/Multi_field_small.h	/^  static constexpr Characteristic get_characteristic() { return productOfAllCharacteristics_; }$/;"	f	class:Gudhi::persistence_fields::Multi_field_element_with_small_characteristics	typeref:typename:Characteristic
get_characteristic	multipers/gudhi/gudhi/Fields/Multi_field_small_operators.h	/^  const Characteristic& get_characteristic() const { return productOfAllCharacteristics_; }$/;"	f	class:Gudhi::persistence_fields::Multi_field_operators_with_small_characteristics	typeref:typename:const Characteristic &
get_characteristic	multipers/gudhi/gudhi/Fields/Multi_field_small_shared.h	/^  static Characteristic get_characteristic() { return productOfAllCharacteristics_; }$/;"	f	class:Gudhi::persistence_fields::Shared_multi_field_element_with_small_characteristics	typeref:typename:Characteristic
get_characteristic	multipers/gudhi/gudhi/Fields/Z2_field.h	/^inline constexpr unsigned int Z2_field_element::get_characteristic() { return 2; }$/;"	f	class:Gudhi::persistence_fields::Z2_field_element	typeref:typename:unsigned int
get_characteristic	multipers/gudhi/gudhi/Fields/Z2_field_operators.h	/^  static constexpr Characteristic get_characteristic() { return 2; }$/;"	f	class:Gudhi::persistence_fields::Z2_field_operators	typeref:typename:Characteristic
get_characteristic	multipers/gudhi/gudhi/Fields/Zp_field.h	/^  static constexpr unsigned int get_characteristic() { return characteristic; }$/;"	f	class:Gudhi::persistence_fields::Zp_field_element	typeref:typename:unsigned int
get_characteristic	multipers/gudhi/gudhi/Fields/Zp_field_operators.h	/^  const Characteristic& get_characteristic() const { return characteristic_; }$/;"	f	class:Gudhi::persistence_fields::Zp_field_operators	typeref:typename:const Characteristic &
get_characteristic	multipers/gudhi/gudhi/Fields/Zp_field_shared.h	/^  static Characteristic get_characteristic() { return characteristic_; }$/;"	f	class:Gudhi::persistence_fields::Shared_Zp_field_element	typeref:typename:Characteristic
get_coboundary_of_a_cell	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^std::vector<std::size_t> Bitmap_cubical_complex_base<T>::get_coboundary_of_a_cell(std::size_t ce/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base	typeref:typename:std::vector<std::size_t>
get_coboundary_of_a_cell	multipers/gudhi/gudhi/Bitmap_cubical_complex_periodic_boundary_conditions_base.h	/^std::vector<std::size_t> Bitmap_cubical_complex_periodic_boundary_conditions_base<T>::get_coboun/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_periodic_boundary_conditions_base	typeref:typename:std::vector<std::size_t>
get_cofaces	multipers/gudhi/Simplex_tree_interface.h	/^  Filtered_simplices get_cofaces(const Simplex& simplex, int dimension) {$/;"	f	class:Gudhi::Simplex_tree_interface	typeref:typename:Filtered_simplices
get_cofaces	multipers/gudhi/Simplex_tree_multi_interface.h	/^  Filtered_simplices get_cofaces(const Simplex &simplex, int dimension) {$/;"	f	class:Gudhi::multiparameter::python_interface::Simplex_tree_multi_interface	typeref:typename:Filtered_simplices
get_column	multipers/gudhi/gudhi/Matrix.h	/^inline const typename Matrix<PersistenceMatrixOptions>::Column& Matrix<PersistenceMatrixOptions>/;"	f	class:Gudhi::persistence_matrix::Matrix	typeref:typename:const typename Matrix<PersistenceMatrixOptions>::Column &
get_column	multipers/gudhi/gudhi/Matrix.h	/^inline typename Matrix<PersistenceMatrixOptions>::Returned_column& Matrix<PersistenceMatrixOptio/;"	f	class:Gudhi::persistence_matrix::Matrix	typeref:typename:Matrix<PersistenceMatrixOptions>::Returned_column &
get_column	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix.h	/^inline typename Base_matrix<Master_matrix>::Column& Base_matrix<Master_matrix>::get_column(Index/;"	f	class:Gudhi::persistence_matrix::Base_matrix	typeref:typename:Base_matrix<Master_matrix>::Column &
get_column	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix_with_column_compression.h	/^Base_matrix_with_column_compression<Master_matrix>::get_column(Index columnIndex) $/;"	f	class:Gudhi::persistence_matrix::Base_matrix_with_column_compression	typeref:typename:const typename Base_matrix_with_column_compression<Master_matrix>::Column &
get_column	multipers/gudhi/gudhi/Persistence_matrix/Boundary_matrix.h	/^inline typename Boundary_matrix<Master_matrix>::Column& Boundary_matrix<Master_matrix>::get_colu/;"	f	class:Gudhi::persistence_matrix::Boundary_matrix	typeref:typename:Boundary_matrix<Master_matrix>::Column &
get_column	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^inline const typename Chain_matrix<Master_matrix>::Column& Chain_matrix<Master_matrix>::get_colu/;"	f	class:Gudhi::persistence_matrix::Chain_matrix	typeref:typename:const typename Chain_matrix<Master_matrix>::Column &
get_column	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^inline typename Chain_matrix<Master_matrix>::Column& Chain_matrix<Master_matrix>::get_column(Ind/;"	f	class:Gudhi::persistence_matrix::Chain_matrix	typeref:typename:Chain_matrix<Master_matrix>::Column &
get_column	multipers/gudhi/gudhi/Persistence_matrix/Id_to_index_overlay.h	/^Id_to_index_overlay<Underlying_matrix, Master_matrix>::get_column(ID_index cellID) $/;"	f	class:Gudhi::persistence_matrix::Id_to_index_overlay	typeref:typename:Id_to_index_overlay<Underlying_matrix,Master_matrix>::Column &
get_column	multipers/gudhi/gudhi/Persistence_matrix/Position_to_index_overlay.h	/^Position_to_index_overlay<Underlying_matrix, Master_matrix>::get_column(Pos_index position) $/;"	f	class:Gudhi::persistence_matrix::Position_to_index_overlay	typeref:typename:Position_to_index_overlay<Underlying_matrix,Master_matrix>::Column &
get_column	multipers/gudhi/gudhi/Persistence_matrix/Position_to_index_overlay.h	/^Position_to_index_overlay<Underlying_matrix, Master_matrix>::get_column(Pos_index position) cons/;"	f	class:Gudhi::persistence_matrix::Position_to_index_overlay	typeref:typename:const typename Position_to_index_overlay<Underlying_matrix,Master_matrix>::Column &
get_column	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^inline typename RU_matrix<Master_matrix>::Column& RU_matrix<Master_matrix>::get_column(Index col/;"	f	class:Gudhi::persistence_matrix::RU_matrix	typeref:typename:RU_matrix<Master_matrix>::Column &
get_column	multipers/multiparameter_module_approximation/vector_matrix.h	/^inline Column_type& Vector_matrix<Column_type>::get_column(index columnIndex)$/;"	f	class:Gudhi::multiparameter::mma::Vector_matrix	typeref:typename:Column_type &
get_column_dimension	multipers/gudhi/gudhi/Matrix.h	/^inline typename Matrix<PersistenceMatrixOptions>::Dimension Matrix<PersistenceMatrixOptions>::ge/;"	f	class:Gudhi::persistence_matrix::Matrix	typeref:typename:Matrix<PersistenceMatrixOptions>::Dimension
get_column_dimension	multipers/gudhi/gudhi/Persistence_matrix/Boundary_matrix.h	/^inline typename Boundary_matrix<Master_matrix>::Dimension Boundary_matrix<Master_matrix>::get_co/;"	f	class:Gudhi::persistence_matrix::Boundary_matrix	typeref:typename:Boundary_matrix<Master_matrix>::Dimension
get_column_dimension	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^inline typename Chain_matrix<Master_matrix>::Dimension Chain_matrix<Master_matrix>::get_column_d/;"	f	class:Gudhi::persistence_matrix::Chain_matrix	typeref:typename:Chain_matrix<Master_matrix>::Dimension
get_column_dimension	multipers/gudhi/gudhi/Persistence_matrix/Id_to_index_overlay.h	/^Id_to_index_overlay<Underlying_matrix, Master_matrix>::get_column_dimension(ID_index cellID) con/;"	f	class:Gudhi::persistence_matrix::Id_to_index_overlay	typeref:typename:Id_to_index_overlay<Underlying_matrix,Master_matrix>::Dimension
get_column_dimension	multipers/gudhi/gudhi/Persistence_matrix/Position_to_index_overlay.h	/^Position_to_index_overlay<Underlying_matrix, Master_matrix>::get_column_dimension(Pos_index posi/;"	f	class:Gudhi::persistence_matrix::Position_to_index_overlay	typeref:typename:Position_to_index_overlay<Underlying_matrix,Master_matrix>::Dimension
get_column_dimension	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^inline typename RU_matrix<Master_matrix>::Dimension RU_matrix<Master_matrix>::get_column_dimensi/;"	f	class:Gudhi::persistence_matrix::RU_matrix	typeref:typename:RU_matrix<Master_matrix>::Dimension
get_column_dimension	multipers/multiparameter_module_approximation/vector_matrix.h	/^inline dimension_type Vector_matrix<Column_type>::get_column_dimension(index columnIndex) const$/;"	f	class:Gudhi::multiparameter::mma::Vector_matrix	typeref:typename:dimension_type
get_column_index	multipers/gudhi/gudhi/Persistence_matrix/columns/entry_types.h	/^  Index get_column_index() const { return columnIndex_; };$/;"	f	class:Gudhi::persistence_matrix::Entry_column_index	typeref:typename:Index
get_column_index	multipers/gudhi/gudhi/Persistence_matrix/columns/row_access.h	/^inline typename Row_access<Master_matrix>::Index Row_access<Master_matrix>::get_column_index() c/;"	f	class:Gudhi::persistence_matrix::Row_access	typeref:typename:Row_access<Master_matrix>::Index
get_column_with_pivot	multipers/gudhi/gudhi/Matrix.h	/^inline typename Matrix<PersistenceMatrixOptions>::Index Matrix<PersistenceMatrixOptions>::get_co/;"	f	class:Gudhi::persistence_matrix::Matrix	typeref:typename:Matrix<PersistenceMatrixOptions>::Index
get_column_with_pivot	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^inline typename Chain_matrix<Master_matrix>::Index Chain_matrix<Master_matrix>::get_column_with_/;"	f	class:Gudhi::persistence_matrix::Chain_matrix	typeref:typename:Chain_matrix<Master_matrix>::Index
get_column_with_pivot	multipers/gudhi/gudhi/Persistence_matrix/Id_to_index_overlay.h	/^Id_to_index_overlay<Underlying_matrix, Master_matrix>::get_column_with_pivot(ID_index simplexInd/;"	f	class:Gudhi::persistence_matrix::Id_to_index_overlay	typeref:typename:Id_to_index_overlay<Underlying_matrix,Master_matrix>::ID_index
get_column_with_pivot	multipers/gudhi/gudhi/Persistence_matrix/Position_to_index_overlay.h	/^Position_to_index_overlay<Underlying_matrix, Master_matrix>::get_column_with_pivot(ID_index cell/;"	f	class:Gudhi::persistence_matrix::Position_to_index_overlay	typeref:typename:Position_to_index_overlay<Underlying_matrix,Master_matrix>::Pos_index
get_column_with_pivot	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^inline typename RU_matrix<Master_matrix>::Index RU_matrix<Master_matrix>::get_column_with_pivot(/;"	f	class:Gudhi::persistence_matrix::RU_matrix	typeref:typename:RU_matrix<Master_matrix>::Index
get_content	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^inline std::vector<typename Heap_column<Master_matrix>::Field_element> Heap_column<Master_matrix/;"	f	class:Gudhi::persistence_matrix::Heap_column	typeref:typename:std::vector<typename Heap_column<Master_matrix>::Field_element>
get_content	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^Intrusive_list_column<Master_matrix>::get_content(int columnLength) const$/;"	f	class:Gudhi::persistence_matrix::Intrusive_list_column	typeref:typename:std::vector<typename Intrusive_list_column<Master_matrix>::Field_element>
get_content	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^Intrusive_set_column<Master_matrix>::get_content(int columnLength) const$/;"	f	class:Gudhi::persistence_matrix::Intrusive_set_column	typeref:typename:std::vector<typename Intrusive_set_column<Master_matrix>::Field_element>
get_content	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^inline std::vector<typename List_column<Master_matrix>::Field_element> List_column<Master_matrix/;"	f	class:Gudhi::persistence_matrix::List_column	typeref:typename:std::vector<typename List_column<Master_matrix>::Field_element>
get_content	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^Naive_vector_column<Master_matrix>::get_content(int columnLength) const$/;"	f	class:Gudhi::persistence_matrix::Naive_vector_column	typeref:typename:std::vector<typename Naive_vector_column<Master_matrix>::Field_element>
get_content	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^inline std::vector<typename Set_column<Master_matrix>::Field_element> Set_column<Master_matrix>:/;"	f	class:Gudhi::persistence_matrix::Set_column	typeref:typename:std::vector<typename Set_column<Master_matrix>::Field_element>
get_content	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^Small_vector_column<Master_matrix>::get_content(int columnLength) const$/;"	f	class:Gudhi::persistence_matrix::Small_vector_column	typeref:typename:std::vector<typename Small_vector_column<Master_matrix>::Field_element>
get_content	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^Unordered_set_column<Master_matrix>::get_content(int columnLength) const$/;"	f	class:Gudhi::persistence_matrix::Unordered_set_column	typeref:typename:std::vector<typename Unordered_set_column<Master_matrix>::Field_element>
get_content	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^inline std::vector<typename Vector_column<Master_matrix>::Field_element> Vector_column<Master_ma/;"	f	class:Gudhi::persistence_matrix::Vector_column	typeref:typename:std::vector<typename Vector_column<Master_matrix>::Field_element>
get_content	multipers/multiparameter_module_approximation/heap_column.h	/^inline void Heap_column::get_content(boundary_type &container)$/;"	f	class:Vineyard::Heap_column	typeref:typename:void
get_content	multipers/multiparameter_module_approximation/list_column.h	/^inline void List_column::get_content(boundary_type &container)$/;"	f	class:Vineyard::List_column	typeref:typename:void
get_content	multipers/multiparameter_module_approximation/list_column_2.h	/^inline void List_column::get_content(boundary_type &container)$/;"	f	class:Vineyard::List_column	typeref:typename:void
get_content	multipers/multiparameter_module_approximation/set_column.h	/^inline void Set_column::get_content(boundary_type &container)$/;"	f	class:Gudhi::multiparameter::mma::Set_column	typeref:typename:void
get_content	multipers/multiparameter_module_approximation/unordered_set_column.h	/^inline void Unordered_set_column::get_content(boundary_type &container)$/;"	f	class:Vineyard::Unordered_set_column	typeref:typename:void
get_content	multipers/multiparameter_module_approximation/vector_column.h	/^inline void Vector_column::get_content(boundary_type &container)$/;"	f	class:Vineyard::Vector_column	typeref:typename:void
get_coordinates	multipers/multi_parameter_rank_invariant/rank_invariant.h	/^inline std::pair<index_type, index_type> get_coordinates(index_type in_slice_value, index_type I/;"	f	namespace:Gudhi::multiparameter::rank_invariant	typeref:typename:std::pair<index_type,index_type>
get_corners_of_dimension	multipers/multiparameter_module_approximation/approximation.h	/^Module<value_type>::get_corners_of_dimension(const int dimension) const {$/;"	f	class:Gudhi::multiparameter::mma::Module
get_cum_resolution	multipers/tensor/tensor.h	/^  inline const std::vector<indices_type> &get_cum_resolution() const { return cum_prod_resolutio/;"	f	class:tensor::static_tensor_view	typeref:typename:const std::vector<indices_type> &
get_current_barcode	multipers/gudhi/gudhi/Matrix.h	/^Matrix<PersistenceMatrixOptions>::get_current_barcode() const$/;"	f	class:Gudhi::persistence_matrix::Matrix	typeref:typename:const typename Matrix<PersistenceMatrixOptions>::Barcode &
get_current_barcode	multipers/gudhi/gudhi/Matrix.h	/^Matrix<PersistenceMatrixOptions>::get_current_barcode()$/;"	f	class:Gudhi::persistence_matrix::Matrix	typeref:typename:const typename Matrix<PersistenceMatrixOptions>::Barcode &
get_current_barcode	multipers/gudhi/gudhi/Persistence_matrix/Id_to_index_overlay.h	/^Id_to_index_overlay<Underlying_matrix, Master_matrix>::get_current_barcode() $/;"	f	class:Gudhi::persistence_matrix::Id_to_index_overlay	typeref:typename:const typename Id_to_index_overlay<Underlying_matrix,Master_matrix>::Barcode &
get_current_barcode	multipers/gudhi/gudhi/Persistence_matrix/Position_to_index_overlay.h	/^Position_to_index_overlay<Underlying_matrix, Master_matrix>::get_current_barcode() const $/;"	f	class:Gudhi::persistence_matrix::Position_to_index_overlay	typeref:typename:const typename Position_to_index_overlay<Underlying_matrix,Master_matrix>::Barcode &
get_current_barcode	multipers/gudhi/gudhi/Persistence_matrix/base_pairing.h	/^inline const typename Base_pairing<Master_matrix>::Barcode& Base_pairing<Master_matrix>::get_cur/;"	f	class:Gudhi::persistence_matrix::Base_pairing	typeref:typename:const typename Base_pairing<Master_matrix>::Barcode &
get_current_barcode	multipers/gudhi/gudhi/Persistence_matrix/chain_pairing.h	/^inline const typename Chain_pairing<Master_matrix>::Barcode& Chain_pairing<Master_matrix>::get_c/;"	f	class:Gudhi::persistence_matrix::Chain_pairing	typeref:typename:const typename Chain_pairing<Master_matrix>::Barcode &
get_current_barcode	multipers/gudhi/gudhi/Persistence_matrix/ru_pairing.h	/^  const Barcode& get_current_barcode() const { return barcode_; }$/;"	f	class:Gudhi::persistence_matrix::RU_pairing	typeref:typename:const Barcode &
get_current_barcode	multipers/multiparameter_module_approximation/ru_matrix.h	/^inline const barcode_type &RU_matrix<Column_type>::get_current_barcode() {$/;"	f	class:Gudhi::multiparameter::mma::RU_matrix	typeref:typename:const barcode_type &
get_current_boundary_matrix	multipers/gudhi/truc.h	/^  std::vector<std::pair<int, std::vector<index_type>>> get_current_boundary_matrix() {$/;"	f	class:Gudhi::multiparameter::truc_interface::Truc	typeref:typename:std::vector<std::pair<int,std::vector<index_type>>>
get_current_order	multipers/gudhi/truc.h	/^    inline const std::vector<index_type> &get_current_order() const { return generator_order; }$/;"	f	class:Gudhi::multiparameter::truc_interface::Truc::TrucThread	typeref:typename:const std::vector<index_type> &
get_current_order	multipers/gudhi/truc.h	/^  const std::vector<index_type> &get_current_order() const { return generator_order; }$/;"	f	class:Gudhi::multiparameter::truc_interface::Truc	typeref:typename:const std::vector<index_type> &
get_data_path_JC	multipers/data/MOL2.py	/^def get_data_path_JC(type="dict"):$/;"	f
get_death	multipers/multiparameter_module_approximation/utilities.h	/^  const filtration_type& get_death() const { return death; }$/;"	f	struct:Gudhi::multiparameter::mma::MultiDiagram_point	typeref:typename:const filtration_type &
get_death_list	multipers/multiparameter_module_approximation/approximation.h	/^inline const std::vector<typename Summand<value_type>::filtration_type> &Summand<value_type>::ge/;"	f	class:Gudhi::multiparameter::mma::Summand	typeref:typename:const std::vector<typename Summand<value_type>::filtration_type> &
get_degree_filtrations	multipers/multi_parameter_rank_invariant/function_rips.h	/^inline get_degree_filtrations( \/\/ also return max_degree,filtration_values$/;"	f	namespace:Gudhi::multiparameter::function_rips	typeref:typename:std::tuple<_multist,std::vector<value_type>,int>
get_degree_rips	multipers/function_rips.pyx	/^def get_degree_rips(st, vector[int] degrees, grid_strategy="exact", resolution=0):$/;"	f
get_degree_rips_st_python	multipers/multi_parameter_rank_invariant/function_rips.h	/^inline get_degree_rips_st_python(const intptr_t simplextree_ptr,$/;"	f	namespace:Gudhi::multiparameter::function_rips	typeref:typename:std::pair<std::vector<value_type>,int>
get_degree_splits	multipers/multiparameter_module_approximation/approximation.h	/^std::vector<int> inline Module<value_type>::get_degree_splits() const {$/;"	f	class:Gudhi::multiparameter::mma::Module	typeref:typename:std::vector<int>
get_diagram	multipers/multiparameter_module_approximation/vineyards.h	/^inline const diagram_type& Vineyard_persistence<Vineyard_matrix_type>::get_diagram()$/;"	f	class:Gudhi::multiparameter::mma::Vineyard_persistence	typeref:typename:const diagram_type &
get_dimension	multipers/gudhi/gudhi/Persistence_matrix/columns/column_dimension_holder.h	/^  Dimension get_dimension() const { return dim_; }$/;"	f	struct:Gudhi::persistence_matrix::Column_dimension_holder	typeref:typename:Dimension
get_dimension	multipers/gudhi/mma_interface_coh.h	/^  dimension_type get_dimension(pos_index i) { return matrix_.dimension(matrix_.simplex(i)); }$/;"	f	class:Gudhi::multiparameter::truc_interface::Persistence_backend_cohomology	typeref:typename:dimension_type
get_dimension	multipers/gudhi/mma_interface_h0.h	/^  dimension_type get_dimension(pos_index i) { return pers_.get_dimension(i); }$/;"	f	class:Gudhi::multiparameter::truc_interface::Persistence_backend_h0	typeref:typename:dimension_type
get_dimension	multipers/gudhi/mma_interface_matrix.h	/^  inline dimension_type get_dimension(pos_index i) { return matrix_.get_column_dimension(i); }$/;"	f	class:Gudhi::multiparameter::truc_interface::Persistence_backend_matrix	typeref:typename:dimension_type
get_dimension	multipers/gudhi/naive_merge_tree.h	/^  int get_dimension(index position) {$/;"	f	class:Naive_merge_forest	typeref:typename:int
get_dimension	multipers/multiparameter_module_approximation/approximation.h	/^inline dimension_type Module<value_type>::get_dimension() const {$/;"	f	class:Gudhi::multiparameter::mma::Module	typeref:typename:dimension_type
get_dimension	multipers/multiparameter_module_approximation/approximation.h	/^inline dimension_type Summand<value_type>::get_dimension() const {$/;"	f	class:Gudhi::multiparameter::mma::Summand	typeref:typename:dimension_type
get_dimension	multipers/multiparameter_module_approximation/heap_column.h	/^inline dimension_type Heap_column::get_dimension() const$/;"	f	class:Vineyard::Heap_column	typeref:typename:dimension_type
get_dimension	multipers/multiparameter_module_approximation/list_column.h	/^inline dimension_type List_column::get_dimension() const$/;"	f	class:Vineyard::List_column	typeref:typename:dimension_type
get_dimension	multipers/multiparameter_module_approximation/list_column_2.h	/^inline dimension_type List_column::get_dimension() const$/;"	f	class:Vineyard::List_column	typeref:typename:dimension_type
get_dimension	multipers/multiparameter_module_approximation/ru_matrix.h	/^inline dimension_type RU_matrix<Column_type>::get_dimension(index index) {$/;"	f	class:Gudhi::multiparameter::mma::RU_matrix	typeref:typename:dimension_type
get_dimension	multipers/multiparameter_module_approximation/set_column.h	/^inline dimension_type Set_column::get_dimension() const$/;"	f	class:Gudhi::multiparameter::mma::Set_column	typeref:typename:dimension_type
get_dimension	multipers/multiparameter_module_approximation/unordered_set_column.h	/^inline dimension_type Unordered_set_column::get_dimension() const$/;"	f	class:Vineyard::Unordered_set_column	typeref:typename:dimension_type
get_dimension	multipers/multiparameter_module_approximation/utilities.h	/^  dimension_type get_dimension() const { return dim; }$/;"	f	struct:Gudhi::multiparameter::mma::MultiDiagram_point	typeref:typename:dimension_type
get_dimension	multipers/multiparameter_module_approximation/vector_column.h	/^inline dimension_type Vector_column::get_dimension() const$/;"	f	class:Vineyard::Vector_column	typeref:typename:dimension_type
get_dimension_of_a_cell	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^unsigned Bitmap_cubical_complex_base<T>::get_dimension_of_a_cell(std::size_t cell) const {$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base	typeref:typename:unsigned
get_dimensions	multipers/gudhi/truc.h	/^    inline const std::vector<int> &get_dimensions() const { return truc_ptr->get_dimensions(); }$/;"	f	class:Gudhi::multiparameter::truc_interface::Truc::TrucThread	typeref:typename:const std::vector<int> &
get_dimensions	multipers/gudhi/truc.h	/^  inline const std::vector<int> get_dimensions() const {$/;"	f	class:Gudhi::multiparameter::truc_interface::Truc	typeref:typename:const std::vector<int>
get_downset	multipers/multiparameter_module_approximation/approximation.h	/^const Gudhi::multi_filtration::Multi_critical_filtration<value_type> &Summand<value_type>::get_d/;"	f	class:Gudhi::multiparameter::mma::Summand	typeref:typename:const Gudhi::multi_filtration::Multi_critical_filtration<value_type> &
get_edge_list	multipers/gudhi/Simplex_tree_multi_interface.h	/^  edge_list get_edge_list() {$/;"	f	class:Gudhi::multiparameter::python_interface::Simplex_tree_multi_interface	typeref:typename:edge_list
get_element	multipers/gudhi/gudhi/Persistence_matrix/columns/entry_types.h	/^  Field_element& get_element() { return element_; };$/;"	f	class:Gudhi::persistence_matrix::Entry_field_element	typeref:typename:Field_element &
get_element	multipers/gudhi/gudhi/Persistence_matrix/columns/entry_types.h	/^  const Field_element& get_element() const { return element_; };$/;"	f	class:Gudhi::persistence_matrix::Entry_field_element	typeref:typename:const Field_element &
get_euler_signed_measure	multipers/multi_parameter_rank_invariant/euler_characteristic.h	/^std::pair<std::vector<std::vector<indices_type>>, std::vector<dtype>> get_euler_signed_measure($/;"	f	namespace:Gudhi::multiparameter::euler_characteristic	typeref:typename:std::pair<std::vector<std::vector<indices_type>>,std::vector<dtype>>
get_euler_surface	multipers/multi_parameter_rank_invariant/euler_characteristic.h	/^void get_euler_surface($/;"	f	namespace:Gudhi::multiparameter::euler_characteristic	typeref:typename:void
get_euler_surface_python	multipers/multi_parameter_rank_invariant/euler_characteristic.h	/^void get_euler_surface_python($/;"	f	namespace:Gudhi::multiparameter::euler_characteristic	typeref:typename:void
get_filter_from_line	multipers/multiparameter_module_approximation/vineyards_trajectories.h	/^void get_filter_from_line(const point_type &lineBasepoint,$/;"	f	namespace:Gudhi::multiparameter::mma	typeref:typename:void
get_filtration_iterator_begin	multipers/gudhi/Simplex_tree_interface.h	/^  typename std::vector<Simplex_handle>::const_iterator get_filtration_iterator_begin() {$/;"	f	class:Gudhi::Simplex_tree_interface	typeref:typename:std::vector<Simplex_handle>::const_iterator
get_filtration_iterator_end	multipers/gudhi/Simplex_tree_interface.h	/^  typename std::vector<Simplex_handle>::const_iterator get_filtration_iterator_end() {$/;"	f	class:Gudhi::Simplex_tree_interface	typeref:typename:std::vector<Simplex_handle>::const_iterator
get_filtration_values	multipers/gudhi/Simplex_tree_multi_interface.h	/^  get_filtration_values(const std::vector<int> &degrees) {$/;"	f	class:Gudhi::multiparameter::python_interface::Simplex_tree_multi_interface	typeref:typename:std::vector<std::vector<std::vector<value_type>>>
get_filtration_values	multipers/gudhi/truc.h	/^  inline std::vector<typename MultiFiltration::Generator> get_filtration_values() const {$/;"	f	class:Gudhi::multiparameter::truc_interface::Truc	typeref:typename:std::vector<typename MultiFiltration::Generator>
get_filtration_values	multipers/ml/one.py	/^def get_filtration_values(g:nx.Graph, f:str)->np.ndarray:$/;"	f	typeref:typename:np.ndarray
get_filtration_values_from_ptr	multipers/gudhi/Simplex_tree_multi_interface.h	/^get_filtration_values_from_ptr(uintptr_t splxptr, Args... args) {$/;"	f	namespace:Gudhi::multiparameter::python_interface	typeref:typename:std::vector<std::vector<std::vector<Filtration>>>
get_filtration_weights_grid	multipers/ml/tools.py	/^def get_filtration_weights_grid($/;"	f
get_filtrations	multipers/gudhi/truc.h	/^    inline const std::vector<MultiFiltration> &get_filtrations() const { return truc_ptr->get_fi/;"	f	class:Gudhi::multiparameter::truc_interface::Truc::TrucThread	typeref:typename:const std::vector<MultiFiltration> &
get_filtrations	multipers/gudhi/truc.h	/^  inline const std::vector<MultiFiltration> &get_filtrations() const { return generator_filtrati/;"	f	class:Gudhi::multiparameter::truc_interface::Truc	typeref:typename:const std::vector<MultiFiltration> &
get_filtrations	multipers/gudhi/truc.h	/^  inline std::vector<MultiFiltration> &get_filtrations() { return generator_filtration_values; }$/;"	f	class:Gudhi::multiparameter::truc_interface::Truc	typeref:typename:std::vector<MultiFiltration> &
get_flat_barcode	multipers/gudhi/truc.h	/^    inline flat_barcode<value_type> get_flat_barcode() {$/;"	f	class:Gudhi::multiparameter::truc_interface::Truc::TrucThread	typeref:typename:flat_barcode<value_type>
get_flat_barcode	multipers/gudhi/truc.h	/^  inline flat_barcode<value_type> get_flat_barcode() {$/;"	f	class:Gudhi::multiparameter::truc_interface::Truc	typeref:typename:flat_barcode<value_type>
get_flat_barcode	multipers/gudhi/truc.h	/^  static inline flat_barcode<value_type> get_flat_barcode($/;"	f	class:Gudhi::multiparameter::truc_interface::Truc	typeref:typename:flat_barcode<value_type>
get_flat_nodim_barcode	multipers/gudhi/truc.h	/^    inline flat_nodim_barcode<value_type> get_flat_nodim_barcode() {$/;"	f	class:Gudhi::multiparameter::truc_interface::Truc::TrucThread	typeref:typename:flat_nodim_barcode<value_type>
get_flat_nodim_barcode	multipers/gudhi/truc.h	/^  inline flat_nodim_barcode<value_type> get_flat_nodim_barcode() {$/;"	f	class:Gudhi::multiparameter::truc_interface::Truc	typeref:typename:flat_nodim_barcode<value_type>
get_flat_nodim_barcode	multipers/gudhi/truc.h	/^  static inline flat_nodim_barcode<value_type> get_flat_nodim_barcode($/;"	f	class:Gudhi::multiparameter::truc_interface::Truc	typeref:typename:flat_nodim_barcode<value_type>
get_from_file	multipers/data/graphs.py	/^def get_from_file(dataset: str):$/;"	f
get_from_file_old	multipers/data/graphs.py	/^def get_from_file_old(dataset: str, label="lb"):$/;"	f
get_graphs	multipers/data/graphs.py	/^def get_graphs(dataset: str, N: int | str = "") -> tuple[list[nx.Graph], list[int]]:$/;"	f	typeref:typename:tuple[list[nx.Graph],list[int]]
get_grid	multipers/torch/diff_grids.py	/^def get_grid(strategy: Literal["exact", "regular_closest", "regular_left", "quantile"]):$/;"	f
get_hilbert_signed_measure	multipers/multi_parameter_rank_invariant/hilbert_function.h	/^std::pair<std::vector<std::vector<indices_type>>, std::vector<dtype>> get_hilbert_signed_measure/;"	f	namespace:Gudhi::multiparameter::hilbert_function	typeref:typename:std::pair<std::vector<std::vector<indices_type>>,std::vector<dtype>>
get_hilbert_surface	multipers/multi_parameter_rank_invariant/hilbert_function.h	/^void get_hilbert_surface(python_interface::Simplex_tree_multi_interface<Filtration> &st_multi,$/;"	f	namespace:Gudhi::multiparameter::hilbert_function	typeref:typename:void
get_hilbert_surface	multipers/multi_parameter_rank_invariant/hilbert_function.h	/^void get_hilbert_surface(truc_interface::Truc<PersBackend, Structure, Filtration> &slicer,$/;"	f	namespace:Gudhi::multiparameter::hilbert_function	typeref:typename:void
get_hilbert_surface_python	multipers/multi_parameter_rank_invariant/hilbert_function.h	/^void get_hilbert_surface_python(python_interface::Simplex_tree_multi_interface<Filtration> &st_m/;"	f	namespace:Gudhi::multiparameter::hilbert_function	typeref:typename:void
get_hilbert_surface_python	multipers/multi_parameter_rank_invariant/hilbert_function.h	/^void get_hilbert_surface_python(truc_interface::Truc<PersBackend, Structure, Filtration> &slicer/;"	f	namespace:Gudhi::multiparameter::hilbert_function	typeref:typename:void
get_idx_parameter	multipers/torch/diff_grids.py	/^        def get_idx_parameter(A, G, p):$/;"	f	function:evaluate_mod_in_grid__old	file:
get_immuno	multipers/data/immuno_regions.py	/^def get_immuno(i=1, DATASET_PATH = expanduser("~\/Datasets\/")):$/;"	f
get_index_from_position_and_size	multipers/multiparameter_module_approximation/structure_higher_dim_barcode.h	/^unsigned int get_index_from_position_and_size($/;"	f	typeref:typename:unsigned int
get_infinity	multipers/gudhi/gudhi/Simplex_tree.h	/^    static const Filtration_value& get_infinity() { return inf_; }$/;"	f	struct:Gudhi::Simplex_tree::Filtration_simplex_base_real	typeref:typename:const Filtration_value &
get_interleaving	multipers/multiparameter_module_approximation/approximation.h	/^inline value_type Summand<value_type>::get_interleaving() const {$/;"	f	class:Gudhi::multiparameter::mma::Summand	typeref:typename:value_type
get_interleaving	multipers/multiparameter_module_approximation/approximation.h	/^inline value_type Summand<value_type>::get_interleaving(const Box<value_type> &box) {$/;"	f	class:Gudhi::multiparameter::mma::Summand	typeref:typename:value_type
get_interleavings	multipers/multiparameter_module_approximation/approximation.h	/^std::vector<value_type> inline Module<value_type>::get_interleavings(const Box<value_type> &box)/;"	f	class:Gudhi::multiparameter::mma::Module	typeref:typename:std::vector<value_type>
get_inverse	multipers/gudhi/gudhi/Fields/Multi_field.h	/^inline Multi_field_element<minimum, maximum> Multi_field_element<minimum, maximum>::get_inverse(/;"	f	class:Gudhi::persistence_fields::Multi_field_element	typeref:typename:Multi_field_element<minimum,maximum>
get_inverse	multipers/gudhi/gudhi/Fields/Multi_field_operators.h	/^  Element get_inverse(const Element& e) const {$/;"	f	class:Gudhi::persistence_fields::Multi_field_operators	typeref:typename:Element
get_inverse	multipers/gudhi/gudhi/Fields/Multi_field_shared.h	/^inline Shared_multi_field_element Shared_multi_field_element::get_inverse() const {$/;"	f	class:Gudhi::persistence_fields::Shared_multi_field_element	typeref:typename:Shared_multi_field_element
get_inverse	multipers/gudhi/gudhi/Fields/Multi_field_small.h	/^  Multi_field_element_with_small_characteristics get_inverse() const {$/;"	f	class:Gudhi::persistence_fields::Multi_field_element_with_small_characteristics	typeref:typename:Multi_field_element_with_small_characteristics
get_inverse	multipers/gudhi/gudhi/Fields/Multi_field_small_operators.h	/^  Element get_inverse(const Element& e) const {$/;"	f	class:Gudhi::persistence_fields::Multi_field_operators_with_small_characteristics	typeref:typename:Element
get_inverse	multipers/gudhi/gudhi/Fields/Multi_field_small_shared.h	/^  Shared_multi_field_element_with_small_characteristics get_inverse() const {$/;"	f	class:Gudhi::persistence_fields::Shared_multi_field_element_with_small_characteristics	typeref:typename:Shared_multi_field_element_with_small_characteristics
get_inverse	multipers/gudhi/gudhi/Fields/Z2_field.h	/^inline Z2_field_element Z2_field_element::get_inverse() const {$/;"	f	class:Gudhi::persistence_fields::Z2_field_element	typeref:typename:Z2_field_element
get_inverse	multipers/gudhi/gudhi/Fields/Z2_field_operators.h	/^  static Element get_inverse(Unsigned_integer_type e) {$/;"	f	class:Gudhi::persistence_fields::Z2_field_operators	typeref:typename:Element
get_inverse	multipers/gudhi/gudhi/Fields/Zp_field.h	/^  Zp_field_element get_inverse() const {$/;"	f	class:Gudhi::persistence_fields::Zp_field_element	typeref:typename:Zp_field_element
get_inverse	multipers/gudhi/gudhi/Fields/Zp_field_operators.h	/^  Element get_inverse(Element e) const { return inverse_[get_value(e)]; }$/;"	f	class:Gudhi::persistence_fields::Zp_field_operators	typeref:typename:Element
get_inverse	multipers/gudhi/gudhi/Fields/Zp_field_shared.h	/^  Shared_Zp_field_element get_inverse() const { return Shared_Zp_field_element(inverse_[element_/;"	f	class:Gudhi::persistence_fields::Shared_Zp_field_element	typeref:typename:Shared_Zp_field_element
get_key	multipers/gudhi/Simplex_tree_multi_interface.h	/^  int get_key(const Simplex &simplex) { return Base::key(Base::find(simplex)); }$/;"	f	class:Gudhi::multiparameter::python_interface::Simplex_tree_multi_interface	typeref:typename:int
get_landscape	multipers/multiparameter_module_approximation/approximation.h	/^typename Module<value_type>::image_type Module<value_type>::get_landscape($/;"	f	class:Gudhi::multiparameter::mma::Module	typeref:typename:Module<value_type>::image_type
get_landscape_value	multipers/multiparameter_module_approximation/approximation.h	/^inline value_type Summand<value_type>::get_landscape_value(const std::vector<value_type> &x) con/;"	f	class:Gudhi::multiparameter::mma::Summand	typeref:typename:value_type
get_landscape_values	multipers/multiparameter_module_approximation/approximation.h	/^std::vector<value_type> Module<value_type>::get_landscape_values(const std::vector<value_type> &/;"	f	class:Gudhi::multiparameter::mma::Module	typeref:typename:std::vector<value_type>
get_landscapes	multipers/multiparameter_module_approximation/approximation.h	/^std::vector<typename Module<value_type>::image_type> Module<value_type>::get_landscapes($/;"	f	class:Gudhi::multiparameter::mma::Module	typeref:typename:std::vector<typename Module<value_type>::image_type>
get_last_index	multipers/multiparameter_module_approximation/vector_matrix.h	/^inline index Vector_matrix<Column_type>::get_last_index() const$/;"	f	class:Gudhi::multiparameter::mma::Vector_matrix	typeref:typename:index
get_local_weight	multipers/multiparameter_module_approximation/approximation.h	/^inline value_type Summand<value_type>::get_local_weight(const filtration_type &x, const value_ty/;"	f	class:Gudhi::multiparameter::mma::Summand	typeref:typename:value_type
get_lower_corner	multipers/gudhi/gudhi/Multi_persistence/Box.h	/^  Point &get_lower_corner() { return lowerCorner_; }$/;"	f	class:Gudhi::multi_persistence::Box	typeref:typename:Point &
get_lower_corner	multipers/gudhi/gudhi/Multi_persistence/Box.h	/^  const Point &get_lower_corner() const { return lowerCorner_; }$/;"	f	class:Gudhi::multi_persistence::Box	typeref:typename:const Point &
get_lower_star_filtration	multipers/multiparameter_module_approximation/vineyards.h	/^    static void get_lower_star_filtration($/;"	f	struct:Gudhi::multiparameter::mma::Filtration_creator	typeref:typename:void
get_max_dim	multipers/multiparameter_module_approximation/vector_matrix.h	/^inline dimension_type Vector_matrix<Column_type>::get_max_dim() const$/;"	f	class:Gudhi::multiparameter::mma::Vector_matrix	typeref:typename:dimension_type
get_max_dimension	multipers/gudhi/gudhi/Matrix.h	/^inline typename Matrix<PersistenceMatrixOptions>::Dimension Matrix<PersistenceMatrixOptions>::ge/;"	f	class:Gudhi::persistence_matrix::Matrix	typeref:typename:Matrix<PersistenceMatrixOptions>::Dimension
get_max_dimension	multipers/gudhi/gudhi/Persistence_matrix/Id_to_index_overlay.h	/^Id_to_index_overlay<Underlying_matrix, Master_matrix>::get_max_dimension() const $/;"	f	class:Gudhi::persistence_matrix::Id_to_index_overlay	typeref:typename:Id_to_index_overlay<Underlying_matrix,Master_matrix>::Dimension
get_max_dimension	multipers/gudhi/gudhi/Persistence_matrix/Position_to_index_overlay.h	/^Position_to_index_overlay<Underlying_matrix, Master_matrix>::get_max_dimension() const $/;"	f	class:Gudhi::persistence_matrix::Position_to_index_overlay	typeref:typename:Position_to_index_overlay<Underlying_matrix,Master_matrix>::Dimension
get_max_dimension	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^inline typename RU_matrix<Master_matrix>::Dimension RU_matrix<Master_matrix>::get_max_dimension(/;"	f	class:Gudhi::persistence_matrix::RU_matrix	typeref:typename:RU_matrix<Master_matrix>::Dimension
get_max_dimension	multipers/gudhi/gudhi/Persistence_matrix/matrix_dimension_holders.h	/^  Dimension get_max_dimension() const { return maxDim_; };$/;"	f	class:Gudhi::persistence_matrix::Matrix_all_dimension_holder	typeref:typename:Dimension
get_max_dimension	multipers/gudhi/gudhi/Persistence_matrix/matrix_dimension_holders.h	/^  Dimension get_max_dimension() const { return maxDim_; };$/;"	f	class:Gudhi::persistence_matrix::Matrix_max_dimension_holder	typeref:typename:Dimension
get_multiplicative_identity	multipers/gudhi/gudhi/Fields/Multi_field.h	/^inline Multi_field_element<minimum, maximum> Multi_field_element<minimum, maximum>::get_multipli/;"	f	class:Gudhi::persistence_fields::Multi_field_element	typeref:typename:Multi_field_element<minimum,maximum>
get_multiplicative_identity	multipers/gudhi/gudhi/Fields/Multi_field_operators.h	/^  static const Element& get_multiplicative_identity() { return multiplicativeID_; }$/;"	f	class:Gudhi::persistence_fields::Multi_field_operators	typeref:typename:const Element &
get_multiplicative_identity	multipers/gudhi/gudhi/Fields/Multi_field_shared.h	/^inline Shared_multi_field_element Shared_multi_field_element::get_multiplicative_identity() {$/;"	f	class:Gudhi::persistence_fields::Shared_multi_field_element	typeref:typename:Shared_multi_field_element
get_multiplicative_identity	multipers/gudhi/gudhi/Fields/Multi_field_small.h	/^  static Multi_field_element_with_small_characteristics get_multiplicative_identity() {$/;"	f	class:Gudhi::persistence_fields::Multi_field_element_with_small_characteristics	typeref:typename:Multi_field_element_with_small_characteristics
get_multiplicative_identity	multipers/gudhi/gudhi/Fields/Multi_field_small_operators.h	/^  static constexpr Element get_multiplicative_identity() { return 1; }$/;"	f	class:Gudhi::persistence_fields::Multi_field_operators_with_small_characteristics	typeref:typename:Element
get_multiplicative_identity	multipers/gudhi/gudhi/Fields/Multi_field_small_shared.h	/^  static Shared_multi_field_element_with_small_characteristics get_multiplicative_identity() {$/;"	f	class:Gudhi::persistence_fields::Shared_multi_field_element_with_small_characteristics	typeref:typename:Shared_multi_field_element_with_small_characteristics
get_multiplicative_identity	multipers/gudhi/gudhi/Fields/Z2_field.h	/^inline Z2_field_element Z2_field_element::get_multiplicative_identity() { return Z2_field_elemen/;"	f	class:Gudhi::persistence_fields::Z2_field_element	typeref:typename:Z2_field_element
get_multiplicative_identity	multipers/gudhi/gudhi/Fields/Z2_field_operators.h	/^  static constexpr Element get_multiplicative_identity() { return true; }$/;"	f	class:Gudhi::persistence_fields::Z2_field_operators	typeref:typename:Element
get_multiplicative_identity	multipers/gudhi/gudhi/Fields/Zp_field.h	/^  static Zp_field_element get_multiplicative_identity() { return Zp_field_element<characteristic/;"	f	class:Gudhi::persistence_fields::Zp_field_element	typeref:typename:Zp_field_element
get_multiplicative_identity	multipers/gudhi/gudhi/Fields/Zp_field_operators.h	/^  static constexpr Element get_multiplicative_identity() { return 1; }$/;"	f	class:Gudhi::persistence_fields::Zp_field_operators	typeref:typename:Element
get_multiplicative_identity	multipers/gudhi/gudhi/Fields/Zp_field_shared.h	/^  static Shared_Zp_field_element get_multiplicative_identity() { return Shared_Zp_field_element(/;"	f	class:Gudhi::persistence_fields::Shared_Zp_field_element	typeref:typename:Shared_Zp_field_element
get_number_of_columns	multipers/gudhi/gudhi/Matrix.h	/^inline typename Matrix<PersistenceMatrixOptions>::Index Matrix<PersistenceMatrixOptions>::get_nu/;"	f	class:Gudhi::persistence_matrix::Matrix	typeref:typename:Matrix<PersistenceMatrixOptions>::Index
get_number_of_columns	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix.h	/^inline typename Base_matrix<Master_matrix>::Index Base_matrix<Master_matrix>::get_number_of_colu/;"	f	class:Gudhi::persistence_matrix::Base_matrix	typeref:typename:Base_matrix<Master_matrix>::Index
get_number_of_columns	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix_with_column_compression.h	/^Base_matrix_with_column_compression<Master_matrix>::get_number_of_columns() const $/;"	f	class:Gudhi::persistence_matrix::Base_matrix_with_column_compression	typeref:typename:Base_matrix_with_column_compression<Master_matrix>::Index
get_number_of_columns	multipers/gudhi/gudhi/Persistence_matrix/Boundary_matrix.h	/^inline typename Boundary_matrix<Master_matrix>::Index Boundary_matrix<Master_matrix>::get_number/;"	f	class:Gudhi::persistence_matrix::Boundary_matrix	typeref:typename:Boundary_matrix<Master_matrix>::Index
get_number_of_columns	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^inline typename Chain_matrix<Master_matrix>::Index Chain_matrix<Master_matrix>::get_number_of_co/;"	f	class:Gudhi::persistence_matrix::Chain_matrix	typeref:typename:Chain_matrix<Master_matrix>::Index
get_number_of_columns	multipers/gudhi/gudhi/Persistence_matrix/Id_to_index_overlay.h	/^Id_to_index_overlay<Underlying_matrix, Master_matrix>::get_number_of_columns() const $/;"	f	class:Gudhi::persistence_matrix::Id_to_index_overlay	typeref:typename:Id_to_index_overlay<Underlying_matrix,Master_matrix>::Index
get_number_of_columns	multipers/gudhi/gudhi/Persistence_matrix/Position_to_index_overlay.h	/^Position_to_index_overlay<Underlying_matrix, Master_matrix>::get_number_of_columns() const $/;"	f	class:Gudhi::persistence_matrix::Position_to_index_overlay	typeref:typename:Position_to_index_overlay<Underlying_matrix,Master_matrix>::Index
get_number_of_columns	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^inline typename RU_matrix<Master_matrix>::Index RU_matrix<Master_matrix>::get_number_of_columns(/;"	f	class:Gudhi::persistence_matrix::RU_matrix	typeref:typename:RU_matrix<Master_matrix>::Index
get_number_of_columns	multipers/multiparameter_module_approximation/vector_matrix.h	/^inline unsigned int Vector_matrix<Column_type>::get_number_of_columns() const$/;"	f	class:Gudhi::multiparameter::mma::Vector_matrix	typeref:typename:unsigned int
get_number_of_parameters	multipers/gudhi/gudhi/Simplex_tree.h	/^  int get_number_of_parameters() const {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:int
get_number_of_simplices	multipers/multiparameter_module_approximation/ru_matrix.h	/^inline unsigned int RU_matrix<Column_type>::get_number_of_simplices() {$/;"	f	class:Gudhi::multiparameter::mma::RU_matrix	typeref:typename:unsigned int
get_one_filtration	multipers/gudhi/truc.h	/^    inline const std::vector<typename MultiFiltration::value_type> &get_one_filtration() const {$/;"	f	class:Gudhi::multiparameter::truc_interface::Truc::TrucThread	typeref:typename:const std::vector<typename MultiFiltration::value_type> &
get_one_filtration	multipers/gudhi/truc.h	/^    inline std::vector<typename MultiFiltration::value_type> &get_one_filtration() {$/;"	f	class:Gudhi::multiparameter::truc_interface::Truc::TrucThread	typeref:typename:std::vector<typename MultiFiltration::value_type> &
get_one_filtration	multipers/gudhi/truc.h	/^  inline const std::vector<typename MultiFiltration::value_type> &get_one_filtration() const {$/;"	f	class:Gudhi::multiparameter::truc_interface::Truc	typeref:typename:const std::vector<typename MultiFiltration::value_type> &
get_orbit5k	multipers/data/synthetic.py	/^def get_orbit5k(num_pts=1000, num_data=5000):$/;"	f
get_paired_chain_index	multipers/gudhi/gudhi/Persistence_matrix/columns/chain_column_extra_properties.h	/^  Index get_paired_chain_index() const { return pairedColumn_; }$/;"	f	class:Gudhi::persistence_matrix::Chain_column_extra_properties	typeref:typename:Index
get_partial_inverse	multipers/gudhi/gudhi/Fields/Multi_field.h	/^Multi_field_element<minimum, maximum>::get_partial_inverse(const Characteristic& productOfCharac/;"	f	class:Gudhi::persistence_fields::Multi_field_element	typeref:typename:std::pair<Multi_field_element<minimum,maximum>,typename Multi_field_element<minimum,maximum>::Characteristic>
get_partial_inverse	multipers/gudhi/gudhi/Fields/Multi_field_operators.h	/^  std::pair<Element, Characteristic> get_partial_inverse($/;"	f	class:Gudhi::persistence_fields::Multi_field_operators	typeref:typename:std::pair<Element,Characteristic>
get_partial_inverse	multipers/gudhi/gudhi/Fields/Multi_field_shared.h	/^Shared_multi_field_element::get_partial_inverse(const Characteristic& productOfCharacteristics) /;"	f	class:Gudhi::persistence_fields::Shared_multi_field_element	typeref:typename:std::pair<Shared_multi_field_element,Shared_multi_field_element::Characteristic>
get_partial_inverse	multipers/gudhi/gudhi/Fields/Multi_field_small.h	/^  std::pair<Multi_field_element_with_small_characteristics,Characteristic> get_partial_inverse($/;"	f	class:Gudhi::persistence_fields::Multi_field_element_with_small_characteristics	typeref:typename:std::pair<Multi_field_element_with_small_characteristics,Characteristic>
get_partial_inverse	multipers/gudhi/gudhi/Fields/Multi_field_small_operators.h	/^  std::pair<Element, Characteristic> get_partial_inverse($/;"	f	class:Gudhi::persistence_fields::Multi_field_operators_with_small_characteristics	typeref:typename:std::pair<Element,Characteristic>
get_partial_inverse	multipers/gudhi/gudhi/Fields/Multi_field_small_shared.h	/^  std::pair<Shared_multi_field_element_with_small_characteristics,Characteristic> get_partial_in/;"	f	class:Gudhi::persistence_fields::Shared_multi_field_element_with_small_characteristics	typeref:typename:std::pair<Shared_multi_field_element_with_small_characteristics,Characteristic>
get_partial_inverse	multipers/gudhi/gudhi/Fields/Z2_field.h	/^inline std::pair<Z2_field_element, unsigned int> Z2_field_element::get_partial_inverse($/;"	f	class:Gudhi::persistence_fields::Z2_field_element	typeref:typename:std::pair<Z2_field_element,unsigned int>
get_partial_inverse	multipers/gudhi/gudhi/Fields/Z2_field_operators.h	/^  static std::pair<Element, Characteristic> get_partial_inverse($/;"	f	class:Gudhi::persistence_fields::Z2_field_operators	typeref:typename:std::pair<Element,Characteristic>
get_partial_inverse	multipers/gudhi/gudhi/Fields/Zp_field.h	/^  std::pair<Zp_field_element, unsigned int> get_partial_inverse(unsigned int productOfCharacteri/;"	f	class:Gudhi::persistence_fields::Zp_field_element	typeref:typename:std::pair<Zp_field_element,unsigned int>
get_partial_inverse	multipers/gudhi/gudhi/Fields/Zp_field_operators.h	/^  std::pair<Element, Characteristic> get_partial_inverse(Element e,$/;"	f	class:Gudhi::persistence_fields::Zp_field_operators	typeref:typename:std::pair<Element,Characteristic>
get_partial_inverse	multipers/gudhi/gudhi/Fields/Zp_field_shared.h	/^  std::pair<Shared_Zp_field_element, Characteristic> get_partial_inverse($/;"	f	class:Gudhi::persistence_fields::Shared_Zp_field_element	typeref:typename:std::pair<Shared_Zp_field_element,Characteristic>
get_partial_multiplicative_identity	multipers/gudhi/gudhi/Fields/Multi_field.h	/^inline Multi_field_element<minimum, maximum> Multi_field_element<minimum, maximum>::get_partial_/;"	f	class:Gudhi::persistence_fields::Multi_field_element	typeref:typename:Multi_field_element<minimum,maximum>
get_partial_multiplicative_identity	multipers/gudhi/gudhi/Fields/Multi_field_operators.h	/^  Element get_partial_multiplicative_identity(const Characteristic& productOfCharacteristics) co/;"	f	class:Gudhi::persistence_fields::Multi_field_operators	typeref:typename:Element
get_partial_multiplicative_identity	multipers/gudhi/gudhi/Fields/Multi_field_shared.h	/^inline Shared_multi_field_element Shared_multi_field_element::get_partial_multiplicative_identit/;"	f	class:Gudhi::persistence_fields::Shared_multi_field_element	typeref:typename:Shared_multi_field_element
get_partial_multiplicative_identity	multipers/gudhi/gudhi/Fields/Multi_field_small.h	/^  static Multi_field_element_with_small_characteristics get_partial_multiplicative_identity($/;"	f	class:Gudhi::persistence_fields::Multi_field_element_with_small_characteristics	typeref:typename:Multi_field_element_with_small_characteristics
get_partial_multiplicative_identity	multipers/gudhi/gudhi/Fields/Multi_field_small_operators.h	/^  Element get_partial_multiplicative_identity(const Characteristic& productOfCharacteristics) co/;"	f	class:Gudhi::persistence_fields::Multi_field_operators_with_small_characteristics	typeref:typename:Element
get_partial_multiplicative_identity	multipers/gudhi/gudhi/Fields/Multi_field_small_shared.h	/^  static Shared_multi_field_element_with_small_characteristics get_partial_multiplicative_identi/;"	f	class:Gudhi::persistence_fields::Shared_multi_field_element_with_small_characteristics	typeref:typename:Shared_multi_field_element_with_small_characteristics
get_partial_multiplicative_identity	multipers/gudhi/gudhi/Fields/Z2_field.h	/^inline Z2_field_element Z2_field_element::get_partial_multiplicative_identity($/;"	f	class:Gudhi::persistence_fields::Z2_field_element	typeref:typename:Z2_field_element
get_partial_multiplicative_identity	multipers/gudhi/gudhi/Fields/Z2_field_operators.h	/^  static constexpr Element get_partial_multiplicative_identity($/;"	f	class:Gudhi::persistence_fields::Z2_field_operators	typeref:typename:Element
get_partial_multiplicative_identity	multipers/gudhi/gudhi/Fields/Zp_field.h	/^  static Zp_field_element get_partial_multiplicative_identity([[maybe_unused]] unsigned int prod/;"	f	class:Gudhi::persistence_fields::Zp_field_element	typeref:typename:Zp_field_element
get_partial_multiplicative_identity	multipers/gudhi/gudhi/Fields/Zp_field_operators.h	/^  static constexpr Element get_partial_multiplicative_identity($/;"	f	class:Gudhi::persistence_fields::Zp_field_operators	typeref:typename:Element
get_partial_multiplicative_identity	multipers/gudhi/gudhi/Fields/Zp_field_shared.h	/^  static Shared_Zp_field_element get_partial_multiplicative_identity($/;"	f	class:Gudhi::persistence_fields::Shared_Zp_field_element	typeref:typename:Shared_Zp_field_element
get_persistence	multipers/gudhi/truc.h	/^    inline PersBackend &get_persistence() { return persistence; }$/;"	f	class:Gudhi::multiparameter::truc_interface::Truc::TrucThread	typeref:typename:PersBackend &
get_persistence	multipers/gudhi/truc.h	/^    inline const PersBackend &get_persistence() const { return persistence; }$/;"	f	class:Gudhi::multiparameter::truc_interface::Truc::TrucThread	typeref:typename:const PersBackend &
get_persistence	multipers/gudhi/truc.h	/^  PersBackend &get_persistence() { return persistence; }$/;"	f	class:Gudhi::multiparameter::truc_interface::Truc	typeref:typename:PersBackend &
get_persistence	multipers/gudhi/truc.h	/^  const PersBackend &get_persistence() const { return persistence; }$/;"	f	class:Gudhi::multiparameter::truc_interface::Truc	typeref:typename:const PersBackend &
get_persistent_pairs	multipers/gudhi/gudhi/Persistent_cohomology.h	/^  const std::vector<Persistent_interval>& get_persistent_pairs() const {$/;"	f	class:Gudhi::persistent_cohomology::Persistent_cohomology	typeref:typename:const std::vector<Persistent_interval> &
get_pivot	multipers/gudhi/gudhi/Matrix.h	/^inline typename Matrix<PersistenceMatrixOptions>::ID_index Matrix<PersistenceMatrixOptions>::get/;"	f	class:Gudhi::persistence_matrix::Matrix	typeref:typename:Matrix<PersistenceMatrixOptions>::ID_index
get_pivot	multipers/gudhi/gudhi/Persistence_matrix/Boundary_matrix.h	/^inline typename Boundary_matrix<Master_matrix>::Index Boundary_matrix<Master_matrix>::get_pivot(/;"	f	class:Gudhi::persistence_matrix::Boundary_matrix	typeref:typename:Boundary_matrix<Master_matrix>::Index
get_pivot	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^inline typename Chain_matrix<Master_matrix>::ID_index Chain_matrix<Master_matrix>::get_pivot(Ind/;"	f	class:Gudhi::persistence_matrix::Chain_matrix	typeref:typename:Chain_matrix<Master_matrix>::ID_index
get_pivot	multipers/gudhi/gudhi/Persistence_matrix/Id_to_index_overlay.h	/^Id_to_index_overlay<Underlying_matrix, Master_matrix>::get_pivot(ID_index cellID) $/;"	f	class:Gudhi::persistence_matrix::Id_to_index_overlay	typeref:typename:Id_to_index_overlay<Underlying_matrix,Master_matrix>::ID_index
get_pivot	multipers/gudhi/gudhi/Persistence_matrix/Position_to_index_overlay.h	/^Position_to_index_overlay<Underlying_matrix, Master_matrix>::get_pivot(Pos_index position) $/;"	f	class:Gudhi::persistence_matrix::Position_to_index_overlay	typeref:typename:Position_to_index_overlay<Underlying_matrix,Master_matrix>::ID_index
get_pivot	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^inline typename RU_matrix<Master_matrix>::Index RU_matrix<Master_matrix>::get_pivot(Index column/;"	f	class:Gudhi::persistence_matrix::RU_matrix	typeref:typename:RU_matrix<Master_matrix>::Index
get_pivot	multipers/gudhi/gudhi/Persistence_matrix/columns/chain_column_extra_properties.h	/^  ID_index get_pivot() const { return pivot_; }$/;"	f	class:Gudhi::persistence_matrix::Chain_column_extra_properties	typeref:typename:ID_index
get_pivot	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^inline typename Heap_column<Master_matrix>::ID_index Heap_column<Master_matrix>::get_pivot()$/;"	f	class:Gudhi::persistence_matrix::Heap_column	typeref:typename:Heap_column<Master_matrix>::ID_index
get_pivot	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^inline typename Intrusive_list_column<Master_matrix>::ID_index Intrusive_list_column<Master_matr/;"	f	class:Gudhi::persistence_matrix::Intrusive_list_column	typeref:typename:Intrusive_list_column<Master_matrix>::ID_index
get_pivot	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^inline typename Intrusive_set_column<Master_matrix>::ID_index Intrusive_set_column<Master_matrix/;"	f	class:Gudhi::persistence_matrix::Intrusive_set_column	typeref:typename:Intrusive_set_column<Master_matrix>::ID_index
get_pivot	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^inline typename List_column<Master_matrix>::ID_index List_column<Master_matrix>::get_pivot() con/;"	f	class:Gudhi::persistence_matrix::List_column	typeref:typename:List_column<Master_matrix>::ID_index
get_pivot	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^inline typename Naive_vector_column<Master_matrix>::ID_index Naive_vector_column<Master_matrix>:/;"	f	class:Gudhi::persistence_matrix::Naive_vector_column	typeref:typename:Naive_vector_column<Master_matrix>::ID_index
get_pivot	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^inline typename Set_column<Master_matrix>::ID_index Set_column<Master_matrix>::get_pivot() const$/;"	f	class:Gudhi::persistence_matrix::Set_column	typeref:typename:Set_column<Master_matrix>::ID_index
get_pivot	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^inline typename Small_vector_column<Master_matrix>::ID_index Small_vector_column<Master_matrix>:/;"	f	class:Gudhi::persistence_matrix::Small_vector_column	typeref:typename:Small_vector_column<Master_matrix>::ID_index
get_pivot	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^inline typename Unordered_set_column<Master_matrix>::ID_index Unordered_set_column<Master_matrix/;"	f	class:Gudhi::persistence_matrix::Unordered_set_column	typeref:typename:Unordered_set_column<Master_matrix>::ID_index
get_pivot	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^inline typename Vector_column<Master_matrix>::ID_index Vector_column<Master_matrix>::get_pivot()$/;"	f	class:Gudhi::persistence_matrix::Vector_column	typeref:typename:Vector_column<Master_matrix>::ID_index
get_pivot	multipers/multiparameter_module_approximation/heap_column.h	/^inline int Heap_column::get_pivot()$/;"	f	class:Vineyard::Heap_column	typeref:typename:int
get_pivot	multipers/multiparameter_module_approximation/list_column.h	/^inline int List_column::get_pivot()$/;"	f	class:Vineyard::List_column	typeref:typename:int
get_pivot	multipers/multiparameter_module_approximation/list_column_2.h	/^inline int List_column::get_pivot()$/;"	f	class:Vineyard::List_column	typeref:typename:int
get_pivot	multipers/multiparameter_module_approximation/set_column.h	/^inline int Set_column::get_pivot()$/;"	f	class:Gudhi::multiparameter::mma::Set_column	typeref:typename:int
get_pivot	multipers/multiparameter_module_approximation/unordered_set_column.h	/^inline int Unordered_set_column::get_pivot()$/;"	f	class:Vineyard::Unordered_set_column	typeref:typename:int
get_pivot	multipers/multiparameter_module_approximation/vector_column.h	/^inline int Vector_column::get_pivot()$/;"	f	class:Vineyard::Vector_column	typeref:typename:int
get_pivot_value	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^inline typename Heap_column<Master_matrix>::Field_element Heap_column<Master_matrix>::get_pivot_/;"	f	class:Gudhi::persistence_matrix::Heap_column	typeref:typename:Heap_column<Master_matrix>::Field_element
get_pivot_value	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^Intrusive_list_column<Master_matrix>::get_pivot_value() const$/;"	f	class:Gudhi::persistence_matrix::Intrusive_list_column	typeref:typename:Intrusive_list_column<Master_matrix>::Field_element
get_pivot_value	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^Intrusive_set_column<Master_matrix>::get_pivot_value() const$/;"	f	class:Gudhi::persistence_matrix::Intrusive_set_column	typeref:typename:Intrusive_set_column<Master_matrix>::Field_element
get_pivot_value	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^inline typename List_column<Master_matrix>::Field_element List_column<Master_matrix>::get_pivot_/;"	f	class:Gudhi::persistence_matrix::List_column	typeref:typename:List_column<Master_matrix>::Field_element
get_pivot_value	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^inline typename Naive_vector_column<Master_matrix>::Field_element Naive_vector_column<Master_mat/;"	f	class:Gudhi::persistence_matrix::Naive_vector_column	typeref:typename:Naive_vector_column<Master_matrix>::Field_element
get_pivot_value	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^inline typename Set_column<Master_matrix>::Field_element Set_column<Master_matrix>::get_pivot_va/;"	f	class:Gudhi::persistence_matrix::Set_column	typeref:typename:Set_column<Master_matrix>::Field_element
get_pivot_value	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^inline typename Small_vector_column<Master_matrix>::Field_element Small_vector_column<Master_mat/;"	f	class:Gudhi::persistence_matrix::Small_vector_column	typeref:typename:Small_vector_column<Master_matrix>::Field_element
get_pivot_value	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^Unordered_set_column<Master_matrix>::get_pivot_value() const$/;"	f	class:Gudhi::persistence_matrix::Unordered_set_column	typeref:typename:Unordered_set_column<Master_matrix>::Field_element
get_pivot_value	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^inline typename Vector_column<Master_matrix>::Field_element Vector_column<Master_matrix>::get_pi/;"	f	class:Gudhi::persistence_matrix::Vector_column	typeref:typename:Vector_column<Master_matrix>::Field_element
get_pixel_value_function_type	multipers/multiparameter_module_approximation/approximation.h	/^  using get_pixel_value_function_type = std::function<value_type(const typename module_type::con/;"	t	class:Gudhi::multiparameter::mma::Module
get_point_cloud	multipers/gudhi/gudhi/Points_off_io.h	/^  const std::vector<Point_d>& get_point_cloud() const {$/;"	f	class:Gudhi::Points_off_reader	typeref:typename:const std::vector<Point_d> &
get_point_cloud	multipers/gudhi/gudhi/Points_off_io.h	/^  const std::vector<Point_d>& get_point_cloud() const {$/;"	f	class:Gudhi::Points_off_visitor_reader	typeref:typename:const std::vector<Point_d> &
get_points	multipers/multiparameter_module_approximation/utilities.h	/^  barcodes get_points() {$/;"	f	struct:Gudhi::multiparameter::mma::MultiDiagrams	typeref:typename:barcodes
get_points	multipers/multiparameter_module_approximation/utilities.h	/^  std::vector<python_bar> get_points($/;"	f	struct:Gudhi::multiparameter::mma::MultiDiagram	typeref:typename:std::vector<python_bar>
get_pts_indices	multipers/gudhi/Simplex_tree_multi_interface.h	/^  static std::pair<pts_indices_type, pts_indices_type> inline get_pts_indices($/;"	f	class:Gudhi::multiparameter::python_interface::Simplex_tree_multi_interface	typeref:typename:std::pair<pts_indices_type,pts_indices_type>
get_rep	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix_with_column_compression.h	/^    Index get_rep() const { return rep_; }$/;"	f	class:Gudhi::persistence_matrix::Base_matrix_with_column_compression::Column	typeref:typename:Index
get_representative_cycle	multipers/gudhi/gudhi/Persistence_matrix/Id_to_index_overlay.h	/^Id_to_index_overlay<Underlying_matrix, Master_matrix>::get_representative_cycle(const Bar& bar) $/;"	f	class:Gudhi::persistence_matrix::Id_to_index_overlay	typeref:typename:const typename Id_to_index_overlay<Underlying_matrix,Master_matrix>::Cycle &
get_representative_cycle	multipers/gudhi/gudhi/Persistence_matrix/Position_to_index_overlay.h	/^Position_to_index_overlay<Underlying_matrix, Master_matrix>::get_representative_cycle(const Bar&/;"	f	class:Gudhi::persistence_matrix::Position_to_index_overlay	typeref:typename:const typename Position_to_index_overlay<Underlying_matrix,Master_matrix>::Cycle &
get_representative_cycle	multipers/gudhi/gudhi/Persistence_matrix/chain_rep_cycles.h	/^Chain_representative_cycles<Master_matrix>::get_representative_cycle(const Bar& bar) $/;"	f	class:Gudhi::persistence_matrix::Chain_representative_cycles	typeref:typename:const typename Chain_representative_cycles<Master_matrix>::Cycle &
get_representative_cycles	multipers/gudhi/gudhi/Persistence_matrix/Id_to_index_overlay.h	/^Id_to_index_overlay<Underlying_matrix, Master_matrix>::get_representative_cycles() $/;"	f	class:Gudhi::persistence_matrix::Id_to_index_overlay	typeref:typename:const std::vector<typename Id_to_index_overlay<Underlying_matrix,Master_matrix>::Cycle> &
get_representative_cycles	multipers/gudhi/gudhi/Persistence_matrix/Position_to_index_overlay.h	/^Position_to_index_overlay<Underlying_matrix, Master_matrix>::get_representative_cycles() $/;"	f	class:Gudhi::persistence_matrix::Position_to_index_overlay	typeref:typename:const std::vector<typename Position_to_index_overlay<Underlying_matrix,Master_matrix>::Cycle> &
get_representative_cycles	multipers/gudhi/gudhi/Persistence_matrix/chain_rep_cycles.h	/^Chain_representative_cycles<Master_matrix>::get_representative_cycles() $/;"	f	class:Gudhi::persistence_matrix::Chain_representative_cycles	typeref:typename:const std::vector<typename Chain_representative_cycles<Master_matrix>::Cycle> &
get_representative_cycles	multipers/gudhi/mma_interface_h0.h	/^  std::vector<cycle_type> get_representative_cycles(bool update = true) const {$/;"	f	class:Gudhi::multiparameter::truc_interface::Persistence_backend_h0	typeref:typename:std::vector<cycle_type>
get_representative_cycles	multipers/gudhi/mma_interface_matrix.h	/^  inline std::vector<std::vector<std::vector<unsigned int>>> get_representative_cycles(bool upda/;"	f	class:Gudhi::multiparameter::truc_interface::Persistence_backend_matrix	typeref:typename:std::vector<std::vector<std::vector<unsigned int>>>
get_representative_cycles	multipers/gudhi/truc.h	/^    inline std::vector<typename PersBackend::cycle_type> get_representative_cycles(bool update =/;"	f	class:Gudhi::multiparameter::truc_interface::Truc::TrucThread	typeref:typename:std::vector<typename PersBackend::cycle_type>
get_representative_cycles	multipers/gudhi/truc.h	/^  inline std::vector<std::vector<std::vector<std::vector<index_type>>>> get_representative_cycle/;"	f	class:Gudhi::multiparameter::truc_interface::Truc	typeref:typename:std::vector<std::vector<std::vector<std::vector<index_type>>>>
get_representative_cycles_as_borders	multipers/gudhi/gudhi/Matrix.h	/^Matrix<PersistenceMatrixOptions>::get_representative_cycles_as_borders(bool detailed) {$/;"	f	class:Gudhi::persistence_matrix::Matrix	typeref:typename:std::vector<std::vector<std::vector<typename Matrix<PersistenceMatrixOptions>::ID_index>>>
get_representative_cycles_as_borders	multipers/gudhi/gudhi/Persistence_matrix/ru_rep_cycles.h	/^RU_representative_cycles<Master_matrix>::get_representative_cycles_as_borders(bool detailed)$/;"	f	class:Gudhi::persistence_matrix::RU_representative_cycles	typeref:typename:std::vector<typename RU_representative_cycles<Master_matrix>::Cycle_borders>
get_resolution	multipers/tensor/tensor.h	/^  inline const std::vector<indices_type> &get_resolution() const { return resolution_; }$/;"	f	class:tensor::static_tensor_view	typeref:typename:const std::vector<indices_type> &
get_row	multipers/gudhi/gudhi/Matrix.h	/^inline const typename Matrix<PersistenceMatrixOptions>::Row& Matrix<PersistenceMatrixOptions>::g/;"	f	class:Gudhi::persistence_matrix::Matrix	typeref:typename:const typename Matrix<PersistenceMatrixOptions>::Row &
get_row	multipers/gudhi/gudhi/Matrix.h	/^inline typename Matrix<PersistenceMatrixOptions>::Returned_row& Matrix<PersistenceMatrixOptions>/;"	f	class:Gudhi::persistence_matrix::Matrix	typeref:typename:Matrix<PersistenceMatrixOptions>::Returned_row &
get_row	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix.h	/^inline typename Base_matrix<Master_matrix>::Row& Base_matrix<Master_matrix>::get_row(Index rowIn/;"	f	class:Gudhi::persistence_matrix::Base_matrix	typeref:typename:Base_matrix<Master_matrix>::Row &
get_row	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix_with_column_compression.h	/^Base_matrix_with_column_compression<Master_matrix>::get_row(Index rowIndex) const $/;"	f	class:Gudhi::persistence_matrix::Base_matrix_with_column_compression	typeref:typename:const typename Base_matrix_with_column_compression<Master_matrix>::Row &
get_row	multipers/gudhi/gudhi/Persistence_matrix/Boundary_matrix.h	/^inline typename Boundary_matrix<Master_matrix>::Row& Boundary_matrix<Master_matrix>::get_row(Ind/;"	f	class:Gudhi::persistence_matrix::Boundary_matrix	typeref:typename:Boundary_matrix<Master_matrix>::Row &
get_row	multipers/gudhi/gudhi/Persistence_matrix/Id_to_index_overlay.h	/^Id_to_index_overlay<Underlying_matrix, Master_matrix>::get_row(ID_index rowIndex) $/;"	f	class:Gudhi::persistence_matrix::Id_to_index_overlay	typeref:typename:Id_to_index_overlay<Underlying_matrix,Master_matrix>::Row &
get_row	multipers/gudhi/gudhi/Persistence_matrix/Position_to_index_overlay.h	/^Position_to_index_overlay<Underlying_matrix, Master_matrix>::get_row(ID_index rowIndex) $/;"	f	class:Gudhi::persistence_matrix::Position_to_index_overlay	typeref:typename:Position_to_index_overlay<Underlying_matrix,Master_matrix>::Row &
get_row	multipers/gudhi/gudhi/Persistence_matrix/Position_to_index_overlay.h	/^Position_to_index_overlay<Underlying_matrix, Master_matrix>::get_row(ID_index rowIndex) const $/;"	f	class:Gudhi::persistence_matrix::Position_to_index_overlay	typeref:typename:const typename Position_to_index_overlay<Underlying_matrix,Master_matrix>::Row &
get_row	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^inline typename RU_matrix<Master_matrix>::Row& RU_matrix<Master_matrix>::get_row(Index rowIndex,/;"	f	class:Gudhi::persistence_matrix::RU_matrix	typeref:typename:RU_matrix<Master_matrix>::Row &
get_row	multipers/gudhi/gudhi/Persistence_matrix/matrix_row_access.h	/^  Row& get_row(ID_index rowIndex) {$/;"	f	class:Gudhi::persistence_matrix::Matrix_row_access	typeref:typename:Row &
get_row	multipers/gudhi/gudhi/Persistence_matrix/matrix_row_access.h	/^  const Row& get_row(ID_index rowIndex) const {$/;"	f	class:Gudhi::persistence_matrix::Matrix_row_access	typeref:typename:const Row &
get_row_index	multipers/gudhi/gudhi/Persistence_matrix/columns/entry_types.h	/^  ID_index get_row_index() const { return rowIndex_; };$/;"	f	class:Gudhi::persistence_matrix::Entry	typeref:typename:ID_index
get_serialization_size	multipers/gudhi/gudhi/Simplex_tree.h	/^  std::size_t get_serialization_size() {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:std::size_t
get_serialization_size_of	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  friend std::size_t get_serialization_size_of(const Multi_critical_filtration &value) {$/;"	f	namespace:Gudhi::multi_filtration	typeref:typename:std::size_t
get_serialization_size_of	multipers/gudhi/gudhi/One_critical_filtration.h	/^  friend std::size_t get_serialization_size_of(const One_critical_filtration &value) {$/;"	f	namespace:Gudhi::multi_filtration	typeref:typename:std::size_t
get_serialization_size_of	multipers/gudhi/gudhi/Simplex_tree/serialization_utils.h	/^constexpr std::size_t get_serialization_size_of([[maybe_unused]] ArgumentType value) {$/;"	f	namespace:Gudhi::simplex_tree	typeref:typename:std::size_t
get_signed_measure_indices	multipers/multi_parameter_rank_invariant/diff_helpers.h	/^get_signed_measure_indices($/;"	f	namespace:Gudhi::multiparameter::differentiation	typeref:typename:std::pair<signed_measure_indices,signed_measure_indices>
get_simplex_and_filtration	multipers/gudhi/Simplex_tree_interface.h	/^  Simplex_and_filtration get_simplex_and_filtration(Simplex_handle f_simplex) {$/;"	f	class:Gudhi::Simplex_tree_interface	typeref:typename:Simplex_and_filtration
get_simplex_and_filtration	multipers/gudhi/Simplex_tree_multi_interface.h	/^  Simplex_and_filtration get_simplex_and_filtration(Simplex_handle f_simplex) {$/;"	f	class:Gudhi::multiparameter::python_interface::Simplex_tree_multi_interface	typeref:typename:Simplex_and_filtration
get_simplex_tree_from_delayed	multipers/ml/tools.py	/^def get_simplex_tree_from_delayed(x) -> mp.SimplexTreeMulti:$/;"	f	typeref:typename:mp.SimplexTreeMulti
get_simplextree	multipers/ml/one.py	/^def get_simplextree(x)->gd.SimplexTree:$/;"	f	typeref:typename:gd.SimplexTree
get_simplextree	multipers/ml/tools.py	/^def get_simplextree(x) -> mp.SimplexTreeMulti:$/;"	f	typeref:typename:mp.SimplexTreeMulti
get_simplextree_from_pointer	multipers/gudhi/Simplex_tree_multi_interface.h	/^get_simplextree_from_pointer(const uintptr_t splxptr) { \/\/ DANGER$/;"	f	namespace:Gudhi::multiparameter::python_interface	typeref:typename:simplextreeinterface &
get_simplextrees	multipers/ml/one.py	/^def get_simplextrees(X)->Iterable[gd.SimplexTree]:$/;"	f	typeref:typename:Iterable[gd.SimplexTree]
get_simplices_iterator_begin	multipers/gudhi/Simplex_tree_interface.h	/^  Complex_simplex_iterator get_simplices_iterator_begin() {$/;"	f	class:Gudhi::Simplex_tree_interface	typeref:typename:Complex_simplex_iterator
get_simplices_iterator_end	multipers/gudhi/Simplex_tree_interface.h	/^  Complex_simplex_iterator get_simplices_iterator_end() {$/;"	f	class:Gudhi::Simplex_tree_interface	typeref:typename:Complex_simplex_iterator
get_simplices_of_dimension	multipers/gudhi/Simplex_tree_multi_interface.h	/^  simplices_list get_simplices_of_dimension(int dimension) {$/;"	f	class:Gudhi::multiparameter::python_interface::Simplex_tree_multi_interface	typeref:typename:simplices_list
get_skeleton_iterator_begin	multipers/gudhi/Simplex_tree_interface.h	/^  Skeleton_simplex_iterator get_skeleton_iterator_begin(int dimension) {$/;"	f	class:Gudhi::Simplex_tree_interface	typeref:typename:Skeleton_simplex_iterator
get_skeleton_iterator_end	multipers/gudhi/Simplex_tree_interface.h	/^  Skeleton_simplex_iterator get_skeleton_iterator_end(int dimension) {$/;"	f	class:Gudhi::Simplex_tree_interface	typeref:typename:Skeleton_simplex_iterator
get_slice_rank_filtration	multipers/multi_parameter_rank_invariant/rank_invariant.h	/^inline value_type get_slice_rank_filtration(const value_type x,$/;"	f	namespace:Gudhi::multiparameter::rank_invariant	typeref:typename:value_type
get_slicer	_tempita_grid_gen.py	/^def get_slicer(backend_type, is_vine, is_kcritical, value_type, column_type):$/;"	f
get_sm_with_axis	multipers/pickle.py	/^def get_sm_with_axis(sms,idx,axis,degree):$/;"	f
get_sm_without_axis	multipers/pickle.py	/^def get_sm_without_axis(sms,idx,degree):$/;"	f
get_st	multipers/ml/point_clouds.py	/^        def get_st(c):$/;"	f	member:PointCloud2FilteredComplex._get_sts_delaunay	file:
get_star	multipers/gudhi/Simplex_tree_interface.h	/^  Filtered_simplices get_star(const Simplex& simplex) {$/;"	f	class:Gudhi::Simplex_tree_interface	typeref:typename:Filtered_simplices
get_star	multipers/gudhi/Simplex_tree_multi_interface.h	/^  Filtered_simplices get_star(const Simplex &simplex) {$/;"	f	class:Gudhi::multiparameter::python_interface::Simplex_tree_multi_interface	typeref:typename:Filtered_simplices
get_structure	multipers/gudhi/truc.h	/^  inline const Structure &get_structure() const { return structure; }$/;"	f	class:Gudhi::multiparameter::truc_interface::Truc	typeref:typename:const Structure &
get_summands_of_dimension	multipers/multiparameter_module_approximation/approximation.h	/^inline std::vector<Summand<value_type>> Module<value_type>::get_summands_of_dimension(const int /;"	f	class:Gudhi::multiparameter::mma::Module	typeref:typename:std::vector<Summand<value_type>>
get_test	multipers/data/UCR.py	/^def get_test(*args, **kwargs):$/;"	f
get_top_dimensional_coface_of_a_cell	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^size_t Bitmap_cubical_complex_base<T>::get_top_dimensional_coface_of_a_cell(size_t splx) {$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base	typeref:typename:size_t
get_train	multipers/data/UCR.py	/^def get_train(*args, **kwargs):$/;"	f
get_underlying_container	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  const Generators &get_underlying_container() const { return multi_filtration_; }$/;"	f	class:Gudhi::multi_filtration::Multi_critical_filtration	typeref:typename:const Generators &
get_upper_corner	multipers/gudhi/gudhi/Multi_persistence/Box.h	/^  Point &get_upper_corner() { return upperCorner_; }$/;"	f	class:Gudhi::multi_persistence::Box	typeref:typename:Point &
get_upper_corner	multipers/gudhi/gudhi/Multi_persistence/Box.h	/^  const Point &get_upper_corner() const { return upperCorner_; }$/;"	f	class:Gudhi::multi_persistence::Box	typeref:typename:const Point &
get_upset	multipers/multiparameter_module_approximation/approximation.h	/^const Gudhi::multi_filtration::Multi_critical_filtration<value_type> &Summand<value_type>::get_u/;"	f	class:Gudhi::multiparameter::mma::Summand	typeref:typename:const Gudhi::multi_filtration::Multi_critical_filtration<value_type> &
get_value	multipers/gudhi/gudhi/Fields/Multi_field.h	/^inline typename Multi_field_element<minimum, maximum>::Element Multi_field_element<minimum, maxi/;"	f	class:Gudhi::persistence_fields::Multi_field_element	typeref:typename:Multi_field_element<minimum,maximum>::Element
get_value	multipers/gudhi/gudhi/Fields/Multi_field_operators.h	/^  Element get_value(Element e) const {$/;"	f	class:Gudhi::persistence_fields::Multi_field_operators	typeref:typename:Element
get_value	multipers/gudhi/gudhi/Fields/Multi_field_shared.h	/^inline Shared_multi_field_element::Element Shared_multi_field_element::get_value() const { retur/;"	f	class:Gudhi::persistence_fields::Shared_multi_field_element	typeref:typename:Shared_multi_field_element::Element
get_value	multipers/gudhi/gudhi/Fields/Multi_field_small.h	/^  Element get_value() const { return element_; }$/;"	f	class:Gudhi::persistence_fields::Multi_field_element_with_small_characteristics	typeref:typename:Element
get_value	multipers/gudhi/gudhi/Fields/Multi_field_small_operators.h	/^  Element get_value(Element e) const {$/;"	f	class:Gudhi::persistence_fields::Multi_field_operators_with_small_characteristics	typeref:typename:Element
get_value	multipers/gudhi/gudhi/Fields/Multi_field_small_shared.h	/^  Element get_value() const { return element_; }$/;"	f	class:Gudhi::persistence_fields::Shared_multi_field_element_with_small_characteristics	typeref:typename:Element
get_value	multipers/gudhi/gudhi/Fields/Z2_field.h	/^inline Z2_field_element::Element Z2_field_element::get_value() const { return element_; }$/;"	f	class:Gudhi::persistence_fields::Z2_field_element	typeref:typename:Z2_field_element::Element
get_value	multipers/gudhi/gudhi/Fields/Z2_field_operators.h	/^  static Element get_value(Integer_type e) {$/;"	f	class:Gudhi::persistence_fields::Z2_field_operators	typeref:typename:Element
get_value	multipers/gudhi/gudhi/Fields/Zp_field.h	/^  Element get_value() const { return element_; }$/;"	f	class:Gudhi::persistence_fields::Zp_field_element	typeref:typename:Element
get_value	multipers/gudhi/gudhi/Fields/Zp_field_operators.h	/^  Element get_value(Element e) const { return e < characteristic_ ? e : e % characteristic_; }$/;"	f	class:Gudhi::persistence_fields::Zp_field_operators	typeref:typename:Element
get_value	multipers/gudhi/gudhi/Fields/Zp_field_operators.h	/^  Element get_value(Signed_integer_type e) const {$/;"	f	class:Gudhi::persistence_fields::Zp_field_operators	typeref:typename:Element
get_value	multipers/gudhi/gudhi/Fields/Zp_field_shared.h	/^  Element get_value() const { return element_; }$/;"	f	class:Gudhi::persistence_fields::Shared_Zp_field_element	typeref:typename:Element
get_value_inplace	multipers/gudhi/gudhi/Fields/Multi_field_operators.h	/^  void get_value_inplace(Element& e) const {$/;"	f	class:Gudhi::persistence_fields::Multi_field_operators	typeref:typename:void
get_vectorization	multipers/multiparameter_module_approximation/approximation.h	/^inline std::vector<typename Module<value_type>::image_type> Module<value_type>::get_vectorizatio/;"	f	class:Gudhi::multiparameter::mma::Module	typeref:typename:std::vector<typename Module<value_type>::image_type>
get_vectorization	multipers/multiparameter_module_approximation/approximation.h	/^inline typename std::vector<typename Module<value_type>::image_type> Module<value_type>::get_vec/;"	f	class:Gudhi::multiparameter::mma::Module	typeref:typename:std::vector<typename Module<value_type>::image_type>
get_vectorization_in_dimension	multipers/multiparameter_module_approximation/approximation.h	/^inline typename Module<value_type>::image_type Module<value_type>::get_vectorization_in_dimensio/;"	f	class:Gudhi::multiparameter::mma::Module	typeref:typename:Module<value_type>::image_type
get_vertex_of_a_cell	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^size_t Bitmap_cubical_complex_base<T>::get_vertex_of_a_cell(size_t splx) {$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base	typeref:typename:size_t
get_vertices	multipers/gudhi/cubical_to_boundary.h	/^inline void get_vertices(unsigned int i,$/;"	f	typeref:typename:void
getref	multipers/multiparameter_module_approximation/utilities.h	/^  std::vector<MultiDiagram_point<filtration_type>> &getref() {$/;"	f	struct:Gudhi::multiparameter::mma::MultiDiagram	typeref:typename:std::vector<MultiDiagram_point<filtration_type>> &
goto_next_uncomment_line	multipers/gudhi/gudhi/Off_reader.h	/^  bool goto_next_uncomment_line(std::string& uncomment_line) {$/;"	f	class:Gudhi::Off_reader	typeref:typename:bool
graph2filvec	multipers/ml/one.py	/^def graph2filvec(g:nx.Graph, f:str, range:tuple, bins:int)->np.ndarray:$/;"	f	typeref:typename:np.ndarray
graph_has_edge	multipers/data/graphs.py	/^        def graph_has_edge(u: int, v: int) -> bool:$/;"	f	function:get_from_file	typeref:typename:bool	file:
grid	benchmarks/stuff.py	/^        grid = mpg.compute_grid(s, resolution=20, strategy="regular")$/;"	v
grid	benchmarks/stuff.py	/^        grid = mpg.compute_grid(s, resolution=50, strategy="regular")$/;"	v
grid_squeeze	multipers/multiparameter_module_approximation/approximation.h	/^inline Module<int64_t> Module<value_type>::grid_squeeze(const std::vector<std::vector<value_type/;"	f	class:Gudhi::multiparameter::mma::Module	typeref:typename:Module<int64_t>
grid_squeeze	multipers/multiparameter_module_approximation/approximation.h	/^inline Summand<int64_t> Summand<value_type>::grid_squeeze(const std::vector<std::vector<value_ty/;"	f	class:Gudhi::multiparameter::mma::Summand	typeref:typename:Summand<int64_t>
gudhi_line_diagram	multipers_old.py	/^def gudhi_line_diagram(simplextree, F, homology=0, extended=False, essential=False, mode="Gudhi"/;"	f
gudhi_matching	multipers_old.py	/^def gudhi_matching(dgm1, dgm2):$/;"	f
hasFixedBarcode	multipers/gudhi/gudhi/Matrix.h	/^  static const bool hasFixedBarcode = Option_list::is_of_boundary_type && !PersistenceMatrixOpti/;"	m	class:Gudhi::persistence_matrix::Matrix	typeref:typename:const bool
has_children	multipers/gudhi/gudhi/Simplex_tree.h	/^  bool has_children(SimplexHandle sh) const {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:bool
has_column_and_row_swaps	multipers/gudhi/gudhi/persistence_matrix_options.h	/^  static const bool has_column_and_row_swaps = false;$/;"	m	struct:Gudhi::persistence_matrix::Default_options	typeref:typename:const bool
has_column_compression	multipers/gudhi/gudhi/persistence_matrix_options.h	/^  static const bool has_column_compression = false;$/;"	m	struct:Gudhi::persistence_matrix::Default_options	typeref:typename:const bool
has_column_compression	multipers/gudhi/gudhi/persistence_matrix_options.h	/^  static const bool has_column_compression = true;$/;"	m	struct:Gudhi::persistence_matrix::Cohomology_persistence_options	typeref:typename:const bool
has_column_pairings	multipers/gudhi/gudhi/persistence_matrix_options.h	/^  static const bool has_column_pairings = false;$/;"	m	struct:Gudhi::persistence_matrix::Default_options	typeref:typename:const bool
has_column_pairings	multipers/gudhi/gudhi/persistence_matrix_options.h	/^  static const bool has_column_pairings = false;$/;"	m	struct:Gudhi::persistence_matrix::Zigzag_options	typeref:typename:const bool
has_column_pairings	multipers/gudhi/gudhi/persistence_matrix_options.h	/^  static const bool has_column_pairings = true;$/;"	m	struct:Gudhi::persistence_matrix::Multi_persistence_options	typeref:typename:const bool
has_column_pairings	multipers/gudhi/gudhi/persistence_matrix_options.h	/^  static const bool has_column_pairings = true;$/;"	m	struct:Gudhi::persistence_matrix::Representative_cycles_options	typeref:typename:const bool
has_column_pairings	multipers/gudhi/mma_interface_matrix.h	/^  static const bool has_column_pairings = true;$/;"	m	struct:Gudhi::multiparameter::truc_interface::Multi_persistence_Clement_options	typeref:typename:const bool
has_column_pairings	multipers/gudhi/mma_interface_matrix.h	/^  static const bool has_column_pairings = true;$/;"	m	struct:Gudhi::multiparameter::truc_interface::Multi_persistence_options	typeref:typename:const bool
has_column_pairings	multipers/gudhi/mma_interface_matrix.h	/^  static const bool has_column_pairings = true;$/;"	m	struct:Gudhi::multiparameter::truc_interface::No_vine_multi_persistence_options	typeref:typename:const bool
has_infinity	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  static constexpr bool has_infinity = true;$/;"	m	class:std::numeric_limits	typeref:typename:bool
has_infinity	multipers/gudhi/gudhi/One_critical_filtration.h	/^  static constexpr bool has_infinity = true;$/;"	m	class:std::numeric_limits	typeref:typename:bool
has_intrusive_rows	multipers/gudhi/gudhi/persistence_matrix_options.h	/^  static const bool has_intrusive_rows = true;$/;"	m	struct:Gudhi::persistence_matrix::Default_options	typeref:typename:const bool
has_kcritical	multipers/tests/test_simplextreemulti.py	/^has_kcritical = np.any([a().is_kcritical for a in mp.simplex_tree_multi.available_simplextrees])$/;"	v
has_map_column_container	multipers/gudhi/gudhi/persistence_matrix_options.h	/^  static const bool has_map_column_container = false;$/;"	m	struct:Gudhi::persistence_matrix::Default_options	typeref:typename:const bool
has_map_column_container	multipers/gudhi/gudhi/persistence_matrix_options.h	/^  static const bool has_map_column_container = true;$/;"	m	struct:Gudhi::persistence_matrix::Zigzag_options	typeref:typename:const bool
has_matrix_maximal_dimension_access	multipers/gudhi/gudhi/persistence_matrix_options.h	/^  static const bool has_matrix_maximal_dimension_access = false;$/;"	m	struct:Gudhi::persistence_matrix::Default_options	typeref:typename:const bool
has_matrix_maximal_dimension_access	multipers/gudhi/mma_interface_matrix.h	/^  static const bool has_matrix_maximal_dimension_access = false;$/;"	m	struct:Gudhi::multiparameter::truc_interface::Multi_persistence_Clement_options	typeref:typename:const bool
has_matrix_maximal_dimension_access	multipers/gudhi/mma_interface_matrix.h	/^  static const bool has_matrix_maximal_dimension_access = false;$/;"	m	struct:Gudhi::multiparameter::truc_interface::Multi_persistence_options	typeref:typename:const bool
has_matrix_maximal_dimension_access	multipers/gudhi/mma_interface_matrix.h	/^  static const bool has_matrix_maximal_dimension_access = false;$/;"	m	struct:Gudhi::multiparameter::truc_interface::No_vine_multi_persistence_options	typeref:typename:const bool
has_persistence	multipers/gudhi/truc.h	/^    inline const bool has_persistence() { return this->persistence.size(); };$/;"	f	class:Gudhi::multiparameter::truc_interface::Truc::TrucThread	typeref:typename:const bool
has_persistence	multipers/gudhi/truc.h	/^  inline const bool has_persistence() { return this->persistence.size(); };$/;"	f	class:Gudhi::multiparameter::truc_interface::Truc	typeref:typename:const bool
has_removable_columns	multipers/gudhi/gudhi/persistence_matrix_options.h	/^  static const bool has_removable_columns = false;$/;"	m	struct:Gudhi::persistence_matrix::Default_options	typeref:typename:const bool
has_removable_columns	multipers/gudhi/gudhi/persistence_matrix_options.h	/^  static const bool has_removable_columns = true;$/;"	m	struct:Gudhi::persistence_matrix::Zigzag_options	typeref:typename:const bool
has_removable_rows	multipers/gudhi/gudhi/persistence_matrix_options.h	/^  static const bool has_removable_rows = false;$/;"	m	struct:Gudhi::persistence_matrix::Default_options	typeref:typename:const bool
has_removable_rows	multipers/gudhi/gudhi/persistence_matrix_options.h	/^  static const bool has_removable_rows = true;$/;"	m	struct:Gudhi::persistence_matrix::Cohomology_persistence_options	typeref:typename:const bool
has_removable_rows	multipers/gudhi/gudhi/persistence_matrix_options.h	/^  static const bool has_removable_rows = true;$/;"	m	struct:Gudhi::persistence_matrix::Zigzag_options	typeref:typename:const bool
has_row_access	multipers/gudhi/gudhi/persistence_matrix_options.h	/^  static const bool has_row_access = false;$/;"	m	struct:Gudhi::persistence_matrix::Default_options	typeref:typename:const bool
has_row_access	multipers/gudhi/gudhi/persistence_matrix_options.h	/^  static const bool has_row_access = true;$/;"	m	struct:Gudhi::persistence_matrix::Cohomology_persistence_options	typeref:typename:const bool
has_row_access	multipers/gudhi/gudhi/persistence_matrix_options.h	/^  static const bool has_row_access = true;$/;"	m	struct:Gudhi::persistence_matrix::Zigzag_options	typeref:typename:const bool
has_vine_update	multipers/gudhi/gudhi/persistence_matrix_options.h	/^  static const bool has_vine_update = false;$/;"	m	struct:Gudhi::persistence_matrix::Default_options	typeref:typename:const bool
has_vine_update	multipers/gudhi/gudhi/persistence_matrix_options.h	/^  static const bool has_vine_update = true;$/;"	m	struct:Gudhi::persistence_matrix::Multi_persistence_options	typeref:typename:const bool
has_vine_update	multipers/gudhi/gudhi/persistence_matrix_options.h	/^  static const bool has_vine_update = true;$/;"	m	struct:Gudhi::persistence_matrix::Zigzag_options	typeref:typename:const bool
has_vine_update	multipers/gudhi/mma_interface_matrix.h	/^  static const bool has_vine_update = false;$/;"	m	struct:Gudhi::multiparameter::truc_interface::No_vine_multi_persistence_options	typeref:typename:const bool
has_vine_update	multipers/gudhi/mma_interface_matrix.h	/^  static const bool has_vine_update = true;$/;"	m	struct:Gudhi::multiparameter::truc_interface::Multi_persistence_Clement_options	typeref:typename:const bool
has_vine_update	multipers/gudhi/mma_interface_matrix.h	/^  static const bool has_vine_update = true;$/;"	m	struct:Gudhi::multiparameter::truc_interface::Multi_persistence_options	typeref:typename:const bool
hash	multipers/gudhi/gudhi/Persistence_matrix/columns/entry_types.h	/^struct std::hash<Gudhi::persistence_matrix::Entry<Master_matrix> > {$/;"	s	class:std
hash	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^struct std::hash<Gudhi::persistence_matrix::Heap_column<Master_matrix> > {$/;"	s	class:std
hash	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^struct std::hash<Gudhi::persistence_matrix::Intrusive_list_column<Master_matrix> > {$/;"	s	class:std
hash	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^struct std::hash<Gudhi::persistence_matrix::Intrusive_set_column<Master_matrix> > {$/;"	s	class:std
hash	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^struct std::hash<Gudhi::persistence_matrix::List_column<Master_matrix> > {$/;"	s	class:std
hash	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^struct std::hash<Gudhi::persistence_matrix::Naive_vector_column<Master_matrix> > {$/;"	s	class:std
hash	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^struct std::hash<Gudhi::persistence_matrix::Set_column<Master_matrix> > {$/;"	s	class:std
hash	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^struct std::hash<Gudhi::persistence_matrix::Small_vector_column<Master_matrix> > {$/;"	s	class:std
hash	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^struct std::hash<Gudhi::persistence_matrix::Unordered_set_column<Master_matrix>> {$/;"	s	class:std
hash	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^struct std::hash<Gudhi::persistence_matrix::Vector_column<Master_matrix> > {$/;"	s	class:std
hashCycle	multipers/gudhi/gudhi/Persistence_matrix/ru_rep_cycles.h	/^  struct hashCycle {$/;"	s	class:Gudhi::persistence_matrix::RU_representative_cycles
hash_column	multipers/gudhi/gudhi/Persistence_matrix/columns/column_utilities.h	/^std::size_t hash_column(const Column& column)$/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:std::size_t
help	docs/Makefile	/^help:$/;"	t
hf_degree_rips	multipers/ml/invariants_with_persistable.py	/^def hf_degree_rips($/;"	f
hf_h0_degree_rips	multipers/ml/invariants_with_persistable.py	/^def hf_h0_degree_rips($/;"	f
hilbert_function	multipers/multi_parameter_rank_invariant/hilbert_function.h	/^namespace hilbert_function {$/;"	n	namespace:Gudhi::multiparameter
hilbert_signed_measure	multipers/_signed_measure_meta.py	/^                _hilbert_signed_measure as hilbert_signed_measure,$/;"	Y	function:signed_measure	file:	nameref:unknown:_hilbert_signed_measure
hilbert_thread_data	multipers/multi_parameter_rank_invariant/hilbert_function.h	/^using hilbert_thread_data = tbb::enumerable_thread_specific<std::pair<Simplex_tree_std, std::vec/;"	t	namespace:Gudhi::multiparameter::hilbert_function	typeref:typename:tbb::enumerable_thread_specific<std::pair<Simplex_tree_std,std::vector<index_type>>>
hist	compute.py	/^		hist = mmo.Dgms2SignedMeasureHistogram()$/;"	v
horizontal_line_filtration2	multipers/multi_parameter_rank_invariant/hilbert_function.h	/^inline typename Filtration::value_type horizontal_line_filtration2(const Filtration &x,$/;"	f	namespace:Gudhi::multiparameter::hilbert_function	typeref:typename:Filtration::value_type
html_context	docs/conf.py	/^html_context = {$/;"	v
html_favicon	docs/conf.py	/^html_favicon = "icon.svg"$/;"	v
html_theme	docs/conf.py	/^html_theme = "sphinx_rtd_theme"$/;"	v
idToIndex_	multipers/gudhi/gudhi/Persistence_matrix/Id_to_index_overlay.h	/^  Dictionary* idToIndex_;     \/**< Map from @ref IDIdx index to @ref MatIdx index. *\/$/;"	m	class:Gudhi::persistence_matrix::Id_to_index_overlay	typeref:typename:Dictionary *
idToPosition_	multipers/gudhi/gudhi/Persistence_matrix/base_pairing.h	/^  std::unordered_map<ID_index,Pos_index> idToPosition_;  \/\/TODO: test other map types$/;"	m	class:Gudhi::persistence_matrix::Base_pairing	typeref:typename:std::unordered_map<ID_index,Pos_index>
idToPosition_	multipers/gudhi/gudhi/Persistence_matrix/ru_pairing.h	/^  std::unordered_map<ID_index, Pos_index> idToPosition_;  \/\/TODO: test other map types$/;"	m	class:Gudhi::persistence_matrix::RU_pairing	typeref:typename:std::unordered_map<ID_index,Pos_index>
idx_dump_type	multipers/multiparameter_module_approximation/approximation.h	/^  using idx_dump_type =$/;"	t	class:Gudhi::multiparameter::mma::Module
idx_map_type	multipers/gudhi/Simplex_tree_multi_interface.h	/^  using idx_map_type = std::vector<std::map<typename Filtration::value_type, int32_t>>;$/;"	t	class:Gudhi::multiparameter::python_interface::Simplex_tree_multi_interface	typeref:typename:std::vector<std::map<typename Filtration::value_type,int32_t>>
idx_map_type	multipers/multi_parameter_rank_invariant/diff_helpers.h	/^using idx_map_type = std::vector<std::map<typename Filtration::value_type, int32_t>>;$/;"	t	namespace:Gudhi::multiparameter::differentiation	typeref:typename:std::vector<std::map<typename Filtration::value_type,int32_t>>
image_type	multipers/multiparameter_module_approximation/approximation.h	/^  using image_type = std::vector<std::vector<value_type>>;$/;"	t	class:Gudhi::multiparameter::mma::Module	typeref:typename:std::vector<std::vector<value_type>>
img	compute.py	/^		img = mmo.Dgms2SignedMeasureImage()$/;"	v
img_distances	multipers/data/MOL2.py	/^def img_distances(img_dict: dict):$/;"	f
impose_lower_star_filtration	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^void Bitmap_cubical_complex_base<T>::impose_lower_star_filtration() {$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base	typeref:typename:void
impose_lower_star_filtration_from_vertices	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^void Bitmap_cubical_complex_base<T>::impose_lower_star_filtration_from_vertices() {$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base	typeref:typename:void
impose_lower_star_filtration_from_vertices	multipers/gudhi/gudhi/Bitmap_cubical_complex_periodic_boundary_conditions_base.h	/^void Bitmap_cubical_complex_periodic_boundary_conditions_base<T>::impose_lower_star_filtration_f/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_periodic_boundary_conditions_base	typeref:typename:void
increment	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  void increment() {$/;"	f	class:Gudhi::Simplex_tree_boundary_opposite_vertex_simplex_iterator	typeref:typename:void
increment	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  void increment() {$/;"	f	class:Gudhi::Simplex_tree_boundary_simplex_iterator	typeref:typename:void
increment	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  void increment() {$/;"	f	class:Gudhi::Simplex_tree_complex_simplex_iterator	typeref:typename:void
increment	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  void increment() {$/;"	f	class:Gudhi::Simplex_tree_simplex_vertex_iterator	typeref:typename:void
increment	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  void increment() {$/;"	f	class:Gudhi::Simplex_tree_skeleton_simplex_iterator	typeref:typename:void
increment	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_star_simplex_iterators.h	/^  void increment() { increment_all_cofaces(); }$/;"	f	class:Gudhi::Simplex_tree_optimized_star_simplex_iterator	typeref:typename:void
increment	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_star_simplex_iterators.h	/^  void increment() {$/;"	f	class:Gudhi::Simplex_tree_optimized_cofaces_rooted_subtrees_simplex_iterator	typeref:typename:void
increment	multipers/gudhi/mma_interface_coh.h	/^    void increment() {$/;"	f	class:Gudhi::multiparameter::truc_interface::Boundary_matrix_as_filtered_complex_for_coh::Filtration_range_iterator	typeref:typename:void
increment	multipers/gudhi/mma_interface_h0.h	/^    void increment() {$/;"	f	class:Gudhi::multiparameter::truc_interface::Persistence_backend_h0::Barcode_iterator	typeref:typename:void
increment	multipers/gudhi/mma_interface_matrix.h	/^    void increment() {$/;"	f	class:Gudhi::multiparameter::truc_interface::Persistence_backend_matrix::Barcode_iterator	typeref:typename:void
increment_all_cofaces	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_star_simplex_iterators.h	/^  void increment_all_cofaces() {$/;"	f	class:Gudhi::Simplex_tree_optimized_star_simplex_iterator	typeref:typename:void
index	multipers/gudhi/naive_merge_tree.h	/^  using index = int;$/;"	t	class:Naive_bottleneck_forest	typeref:typename:int
index	multipers/gudhi/naive_merge_tree.h	/^  using index = int;$/;"	t	class:Naive_merge_forest	typeref:typename:int
index	multipers/multiparameter_module_approximation/utilities.h	/^using index = unsigned int;$/;"	t	namespace:Gudhi::multiparameter::mma	typeref:typename:unsigned int
indexToBar_	multipers/gudhi/gudhi/Persistence_matrix/chain_pairing.h	/^  Dictionary indexToBar_;   \/**< Map from @ref MatIdx index to bar index. *\/$/;"	m	class:Gudhi::persistence_matrix::Chain_pairing	typeref:typename:Dictionary
indexToBar_	multipers/gudhi/gudhi/Persistence_matrix/ru_pairing.h	/^  Dictionary indexToBar_; \/**< Map from @ref MatIdx index to bar index. *\/$/;"	m	class:Gudhi::persistence_matrix::RU_pairing	typeref:typename:Dictionary
indexToBar_	multipers/multiparameter_module_approximation/ru_matrix.h	/^  std::vector<int> indexToBar_;$/;"	m	class:Gudhi::multiparameter::mma::RU_matrix	typeref:typename:std::vector<int>
indexToRow_	multipers/gudhi/gudhi/Persistence_matrix/base_swap.h	/^  Index_dictionary indexToRow_; \/**< Map from row index to actual index in row container. *\/$/;"	m	class:Gudhi::persistence_matrix::Base_swap	typeref:typename:Index_dictionary
indexToRow_	multipers/multiparameter_module_approximation/vector_matrix.h	/^    std::vector<unsigned int> indexToRow_;$/;"	m	class:Gudhi::multiparameter::mma::Vector_matrix	typeref:typename:std::vector<unsigned int>
index_type	multipers/gudhi/truc.h	/^using index_type = std::uint32_t;$/;"	t	namespace:Gudhi::multiparameter::truc_interface	typeref:typename:std::uint32_t
indices	compute.py	/^	indices = range(min(10, len(X)))$/;"	v
inf	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  constexpr static Multi_critical_filtration inf() { return Multi_critical_filtration(Generator:/;"	f	class:Gudhi::multi_filtration::Multi_critical_filtration	typeref:typename:Multi_critical_filtration
inf	multipers/gudhi/gudhi/One_critical_filtration.h	/^  constexpr static One_critical_filtration inf() { return {T_inf}; }$/;"	f	class:Gudhi::multi_filtration::One_critical_filtration	typeref:typename:One_critical_filtration
inf	multipers/gudhi/gudhi/persistence_interval.h	/^  static constexpr Event_value inf = std::numeric_limits<Event_value>::has_infinity$/;"	m	struct:Gudhi::persistence_matrix::Persistence_interval	typeref:typename:Event_value
inf	multipers/multiparameter_module_approximation/utilities.h	/^const value_type inf = std::numeric_limits<value_type>::infinity();$/;"	v	namespace:Gudhi::multiparameter::mma	typeref:typename:const value_type
inf_	multipers/gudhi/gudhi/Simplex_tree.h	/^    inline static const Filtration_value inf_ = std::numeric_limits<Filtration_value>::has_infin/;"	m	struct:Gudhi::Simplex_tree::Filtration_simplex_base_real	typeref:typename:const Filtration_value
infer_box	multipers/multiparameter_module_approximation/approximation.h	/^inline void Module<value_type>::infer_box(std::vector<filtration_type> &f) {$/;"	f	class:Gudhi::multiparameter::mma::Module	typeref:typename:void
infinity	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  static constexpr Gudhi::multi_filtration::Multi_critical_filtration<T> infinity() noexcept {$/;"	f	class:std::numeric_limits	typeref:typename:Gudhi::multi_filtration::Multi_critical_filtration<T>
infinity	multipers/gudhi/gudhi/One_critical_filtration.h	/^  static constexpr Gudhi::multi_filtration::One_critical_filtration<T> infinity() noexcept {$/;"	f	class:std::numeric_limits	typeref:typename:Gudhi::multi_filtration::One_critical_filtration<T>
inflate	multipers/gudhi/gudhi/Multi_persistence/Box.h	/^  void inflate(T delta) {$/;"	f	class:Gudhi::multi_persistence::Box	typeref:typename:void
init	multipers/gudhi/gudhi/Persistent_cohomology/Field_Zp.h	/^  void init(int charac) {$/;"	f	class:Gudhi::persistent_cohomology::Field_Zp	typeref:typename:void
init	multipers/gudhi/gudhi/Persistent_cohomology/Multi_field.h	/^  void init(int min_prime, int max_prime) {$/;"	f	class:Gudhi::persistent_cohomology::Multi_field	typeref:typename:void
init	multipers/gudhi/gudhi/Points_off_io.h	/^  void init(int dim, int num_vertices, int num_faces, int num_edges) {$/;"	f	class:Gudhi::Points_off_visitor_reader	typeref:typename:void
init_coefficients	multipers/gudhi/gudhi/Persistent_cohomology.h	/^  void init_coefficients(int charac) {$/;"	f	class:Gudhi::persistent_cohomology::Persistent_cohomology	typeref:typename:void
init_coefficients	multipers/gudhi/gudhi/Persistent_cohomology.h	/^  void init_coefficients(int charac_min, int charac_max) {$/;"	f	class:Gudhi::persistent_cohomology::Persistent_cohomology	typeref:typename:void
init_neighbors_dense	multipers/gudhi/gudhi/Flag_complex_edge_collapser.h	/^  void init_neighbors_dense(){$/;"	f	struct:Gudhi::collapse::Flag_complex_edge_collapser	typeref:typename:void
initialize	multipers/gudhi/gudhi/Fields/Multi_field_shared.h	/^inline void Shared_multi_field_element::initialize(unsigned int minimum, unsigned int maximum) {$/;"	f	class:Gudhi::persistence_fields::Shared_multi_field_element	typeref:typename:void
initialize	multipers/gudhi/gudhi/Fields/Multi_field_small_shared.h	/^  static void initialize(unsigned int minimum, unsigned int maximum) {$/;"	f	class:Gudhi::persistence_fields::Shared_multi_field_element_with_small_characteristics	typeref:typename:void
initialize	multipers/gudhi/gudhi/Fields/Zp_field_shared.h	/^  static void initialize(Characteristic characteristic) {$/;"	f	class:Gudhi::persistence_fields::Shared_Zp_field_element	typeref:typename:void
initialize	multipers/gudhi/naive_merge_tree.h	/^  void initialize() {$/;"	f	class:Naive_merge_forest	typeref:typename:void
initialize	multipers/multiparameter_module_approximation/ru_matrix.h	/^template <class Column_type> inline void RU_matrix<Column_type>::initialize() {$/;"	f	class:Gudhi::multiparameter::mma::RU_matrix	typeref:typename:void
initialize_barcode	multipers/multiparameter_module_approximation/vineyards.h	/^inline void Vineyard_persistence<Vineyard_matrix_type>::initialize_barcode()$/;"	f	class:Gudhi::multiparameter::mma::Vineyard_persistence	typeref:typename:void
initialize_filtration	multipers/gudhi/gudhi/Bitmap_cubical_complex.h	/^void Bitmap_cubical_complex<T>::initialize_filtration() {$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex	typeref:typename:void
initialize_filtration	multipers/gudhi/gudhi/Simplex_tree.h	/^  void initialize_filtration(Comparator&& is_before_in_filtration, Ignorer&& ignore_simplex) {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:void
initialize_filtration	multipers/gudhi/gudhi/Simplex_tree.h	/^  void initialize_filtration(bool ignore_infinite_values = false) {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:void
inkscape	docs/icon.svg	/^   xmlns:dc="http:\/\/purl.org\/dc\/elements\/1.1\/">$/;"	n	uri:http://www.inkscape.org/namespaces/inkscape
input_path	multipers/io.pyx	/^input_path:str|os.PathLike = "multipers_input.scc"$/;"	v	typeref:typename:str|os.PathLike
insert	multipers/gudhi/Simplex_tree_interface.h	/^  bool insert(const Simplex& simplex, Filtration_value filtration = 0) {$/;"	f	class:Gudhi::Simplex_tree_interface	typeref:typename:bool
insert	multipers/gudhi/Simplex_tree_multi_interface.h	/^  bool insert(const Simplex &simplex, const Filtration_value &filtration) {$/;"	f	class:Gudhi::multiparameter::python_interface::Simplex_tree_multi_interface	typeref:typename:bool
insert_batch_vertices	multipers/gudhi/gudhi/Simplex_tree.h	/^  void insert_batch_vertices(VertexRange const& vertices, const Filtration_value& filt = Filtrat/;"	f	class:Gudhi::Simplex_tree	typeref:typename:void
insert_boundary	multipers/gudhi/gudhi/Matrix.h	/^Matrix<PersistenceMatrixOptions>::insert_boundary(ID_index cellIndex,$/;"	f	class:Gudhi::persistence_matrix::Matrix	typeref:typename:Matrix<PersistenceMatrixOptions>::Insertion_return
insert_boundary	multipers/gudhi/gudhi/Matrix.h	/^Matrix<PersistenceMatrixOptions>::insert_boundary(const Boundary_range& boundary, Dimension dim)$/;"	f	class:Gudhi::persistence_matrix::Matrix	typeref:typename:Matrix<PersistenceMatrixOptions>::Insertion_return
insert_boundary	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix.h	/^inline void Base_matrix<Master_matrix>::insert_boundary(const Boundary_range& boundary, Dimensio/;"	f	class:Gudhi::persistence_matrix::Base_matrix	typeref:typename:void
insert_boundary	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix_with_column_compression.h	/^inline void Base_matrix_with_column_compression<Master_matrix>::insert_boundary(const Boundary_r/;"	f	class:Gudhi::persistence_matrix::Base_matrix_with_column_compression	typeref:typename:void
insert_boundary	multipers/gudhi/gudhi/Persistence_matrix/Boundary_matrix.h	/^inline typename Boundary_matrix<Master_matrix>::Index Boundary_matrix<Master_matrix>::insert_bou/;"	f	class:Gudhi::persistence_matrix::Boundary_matrix	typeref:typename:Boundary_matrix<Master_matrix>::Index
insert_boundary	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^inline std::vector<typename Master_matrix::Entry_representative> Chain_matrix<Master_matrix>::in/;"	f	class:Gudhi::persistence_matrix::Chain_matrix	typeref:typename:std::vector<typename Master_matrix::Entry_representative>
insert_boundary	multipers/gudhi/gudhi/Persistence_matrix/Id_to_index_overlay.h	/^inline void Id_to_index_overlay<Underlying_matrix, Master_matrix>::insert_boundary(ID_index cell/;"	f	class:Gudhi::persistence_matrix::Id_to_index_overlay	typeref:typename:void
insert_boundary	multipers/gudhi/gudhi/Persistence_matrix/Id_to_index_overlay.h	/^inline void Id_to_index_overlay<Underlying_matrix, Master_matrix>::insert_boundary(const Boundar/;"	f	class:Gudhi::persistence_matrix::Id_to_index_overlay	typeref:typename:void
insert_boundary	multipers/gudhi/gudhi/Persistence_matrix/Position_to_index_overlay.h	/^inline void Position_to_index_overlay<Underlying_matrix, Master_matrix>::insert_boundary(ID_inde/;"	f	class:Gudhi::persistence_matrix::Position_to_index_overlay	typeref:typename:void
insert_boundary	multipers/gudhi/gudhi/Persistence_matrix/Position_to_index_overlay.h	/^inline void Position_to_index_overlay<Underlying_matrix, Master_matrix>::insert_boundary(const B/;"	f	class:Gudhi::persistence_matrix::Position_to_index_overlay	typeref:typename:void
insert_boundary	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^inline void RU_matrix<Master_matrix>::insert_boundary(ID_index cellIndex,$/;"	f	class:Gudhi::persistence_matrix::RU_matrix	typeref:typename:void
insert_boundary	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^inline void RU_matrix<Master_matrix>::insert_boundary(const Boundary_range& boundary, Dimension /;"	f	class:Gudhi::persistence_matrix::RU_matrix	typeref:typename:void
insert_boundary	multipers/multiparameter_module_approximation/ru_matrix.h	/^inline void RU_matrix<Column_type>::insert_boundary(index columnIndex,$/;"	f	class:Gudhi::multiparameter::mma::RU_matrix	typeref:typename:void
insert_boundary	multipers/multiparameter_module_approximation/vector_matrix.h	/^inline void Vector_matrix<Column_type>::insert_boundary($/;"	f	class:Gudhi::multiparameter::mma::Vector_matrix	typeref:typename:void
insert_column	multipers/gudhi/gudhi/Matrix.h	/^inline void Matrix<PersistenceMatrixOptions>::insert_column(const Container& column) $/;"	f	class:Gudhi::persistence_matrix::Matrix	typeref:typename:void
insert_column	multipers/gudhi/gudhi/Matrix.h	/^inline void Matrix<PersistenceMatrixOptions>::insert_column(const Container& column, Index colum/;"	f	class:Gudhi::persistence_matrix::Matrix	typeref:typename:void
insert_column	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix.h	/^inline void Base_matrix<Master_matrix>::insert_column(const Container& column) $/;"	f	class:Gudhi::persistence_matrix::Base_matrix	typeref:typename:void
insert_column	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix.h	/^inline void Base_matrix<Master_matrix>::insert_column(const Container& column, Index columnIndex/;"	f	class:Gudhi::persistence_matrix::Base_matrix	typeref:typename:void
insert_column	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix_with_column_compression.h	/^inline void Base_matrix_with_column_compression<Master_matrix>::insert_column(const Container& c/;"	f	class:Gudhi::persistence_matrix::Base_matrix_with_column_compression	typeref:typename:void
insert_column	multipers/multiparameter_module_approximation/vector_matrix.h	/^inline void Vector_matrix<Column_type>::insert_column($/;"	f	class:Gudhi::multiparameter::mma::Vector_matrix	typeref:typename:void
insert_edge_as_flag	multipers/gudhi/gudhi/Simplex_tree.h	/^  void insert_edge_as_flag(Vertex_handle u,$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:void
insert_entry	multipers/gudhi/gudhi/Persistence_matrix/columns/row_access.h	/^inline void Row_access<Master_matrix>::insert_entry(ID_index rowIndex, Matrix_entry* entry) $/;"	f	class:Gudhi::persistence_matrix::Row_access	typeref:typename:void
insert_graph	multipers/gudhi/gudhi/Simplex_tree.h	/^  void insert_graph(const OneSkeletonGraph& skel_graph) {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:void
insert_matrix	multipers/gudhi/Simplex_tree_interface.h	/^  void insert_matrix(double* filtrations, int n, int stride0, int stride1, double max_filtration/;"	f	class:Gudhi::Simplex_tree_interface	typeref:typename:void
insert_node_	multipers/gudhi/gudhi/Simplex_tree.h	/^  std::pair<Simplex_handle, bool> insert_node_(Siblings* sib, Vertex_handle v, Filt&& filtration/;"	f	class:Gudhi::Simplex_tree	typeref:typename:std::pair<Simplex_handle,bool>
insert_simplex	multipers/gudhi/Simplex_tree_interface.h	/^  bool insert_simplex(const Simplex& simplex, Filtration_value filtration = 0) {$/;"	f	class:Gudhi::Simplex_tree_interface	typeref:typename:bool
insert_simplex	multipers/gudhi/Simplex_tree_interface.h	/^  bool insert_simplex(const std::vector<std::size_t>& simplex, Filtration_value filtration = 0) /;"	f	class:Gudhi::Simplex_tree_interface	typeref:typename:bool
insert_simplex	multipers/gudhi/Simplex_tree_multi_interface.h	/^  bool insert_simplex(const Simplex &simplex,$/;"	f	class:Gudhi::multiparameter::python_interface::Simplex_tree_multi_interface	typeref:typename:bool
insert_simplex	multipers/gudhi/Simplex_tree_multi_interface.h	/^  bool insert_simplex(const std::vector<std::size_t> &simplex,$/;"	f	class:Gudhi::multiparameter::python_interface::Simplex_tree_multi_interface	typeref:typename:bool
insert_simplex	multipers/gudhi/gudhi/Simplex_tree.h	/^  std::pair<Simplex_handle, bool> insert_simplex(const InputVertexRange& simplex,$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:std::pair<Simplex_handle,bool>
insert_simplex_and_subfaces	multipers/gudhi/Simplex_tree_multi_interface.h	/^  bool insert_simplex_and_subfaces(const Simplex &simplex,$/;"	f	class:Gudhi::multiparameter::python_interface::Simplex_tree_multi_interface	typeref:typename:bool
insert_simplex_and_subfaces	multipers/gudhi/Simplex_tree_multi_interface.h	/^  bool insert_simplex_and_subfaces(const std::vector<std::size_t> &simplex,$/;"	f	class:Gudhi::multiparameter::python_interface::Simplex_tree_multi_interface	typeref:typename:bool
insert_simplex_and_subfaces	multipers/gudhi/gudhi/Simplex_tree.h	/^  std::pair<Simplex_handle, bool> insert_simplex_and_subfaces(const InputVertexRange& Nsimplex,$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:std::pair<Simplex_handle,bool>
insert_simplex_raw	multipers/gudhi/gudhi/Simplex_tree.h	/^  std::pair<Simplex_handle, bool> insert_simplex_raw(const RandomVertexHandleRange& simplex,$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:std::pair<Simplex_handle,bool>
insertsSinceLastPrune_	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^  unsigned int insertsSinceLastPrune_;$/;"	m	class:Gudhi::persistence_matrix::Heap_column	typeref:typename:unsigned int
insertsSinceLastPrune_	multipers/multiparameter_module_approximation/heap_column.h	/^    unsigned int insertsSinceLastPrune_;$/;"	m	class:Vineyard::Heap_column	typeref:typename:unsigned int
int_degrees	compute.py	/^int_degrees = [d for d in args.degrees if d is not None]$/;"	v
int_fil_type	multipers/gudhi/Simplex_tree_multi_interface.h	/^    using int_fil_type = decltype(std::declval<Filtration>().template as_type<std::int32_t>());$/;"	t	function:Gudhi::multiparameter::python_interface::Simplex_tree_multi_interface::squeeze_filtration
integrate_measure	multipers/point_measure.pyx	/^def integrate_measure($/;"	f
integrate_measure_python	multipers/point_measure.pyx	/^def integrate_measure_python(pts, weights, filtrations):$/;"	f
interface_multi	multipers/gudhi/Simplex_tree_multi_interface.h	/^using interface_multi = Simplex_tree_multi_interface<$/;"	t	namespace:Gudhi::multiparameter::python_interface	typeref:typename:Simplex_tree_multi_interface<Gudhi::multi_persistence::Simplex_tree_options_multidimensional_filtration<Filtration>>
interface_multi	multipers/multi_parameter_rank_invariant/diff_helpers.h	/^using interface_multi = python_interface::interface_multi<Filtration>;$/;"	t	namespace:Gudhi::multiparameter::differentiation	typeref:typename:python_interface::interface_multi<Filtration>
interface_multi	multipers/multi_parameter_rank_invariant/function_rips.h	/^using interface_multi = _multist;$/;"	t	namespace:Gudhi::multiparameter::function_rips	typeref:typename:_multist
interface_std	multipers/gudhi/Simplex_tree_multi_interface.h	/^using interface_std =$/;"	t	namespace:Gudhi::multiparameter::python_interface	typeref:typename:Simplex_tree<Simplex_tree_options_for_python>
interlevelsets_multipersistence	multipers_old.py	/^def interlevelsets_multipersistence(matching, simplextree, filters, basepoint=None, homology=0, /;"	f
intersect_boundaries	multipers_old.py	/^def intersect_boundaries(summand, bnds, visu=False):$/;"	f
intersect_lifetimes	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  friend bool intersect_lifetimes(Multi_critical_filtration &f1, const Multi_critical_filtration/;"	f	namespace:Gudhi::multi_filtration	typeref:typename:bool
intersect_lifetimes	multipers/gudhi/gudhi/One_critical_filtration.h	/^  friend bool intersect_lifetimes(One_critical_filtration &f1, const One_critical_filtration &f2/;"	f	namespace:Gudhi::multi_filtration	typeref:typename:bool
intersect_lifetimes	multipers/gudhi/gudhi/Simplex_tree/simplex_tree_options.h	/^bool intersect_lifetimes(Arithmetic_filtration_value& f1, Arithmetic_filtration_value f2)$/;"	f	namespace:Gudhi	typeref:typename:bool
intersection	multipers/gudhi/gudhi/Simplex_tree.h	/^  static void intersection(std::vector<std::pair<Vertex_handle, Node>>& intersection,$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:void
interval_length_policy	multipers/gudhi/gudhi/Persistent_cohomology.h	/^  length_interval interval_length_policy;$/;"	m	class:Gudhi::persistent_cohomology::Persistent_cohomology	typeref:typename:length_interval
interval_type	multipers/multiparameter_module_approximation/utilities.h	/^using interval_type = std::pair<point_type, point_type>;$/;"	t	namespace:Gudhi::multiparameter::mma	typeref:typename:std::pair<point_type,point_type>
intervals_in_dimension	multipers/gudhi/gudhi/Persistent_cohomology.h	/^  intervals_in_dimension(int dimension) {$/;"	f	class:Gudhi::persistent_cohomology::Persistent_cohomology	typeref:typename:std::vector<std::pair<Filtration_value,Filtration_value>>
inv	benchmarks/stuff.py	/^    n, dataset, cplx, inv, degree, vine, dtype, col = args$/;"	v
invariants	benchmarks/stuff.py	/^invariants = ["mma", "slice", "hilbert", "rank", "gudhi_slice"]$/;"	v
invariants	multipers/tests/test_signed_measure.py	/^invariants = ["euler", "hilbert", "rank"]$/;"	v
inverse	multipers/gudhi/gudhi/Persistent_cohomology/Field_Zp.h	/^  std::pair<Element, Element> inverse(Element x, Element P) {$/;"	f	class:Gudhi::persistent_cohomology::Field_Zp	typeref:typename:std::pair<Element,Element>
inverse	multipers/gudhi/gudhi/Persistent_cohomology/Multi_field.h	/^  std::pair<Element, Element> inverse(Element x, Element QS) {$/;"	f	class:Gudhi::persistent_cohomology::Multi_field	typeref:typename:std::pair<Element,Element>
inverse	multipers/multiparameter_module_approximation/combinatory.h	/^std::vector<T> inverse(const std::vector<T> &p){$/;"	f	namespace:Gudhi::multiparameter::mma::Combinatorics	typeref:typename:std::vector<T>
inverse_	multipers/gudhi/gudhi/Fields/Zp_field.h	/^  static inline std::array<unsigned int, characteristic> inverse_;  \/**< All inverse elements. /;"	m	class:Gudhi::persistence_fields::Zp_field_element	typeref:typename:std::array<unsigned int,characteristic>
inverse_	multipers/gudhi/gudhi/Fields/Zp_field_operators.h	/^  std::vector<Element> inverse_;   \/**< All inverse elements. *\/$/;"	m	class:Gudhi::persistence_fields::Zp_field_operators	typeref:typename:std::vector<Element>
inverse_	multipers/gudhi/gudhi/Fields/Zp_field_shared.h	/^  static inline std::vector<Element> inverse_;   \/**< All inverse elements. *\/$/;"	m	class:Gudhi::persistence_fields::Shared_Zp_field_element	typeref:typename:std::vector<Element>
inverse_	multipers/gudhi/gudhi/Persistent_cohomology/Field_Zp.h	/^  std::vector<Element> inverse_;$/;"	m	class:Gudhi::persistent_cohomology::Field_Zp	typeref:typename:std::vector<Element>
isInteger	multipers/gudhi/gudhi/Fields/Multi_field_small.h	/^  using isInteger = std::enable_if_t<std::is_integral_v<T> >;$/;"	t	class:Gudhi::persistence_fields::Multi_field_element_with_small_characteristics	typeref:typename:std::enable_if_t<std::is_integral_v<T>>
isInteger	multipers/gudhi/gudhi/Fields/Multi_field_small_shared.h	/^  using isInteger = std::enable_if_t<std::is_integral_v<T> >;$/;"	t	class:Gudhi::persistence_fields::Shared_multi_field_element_with_small_characteristics	typeref:typename:std::enable_if_t<std::is_integral_v<T>>
isInteger	multipers/gudhi/gudhi/Fields/Z2_field.h	/^  using isInteger = std::enable_if_t<std::is_integral_v<T> >;$/;"	t	class:Gudhi::persistence_fields::Z2_field_element	typeref:typename:std::enable_if_t<std::is_integral_v<T>>
isInteger	multipers/gudhi/gudhi/Fields/Z2_field_operators.h	/^  using isInteger = std::enable_if_t<std::is_integral_v<T> >;$/;"	t	class:Gudhi::persistence_fields::Z2_field_operators	typeref:typename:std::enable_if_t<std::is_integral_v<T>>
isInteger	multipers/gudhi/gudhi/Fields/Zp_field.h	/^  using isInteger = std::enable_if_t<std::is_integral_v<T> >;$/;"	t	class:Gudhi::persistence_fields::Zp_field_element	typeref:typename:std::enable_if_t<std::is_integral_v<T>>
isInteger	multipers/gudhi/gudhi/Fields/Zp_field_shared.h	/^  using isInteger = std::enable_if_t<std::is_integral_v<T> >;$/;"	t	class:Gudhi::persistence_fields::Shared_Zp_field_element	typeref:typename:std::enable_if_t<std::is_integral_v<T>>
isNonBasic	multipers/gudhi/gudhi/Matrix.h	/^  static const bool isNonBasic = PersistenceMatrixOptions::has_column_pairings ||$/;"	m	class:Gudhi::persistence_matrix::Matrix	typeref:typename:const bool
isReduced_	multipers/gudhi/gudhi/Persistence_matrix/base_pairing.h	/^  bool isReduced_;        \/**< True if `_reduce()` was called. *\/$/;"	m	class:Gudhi::persistence_matrix::Base_pairing	typeref:typename:bool
isSignedInteger	multipers/gudhi/gudhi/Fields/Zp_field_operators.h	/^  using isSignedInteger = std::enable_if_t<std::is_signed_v<T> >;$/;"	t	class:Gudhi::persistence_fields::Zp_field_operators	typeref:typename:std::enable_if_t<std::is_signed_v<T>>
isUnsignedInteger	multipers/gudhi/gudhi/Fields/Z2_field_operators.h	/^  using isUnsignedInteger = std::enable_if_t<std::is_unsigned_v<T> >;$/;"	t	class:Gudhi::persistence_fields::Z2_field_operators	typeref:typename:std::enable_if_t<std::is_unsigned_v<T>>
is_before_in_filtration	multipers/gudhi/gudhi/Bitmap_cubical_complex.h	/^  explicit is_before_in_filtration(Bitmap_cubical_complex<T>* CC) : CC_(CC) {}$/;"	f	class:Gudhi::cubical_complex::is_before_in_filtration
is_before_in_filtration	multipers/gudhi/gudhi/Bitmap_cubical_complex.h	/^class is_before_in_filtration {$/;"	c	namespace:Gudhi::cubical_complex
is_before_in_totally_ordered_filtration	multipers/gudhi/gudhi/Simplex_tree.h	/^    explicit is_before_in_totally_ordered_filtration(Simplex_tree* st) : st_(st) {}$/;"	f	struct:Gudhi::Simplex_tree::is_before_in_totally_ordered_filtration
is_before_in_totally_ordered_filtration	multipers/gudhi/gudhi/Simplex_tree.h	/^  struct is_before_in_totally_ordered_filtration {$/;"	s	class:Gudhi::Simplex_tree
is_coface	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_star_simplex_iterators.h	/^    is_coface() : cpx_(nullptr) {}$/;"	f	class:Gudhi::Simplex_tree_optimized_cofaces_rooted_subtrees_simplex_iterator::is_coface
is_coface	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_star_simplex_iterators.h	/^    is_coface(SimplexTree* cpx, Static_vertex_vector&& simp) : cpx_(cpx), simp_(simp) {}$/;"	f	class:Gudhi::Simplex_tree_optimized_cofaces_rooted_subtrees_simplex_iterator::is_coface
is_coface	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_star_simplex_iterators.h	/^  class is_coface {$/;"	c	class:Gudhi::Simplex_tree_optimized_cofaces_rooted_subtrees_simplex_iterator
is_dominated_by	multipers/gudhi/gudhi/Flag_complex_edge_collapser.h	/^  bool is_dominated_by(Ngb const& e_ngb, Vertex c, Filtration_value f){$/;"	f	struct:Gudhi::collapse::Flag_complex_edge_collapser	typeref:typename:bool
is_empty	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^inline bool Heap_column<Master_matrix>::is_empty()$/;"	f	class:Gudhi::persistence_matrix::Heap_column	typeref:typename:bool
is_empty	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^inline bool Intrusive_list_column<Master_matrix>::is_empty() const$/;"	f	class:Gudhi::persistence_matrix::Intrusive_list_column	typeref:typename:bool
is_empty	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^inline bool Intrusive_set_column<Master_matrix>::is_empty() const$/;"	f	class:Gudhi::persistence_matrix::Intrusive_set_column	typeref:typename:bool
is_empty	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^inline bool List_column<Master_matrix>::is_empty() const$/;"	f	class:Gudhi::persistence_matrix::List_column	typeref:typename:bool
is_empty	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^inline bool Naive_vector_column<Master_matrix>::is_empty() const$/;"	f	class:Gudhi::persistence_matrix::Naive_vector_column	typeref:typename:bool
is_empty	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^inline bool Set_column<Master_matrix>::is_empty() const$/;"	f	class:Gudhi::persistence_matrix::Set_column	typeref:typename:bool
is_empty	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^inline bool Small_vector_column<Master_matrix>::is_empty() const$/;"	f	class:Gudhi::persistence_matrix::Small_vector_column	typeref:typename:bool
is_empty	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^inline bool Unordered_set_column<Master_matrix>::is_empty() const$/;"	f	class:Gudhi::persistence_matrix::Unordered_set_column	typeref:typename:bool
is_empty	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^inline bool Vector_column<Master_matrix>::is_empty() const$/;"	f	class:Gudhi::persistence_matrix::Vector_column	typeref:typename:bool
is_empty	multipers/gudhi/gudhi/Simplex_tree.h	/^  bool is_empty() const { return root_.members_.empty(); }$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:bool
is_empty	multipers/multiparameter_module_approximation/heap_column.h	/^inline bool Heap_column::is_empty()$/;"	f	class:Vineyard::Heap_column	typeref:typename:bool
is_empty	multipers/multiparameter_module_approximation/list_column.h	/^inline bool List_column::is_empty()$/;"	f	class:Vineyard::List_column	typeref:typename:bool
is_empty	multipers/multiparameter_module_approximation/list_column_2.h	/^inline bool List_column::is_empty()$/;"	f	class:Vineyard::List_column	typeref:typename:bool
is_empty	multipers/multiparameter_module_approximation/set_column.h	/^inline bool Set_column::is_empty()$/;"	f	class:Gudhi::multiparameter::mma::Set_column	typeref:typename:bool
is_empty	multipers/multiparameter_module_approximation/unordered_set_column.h	/^inline bool Unordered_set_column::is_empty()$/;"	f	class:Vineyard::Unordered_set_column	typeref:typename:bool
is_empty	multipers/multiparameter_module_approximation/vector_column.h	/^inline bool Vector_column::is_empty()$/;"	f	class:Vineyard::Vector_column	typeref:typename:bool
is_finished	multipers/multiparameter_module_approximation/approximation.h	/^  inline bool is_finished() const { return remaining_iterations <= 0; }$/;"	f	class:Gudhi::multiparameter::mma::LineIterator	typeref:typename:bool
is_finite	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  bool is_finite() const {$/;"	f	class:Gudhi::multi_filtration::Multi_critical_filtration	typeref:typename:bool
is_finite	multipers/gudhi/gudhi/One_critical_filtration.h	/^  bool is_finite() const {$/;"	f	class:Gudhi::multi_filtration::One_critical_filtration	typeref:typename:bool
is_float	multipers/tensor/tensor.h	/^  inline bool is_float() const { return this->is_float(this->resolution_view); }$/;"	f	class:tensor::static_tensor_view_view	typeref:typename:bool
is_float	multipers/tensor/tensor.h	/^  inline bool is_float(const std::vector<indices_type> &resolution) const {$/;"	f	class:tensor::static_tensor_view_view	typeref:typename:bool
is_in_view	multipers/tensor/tensor.h	/^  inline bool is_in_view(const oned_array_like &coordinates,$/;"	f	class:tensor::static_tensor_view_view	typeref:typename:bool
is_minus_inf	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  bool is_minus_inf() const { return multi_filtration_.size() == 1 && multi_filtration_[0].is_mi/;"	f	class:Gudhi::multi_filtration::Multi_critical_filtration	typeref:typename:bool
is_minus_inf	multipers/gudhi/gudhi/One_critical_filtration.h	/^  bool is_minus_inf() const {$/;"	f	class:Gudhi::multi_filtration::One_critical_filtration	typeref:typename:bool
is_multi_critical	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  constexpr static const bool is_multi_critical = true;$/;"	m	class:Gudhi::multi_filtration::Multi_critical_filtration	typeref:typename:const bool
is_multi_critical	multipers/gudhi/gudhi/One_critical_filtration.h	/^  constexpr static bool is_multi_critical = false;$/;"	m	class:Gudhi::multi_filtration::One_critical_filtration	typeref:typename:bool
is_multi_parameter	multipers/gudhi/Simplex_tree_interface.h	/^  static const bool is_multi_parameter = false;$/;"	m	struct:Gudhi::Simplex_tree_options_for_python	typeref:typename:const bool
is_multi_parameter	multipers/gudhi/gudhi/Simplex_tree/simplex_tree_options.h	/^  static const bool is_multi_parameter = false;$/;"	m	struct:Gudhi::Simplex_tree_options_default	typeref:typename:const bool
is_multi_parameter	multipers/gudhi/gudhi/Simplex_tree/simplex_tree_options.h	/^  static const bool is_multi_parameter = false;$/;"	m	struct:Gudhi::Simplex_tree_options_fast_persistence	typeref:typename:const bool
is_multi_parameter	multipers/gudhi/gudhi/Simplex_tree/simplex_tree_options.h	/^  static const bool is_multi_parameter = false;$/;"	m	struct:Gudhi::Simplex_tree_options_full_featured	typeref:typename:const bool
is_multi_parameter	multipers/gudhi/gudhi/Simplex_tree/simplex_tree_options.h	/^  static const bool is_multi_parameter = false;$/;"	m	struct:Gudhi::Simplex_tree_options_minimal	typeref:typename:const bool
is_multi_parameter	multipers/gudhi/gudhi/Simplex_tree_multi.h	/^  static const bool is_multi_parameter = true;$/;"	m	struct:Gudhi::multi_persistence::Simplex_tree_options_multidimensional_filtration	typeref:typename:const bool
is_multi_parameter	multipers/multi_parameter_rank_invariant/persistence_slices.h	/^  static const bool is_multi_parameter = false;$/;"	m	struct:Gudhi::multiparameter::Simplex_tree_float	typeref:typename:const bool
is_multicritical	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  constexpr static bool is_multicritical() { return true; }$/;"	f	class:Gudhi::multi_filtration::Multi_critical_filtration	typeref:typename:bool
is_multicritical	multipers/gudhi/gudhi/One_critical_filtration.h	/^  constexpr static bool is_multicritical() { return false; }$/;"	f	class:Gudhi::multi_filtration::One_critical_filtration	typeref:typename:bool
is_nan	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  bool is_nan() const { return multi_filtration_.size() == 1 && multi_filtration_[0].is_nan(); }$/;"	f	class:Gudhi::multi_filtration::Multi_critical_filtration	typeref:typename:bool
is_nan	multipers/gudhi/gudhi/One_critical_filtration.h	/^  bool is_nan() const {$/;"	f	class:Gudhi::multi_filtration::One_critical_filtration	typeref:typename:bool
is_nan_	multipers/gudhi/gudhi/One_critical_filtration.h	/^  static bool is_nan_(T val) {$/;"	f	class:Gudhi::multi_filtration::One_critical_filtration	typeref:typename:bool
is_negative_in_pair	multipers/gudhi/gudhi/Persistence_matrix/chain_vine_swap.h	/^  bool is_negative_in_pair(ID_index pivot) const {$/;"	f	class:Gudhi::persistence_matrix::Chain_barcode_swap	typeref:typename:bool
is_non_zero	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^inline bool Heap_column<Master_matrix>::is_non_zero(ID_index rowIndex) const$/;"	f	class:Gudhi::persistence_matrix::Heap_column	typeref:typename:bool
is_non_zero	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^inline bool Intrusive_list_column<Master_matrix>::is_non_zero(ID_index rowIndex) const$/;"	f	class:Gudhi::persistence_matrix::Intrusive_list_column	typeref:typename:bool
is_non_zero	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^inline bool Intrusive_set_column<Master_matrix>::is_non_zero(ID_index rowIndex) const$/;"	f	class:Gudhi::persistence_matrix::Intrusive_set_column	typeref:typename:bool
is_non_zero	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^inline bool List_column<Master_matrix>::is_non_zero(ID_index rowIndex) const$/;"	f	class:Gudhi::persistence_matrix::List_column	typeref:typename:bool
is_non_zero	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^inline bool Naive_vector_column<Master_matrix>::is_non_zero(ID_index rowIndex) const$/;"	f	class:Gudhi::persistence_matrix::Naive_vector_column	typeref:typename:bool
is_non_zero	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^inline bool Set_column<Master_matrix>::is_non_zero(ID_index rowIndex) const$/;"	f	class:Gudhi::persistence_matrix::Set_column	typeref:typename:bool
is_non_zero	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^inline bool Small_vector_column<Master_matrix>::is_non_zero(ID_index rowIndex) const$/;"	f	class:Gudhi::persistence_matrix::Small_vector_column	typeref:typename:bool
is_non_zero	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^inline bool Unordered_set_column<Master_matrix>::is_non_zero(ID_index rowIndex) const$/;"	f	class:Gudhi::persistence_matrix::Unordered_set_column	typeref:typename:bool
is_non_zero	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^inline bool Vector_column<Master_matrix>::is_non_zero(ID_index rowIndex) const$/;"	f	class:Gudhi::persistence_matrix::Vector_column	typeref:typename:bool
is_null	multipers/gudhi/gudhi/Persistent_cohomology/Persistent_cohomology_column.h	/^  bool is_null() const {$/;"	f	class:Gudhi::persistent_cohomology::Persistent_cohomology_column	typeref:typename:bool
is_of_boundary_type	multipers/gudhi/gudhi/persistence_matrix_options.h	/^  static const bool is_of_boundary_type = false;$/;"	m	struct:Gudhi::persistence_matrix::Zigzag_options	typeref:typename:const bool
is_of_boundary_type	multipers/gudhi/gudhi/persistence_matrix_options.h	/^  static const bool is_of_boundary_type = true;$/;"	m	struct:Gudhi::persistence_matrix::Default_options	typeref:typename:const bool
is_of_boundary_type	multipers/gudhi/mma_interface_matrix.h	/^  static const bool is_of_boundary_type = false;$/;"	m	struct:Gudhi::multiparameter::truc_interface::Multi_persistence_Clement_options	typeref:typename:const bool
is_paired	multipers/gudhi/gudhi/Persistence_matrix/columns/chain_column_extra_properties.h	/^  bool is_paired() const { return pairedColumn_ != static_cast<Index>(-1); }$/;"	f	class:Gudhi::persistence_matrix::Chain_column_extra_properties	typeref:typename:bool
is_plus_inf	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  bool is_plus_inf() const { return multi_filtration_.size() == 1 && multi_filtration_[0].is_plu/;"	f	class:Gudhi::multi_filtration::Multi_critical_filtration	typeref:typename:bool
is_plus_inf	multipers/gudhi/gudhi/One_critical_filtration.h	/^  bool is_plus_inf() const {$/;"	f	class:Gudhi::multi_filtration::One_critical_filtration	typeref:typename:bool
is_root_	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_star_simplex_iterators.h	/^  bool is_root_;$/;"	m	class:Gudhi::Simplex_tree_optimized_star_simplex_iterator	typeref:typename:bool
is_strictly_smaller_simplex	multipers/multiparameter_module_approximation/format_python-cpp.h	/^bool inline is_strictly_smaller_simplex(const boundary_type &s1,$/;"	f	namespace:Gudhi::multiparameter::mma	typeref:typename:bool
is_trivial	multipers/gudhi/gudhi/Multi_persistence/Box.h	/^  bool is_trivial() const {$/;"	f	class:Gudhi::multi_persistence::Box	typeref:typename:bool
is_valid	multipers/gudhi/gudhi/Points_off_io.h	/^  bool is_valid() const {$/;"	f	class:Gudhi::Points_off_reader	typeref:typename:bool
is_vine	multipers/gudhi/mma_interface_coh.h	/^  static const bool is_vine = false;$/;"	m	class:Gudhi::multiparameter::truc_interface::Persistence_backend_cohomology	typeref:typename:const bool
is_vine	multipers/gudhi/mma_interface_h0.h	/^  static const bool is_vine = true;$/;"	m	class:Gudhi::multiparameter::truc_interface::Persistence_backend_h0	typeref:typename:const bool
is_vine	multipers/gudhi/mma_interface_matrix.h	/^  static const bool is_vine = Matrix_options::has_vine_update;$/;"	m	class:Gudhi::multiparameter::truc_interface::Persistence_backend_matrix	typeref:typename:const bool
is_z2	multipers/gudhi/gudhi/persistence_matrix_options.h	/^  static const bool is_z2 = is_z2_only;$/;"	m	struct:Gudhi::persistence_matrix::Default_options	typeref:typename:const bool
is_zero_cell	multipers/multiparameter_module_approximation/vector_matrix.h	/^inline bool Vector_matrix<Column_type>::is_zero_cell(index columnIndex, index rowIndex) const$/;"	f	class:Gudhi::multiparameter::mma::Vector_matrix	typeref:typename:bool
is_zero_column	multipers/gudhi/gudhi/Matrix.h	/^inline bool Matrix<PersistenceMatrixOptions>::is_zero_column(Index columnIndex) $/;"	f	class:Gudhi::persistence_matrix::Matrix	typeref:typename:bool
is_zero_column	multipers/gudhi/gudhi/Matrix.h	/^inline bool Matrix<PersistenceMatrixOptions>::is_zero_column(Index columnIndex, bool inR) $/;"	f	class:Gudhi::persistence_matrix::Matrix	typeref:typename:bool
is_zero_column	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix.h	/^inline bool Base_matrix<Master_matrix>::is_zero_column(Index columnIndex) $/;"	f	class:Gudhi::persistence_matrix::Base_matrix	typeref:typename:bool
is_zero_column	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix_with_column_compression.h	/^inline bool Base_matrix_with_column_compression<Master_matrix>::is_zero_column(Index columnIndex/;"	f	class:Gudhi::persistence_matrix::Base_matrix_with_column_compression	typeref:typename:bool
is_zero_column	multipers/gudhi/gudhi/Persistence_matrix/Boundary_matrix.h	/^inline bool Boundary_matrix<Master_matrix>::is_zero_column(Index columnIndex) $/;"	f	class:Gudhi::persistence_matrix::Boundary_matrix	typeref:typename:bool
is_zero_column	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^inline bool Chain_matrix<Master_matrix>::is_zero_column(Index columnIndex) $/;"	f	class:Gudhi::persistence_matrix::Chain_matrix	typeref:typename:bool
is_zero_column	multipers/gudhi/gudhi/Persistence_matrix/Id_to_index_overlay.h	/^inline bool Id_to_index_overlay<Underlying_matrix, Master_matrix>::is_zero_column(ID_index cellI/;"	f	class:Gudhi::persistence_matrix::Id_to_index_overlay	typeref:typename:bool
is_zero_column	multipers/gudhi/gudhi/Persistence_matrix/Position_to_index_overlay.h	/^inline bool Position_to_index_overlay<Underlying_matrix, Master_matrix>::is_zero_column(Pos_inde/;"	f	class:Gudhi::persistence_matrix::Position_to_index_overlay	typeref:typename:bool
is_zero_column	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^inline bool RU_matrix<Master_matrix>::is_zero_column(Index columnIndex, bool inR)$/;"	f	class:Gudhi::persistence_matrix::RU_matrix	typeref:typename:bool
is_zero_column	multipers/multiparameter_module_approximation/vector_matrix.h	/^inline bool Vector_matrix<Column_type>::is_zero_column(index columnIndex)$/;"	f	class:Gudhi::multiparameter::mma::Vector_matrix	typeref:typename:bool
is_zero_entry	multipers/gudhi/gudhi/Matrix.h	/^inline bool Matrix<PersistenceMatrixOptions>::is_zero_entry(Index columnIndex, ID_index rowIndex/;"	f	class:Gudhi::persistence_matrix::Matrix	typeref:typename:bool
is_zero_entry	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix.h	/^inline bool Base_matrix<Master_matrix>::is_zero_entry(Index columnIndex, Index rowIndex) const $/;"	f	class:Gudhi::persistence_matrix::Base_matrix	typeref:typename:bool
is_zero_entry	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix_with_column_compression.h	/^inline bool Base_matrix_with_column_compression<Master_matrix>::is_zero_entry(Index columnIndex,/;"	f	class:Gudhi::persistence_matrix::Base_matrix_with_column_compression	typeref:typename:bool
is_zero_entry	multipers/gudhi/gudhi/Persistence_matrix/Boundary_matrix.h	/^inline bool Boundary_matrix<Master_matrix>::is_zero_entry(Index columnIndex, Index rowIndex) con/;"	f	class:Gudhi::persistence_matrix::Boundary_matrix	typeref:typename:bool
is_zero_entry	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^inline bool Chain_matrix<Master_matrix>::is_zero_entry(Index columnIndex, ID_index rowIndex) con/;"	f	class:Gudhi::persistence_matrix::Chain_matrix	typeref:typename:bool
is_zero_entry	multipers/gudhi/gudhi/Persistence_matrix/Id_to_index_overlay.h	/^inline bool Id_to_index_overlay<Underlying_matrix, Master_matrix>::is_zero_entry(ID_index cellID/;"	f	class:Gudhi::persistence_matrix::Id_to_index_overlay	typeref:typename:bool
is_zero_entry	multipers/gudhi/gudhi/Persistence_matrix/Position_to_index_overlay.h	/^inline bool Position_to_index_overlay<Underlying_matrix, Master_matrix>::is_zero_entry(Pos_index/;"	f	class:Gudhi::persistence_matrix::Position_to_index_overlay	typeref:typename:bool
is_zero_entry	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^inline bool RU_matrix<Master_matrix>::is_zero_entry(Index columnIndex, Index rowIndex, bool inR)/;"	f	class:Gudhi::persistence_matrix::RU_matrix	typeref:typename:bool
it_	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_star_simplex_iterators.h	/^  Filtered_cofaces_simplex_iterator it_;$/;"	m	class:Gudhi::Simplex_tree_optimized_cofaces_rooted_subtrees_simplex_iterator	typeref:typename:Filtered_cofaces_simplex_iterator
it_	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_star_simplex_iterators.h	/^  Simplex_tree_optimized_cofaces_rooted_subtrees_simplex_iterator<SimplexTree> it_;$/;"	m	class:Gudhi::Simplex_tree_optimized_star_simplex_iterator	typeref:typename:Simplex_tree_optimized_cofaces_rooted_subtrees_simplex_iterator<SimplexTree>
iterator	multipers/gudhi/gudhi/Bitmap_cubical_complex.h	/^    typedef Skeleton_simplex_iterator iterator;$/;"	t	class:Gudhi::cubical_complex::Bitmap_cubical_complex::Skeleton_simplex_range	typeref:typename:Skeleton_simplex_iterator
iterator	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  using iterator = typename Generators::iterator;             \/**< Iterator type for the genera/;"	t	class:Gudhi::multi_filtration::Multi_critical_filtration	typeref:typename:Generators::iterator
iterator	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^  using iterator = boost::indirect_iterator<typename Column_support::iterator>;$/;"	t	class:Gudhi::persistence_matrix::Heap_column	typeref:typename:boost::indirect_iterator<typename Column_support::iterator>
iterator	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^  using iterator = typename Column_support::iterator;$/;"	t	class:Gudhi::persistence_matrix::Intrusive_list_column	typeref:typename:Column_support::iterator
iterator	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^  using iterator = typename Column_support::iterator;$/;"	t	class:Gudhi::persistence_matrix::Intrusive_set_column	typeref:typename:Column_support::iterator
iterator	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^  using iterator = boost::indirect_iterator<typename Column_support::iterator>;$/;"	t	class:Gudhi::persistence_matrix::List_column	typeref:typename:boost::indirect_iterator<typename Column_support::iterator>
iterator	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^  using iterator = boost::indirect_iterator<typename Column_support::iterator>;$/;"	t	class:Gudhi::persistence_matrix::Naive_vector_column	typeref:typename:boost::indirect_iterator<typename Column_support::iterator>
iterator	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^  using iterator = boost::indirect_iterator<typename Column_support::iterator>;$/;"	t	class:Gudhi::persistence_matrix::Set_column	typeref:typename:boost::indirect_iterator<typename Column_support::iterator>
iterator	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^  using iterator = boost::indirect_iterator<typename Column_support::iterator>;$/;"	t	class:Gudhi::persistence_matrix::Small_vector_column	typeref:typename:boost::indirect_iterator<typename Column_support::iterator>
iterator	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^  using iterator = boost::indirect_iterator<typename Column_support::iterator>;$/;"	t	class:Gudhi::persistence_matrix::Unordered_set_column	typeref:typename:boost::indirect_iterator<typename Column_support::iterator>
iterator	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^  using iterator = boost::indirect_iterator<typename Column_support::iterator>;$/;"	t	class:Gudhi::persistence_matrix::Vector_column	typeref:typename:boost::indirect_iterator<typename Column_support::iterator>
iterator	multipers/gudhi/mma_interface_coh.h	/^    using iterator = Filtration_range_iterator;$/;"	t	class:Gudhi::multiparameter::truc_interface::Boundary_matrix_as_filtered_complex_for_coh::Filtration_simplex_range	typeref:typename:Filtration_range_iterator
iterator	multipers/gudhi/mma_interface_h0.h	/^    using iterator = Barcode_iterator;$/;"	t	class:Gudhi::multiparameter::truc_interface::Persistence_backend_h0::Barcode	typeref:typename:Barcode_iterator
iterator	multipers/gudhi/mma_interface_matrix.h	/^    using iterator = Barcode_iterator;$/;"	t	class:Gudhi::multiparameter::truc_interface::Persistence_backend_matrix::Barcode	typeref:typename:Barcode_iterator
iterator	multipers/multiparameter_module_approximation/utilities.h	/^  using iterator =$/;"	t	struct:Gudhi::multiparameter::mma::MultiDiagram	typeref:typename:std::vector<MultiDiagram_point<filtration_type>>::const_iterator
iterator	multipers/multiparameter_module_approximation/utilities.h	/^  using iterator =$/;"	t	struct:Gudhi::multiparameter::mma::MultiDiagrams	typeref:typename:std::vector<MultiDiagram<filtration_type,value_type>>::const_iterator
iterator_category	multipers/gudhi/gudhi/Bitmap_cubical_complex.h	/^    typedef std::input_iterator_tag iterator_category;$/;"	t	class:Gudhi::cubical_complex::Bitmap_cubical_complex::Skeleton_simplex_iterator	typeref:typename:std::input_iterator_tag
iterator_category	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^    typedef std::input_iterator_tag iterator_category;$/;"	t	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base::Top_dimensional_cells_iterator	typeref:typename:std::input_iterator_tag
iterator_category	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^    typedef std::input_iterator_tag iterator_category;$/;"	t	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base::Vertices_iterator	typeref:typename:std::input_iterator_tag
iterator_category	multipers/gudhi/gudhi/Bitmap_cubical_complex_periodic_boundary_conditions_base.h	/^    typedef std::input_iterator_tag iterator_category;$/;"	t	class:Gudhi::cubical_complex::Bitmap_cubical_complex_periodic_boundary_conditions_base::Vertices_iterator	typeref:typename:std::input_iterator_tag
k	compute.py	/^k=3$/;"	v
kcritical_options	_tempita_grid_gen.py	/^kcritical_options = [$/;"	v
kcritical_simplextree_to_scc	multipers/gudhi/Simplex_tree_multi_interface.h	/^  kscc_type inline kcritical_simplextree_to_scc() {$/;"	f	class:Gudhi::multiparameter::python_interface::Simplex_tree_multi_interface	typeref:typename:kscc_type
kcritical_simplextree_to_scc	multipers/multiparameter_module_approximation/format_python-cpp.h	/^inline kscc_type<STOptions> kcritical_simplextree_to_scc(Gudhi::Simplex_tree<STOptions> &st) {$/;"	f	namespace:Gudhi::multiparameter::mma	typeref:typename:kscc_type<STOptions>
key	multipers/gudhi/gudhi/Bitmap_cubical_complex.h	/^  Simplex_key key(Simplex_handle sh) const {$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex	typeref:typename:Simplex_key
key	multipers/gudhi/gudhi/Simplex_tree.h	/^    Simplex_key key() const { return key_; }$/;"	f	struct:Gudhi::Simplex_tree::Key_simplex_base_real	typeref:typename:Simplex_key
key	multipers/gudhi/gudhi/Simplex_tree.h	/^  static Simplex_key key(Simplex_handle sh) { return sh->second.key(); }$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:Simplex_key
key	multipers/gudhi/mma_interface_coh.h	/^  Simplex_key key(Simplex_handle sh) const { return sh == null_simplex() ? null_key() : keys_[sh/;"	f	class:Gudhi::multiparameter::truc_interface::Boundary_matrix_as_filtered_complex_for_coh	typeref:typename:Simplex_key
key_	multipers/gudhi/gudhi/Persistent_cohomology/Persistent_cohomology_column.h	/^  SimplexKey key_;$/;"	m	class:Gudhi::persistent_cohomology::Persistent_cohomology_cell	typeref:typename:SimplexKey
key_	multipers/gudhi/gudhi/Simplex_tree.h	/^    Simplex_key key_;$/;"	m	struct:Gudhi::Simplex_tree::Key_simplex_base_real	typeref:typename:Simplex_key
key_associated_to_simplex	multipers/gudhi/gudhi/Bitmap_cubical_complex.h	/^  std::vector<std::size_t> key_associated_to_simplex;$/;"	m	class:Gudhi::cubical_complex::Bitmap_cubical_complex	typeref:typename:std::vector<std::size_t>
keysToSH_	multipers/gudhi/mma_interface_coh.h	/^  std::vector<Simplex_handle> keysToSH_;$/;"	m	class:Gudhi::multiparameter::truc_interface::Boundary_matrix_as_filtered_complex_for_coh	typeref:typename:std::vector<Simplex_handle>
keys_	multipers/gudhi/mma_interface_coh.h	/^  std::vector<Simplex_key> keys_;$/;"	m	class:Gudhi::multiparameter::truc_interface::Boundary_matrix_as_filtered_complex_for_coh	typeref:typename:std::vector<Simplex_key>
kind	multipers/gudhi/gudhi/graph_simplicial_complex.h	/^  typedef boost::edge_property_tag kind;$/;"	t	struct:Gudhi::edge_filtration_t	typeref:typename:boost::edge_property_tag
kind	multipers/gudhi/gudhi/graph_simplicial_complex.h	/^  typedef boost::vertex_property_tag kind;$/;"	t	struct:Gudhi::vertex_filtration_t	typeref:typename:boost::vertex_property_tag
kscc_type	multipers/gudhi/Simplex_tree_multi_interface.h	/^  using kscc_type = mma::kscc_type<SimplexTreeOptions>;$/;"	t	class:Gudhi::multiparameter::python_interface::Simplex_tree_multi_interface	typeref:typename:mma::kscc_type<SimplexTreeOptions>
kscc_type	multipers/multiparameter_module_approximation/format_python-cpp.h	/^using kscc_type =$/;"	t	namespace:Gudhi::multiparameter::mma
last_	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  Vertex_handle last_;  \/\/ last vertex of the simplex$/;"	m	class:Gudhi::Simplex_tree_boundary_opposite_vertex_simplex_iterator	typeref:typename:Vertex_handle
last_	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  Vertex_handle last_;  \/\/ last vertex of the simplex$/;"	m	class:Gudhi::Simplex_tree_boundary_simplex_iterator	typeref:typename:Vertex_handle
leftChild	multipers/gudhi/naive_merge_tree.h	/^    index leftChild = -1;$/;"	m	struct:Naive_merge_forest::Node	typeref:typename:index
length_interval	multipers/gudhi/gudhi/Persistent_cohomology.h	/^    length_interval(FilteredComplex * cpx, Filtration_value min_length)$/;"	f	struct:Gudhi::persistent_cohomology::Persistent_cohomology::length_interval
length_interval	multipers/gudhi/gudhi/Persistent_cohomology.h	/^  struct length_interval {$/;"	s	class:Gudhi::persistent_cohomology::Persistent_cohomology
library_dirs	setup.py	/^library_dirs = [$/;"	v
library_dirs	setup.py	/^library_dirs = [str(Path(stuff).expanduser().resolve()) for stuff in library_dirs]$/;"	v
linear_indexing_tag	multipers/gudhi/gudhi/Simplex_tree/indexing_tag.h	/^struct linear_indexing_tag {$/;"	s	namespace:Gudhi
linear_projection	multipers/gudhi/gudhi/Simplex_tree_multi.h	/^void linear_projection(simplextree_std &st, simplextree_multi &st_multi,$/;"	f	namespace:Gudhi::multi_persistence	typeref:typename:void
linear_projection_from_ptr	multipers/gudhi/Simplex_tree_multi_interface.h	/^void inline linear_projection_from_ptr(const uintptr_t ptr,$/;"	f	namespace:Gudhi::multiparameter::python_interface	typeref:typename:void
lines2bonds	multipers/data/MOL2.py	/^def lines2bonds($/;"	f
lines2bonds_MOL2	multipers/data/MOL2.py	/^def lines2bonds_MOL2(mol: mda.Universe):$/;"	f
lines2bonds_PDB	multipers/data/MOL2.py	/^def lines2bonds_PDB(mol: mda.Universe):$/;"	f
link_nodes_by_label	multipers/gudhi/Simplex_tree_interface.h	/^  static const bool link_nodes_by_label = false;$/;"	m	struct:Gudhi::Simplex_tree_options_for_python	typeref:typename:const bool
link_nodes_by_label	multipers/gudhi/gudhi/Simplex_tree/simplex_tree_options.h	/^  static const bool link_nodes_by_label = false;$/;"	m	struct:Gudhi::Simplex_tree_options_default	typeref:typename:const bool
link_nodes_by_label	multipers/gudhi/gudhi/Simplex_tree/simplex_tree_options.h	/^  static const bool link_nodes_by_label = false;$/;"	m	struct:Gudhi::Simplex_tree_options_fast_persistence	typeref:typename:const bool
link_nodes_by_label	multipers/gudhi/gudhi/Simplex_tree/simplex_tree_options.h	/^  static const bool link_nodes_by_label = false;$/;"	m	struct:Gudhi::Simplex_tree_options_minimal	typeref:typename:const bool
link_nodes_by_label	multipers/gudhi/gudhi/Simplex_tree/simplex_tree_options.h	/^  static const bool link_nodes_by_label = true;$/;"	m	struct:Gudhi::Simplex_tree_options_full_featured	typeref:typename:const bool
link_nodes_by_label	multipers/gudhi/gudhi/Simplex_tree_multi.h	/^  static const bool link_nodes_by_label = false;$/;"	m	struct:Gudhi::multi_persistence::Simplex_tree_options_multidimensional_filtration	typeref:typename:const bool
link_nodes_by_label	multipers/multi_parameter_rank_invariant/persistence_slices.h	/^  static const bool link_nodes_by_label = true;$/;"	m	struct:Gudhi::multiparameter::Simplex_tree_float	typeref:typename:const bool
list_max_vertex_hook_	multipers/gudhi/gudhi/Simplex_tree/hooks_simplex_base.h	/^    Member_hook_t list_max_vertex_hook_;$/;"	m	struct:Gudhi::Hooks_simplex_base_link_nodes	typeref:typename:Member_hook_t
load	multipers/pickle.py	/^def load(path:str):$/;"	f
load_modelnet	multipers/data/shape3d.py	/^def load_modelnet(version='10', sample_points = False, reset:bool=False, remove_faces=False):$/;"	f
load_with_axis	multipers/pickle.py	/^def load_with_axis(sms):$/;"	f
load_without_axis	multipers/pickle.py	/^def load_without_axis(sms):$/;"	f
loiseauxFastStableEfficient2022	docs/paper.bib	/^@misc{loiseauxFastStableEfficient2022,$/;"	n
loiseauxFrameworkFastStable2023	docs/paper.bib	/^@article{loiseauxFrameworkFastStable2023,$/;"	a
loiseauxMultipersMultiparameterPersistence2024	docs/paper.bib	/^@article{loiseauxMultipersMultiparameterPersistence2024,$/;"	a
loiseauxStableVectorizationMultiparameter2023	docs/paper.bib	/^@article{loiseauxStableVectorizationMultiparameter2023,$/;"	a
lowerCorner_	multipers/gudhi/gudhi/Multi_persistence/Box.h	/^  Point lowerCorner_; \/**< Lowest of defining corners. *\/$/;"	m	class:Gudhi::multi_persistence::Box	typeref:typename:Point
lower_upper_bound_dimension	multipers/gudhi/gudhi/Simplex_tree.h	/^  bool lower_upper_bound_dimension() {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:bool
make_filtration_non_decreasing	multipers/gudhi/gudhi/Simplex_tree.h	/^  bool make_filtration_non_decreasing() {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:bool
make_subfiltration_non_decreasing	multipers/gudhi/gudhi/Simplex_tree.h	/^  void make_subfiltration_non_decreasing(Simplex_handle sh) {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:void
map	multipers/gudhi/gudhi/Simplex_tree.h	/^  typedef typename boost::container::map<Vertex_handle, Node> map;$/;"	t	class:Gudhi::Simplex_tree	typeref:typename:boost::container::map<Vertex_handle,Node>
map_	multipers/gudhi/gudhi/Persistence_matrix/boundary_cell_position_to_id_mapper.h	/^  Index_map map_;$/;"	m	struct:Gudhi::persistence_matrix::Cell_position_to_ID_mapper	typeref:typename:Index_map
map_	multipers/gudhi/gudhi/Persistence_matrix/boundary_face_position_to_id_mapper.h	/^  Index_map map_;$/;"	m	struct:Gudhi::persistence_matrix::Face_position_to_ID_mapper	typeref:typename:Index_map
mass_defaults	multipers/tests/test_signed_measure.py	/^mass_defaults = [None, "auto"]$/;"	v
matrix_	multipers/gudhi/gudhi/Matrix.h	/^  Underlying_matrix matrix_;$/;"	m	class:Gudhi::persistence_matrix::Matrix	typeref:typename:Underlying_matrix
matrix_	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix.h	/^  Column_container matrix_;       \/**< Column container. *\/$/;"	m	class:Gudhi::persistence_matrix::Base_matrix	typeref:typename:Column_container
matrix_	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix_with_column_compression.h	/^    Base_matrix_with_column_compression* matrix_;$/;"	m	struct:Gudhi::persistence_matrix::Base_matrix_with_column_compression::Delete_disposer	typeref:typename:Base_matrix_with_column_compression *
matrix_	multipers/gudhi/gudhi/Persistence_matrix/Boundary_matrix.h	/^  Column_container matrix_;       \/**< Column container. *\/$/;"	m	class:Gudhi::persistence_matrix::Boundary_matrix	typeref:typename:Column_container
matrix_	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^  Column_container matrix_;       \/**< Column container. *\/$/;"	m	class:Gudhi::persistence_matrix::Chain_matrix	typeref:typename:Column_container
matrix_	multipers/gudhi/gudhi/Persistence_matrix/Id_to_index_overlay.h	/^  Underlying_matrix matrix_;  \/**< Interfaced matrix. *\/$/;"	m	class:Gudhi::persistence_matrix::Id_to_index_overlay	typeref:typename:Underlying_matrix
matrix_	multipers/gudhi/gudhi/Persistence_matrix/Position_to_index_overlay.h	/^  Underlying_matrix matrix_;            \/**< Interfaced matrix. *\/$/;"	m	class:Gudhi::persistence_matrix::Position_to_index_overlay	typeref:typename:Underlying_matrix
matrix_	multipers/gudhi/mma_interface_coh.h	/^  MatrixComplex matrix_;$/;"	m	class:Gudhi::multiparameter::truc_interface::Persistence_backend_cohomology	typeref:typename:MatrixComplex
matrix_	multipers/gudhi/mma_interface_matrix.h	/^  matrix_type matrix_;$/;"	m	class:Gudhi::multiparameter::truc_interface::Persistence_backend_matrix	typeref:typename:matrix_type
matrix_	multipers/multiparameter_module_approximation/vector_matrix.h	/^    std::vector<Column_type> matrix_;$/;"	m	class:Gudhi::multiparameter::mma::Vector_matrix	typeref:typename:std::vector<Column_type>
matrix_	multipers/multiparameter_module_approximation/vineyards.h	/^    Vineyard_matrix_type matrix_;$/;"	m	class:Gudhi::multiparameter::mma::Vineyard_persistence	typeref:typename:Vineyard_matrix_type
matrix_type	multipers/gudhi/mma_interface_matrix.h	/^  using matrix_type = Gudhi::persistence_matrix::Matrix<Matrix_options>;$/;"	t	class:Gudhi::multiparameter::truc_interface::Persistence_backend_matrix	typeref:typename:Gudhi::persistence_matrix::Matrix<Matrix_options>
matrix_types	_tempita_grid_gen.py	/^matrix_types = [$/;"	v
max	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  static constexpr Gudhi::multi_filtration::Multi_critical_filtration<T> max() noexcept(false) {$/;"	f	class:std::numeric_limits	typeref:typename:Gudhi::multi_filtration::Multi_critical_filtration<T>
max	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  static constexpr Gudhi::multi_filtration::Multi_critical_filtration<T> max(unsigned int g, uns/;"	f	class:std::numeric_limits	typeref:typename:Gudhi::multi_filtration::Multi_critical_filtration<T>
max	multipers/gudhi/gudhi/One_critical_filtration.h	/^  static constexpr Gudhi::multi_filtration::One_critical_filtration<T> max() noexcept(false) {$/;"	f	class:std::numeric_limits	typeref:typename:Gudhi::multi_filtration::One_critical_filtration<T>
max	multipers/gudhi/gudhi/One_critical_filtration.h	/^  static constexpr Gudhi::multi_filtration::One_critical_filtration<T> max(unsigned int n) noexc/;"	f	class:std::numeric_limits	typeref:typename:Gudhi::multi_filtration::One_critical_filtration<T>
maxDim_	multipers/gudhi/gudhi/Persistence_matrix/matrix_dimension_holders.h	/^  Dimension maxDim_;                      \/**< Current maximal dimension. *\/$/;"	m	class:Gudhi::persistence_matrix::Matrix_all_dimension_holder	typeref:typename:Dimension
maxDim_	multipers/gudhi/gudhi/Persistence_matrix/matrix_dimension_holders.h	/^  Dimension maxDim_; \/**< Current maximal dimension. *\/$/;"	m	class:Gudhi::persistence_matrix::Matrix_max_dimension_holder	typeref:typename:Dimension
maxDim_	multipers/multiparameter_module_approximation/vector_matrix.h	/^    dimension_type maxDim_;$/;"	m	class:Gudhi::multiparameter::mma::Vector_matrix	typeref:typename:dimension_type
maxDimensionIsNeeded	multipers/gudhi/gudhi/Matrix.h	/^  static const bool maxDimensionIsNeeded =$/;"	m	class:Gudhi::persistence_matrix::Matrix	typeref:typename:const bool
max_dimension	multipers/gudhi/gudhi/Simplex_tree.h	/^  static constexpr int max_dimension() { return 40; }$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:int
max_dimension	multipers/gudhi/truc.h	/^  inline unsigned int max_dimension() const { return max_dimension_; }$/;"	f	class:Gudhi::multiparameter::truc_interface::SimplicialStructure	typeref:typename:unsigned int
max_dimension	multipers/gudhi/truc.h	/^  unsigned int max_dimension() const { return max_dimension_; }$/;"	f	class:Gudhi::multiparameter::truc_interface::PresentationStructure	typeref:typename:unsigned int
max_dimension_	multipers/gudhi/truc.h	/^  int max_dimension_ = -1;$/;"	m	class:Gudhi::multiparameter::truc_interface::PresentationStructure	typeref:typename:int
max_dimension_	multipers/gudhi/truc.h	/^  unsigned int max_dimension_;$/;"	m	class:Gudhi::multiparameter::truc_interface::SimplicialStructure	typeref:typename:unsigned int
maximal_face	multipers/gudhi/gudhi/Points_off_io.h	/^  void maximal_face(const std::vector<int>& face) { }$/;"	f	class:Gudhi::Points_off_visitor_reader	typeref:typename:void
maxval	multipers/gudhi/gudhi/Simplex_tree.h	/^    Filtration_value maxval;$/;"	m	struct:Gudhi::Simplex_tree::Extended_filtration_data	typeref:typename:Filtration_value
maybe_initialize_filtration	multipers/gudhi/gudhi/Simplex_tree.h	/^  void maybe_initialize_filtration() {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:void
mda	multipers/data/MOL2.py	/^import MDAnalysis as mda$/;"	I	nameref:module:MDAnalysis
mdg	compute.py	/^	import multipers.data.graphs as mdg$/;"	I	nameref:module:multipers.data.graphs
members	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_siblings.h	/^  Dictionary & members() {$/;"	f	class:Gudhi::Simplex_tree_siblings	typeref:typename:Dictionary &
members_	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_siblings.h	/^  Dictionary members_;$/;"	m	class:Gudhi::Simplex_tree_siblings	typeref:typename:Dictionary
metadata1	docs/icon.svg	/^     id="metadata1">$/;"	i
metric	multipers/ml/sliced_wasserstein.py	/^    def metric(meas1, meas2):$/;"	f	function:_wasserstein_distance_on_parts	file:
min_length_	multipers/gudhi/gudhi/Persistent_cohomology.h	/^    Filtration_value min_length_;$/;"	m	struct:Gudhi::persistent_cohomology::Persistent_cohomology::length_interval	typeref:typename:Filtration_value
min_max_filtration	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^std::pair<T, T> Bitmap_cubical_complex_base<T>::min_max_filtration() {$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base	typeref:typename:std::pair<T,T>
minimal_simplex_with_same_filtration	multipers/gudhi/gudhi/Simplex_tree.h	/^  Simplex_handle minimal_simplex_with_same_filtration(Simplex_handle sh) {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:Simplex_handle
minimumSpanningForest_	multipers/gudhi/naive_merge_tree.h	/^  Naive_bottleneck_forest minimumSpanningForest_;$/;"	m	class:Naive_merge_forest	typeref:typename:Naive_bottleneck_forest
minus_inf	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  constexpr static Multi_critical_filtration minus_inf() { return Multi_critical_filtration(Gene/;"	f	class:Gudhi::multi_filtration::Multi_critical_filtration	typeref:typename:Multi_critical_filtration
minus_inf	multipers/gudhi/gudhi/One_critical_filtration.h	/^  constexpr static One_critical_filtration minus_inf() { return {-T_inf}; }$/;"	f	class:Gudhi::multi_filtration::One_critical_filtration	typeref:typename:One_critical_filtration
minus_infinity	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  static constexpr Gudhi::multi_filtration::Multi_critical_filtration<T> minus_infinity() noexce/;"	f	class:std::numeric_limits	typeref:typename:Gudhi::multi_filtration::Multi_critical_filtration<T>
minus_infinity	multipers/gudhi/gudhi/One_critical_filtration.h	/^  static constexpr Gudhi::multi_filtration::One_critical_filtration<T> minus_infinity() noexcept/;"	f	class:std::numeric_limits	typeref:typename:Gudhi::multi_filtration::One_critical_filtration<T>
minval	multipers/gudhi/gudhi/Simplex_tree.h	/^    Filtration_value minval;$/;"	m	struct:Gudhi::Simplex_tree::Extended_filtration_data	typeref:typename:Filtration_value
mio	multipers/_slicer_meta.py	/^import multipers.io as mio$/;"	I	nameref:module:multipers.io
mio	multipers/multiparameter_module_approximation.pyx	/^import multipers.io as mio$/;"	I	nameref:module:multipers.io
mio	multipers/tests/test_signed_measure.py	/^import multipers.io as mio$/;"	I	nameref:module:multipers.io
mirrorMatrixU_	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^  U_matrix mirrorMatrixU_;        \/**< U. *\/$/;"	m	class:Gudhi::persistence_matrix::RU_matrix	typeref:typename:U_matrix
mirrorMatrixU_	multipers/multiparameter_module_approximation/ru_matrix.h	/^  Vector_matrix<Column_type> mirrorMatrixU_;$/;"	m	class:Gudhi::multiparameter::mma::RU_matrix	typeref:typename:Vector_matrix<Column_type>
mma	compute.py	/^import multipers.ml.mma as mma$/;"	I	nameref:module:multipers.ml.mma
mma	multipers/multiparameter_module_approximation/approximation.h	/^namespace mma {$/;"	n	namespace:Gudhi::multiparameter
mma	multipers/multiparameter_module_approximation/combinatory.h	/^namespace Gudhi::multiparameter::mma::Combinatorics {$/;"	n	namespace:Gudhi::multiparameter
mma	multipers/multiparameter_module_approximation/debug.h	/^namespace Gudhi::multiparameter::mma::Debug {$/;"	n	namespace:Gudhi::multiparameter
mma	multipers/multiparameter_module_approximation/format_python-cpp.h	/^namespace Gudhi::multiparameter::mma {$/;"	n	namespace:Gudhi::multiparameter
mma	multipers/multiparameter_module_approximation/images.h	/^namespace Gudhi::multiparameter::mma::representation{$/;"	n	namespace:Gudhi::multiparameter
mma	multipers/multiparameter_module_approximation/ru_matrix.h	/^namespace Gudhi::multiparameter::mma {$/;"	n	namespace:Gudhi::multiparameter
mma	multipers/multiparameter_module_approximation/set_column.h	/^namespace Gudhi::multiparameter::mma {$/;"	n	namespace:Gudhi::multiparameter
mma	multipers/multiparameter_module_approximation/utilities.h	/^namespace Gudhi::multiparameter::mma {$/;"	n	namespace:Gudhi::multiparameter
mma	multipers/multiparameter_module_approximation/vector_matrix.h	/^namespace Gudhi::multiparameter::mma {$/;"	n	namespace:Gudhi::multiparameter
mma	multipers/multiparameter_module_approximation/vineyards.h	/^namespace Gudhi::multiparameter::mma {$/;"	n	namespace:Gudhi::multiparameter
mma	multipers/multiparameter_module_approximation/vineyards_trajectories.h	/^namespace Gudhi::multiparameter::mma {$/;"	n	namespace:Gudhi::multiparameter
mma	multipers/tests/test_mma.py	/^import multipers.ml.mma as mma$/;"	I	nameref:module:multipers.ml.mma
mmk	compute.py	/^	import multipers.ml.kernels as mmk$/;"	I	nameref:module:multipers.ml.kernels
mmo	compute.py	/^import multipers.ml.one as mmo ## only for 1param$/;"	I	nameref:module:multipers.ml.one
mmp	benchmarks/stuff.py	/^import multipers.ml.point_clouds as mmp$/;"	I	nameref:module:multipers.ml.point_clouds
mmp	compute.py	/^	import multipers.ml.point_clouds as mmp$/;"	I	nameref:module:multipers.ml.point_clouds
mmp	multipers/tests/test_point_clouds.py	/^    import multipers.ml.point_clouds as mmp$/;"	I	function:test_throw_test	file:	nameref:module:multipers.ml.point_clouds
mms	compute.py	/^import multipers.ml.signed_measures as mms$/;"	I	nameref:module:multipers.ml.signed_measures
modelnet2graphs	multipers/data/pytorch2simplextree.py	/^def modelnet2graphs(version = '10', print_flag = False, labels_only = False, a = 0, b = 10, weig/;"	f
modelnet2pts2gs	multipers/data/pytorch2simplextree.py	/^def modelnet2pts2gs(train_dataset, test_dataset , nbr_size = 8, exp_flag = True, labels_only = F/;"	f
module_	multipers/multiparameter_module_approximation/approximation.h	/^  module_type module_;$/;"	m	class:Gudhi::multiparameter::mma::Module	typeref:typename:module_type
module_approximation	multipers/multiparameter_module_approximation.pyx	/^def module_approximation($/;"	f	typeref:typename:PyModule_type
module_approximation_from_slicer	multipers/multiparameter_module_approximation.pyx	/^def module_approximation_from_slicer($/;"	f	typeref:typename:PyModule_type
module_dim	multipers/multiparameter_module_approximation/images.h	/^	unsigned int module_dim;				\/\/ number of persistent parameters.	$/;"	m	struct:Gudhi::multiparameter::mma::representation::ImageArgs	typeref:typename:unsigned int
module_type	multipers/multiparameter_module_approximation/approximation.h	/^  using module_type = std::vector<Summand<value_type>>;$/;"	t	class:Gudhi::multiparameter::mma::Module	typeref:typename:std::vector<Summand<value_type>>
move_from	multipers/gudhi/gudhi/Simplex_tree.h	/^  void move_from(Simplex_tree& complex_source) {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:void
mp	benchmarks/stuff.py	/^import multipers as mp$/;"	I	nameref:module:multipers
mp	compute.py	/^import multipers as mp$/;"	I	nameref:module:multipers
mp	docs/conf.py	/^import multipers as mp$/;"	I	nameref:module:multipers
mp	multipers/_signed_measure_meta.py	/^import multipers as mp$/;"	I	nameref:module:multipers
mp	multipers/data/MOL2.py	/^import multipers as mp$/;"	I	nameref:module:multipers
mp	multipers/data/graphs.py	/^import multipers as mp$/;"	I	nameref:module:multipers
mp	multipers/data/pytorch2simplextree.py	/^	import multipers as mp$/;"	I	class:Torch2SimplexTree	nameref:module:multipers
mp	multipers/ml/mma.py	/^import multipers as mp$/;"	I	nameref:module:multipers
mp	multipers/ml/point_clouds.py	/^import multipers as mp$/;"	I	nameref:module:multipers
mp	multipers/ml/signed_measures.py	/^import multipers as mp$/;"	I	nameref:module:multipers
mp	multipers/ml/tools.py	/^import multipers as mp$/;"	I	nameref:module:multipers
mp	multipers/tests/__init__.py	/^    import multipers as mp$/;"	I	function:random_st	file:	nameref:module:multipers
mp	multipers/tests/test_diff_helper.py	/^import multipers as mp$/;"	I	nameref:module:multipers
mp	multipers/tests/test_hilbert_function.py	/^import multipers as mp$/;"	I	nameref:module:multipers
mp	multipers/tests/test_mma.py	/^import multipers as mp$/;"	I	nameref:module:multipers
mp	multipers/tests/test_point_clouds.py	/^import multipers as mp$/;"	I	nameref:module:multipers
mp	multipers/tests/test_python-cpp_conversion.py	/^import multipers as mp$/;"	I	nameref:module:multipers
mp	multipers/tests/test_signed_measure.py	/^import multipers as mp$/;"	I	nameref:module:multipers
mp	multipers/tests/test_simplextreemulti.py	/^import multipers as mp$/;"	I	nameref:module:multipers
mp	multipers/tests/test_slicer.py	/^    import multipers as mp$/;"	I	function:test_scc	file:	nameref:module:multipers
mp	multipers/tests/test_slicer.py	/^import multipers as mp$/;"	I	nameref:module:multipers
mp	multipers/torch/rips_density.py	/^import multipers as mp$/;"	I	nameref:module:multipers
mpfree_flag	multipers/tests/test_signed_measure.py	/^mpfree_flag = mio._check_available("mpfree")$/;"	v
mpfree_flag	multipers/tests/test_slicer.py	/^mpfree_flag = mp.io._check_available("mpfree")$/;"	v
mpg	benchmarks/stuff.py	/^import multipers.grids as mpg$/;"	I	nameref:module:multipers.grids
mpg	multipers/function_rips.pyx	/^import multipers.grids as mpg$/;"	I	nameref:module:multipers.grids
mpg	multipers/point_measure.pyx	/^import multipers.grids as mpg$/;"	I	nameref:module:multipers.grids
mps	multipers/_slicer_meta.py	/^import multipers.slicer as mps$/;"	I	nameref:module:multipers.slicer
mps	multipers/io.pyx	/^import multipers.slicer as mps$/;"	I	nameref:module:multipers.slicer
mps	multipers/ml/point_clouds.py	/^import multipers.slicer as mps$/;"	I	nameref:module:multipers.slicer
mps	multipers/tests/test_slicer.py	/^import multipers.slicer as mps$/;"	I	nameref:module:multipers.slicer
mult_id_all	multipers/gudhi/gudhi/Persistent_cohomology/Multi_field.h	/^  Element mult_id_all;$/;"	m	class:Gudhi::persistent_cohomology::Multi_field	typeref:typename:Element
multiDiagram	multipers/multiparameter_module_approximation/utilities.h	/^  std::vector<MultiDiagram_point<filtration_type>> multiDiagram;$/;"	m	struct:Gudhi::multiparameter::mma::MultiDiagram	typeref:typename:std::vector<MultiDiagram_point<filtration_type>>
multiDiagrams	multipers/multiparameter_module_approximation/utilities.h	/^  std::vector<MultiDiagram<filtration_type, value_type>> multiDiagrams;$/;"	m	struct:Gudhi::multiparameter::mma::MultiDiagrams	typeref:typename:std::vector<MultiDiagram<filtration_type,value_type>>
multi_filtration	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^namespace multi_filtration { $/;"	n	namespace:Gudhi
multi_filtration	multipers/gudhi/gudhi/One_critical_filtration.h	/^namespace multi_filtration { $/;"	n	namespace:Gudhi
multi_filtration_	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  Generators multi_filtration_; \/**< Container for generators. *\/$/;"	m	class:Gudhi::multi_filtration::Multi_critical_filtration	typeref:typename:Generators
multi_filtration_grid	multipers/gudhi/Simplex_tree_multi_interface.h	/^    using multi_filtration_grid = std::vector<std::vector<value_type>>;$/;"	t	function:Gudhi::multiparameter::python_interface::Simplex_tree_multi_interface::get_filtration_values	typeref:typename:std::vector<std::vector<value_type>>
multi_persistence	multipers/gudhi/gudhi/Multi_persistence/Box.h	/^namespace multi_persistence {$/;"	n	namespace:Gudhi
multi_persistence	multipers/gudhi/gudhi/Multi_persistence/Line.h	/^namespace multi_persistence {$/;"	n	namespace:Gudhi
multi_persistence	multipers/gudhi/gudhi/Simplex_tree_multi.h	/^namespace multi_persistence {$/;"	n	namespace:Gudhi
multifiltration_type	multipers/multiparameter_module_approximation/utilities.h	/^using multifiltration_type = std::vector<filtration_type>;$/;"	t	namespace:Gudhi::multiparameter::mma	typeref:typename:std::vector<filtration_type>
multify	multipers/gudhi/gudhi/Simplex_tree_multi.h	/^void multify(simplextree_std &st, simplextree_multi &st_multi,$/;"	f	namespace:Gudhi::multi_persistence	typeref:typename:void
multify_from_ptr	multipers/gudhi/Simplex_tree_multi_interface.h	/^void inline multify_from_ptr(uintptr_t splxptr, uintptr_t newsplxptr,$/;"	f	namespace:Gudhi::multiparameter::python_interface	typeref:typename:void
multiparameter	multipers/gudhi/Simplex_tree_multi_interface.h	/^namespace multiparameter {$/;"	n	namespace:Gudhi
multiparameter	multipers/gudhi/mma_interface_coh.h	/^namespace multiparameter {$/;"	n	namespace:Gudhi
multiparameter	multipers/gudhi/mma_interface_h0.h	/^namespace multiparameter {$/;"	n	namespace:Gudhi
multiparameter	multipers/gudhi/mma_interface_matrix.h	/^namespace multiparameter {$/;"	n	namespace:Gudhi
multiparameter	multipers/gudhi/truc.h	/^namespace multiparameter {$/;"	n	namespace:Gudhi
multiparameter	multipers/multi_parameter_rank_invariant/diff_helpers.h	/^namespace multiparameter {$/;"	n	namespace:Gudhi
multiparameter	multipers/multi_parameter_rank_invariant/euler_characteristic.h	/^namespace Gudhi::multiparameter::euler_characteristic{$/;"	n	namespace:Gudhi
multiparameter	multipers/multi_parameter_rank_invariant/function_rips.h	/^namespace multiparameter {$/;"	n	namespace:Gudhi
multiparameter	multipers/multi_parameter_rank_invariant/hilbert_function.h	/^namespace multiparameter {$/;"	n	namespace:Gudhi
multiparameter	multipers/multi_parameter_rank_invariant/persistence_slices.h	/^namespace multiparameter {$/;"	n	namespace:Gudhi
multiparameter	multipers/multi_parameter_rank_invariant/rank_invariant.h	/^namespace multiparameter {$/;"	n	namespace:Gudhi
multiparameter	multipers/multiparameter_module_approximation/approximation.h	/^namespace multiparameter {$/;"	n	namespace:Gudhi
multiparameter	multipers/multiparameter_module_approximation/combinatory.h	/^namespace Gudhi::multiparameter::mma::Combinatorics {$/;"	n	namespace:Gudhi
multiparameter	multipers/multiparameter_module_approximation/debug.h	/^namespace Gudhi::multiparameter::mma::Debug {$/;"	n	namespace:Gudhi
multiparameter	multipers/multiparameter_module_approximation/format_python-cpp.h	/^namespace Gudhi::multiparameter::mma {$/;"	n	namespace:Gudhi
multiparameter	multipers/multiparameter_module_approximation/images.h	/^namespace Gudhi::multiparameter::mma::representation{$/;"	n	namespace:Gudhi
multiparameter	multipers/multiparameter_module_approximation/ru_matrix.h	/^namespace Gudhi::multiparameter::mma {$/;"	n	namespace:Gudhi
multiparameter	multipers/multiparameter_module_approximation/set_column.h	/^namespace Gudhi::multiparameter::mma {$/;"	n	namespace:Gudhi
multiparameter	multipers/multiparameter_module_approximation/utilities.h	/^namespace Gudhi::multiparameter::mma {$/;"	n	namespace:Gudhi
multiparameter	multipers/multiparameter_module_approximation/vector_matrix.h	/^namespace Gudhi::multiparameter::mma {$/;"	n	namespace:Gudhi
multiparameter	multipers/multiparameter_module_approximation/vineyards.h	/^namespace Gudhi::multiparameter::mma {$/;"	n	namespace:Gudhi
multiparameter	multipers/multiparameter_module_approximation/vineyards_trajectories.h	/^namespace Gudhi::multiparameter::mma {$/;"	n	namespace:Gudhi
multiparameter_module_approximation	multipers/multiparameter_module_approximation/approximation.h	/^Module<value_type> multiparameter_module_approximation($/;"	f	namespace:Gudhi::multiparameter::mma	typeref:typename:Module<value_type>
multipers : Multiparameter Persistence for Machine Learning	README.md	/^# multipers : Multiparameter Persistence for Machine Learning$/;"	c
multipers_barcode	multipers/multiparameter_module_approximation/utilities.h	/^using multipers_barcode = std::vector<std::vector<value_type>>;$/;"	t	namespace:Gudhi::multiparameter::mma	typeref:typename:std::vector<std::vector<value_type>>
multipersistence_image	multipers_old.py	/^def multipersistence_image(decomposition, bnds=None, resolution=[100,100], return_raw=False, ban/;"	f
multipersistence_kernel	multipers_old.py	/^def multipersistence_kernel(X, Y, lines, kernel, line_weight=lambda x: 1, same=False, metric=Tru/;"	f
multipersistence_landscape	multipers_old.py	/^def multipersistence_landscape(decomposition, bnds, delta, resolution=[100,100], k=None, return_/;"	f
multiplicativeID_	multipers/gudhi/gudhi/Fields/Multi_field.h	/^  static inline const Element multiplicativeID_ = 1; \/*[](){$/;"	m	class:Gudhi::persistence_fields::Multi_field_element	typeref:typename:const Element
multiplicativeID_	multipers/gudhi/gudhi/Fields/Multi_field_operators.h	/^  inline static const Element multiplicativeID_ = 1;$/;"	m	class:Gudhi::persistence_fields::Multi_field_operators	typeref:typename:const Element
multiplicativeID_	multipers/gudhi/gudhi/Fields/Multi_field_shared.h	/^  static inline const Element multiplicativeID_ = 1;      \/**< Multiplicative identity. *\/$/;"	m	class:Gudhi::persistence_fields::Shared_multi_field_element	typeref:typename:const Element
multiplicativeID_	multipers/gudhi/gudhi/Fields/Multi_field_small.h	/^  static inline constexpr Element multiplicativeID_ = 1; \/*= [](){$/;"	m	class:Gudhi::persistence_fields::Multi_field_element_with_small_characteristics	typeref:typename:Element
multiplicativeID_	multipers/gudhi/gudhi/Fields/Multi_field_small_shared.h	/^  static inline constexpr Element multiplicativeID_ = 1;     \/**< Multiplicative identity. *\/$/;"	m	class:Gudhi::persistence_fields::Shared_multi_field_element_with_small_characteristics	typeref:typename:Element
multiplicative_identity	multipers/gudhi/gudhi/Persistent_cohomology/Field_Zp.h	/^  Element multiplicative_identity(Element = 0) const {$/;"	f	class:Gudhi::persistent_cohomology::Field_Zp	typeref:typename:Element
multiplicative_identity	multipers/gudhi/gudhi/Persistent_cohomology/Multi_field.h	/^  Element multiplicative_identity(Element Q) {$/;"	f	class:Gudhi::persistent_cohomology::Multi_field	typeref:typename:Element
multiplicative_identity	multipers/gudhi/gudhi/Persistent_cohomology/Multi_field.h	/^  const Element& multiplicative_identity() const {$/;"	f	class:Gudhi::persistent_cohomology::Multi_field	typeref:typename:const Element &
multipliers	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^  std::vector<unsigned> multipliers;$/;"	m	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base	typeref:typename:std::vector<unsigned>
multiply	multipers/gudhi/gudhi/Fields/Multi_field_operators.h	/^  Element multiply(Element e1, const Element& e2) const {$/;"	f	class:Gudhi::persistence_fields::Multi_field_operators	typeref:typename:Element
multiply	multipers/gudhi/gudhi/Fields/Multi_field_small_operators.h	/^  Element multiply(Element e1, Element e2) const {$/;"	f	class:Gudhi::persistence_fields::Multi_field_operators_with_small_characteristics	typeref:typename:Element
multiply	multipers/gudhi/gudhi/Fields/Z2_field_operators.h	/^  static Element multiply(Unsigned_integer_type e1, Unsigned_integer_type e2) {$/;"	f	class:Gudhi::persistence_fields::Z2_field_operators	typeref:typename:Element
multiply	multipers/gudhi/gudhi/Fields/Zp_field_operators.h	/^  Element multiply(Element e1, Element e2) const {$/;"	f	class:Gudhi::persistence_fields::Zp_field_operators	typeref:typename:Element
multiply_	multipers/gudhi/gudhi/One_critical_filtration.h	/^  constexpr static bool multiply_(T &v1, T v2) {$/;"	f	class:Gudhi::multi_filtration::One_critical_filtration	typeref:typename:bool
multiply_and_add	multipers/gudhi/gudhi/Fields/Multi_field_operators.h	/^  Element multiply_and_add(Element e, const Element& m, const Element& a) const {$/;"	f	class:Gudhi::persistence_fields::Multi_field_operators	typeref:typename:Element
multiply_and_add	multipers/gudhi/gudhi/Fields/Multi_field_small_operators.h	/^  Element multiply_and_add(Element e, Element m, Element a) const { return get_value(e * m + a);/;"	f	class:Gudhi::persistence_fields::Multi_field_operators_with_small_characteristics	typeref:typename:Element
multiply_and_add	multipers/gudhi/gudhi/Fields/Z2_field_operators.h	/^  static Element multiply_and_add(Unsigned_integer_type e, Unsigned_integer_type m, Unsigned_int/;"	f	class:Gudhi::persistence_fields::Z2_field_operators	typeref:typename:Element
multiply_and_add	multipers/gudhi/gudhi/Fields/Zp_field_operators.h	/^  Element multiply_and_add(Element e, Element m, Element a) const { return get_value(e * m + a);/;"	f	class:Gudhi::persistence_fields::Zp_field_operators	typeref:typename:Element
multiply_and_add_inplace_back	multipers/gudhi/gudhi/Fields/Multi_field_operators.h	/^  void multiply_and_add_inplace_back(const Element& e, const Element& m, Element& a) const {$/;"	f	class:Gudhi::persistence_fields::Multi_field_operators	typeref:typename:void
multiply_and_add_inplace_back	multipers/gudhi/gudhi/Fields/Multi_field_small_operators.h	/^  void multiply_and_add_inplace_back(Element e, Element m, Element& a) const {$/;"	f	class:Gudhi::persistence_fields::Multi_field_operators_with_small_characteristics	typeref:typename:void
multiply_and_add_inplace_back	multipers/gudhi/gudhi/Fields/Z2_field_operators.h	/^  static void multiply_and_add_inplace_back(Unsigned_integer_type e, $/;"	f	class:Gudhi::persistence_fields::Z2_field_operators	typeref:typename:void
multiply_and_add_inplace_back	multipers/gudhi/gudhi/Fields/Zp_field_operators.h	/^  void multiply_and_add_inplace_back(Element e, Element m, Element& a) const {$/;"	f	class:Gudhi::persistence_fields::Zp_field_operators	typeref:typename:void
multiply_and_add_inplace_front	multipers/gudhi/gudhi/Fields/Multi_field_operators.h	/^  void multiply_and_add_inplace_front(Element& e, const Element& m, const Element& a) const {$/;"	f	class:Gudhi::persistence_fields::Multi_field_operators	typeref:typename:void
multiply_and_add_inplace_front	multipers/gudhi/gudhi/Fields/Multi_field_small_operators.h	/^  void multiply_and_add_inplace_front(Element& e, Element m, Element a) const {$/;"	f	class:Gudhi::persistence_fields::Multi_field_operators_with_small_characteristics	typeref:typename:void
multiply_and_add_inplace_front	multipers/gudhi/gudhi/Fields/Z2_field_operators.h	/^  static void multiply_and_add_inplace_front(Unsigned_integer_type& e, $/;"	f	class:Gudhi::persistence_fields::Z2_field_operators	typeref:typename:void
multiply_and_add_inplace_front	multipers/gudhi/gudhi/Fields/Zp_field_operators.h	/^  void multiply_and_add_inplace_front(Element& e, Element m, Element a) const {$/;"	f	class:Gudhi::persistence_fields::Zp_field_operators	typeref:typename:void
multiply_inplace	multipers/gudhi/gudhi/Fields/Multi_field_operators.h	/^  void multiply_inplace(Element& e1, const Element& e2) const {$/;"	f	class:Gudhi::persistence_fields::Multi_field_operators	typeref:typename:void
multiply_inplace	multipers/gudhi/gudhi/Fields/Multi_field_small_operators.h	/^  void multiply_inplace(Element& e1, Element e2) const {$/;"	f	class:Gudhi::persistence_fields::Multi_field_operators_with_small_characteristics	typeref:typename:void
multiply_inplace	multipers/gudhi/gudhi/Fields/Z2_field_operators.h	/^  static void multiply_inplace(Unsigned_integer_type& e1, Unsigned_integer_type e2) {$/;"	f	class:Gudhi::persistence_fields::Z2_field_operators	typeref:typename:void
multiply_inplace	multipers/gudhi/gudhi/Fields/Zp_field_operators.h	/^  void multiply_inplace(Element& e1, Element e2) const {$/;"	f	class:Gudhi::persistence_fields::Zp_field_operators	typeref:typename:void
multiply_source_and_add	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^inline Heap_column<Master_matrix>& Heap_column<Master_matrix>::multiply_source_and_add(Heap_colu/;"	f	class:Gudhi::persistence_matrix::Heap_column	typeref:typename:Heap_column<Master_matrix> &
multiply_source_and_add	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^inline Heap_column<Master_matrix>& Heap_column<Master_matrix>::multiply_source_and_add(const Ent/;"	f	class:Gudhi::persistence_matrix::Heap_column	typeref:typename:Heap_column<Master_matrix> &
multiply_source_and_add	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^inline Intrusive_list_column<Master_matrix>& Intrusive_list_column<Master_matrix>::multiply_sour/;"	f	class:Gudhi::persistence_matrix::Intrusive_list_column	typeref:typename:Intrusive_list_column<Master_matrix> &
multiply_source_and_add	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^inline Intrusive_set_column<Master_matrix>& Intrusive_set_column<Master_matrix>::multiply_source/;"	f	class:Gudhi::persistence_matrix::Intrusive_set_column	typeref:typename:Intrusive_set_column<Master_matrix> &
multiply_source_and_add	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^inline List_column<Master_matrix>& List_column<Master_matrix>::multiply_source_and_add(List_colu/;"	f	class:Gudhi::persistence_matrix::List_column	typeref:typename:List_column<Master_matrix> &
multiply_source_and_add	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^inline List_column<Master_matrix>& List_column<Master_matrix>::multiply_source_and_add(const Ent/;"	f	class:Gudhi::persistence_matrix::List_column	typeref:typename:List_column<Master_matrix> &
multiply_source_and_add	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^inline Naive_vector_column<Master_matrix>& Naive_vector_column<Master_matrix>::multiply_source_a/;"	f	class:Gudhi::persistence_matrix::Naive_vector_column	typeref:typename:Naive_vector_column<Master_matrix> &
multiply_source_and_add	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^inline Set_column<Master_matrix>& Set_column<Master_matrix>::multiply_source_and_add(Set_column&/;"	f	class:Gudhi::persistence_matrix::Set_column	typeref:typename:Set_column<Master_matrix> &
multiply_source_and_add	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^inline Set_column<Master_matrix>& Set_column<Master_matrix>::multiply_source_and_add(const Entry/;"	f	class:Gudhi::persistence_matrix::Set_column	typeref:typename:Set_column<Master_matrix> &
multiply_source_and_add	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^inline Small_vector_column<Master_matrix>& Small_vector_column<Master_matrix>::multiply_source_a/;"	f	class:Gudhi::persistence_matrix::Small_vector_column	typeref:typename:Small_vector_column<Master_matrix> &
multiply_source_and_add	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^inline Unordered_set_column<Master_matrix>& Unordered_set_column<Master_matrix>::multiply_source/;"	f	class:Gudhi::persistence_matrix::Unordered_set_column	typeref:typename:Unordered_set_column<Master_matrix> &
multiply_source_and_add	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^inline Vector_column<Master_matrix>& Vector_column<Master_matrix>::multiply_source_and_add(Vecto/;"	f	class:Gudhi::persistence_matrix::Vector_column	typeref:typename:Vector_column<Master_matrix> &
multiply_source_and_add	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^inline Vector_column<Master_matrix>& Vector_column<Master_matrix>::multiply_source_and_add(const/;"	f	class:Gudhi::persistence_matrix::Vector_column	typeref:typename:Vector_column<Master_matrix> &
multiply_source_and_add_to	multipers/gudhi/gudhi/Matrix.h	/^inline std::enable_if_t<!std::is_integral_v<Entry_range> > Matrix<PersistenceMatrixOptions>::mul/;"	f	class:Gudhi::persistence_matrix::Matrix	typeref:typename:std::enable_if_t<!std::is_integral_v<Entry_range>>
multiply_source_and_add_to	multipers/gudhi/gudhi/Matrix.h	/^inline std::enable_if_t<std::is_integral_v<Integer_index> > Matrix<PersistenceMatrixOptions>::mu/;"	f	class:Gudhi::persistence_matrix::Matrix	typeref:typename:std::enable_if_t<std::is_integral_v<Integer_index>>
multiply_source_and_add_to	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix.h	/^inline void Base_matrix<Master_matrix>::multiply_source_and_add_to(const Field_element& coeffici/;"	f	class:Gudhi::persistence_matrix::Base_matrix	typeref:typename:void
multiply_source_and_add_to	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix_with_column_compression.h	/^inline void Base_matrix_with_column_compression<Master_matrix>::multiply_source_and_add_to($/;"	f	class:Gudhi::persistence_matrix::Base_matrix_with_column_compression	typeref:typename:void
multiply_source_and_add_to	multipers/gudhi/gudhi/Persistence_matrix/Boundary_matrix.h	/^inline void Boundary_matrix<Master_matrix>::multiply_source_and_add_to(const Field_element& coef/;"	f	class:Gudhi::persistence_matrix::Boundary_matrix	typeref:typename:void
multiply_source_and_add_to	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^inline void Chain_matrix<Master_matrix>::multiply_source_and_add_to(const Field_element& coeffic/;"	f	class:Gudhi::persistence_matrix::Chain_matrix	typeref:typename:void
multiply_source_and_add_to	multipers/gudhi/gudhi/Persistence_matrix/Id_to_index_overlay.h	/^inline void Id_to_index_overlay<Underlying_matrix, Master_matrix>::multiply_source_and_add_to($/;"	f	class:Gudhi::persistence_matrix::Id_to_index_overlay	typeref:typename:void
multiply_source_and_add_to	multipers/gudhi/gudhi/Persistence_matrix/Position_to_index_overlay.h	/^inline void Position_to_index_overlay<Underlying_matrix, Master_matrix>::multiply_source_and_add/;"	f	class:Gudhi::persistence_matrix::Position_to_index_overlay	typeref:typename:void
multiply_source_and_add_to	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^inline void RU_matrix<Master_matrix>::multiply_source_and_add_to(const Field_element& coefficien/;"	f	class:Gudhi::persistence_matrix::RU_matrix	typeref:typename:void
multiply_target_and_add	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^inline Heap_column<Master_matrix>& Heap_column<Master_matrix>::multiply_target_and_add(const Fie/;"	f	class:Gudhi::persistence_matrix::Heap_column	typeref:typename:Heap_column<Master_matrix> &
multiply_target_and_add	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^inline Intrusive_list_column<Master_matrix>& Intrusive_list_column<Master_matrix>::multiply_targ/;"	f	class:Gudhi::persistence_matrix::Intrusive_list_column	typeref:typename:Intrusive_list_column<Master_matrix> &
multiply_target_and_add	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^inline Intrusive_set_column<Master_matrix>& Intrusive_set_column<Master_matrix>::multiply_target/;"	f	class:Gudhi::persistence_matrix::Intrusive_set_column	typeref:typename:Intrusive_set_column<Master_matrix> &
multiply_target_and_add	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^inline List_column<Master_matrix>& List_column<Master_matrix>::multiply_target_and_add(const Fie/;"	f	class:Gudhi::persistence_matrix::List_column	typeref:typename:List_column<Master_matrix> &
multiply_target_and_add	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^inline Naive_vector_column<Master_matrix>& Naive_vector_column<Master_matrix>::multiply_target_a/;"	f	class:Gudhi::persistence_matrix::Naive_vector_column	typeref:typename:Naive_vector_column<Master_matrix> &
multiply_target_and_add	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^inline Set_column<Master_matrix>& Set_column<Master_matrix>::multiply_target_and_add(const Field/;"	f	class:Gudhi::persistence_matrix::Set_column	typeref:typename:Set_column<Master_matrix> &
multiply_target_and_add	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^inline Small_vector_column<Master_matrix>& Small_vector_column<Master_matrix>::multiply_target_a/;"	f	class:Gudhi::persistence_matrix::Small_vector_column	typeref:typename:Small_vector_column<Master_matrix> &
multiply_target_and_add	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^inline Unordered_set_column<Master_matrix>& Unordered_set_column<Master_matrix>::multiply_target/;"	f	class:Gudhi::persistence_matrix::Unordered_set_column	typeref:typename:Unordered_set_column<Master_matrix> &
multiply_target_and_add	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^inline Vector_column<Master_matrix>& Vector_column<Master_matrix>::multiply_target_and_add(const/;"	f	class:Gudhi::persistence_matrix::Vector_column	typeref:typename:Vector_column<Master_matrix> &
multiply_target_and_add_to	multipers/gudhi/gudhi/Matrix.h	/^inline std::enable_if_t<!std::is_integral_v<Entry_range> > Matrix<PersistenceMatrixOptions>::mul/;"	f	class:Gudhi::persistence_matrix::Matrix	typeref:typename:std::enable_if_t<!std::is_integral_v<Entry_range>>
multiply_target_and_add_to	multipers/gudhi/gudhi/Matrix.h	/^inline std::enable_if_t<std::is_integral_v<Integer_index> > Matrix<PersistenceMatrixOptions>::mu/;"	f	class:Gudhi::persistence_matrix::Matrix	typeref:typename:std::enable_if_t<std::is_integral_v<Integer_index>>
multiply_target_and_add_to	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix.h	/^inline void Base_matrix<Master_matrix>::multiply_target_and_add_to(const Entry_range_or_column_i/;"	f	class:Gudhi::persistence_matrix::Base_matrix	typeref:typename:void
multiply_target_and_add_to	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix_with_column_compression.h	/^inline void Base_matrix_with_column_compression<Master_matrix>::multiply_target_and_add_to($/;"	f	class:Gudhi::persistence_matrix::Base_matrix_with_column_compression	typeref:typename:void
multiply_target_and_add_to	multipers/gudhi/gudhi/Persistence_matrix/Boundary_matrix.h	/^inline void Boundary_matrix<Master_matrix>::multiply_target_and_add_to(Index sourceColumnIndex,$/;"	f	class:Gudhi::persistence_matrix::Boundary_matrix	typeref:typename:void
multiply_target_and_add_to	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^inline void Chain_matrix<Master_matrix>::multiply_target_and_add_to(Index sourceColumnIndex,$/;"	f	class:Gudhi::persistence_matrix::Chain_matrix	typeref:typename:void
multiply_target_and_add_to	multipers/gudhi/gudhi/Persistence_matrix/Id_to_index_overlay.h	/^inline void Id_to_index_overlay<Underlying_matrix, Master_matrix>::multiply_target_and_add_to($/;"	f	class:Gudhi::persistence_matrix::Id_to_index_overlay	typeref:typename:void
multiply_target_and_add_to	multipers/gudhi/gudhi/Persistence_matrix/Position_to_index_overlay.h	/^inline void Position_to_index_overlay<Underlying_matrix, Master_matrix>::multiply_target_and_add/;"	f	class:Gudhi::persistence_matrix::Position_to_index_overlay	typeref:typename:void
multiply_target_and_add_to	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^inline void RU_matrix<Master_matrix>::multiply_target_and_add_to(Index sourceColumnIndex,$/;"	f	class:Gudhi::persistence_matrix::RU_matrix	typeref:typename:void
multivariate_gaussian_kernel	multipers/ml/convolutions.py	/^def multivariate_gaussian_kernel(x_i, y_j, covariance_matrix_inverse):$/;"	f
myst_enable_extensions	docs/conf.py	/^myst_enable_extensions = [$/;"	v
myst_url_schemes	docs/conf.py	/^myst_url_schemes = ("http", "https", "mailto")$/;"	v
n	benchmarks/stuff.py	/^    n, dataset, cplx, inv, degree, vine, dtype, col = args$/;"	v
n_jobs	compute.py	/^		n_jobs = 1 $/;"	v
n_jobs	compute.py	/^		n_jobs = 1$/;"	v
namedview501	docs/icon.svg	/^     inkscape:current-layer="svg501" \/>$/;"	i
namespace_to_dict	compute.py	/^def namespace_to_dict(namespace):$/;"	f
nan	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  constexpr static Multi_critical_filtration nan() { return Multi_critical_filtration(Generator:/;"	f	class:Gudhi::multi_filtration::Multi_critical_filtration	typeref:typename:Multi_critical_filtration
nan	multipers/gudhi/gudhi/One_critical_filtration.h	/^  constexpr static One_critical_filtration nan() {$/;"	f	class:Gudhi::multi_filtration::One_critical_filtration	typeref:typename:One_critical_filtration
nb_execution_mode	docs/conf.py	/^nb_execution_mode = "off"$/;"	v
nb_execution_timeout	docs/conf.py	/^nb_execution_timeout = 10$/;"	v
nciterator	multipers/multiparameter_module_approximation/utilities.h	/^  using nciterator =$/;"	t	struct:Gudhi::multiparameter::mma::MultiDiagrams	typeref:typename:std::vector<MultiDiagram<filtration_type,value_type>>::iterator
ndim	multipers/tensor/tensor.h	/^  inline std::size_t ndim() const { return resolution_.size(); }$/;"	f	class:tensor::static_tensor_view	typeref:typename:std::size_t
negInf	multipers/multiparameter_module_approximation/utilities.h	/^const value_type negInf = -1 * inf;$/;"	v	namespace:Gudhi::multiparameter::mma	typeref:typename:const value_type
negative_positive_transpose	multipers/gudhi/gudhi/Persistence_matrix/chain_vine_swap.h	/^  void negative_positive_transpose(ID_index pivot1, ID_index pivot2) {$/;"	f	class:Gudhi::persistence_matrix::Chain_barcode_swap	typeref:typename:void
negative_transpose	multipers/gudhi/gudhi/Persistence_matrix/chain_vine_swap.h	/^  void negative_transpose(ID_index pivot1, ID_index pivot2) {$/;"	f	class:Gudhi::persistence_matrix::Chain_barcode_swap	typeref:typename:void
neighbors	multipers/gudhi/gudhi/Flag_complex_edge_collapser.h	/^  Neighbors neighbors; \/\/ closed neighborhood$/;"	m	struct:Gudhi::collapse::Flag_complex_edge_collapser	typeref:typename:Neighbors
neighbors_data	multipers/gudhi/gudhi/Flag_complex_edge_collapser.h	/^  std::vector<Filtration_value> neighbors_data;$/;"	m	struct:Gudhi::collapse::Flag_complex_edge_collapser	typeref:typename:std::vector<Filtration_value>
neighbors_dense	multipers/gudhi/gudhi/Flag_complex_edge_collapser.h	/^  Filtration_value& neighbors_dense(Vertex i, Vertex j){return neighbors_data[num_vertices*j+i];/;"	f	struct:Gudhi::collapse::Flag_complex_edge_collapser	typeref:typename:Filtration_value &
new_to_old_perm_	multipers/gudhi/mma_interface_coh.h	/^    const std::vector<Simplex_handle> *new_to_old_perm_;$/;"	m	class:Gudhi::multiparameter::truc_interface::Boundary_matrix_as_filtered_complex_for_coh::Filtration_range_iterator	typeref:typename:const std::vector<Simplex_handle> *
new_to_old_perm_	multipers/gudhi/mma_interface_coh.h	/^    std::vector<Simplex_handle> const *new_to_old_perm_;$/;"	m	class:Gudhi::multiparameter::truc_interface::Boundary_matrix_as_filtered_complex_for_coh::Filtration_simplex_range	typeref:typename:std::vector<Simplex_handle> const *
new_to_old_perm_	multipers/gudhi/mma_interface_coh.h	/^  std::vector<Simplex_handle> const *new_to_old_perm_;$/;"	m	class:Gudhi::multiparameter::truc_interface::Boundary_matrix_as_filtered_complex_for_coh	typeref:typename:std::vector<Simplex_handle> const *
next	multipers/multiparameter_module_approximation/approximation.h	/^  inline LineIterator<Filtration_value, axis, sign> &next(std::size_t i) {$/;"	f	class:Gudhi::multiparameter::mma::LineIterator	typeref:typename:LineIterator<Filtration_value,axis,sign> &
nextBarIndex_	multipers/gudhi/naive_merge_tree.h	/^    index nextBarIndex_;$/;"	m	struct:Naive_merge_forest::Barcode	typeref:typename:index
nextColumnIndex_	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix_with_column_compression.h	/^  Index nextColumnIndex_;                             \/**< Next unused column index. *\/$/;"	m	class:Gudhi::persistence_matrix::Base_matrix_with_column_compression	typeref:typename:Index
nextEdgeIndex_	multipers/gudhi/naive_merge_tree.h	/^  index nextEdgeIndex_;$/;"	m	class:Naive_merge_forest	typeref:typename:index
nextEventIndex_	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^  Pos_index nextEventIndex_;      \/**< Next birth or death index. *\/$/;"	m	class:Gudhi::persistence_matrix::RU_matrix	typeref:typename:Pos_index
nextIndex_	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^  Index nextIndex_;               \/**< Next unused column index. *\/$/;"	m	class:Gudhi::persistence_matrix::Chain_matrix	typeref:typename:Index
nextIndex_	multipers/gudhi/gudhi/Persistence_matrix/Id_to_index_overlay.h	/^  Index nextIndex_;           \/**< Next unused index. *\/$/;"	m	class:Gudhi::persistence_matrix::Id_to_index_overlay	typeref:typename:Index
nextIndex_	multipers/gudhi/gudhi/Persistence_matrix/Position_to_index_overlay.h	/^  Index nextIndex_;                     \/**< Next unused index. *\/$/;"	m	class:Gudhi::persistence_matrix::Position_to_index_overlay	typeref:typename:Index
nextInsertIndex_	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix.h	/^  Index nextInsertIndex_;         \/**< Next unused column index. *\/$/;"	m	class:Gudhi::persistence_matrix::Base_matrix	typeref:typename:Index
nextInsertIndex_	multipers/gudhi/gudhi/Persistence_matrix/Boundary_matrix.h	/^  Index nextInsertIndex_;         \/**< Next unused column index. *\/$/;"	m	class:Gudhi::persistence_matrix::Boundary_matrix	typeref:typename:Index
nextPosition_	multipers/gudhi/gudhi/Persistence_matrix/Position_to_index_overlay.h	/^  Pos_index nextPosition_;              \/**< Next unused position. *\/$/;"	m	class:Gudhi::persistence_matrix::Position_to_index_overlay	typeref:typename:Pos_index
nextPosition_	multipers/gudhi/gudhi/Persistence_matrix/chain_pairing.h	/^  Pos_index nextPosition_;  \/**< Next relative position in the filtration. *\/$/;"	m	class:Gudhi::persistence_matrix::Chain_pairing	typeref:typename:Pos_index
nextVertexIndex_	multipers/gudhi/naive_merge_tree.h	/^  index nextVertexIndex_;$/;"	m	class:Naive_merge_forest	typeref:typename:index
next_	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  Vertex_handle next_;  \/\/ next vertex to push in suffix_$/;"	m	class:Gudhi::Simplex_tree_boundary_opposite_vertex_simplex_iterator	typeref:typename:Vertex_handle
next_	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  Vertex_handle next_;  \/\/ next vertex to push in suffix_$/;"	m	class:Gudhi::Simplex_tree_boundary_simplex_iterator	typeref:typename:Vertex_handle
nodes_by_label	multipers/gudhi/gudhi/Simplex_tree.h	/^  List_max_vertex* nodes_by_label(Vertex_handle v) {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:List_max_vertex *
nodes_label_to_list_	multipers/gudhi/gudhi/Simplex_tree.h	/^  std::unordered_map<Vertex_handle, List_max_vertex> nodes_label_to_list_;$/;"	m	class:Gudhi::Simplex_tree	typeref:typename:std::unordered_map<Vertex_handle,List_max_vertex>
noisy_annulus	multipers/data/synthetic.py	/^def noisy_annulus($/;"	f	typeref:typename:np.ndarray
normalize	multipers/multiparameter_module_approximation/images.h	/^	bool normalize;							\/\/ Enforce image to take values in [0,1]$/;"	m	struct:Gudhi::multiparameter::mma::representation::ImageArgs	typeref:typename:bool
np	benchmarks/stuff.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	compute.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	multipers/_signed_measure_meta.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	multipers/_slicer_meta.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	multipers/data/MOL2.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	multipers/data/UCR.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	multipers/data/graphs.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	multipers/data/immuno_regions.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	multipers/data/pytorch2simplextree.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	multipers/data/shape3d.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	multipers/data/synthetic.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	multipers/distances.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	multipers/function_rips.pyx	/^import numpy as np$/;"	I	nameref:module:numpy
np	multipers/grids.pyx	/^import numpy as np$/;"	I	nameref:module:numpy
np	multipers/io.pyx	/^import numpy as np$/;"	I	nameref:module:numpy
np	multipers/ml/accuracies.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	multipers/ml/convolutions.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	multipers/ml/kernels.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	multipers/ml/mma.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	multipers/ml/one.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	multipers/ml/point_clouds.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	multipers/ml/signed_measures.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	multipers/ml/sliced_wasserstein.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	multipers/ml/tools.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	multipers/multiparameter_module_approximation.pyx	/^import numpy as np$/;"	I	nameref:module:numpy
np	multipers/pickle.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	multipers/plots.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	multipers/point_measure.pyx	/^import numpy as np$/;"	I	nameref:module:numpy
np	multipers/test.pyx	/^import numpy as np$/;"	I	nameref:module:numpy
np	multipers/tests/__init__.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	multipers/tests/test_diff_helper.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	multipers/tests/test_hilbert_function.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	multipers/tests/test_mma.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	multipers/tests/test_point_clouds.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	multipers/tests/test_python-cpp_conversion.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	multipers/tests/test_signed_betti.py	/^import numpy as np $/;"	I	nameref:module:numpy
np	multipers/tests/test_signed_measure.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	multipers/tests/test_simplextreemulti.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	multipers/tests/test_slicer.py	/^    import numpy as np$/;"	I	function:test_scc	file:	nameref:module:numpy
np	multipers/tests/test_slicer.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	multipers/torch/diff_grids.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	multipers/torch/rips_density.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	multipers_old.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	setup.py	/^import numpy as np$/;"	I	nameref:module:numpy
ns24a6b8240101	docs/icon.svg	/^   xmlns:dc="http:\/\/purl.org\/dc\/elements\/1.1\/">$/;"	n	uri:http://www.w3.org/2000/svg
null_	multipers/gudhi/gudhi/Simplex_tree.h	/^    static constexpr const Filtration_value null_ = Filtration_value();$/;"	m	struct:Gudhi::Simplex_tree::Filtration_simplex_base_dummy	typeref:typename:const Filtration_value
null_key	multipers/gudhi/gudhi/Bitmap_cubical_complex.h	/^  static Simplex_key null_key() {$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex	typeref:typename:Simplex_key
null_key	multipers/gudhi/gudhi/Simplex_tree.h	/^  static Simplex_key null_key() { return -1; }$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:Simplex_key
null_key	multipers/gudhi/mma_interface_coh.h	/^  static constexpr Simplex_key null_key() { return static_cast<Simplex_key>(-1); }$/;"	f	class:Gudhi::multiparameter::truc_interface::Boundary_matrix_as_filtered_complex_for_coh	typeref:typename:Simplex_key
null_simplex	multipers/gudhi/gudhi/Bitmap_cubical_complex.h	/^  static Simplex_handle null_simplex() {$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex	typeref:typename:Simplex_handle
null_simplex	multipers/gudhi/gudhi/Simplex_tree.h	/^  static Simplex_handle null_simplex() { return Dictionary_it(); }$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:Simplex_handle
null_simplex	multipers/gudhi/mma_interface_coh.h	/^  static constexpr Simplex_handle null_simplex() { return static_cast<Simplex_handle>(-1); }$/;"	f	class:Gudhi::multiparameter::truc_interface::Boundary_matrix_as_filtered_complex_for_coh	typeref:typename:Simplex_handle
null_vertex	multipers/gudhi/gudhi/Simplex_tree.h	/^  Vertex_handle null_vertex() const { return null_vertex_; }$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:Vertex_handle
null_vertex_	multipers/gudhi/gudhi/Simplex_tree.h	/^  Vertex_handle null_vertex_;$/;"	m	class:Gudhi::Simplex_tree	typeref:typename:Vertex_handle
num_axes	compute.py	/^num_axes = (num_bandwidth)*num_kernel_rescale$/;"	v
num_bandwidth	compute.py	/^num_bandwidth = max(num_bandwidth,1)$/;"	v
num_bandwidth	compute.py	/^num_bandwidth=len(args.kde_bandwidths)$/;"	v
num_edges	multipers/gudhi/gudhi/Off_reader.h	/^    int num_edges;$/;"	m	struct:Gudhi::Off_reader::Off_info	typeref:typename:int
num_faces	multipers/gudhi/gudhi/Off_reader.h	/^    int num_faces;$/;"	m	struct:Gudhi::Off_reader::Off_info	typeref:typename:int
num_generators	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  std::size_t num_generators() const { return multi_filtration_.size(); }$/;"	f	class:Gudhi::multi_filtration::Multi_critical_filtration	typeref:typename:std::size_t
num_generators	multipers/gudhi/truc.h	/^    inline std::size_t num_generators() const { return this->truc_ptr->structure.size(); }$/;"	f	class:Gudhi::multiparameter::truc_interface::Truc::TrucThread	typeref:typename:std::size_t
num_generators	multipers/gudhi/truc.h	/^  inline std::size_t num_generators() const { return structure.size(); }$/;"	f	class:Gudhi::multiparameter::truc_interface::Truc	typeref:typename:std::size_t
num_kernel_rescale	compute.py	/^num_kernel_rescale = 1 if SMDs.scales is None else len(SMDs.scales)$/;"	v
num_lines	benchmarks/stuff.py	/^num_lines = 50$/;"	v
num_masses	compute.py	/^num_masses=len(args.dtm_masses)$/;"	v
num_parameters	compute.py	/^num_parameters = len(args.filtrations) if "graphs\/" in args.dataset else 2$/;"	v
num_parameters	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  std::size_t num_parameters() const { return multi_filtration_[0].num_parameters(); }$/;"	f	class:Gudhi::multi_filtration::Multi_critical_filtration	typeref:typename:std::size_t
num_parameters	multipers/gudhi/gudhi/One_critical_filtration.h	/^  std::size_t num_parameters() const { return Base::size(); }$/;"	f	class:Gudhi::multi_filtration::One_critical_filtration	typeref:typename:std::size_t
num_parameters	multipers/gudhi/truc.h	/^    inline std::size_t num_parameters() const {$/;"	f	class:Gudhi::multiparameter::truc_interface::Truc::TrucThread	typeref:typename:std::size_t
num_parameters	multipers/gudhi/truc.h	/^  inline std::size_t num_parameters() const {$/;"	f	class:Gudhi::multiparameter::truc_interface::Truc	typeref:typename:std::size_t
num_pts	benchmarks/stuff.py	/^num_pts: Sequence[int] = [100, 300, 500]$/;"	v	typeref:typename:Sequence[int]
num_repetition	benchmarks/stuff.py	/^num_repetition = 5$/;"	v
num_simplices	multipers/gudhi/gudhi/Bitmap_cubical_complex.h	/^  std::size_t num_simplices() const { return this->data.size(); }$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex	typeref:typename:std::size_t
num_simplices	multipers/gudhi/gudhi/Simplex_tree.h	/^  size_t num_simplices() { return num_simplices(root()); }$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:size_t
num_simplices	multipers/gudhi/gudhi/Simplex_tree.h	/^  size_t num_simplices(Siblings* sib) {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:size_t
num_simplices	multipers/gudhi/mma_interface_coh.h	/^  std::size_t num_simplices() const { return boundaries_->size(); }$/;"	f	class:Gudhi::multiparameter::truc_interface::Boundary_matrix_as_filtered_complex_for_coh	typeref:typename:std::size_t
num_simplices_	multipers/gudhi/gudhi/Persistent_cohomology.h	/^  size_t num_simplices_;$/;"	m	class:Gudhi::persistent_cohomology::Persistent_cohomology	typeref:typename:size_t
num_simplices_and_filtration_size	multipers/gudhi/gudhi/Simplex_tree.h	/^  std::size_t num_simplices_and_filtration_size(Siblings* sib, std::size_t& fv_byte_size) const /;"	f	class:Gudhi::Simplex_tree	typeref:typename:std::size_t
num_simplices_by_dimension	multipers/gudhi/gudhi/Simplex_tree.h	/^  std::vector<size_t> num_simplices_by_dimension() {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:std::vector<size_t>
num_vertices	multipers/gudhi/gudhi/Flag_complex_edge_collapser.h	/^  std::size_t num_vertices;$/;"	m	struct:Gudhi::collapse::Flag_complex_edge_collapser	typeref:typename:std::size_t
num_vertices	multipers/gudhi/gudhi/Off_reader.h	/^    int num_vertices;$/;"	m	struct:Gudhi::Off_reader::Off_info	typeref:typename:int
num_vertices	multipers/gudhi/gudhi/Simplex_tree.h	/^  size_t num_vertices() const { return root_.members_.size(); }$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:size_t
num_vertices	multipers/gudhi/truc.h	/^  inline unsigned int num_vertices() const { return num_vertices_; }$/;"	f	class:Gudhi::multiparameter::truc_interface::SimplicialStructure	typeref:typename:unsigned int
num_vertices	multipers/gudhi/truc.h	/^  unsigned int num_vertices() const { return num_vertices_; };$/;"	f	class:Gudhi::multiparameter::truc_interface::PresentationStructure	typeref:typename:unsigned int
num_vertices_	multipers/gudhi/truc.h	/^  unsigned int num_vertices_;$/;"	m	class:Gudhi::multiparameter::truc_interface::PresentationStructure	typeref:typename:unsigned int
num_vertices_	multipers/gudhi/truc.h	/^  unsigned int num_vertices_;$/;"	m	class:Gudhi::multiparameter::truc_interface::SimplicialStructure	typeref:typename:unsigned int
number_cells	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^  inline std::size_t number_cells() const { return this->data.size(); }$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base	typeref:typename:std::size_t
number_of_parameters_	multipers/gudhi/gudhi/Simplex_tree.h	/^  int number_of_parameters_; \/**< Number of parameters of the multi-filtrations when$/;"	m	class:Gudhi::Simplex_tree	typeref:typename:int
numeric_limits	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^class numeric_limits<Gudhi::multi_filtration::Multi_critical_filtration<T>> {$/;"	c	namespace:std
numeric_limits	multipers/gudhi/gudhi/One_critical_filtration.h	/^class numeric_limits<Gudhi::multi_filtration::One_critical_filtration<T> > {$/;"	c	namespace:std
numpy_to_tensor	multipers/test.pyx	/^def numpy_to_tensor(array:np.ndarray):$/;"	f
nx	multipers/data/graphs.py	/^import networkx as nx$/;"	I	nameref:module:networkx
nx	multipers/data/pytorch2simplextree.py	/^import networkx as nx$/;"	I	nameref:module:networkx
nx	multipers/ml/one.py	/^import networkx as nx$/;"	I	nameref:module:networkx
off_info_	multipers/gudhi/gudhi/Off_reader.h	/^  Off_info off_info_;$/;"	m	class:Gudhi::Off_reader	typeref:typename:Off_info
oncles	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_siblings.h	/^  Simplex_tree_siblings * oncles() {$/;"	f	class:Gudhi::Simplex_tree_siblings	typeref:typename:Simplex_tree_siblings *
oncles_	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_siblings.h	/^  Simplex_tree_siblings * oncles_;$/;"	m	class:Gudhi::Simplex_tree_siblings	typeref:typename:Simplex_tree_siblings *
operator	multipers/filtrations.pxd	/^            operator=(iterator&) except +$/;"	v
operator	multipers/filtrations.pxd	/^            operator=(reverse_iterator&) except +$/;"	v
operator !=	multipers/gudhi/gudhi/Bitmap_cubical_complex.h	/^    bool operator!=(const Skeleton_simplex_iterator& rhs) const {$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex::Skeleton_simplex_iterator	typeref:typename:bool
operator !=	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^    bool operator!=(const Top_dimensional_cells_iterator& rhs) const { return !(*this == rhs); }$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base::Top_dimensional_cells_iterator	typeref:typename:bool
operator !=	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^    bool operator!=(const Vertices_iterator& rhs) const { return !(*this == rhs); }$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base::Vertices_iterator	typeref:typename:bool
operator !=	multipers/gudhi/gudhi/Bitmap_cubical_complex_periodic_boundary_conditions_base.h	/^    bool operator!=(const Vertices_iterator& rhs) const { return !(*this == rhs); }$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_periodic_boundary_conditions_base::Vertices_iterator	typeref:typename:bool
operator !=	multipers/gudhi/gudhi/Fields/Multi_field.h	/^  friend bool operator!=(const Element& v, const Multi_field_element& f) { return !(v == f); }$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:bool
operator !=	multipers/gudhi/gudhi/Fields/Multi_field.h	/^  friend bool operator!=(const Multi_field_element& f, const Element& v) { return !(v == f); }$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:bool
operator !=	multipers/gudhi/gudhi/Fields/Multi_field.h	/^  friend bool operator!=(const Multi_field_element& f1, const Multi_field_element& f2) { return /;"	f	namespace:Gudhi::persistence_fields	typeref:typename:bool
operator !=	multipers/gudhi/gudhi/Fields/Multi_field_shared.h	/^  friend bool operator!=(const Element& v, const Shared_multi_field_element& f) { return !(v == /;"	f	namespace:Gudhi::persistence_fields	typeref:typename:bool
operator !=	multipers/gudhi/gudhi/Fields/Multi_field_shared.h	/^  friend bool operator!=(const Shared_multi_field_element& f, const Element& v) { return !(v == /;"	f	namespace:Gudhi::persistence_fields	typeref:typename:bool
operator !=	multipers/gudhi/gudhi/Fields/Multi_field_shared.h	/^  friend bool operator!=(const Shared_multi_field_element& f1, const Shared_multi_field_element&/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:bool
operator !=	multipers/gudhi/gudhi/Fields/Multi_field_small.h	/^  friend bool operator!=(const Integer_type v, const Multi_field_element_with_small_characterist/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:bool
operator !=	multipers/gudhi/gudhi/Fields/Multi_field_small.h	/^  friend bool operator!=(const Multi_field_element_with_small_characteristics& f, const Integer_/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:bool
operator !=	multipers/gudhi/gudhi/Fields/Multi_field_small.h	/^  friend bool operator!=(const Multi_field_element_with_small_characteristics& f1,$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:bool
operator !=	multipers/gudhi/gudhi/Fields/Multi_field_small_shared.h	/^  friend bool operator!=(const Integer_type v, const Shared_multi_field_element_with_small_chara/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:bool
operator !=	multipers/gudhi/gudhi/Fields/Multi_field_small_shared.h	/^  friend bool operator!=(const Shared_multi_field_element_with_small_characteristics& f, const I/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:bool
operator !=	multipers/gudhi/gudhi/Fields/Multi_field_small_shared.h	/^  friend bool operator!=(const Shared_multi_field_element_with_small_characteristics& f1,$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:bool
operator !=	multipers/gudhi/gudhi/Fields/Z2_field.h	/^  friend bool operator!=(const Integer_type v, const Z2_field_element& f) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:bool
operator !=	multipers/gudhi/gudhi/Fields/Z2_field.h	/^  friend bool operator!=(const Z2_field_element& f, const Integer_type v) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:bool
operator !=	multipers/gudhi/gudhi/Fields/Z2_field.h	/^  friend bool operator!=(const Z2_field_element& f1, const Z2_field_element& f2) { return !(f1 =/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:bool
operator !=	multipers/gudhi/gudhi/Fields/Zp_field.h	/^  friend bool operator!=(const Integer_type& v, const Zp_field_element& f) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:bool
operator !=	multipers/gudhi/gudhi/Fields/Zp_field.h	/^  friend bool operator!=(const Zp_field_element& f, const Integer_type& v) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:bool
operator !=	multipers/gudhi/gudhi/Fields/Zp_field.h	/^  friend bool operator!=(const Zp_field_element& f1, const Zp_field_element& f2) { return !(f1 =/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:bool
operator !=	multipers/gudhi/gudhi/Fields/Zp_field_shared.h	/^  friend bool operator!=(const Integer_type& v, const Shared_Zp_field_element& f) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:bool
operator !=	multipers/gudhi/gudhi/Fields/Zp_field_shared.h	/^  friend bool operator!=(const Shared_Zp_field_element& f, const Integer_type& v) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:bool
operator !=	multipers/gudhi/gudhi/Fields/Zp_field_shared.h	/^  friend bool operator!=(const Shared_Zp_field_element& f1, const Shared_Zp_field_element& f2) {/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:bool
operator !=	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  friend bool operator!=(const Multi_critical_filtration &a, const Multi_critical_filtration &b)/;"	f	namespace:Gudhi::multi_filtration	typeref:typename:bool
operator !=	multipers/gudhi/gudhi/One_critical_filtration.h	/^  friend bool operator!=(const One_critical_filtration &a, const One_critical_filtration &b) { r/;"	f	namespace:Gudhi::multi_filtration	typeref:typename:bool
operator !=	multipers/gudhi/gudhi/Simplex_tree.h	/^  bool operator!=(Simplex_tree<OtherSimplexTreeOptions>& st2) {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:bool
operator ()	multipers/gudhi/gudhi/Bitmap_cubical_complex.h	/^  bool operator()(const typename Bitmap_cubical_complex<T>::Simplex_handle& sh1,$/;"	f	class:Gudhi::cubical_complex::is_before_in_filtration	typeref:typename:bool
operator ()	multipers/gudhi/gudhi/Flag_complex_edge_collapser.h	/^  struct Cmpi { template<class T, class U> bool operator()(T const&a, U const&b)const{return b<a/;"	f	struct:Gudhi::collapse::Flag_complex_edge_collapser::Cmpi	typeref:typename:bool
operator ()	multipers/gudhi/gudhi/Matrix.h	/^    bool operator()(const Matrix_entry& c1, const Matrix_entry& c2) const {$/;"	f	struct:Gudhi::persistence_matrix::Matrix::RowEntryComp	typeref:typename:bool
operator ()	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^    bool operator()(const Generator &g1, const Generator &g2) {$/;"	f	struct:Gudhi::multi_filtration::Multi_critical_filtration::Is_strictly_smaller_lexicographically	typeref:typename:bool
operator ()	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix_with_column_compression.h	/^      size_t operator()(const Column& c) const { return std::hash<Base>()(static_cast<Base>(c));/;"	f	struct:Gudhi::persistence_matrix::Base_matrix_with_column_compression::Column::Hasher	typeref:typename:size_t
operator ()	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix_with_column_compression.h	/^    void operator()(Column* delete_this) { matrix_->columnPool_->destroy(delete_this); }$/;"	f	struct:Gudhi::persistence_matrix::Base_matrix_with_column_compression::Delete_disposer	typeref:typename:void
operator ()	multipers/gudhi/gudhi/Persistence_matrix/columns/entry_types.h	/^  std::size_t operator()(const Gudhi::persistence_matrix::Entry<Master_matrix>& entry) const {$/;"	f	struct:std::hash	typeref:typename:std::size_t
operator ()	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^    bool operator()(const Entry* c1, const Entry* c2) const { return *c1 < *c2; }$/;"	f	struct:Gudhi::persistence_matrix::Heap_column::EntryPointerComp	typeref:typename:bool
operator ()	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^  size_t operator()(Gudhi::persistence_matrix::Heap_column<Master_matrix>& column) const {$/;"	f	struct:std::hash	typeref:typename:size_t
operator ()	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^    Entry* operator()(const Entry& clone_this) { return entryPool_->construct(clone_this); }$/;"	f	struct:Gudhi::persistence_matrix::Intrusive_list_column::New_cloner	typeref:typename:Entry *
operator ()	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^    void operator()(Entry* delete_this) {$/;"	f	struct:Gudhi::persistence_matrix::Intrusive_list_column::Delete_disposer	typeref:typename:void
operator ()	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^  std::size_t operator()(const Gudhi::persistence_matrix::Intrusive_list_column<Master_matrix>& /;"	f	struct:std::hash	typeref:typename:std::size_t
operator ()	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^    Entry* operator()(const Entry& clone_this) { return entryPool_->construct(clone_this); }$/;"	f	struct:Gudhi::persistence_matrix::Intrusive_set_column::New_cloner	typeref:typename:Entry *
operator ()	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^    void operator()(Entry* delete_this) {$/;"	f	struct:Gudhi::persistence_matrix::Intrusive_set_column::Delete_disposer	typeref:typename:void
operator ()	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^  std::size_t operator()(const Gudhi::persistence_matrix::Intrusive_set_column<Master_matrix>& c/;"	f	struct:std::hash	typeref:typename:std::size_t
operator ()	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^  std::size_t operator()(const Gudhi::persistence_matrix::List_column<Master_matrix>& column) co/;"	f	struct:std::hash	typeref:typename:std::size_t
operator ()	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^  std::size_t operator()(const Gudhi::persistence_matrix::Naive_vector_column<Master_matrix>& co/;"	f	struct:std::hash	typeref:typename:std::size_t
operator ()	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^    bool operator()(const Entry* c1, const Entry* c2) const { return *c1 < *c2; }$/;"	f	struct:Gudhi::persistence_matrix::Set_column::EntryPointerComp	typeref:typename:bool
operator ()	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^  std::size_t operator()(const Gudhi::persistence_matrix::Set_column<Master_matrix>& column) con/;"	f	struct:std::hash	typeref:typename:std::size_t
operator ()	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^  std::size_t operator()(const Gudhi::persistence_matrix::Small_vector_column<Master_matrix>& co/;"	f	struct:std::hash	typeref:typename:std::size_t
operator ()	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^    bool operator()(const Entry* c1, const Entry* c2) const { return *c1 < *c2; }$/;"	f	struct:Gudhi::persistence_matrix::Unordered_set_column::EntryPointerComp	typeref:typename:bool
operator ()	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^  bool operator()(const Entry* c1, const Entry* c2) const { return *c1 == *c2; }$/;"	f	struct:Gudhi::persistence_matrix::EntryPointerEq	typeref:typename:bool
operator ()	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^  size_t operator()(const Entry* c) const { return std::hash<Entry>()(*c); }$/;"	f	struct:Gudhi::persistence_matrix::EntryPointerHash	typeref:typename:size_t
operator ()	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^  std::size_t operator()(const Gudhi::persistence_matrix::Unordered_set_column<Master_matrix>& c/;"	f	struct:std::hash	typeref:typename:std::size_t
operator ()	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^  std::size_t operator()(const Gudhi::persistence_matrix::Vector_column<Master_matrix>& column) /;"	f	struct:std::hash	typeref:typename:std::size_t
operator ()	multipers/gudhi/gudhi/Persistence_matrix/ru_rep_cycles.h	/^    size_t operator()(const Cycle_border& cycle) const {$/;"	f	struct:Gudhi::persistence_matrix::RU_representative_cycles::hashCycle	typeref:typename:size_t
operator ()	multipers/gudhi/gudhi/Persistent_cohomology.h	/^    bool operator()(Simplex_handle sh1, Simplex_handle sh2) {$/;"	f	struct:Gudhi::persistent_cohomology::Persistent_cohomology::length_interval	typeref:typename:bool
operator ()	multipers/gudhi/gudhi/Persistent_cohomology.h	/^    bool operator()(const Persistent_interval & p1, const Persistent_interval & p2) {$/;"	f	struct:Gudhi::persistent_cohomology::Persistent_cohomology::cmp_intervals_by_length	typeref:typename:bool
operator ()	multipers/gudhi/gudhi/Simplex_tree.h	/^    Vertex_handle operator()(const Dit_value_t& p_sh) const { return p_sh.first; }$/;"	f	struct:Gudhi::Simplex_tree::return_first	typeref:typename:Vertex_handle
operator ()	multipers/gudhi/gudhi/Simplex_tree.h	/^    bool operator()(const Simplex_handle iter) const {$/;"	f	class:Gudhi::Simplex_tree::Fast_cofaces_predicate	typeref:typename:bool
operator ()	multipers/gudhi/gudhi/Simplex_tree.h	/^    bool operator()(const Simplex_handle sh1, const Simplex_handle sh2) const {$/;"	f	struct:Gudhi::Simplex_tree::is_before_in_totally_ordered_filtration	typeref:typename:bool
operator ()	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_star_simplex_iterators.h	/^    bool operator()(typename SimplexTree::Hooks_simplex_base& curr_hooks) {$/;"	f	class:Gudhi::Simplex_tree_optimized_cofaces_rooted_subtrees_simplex_iterator::is_coface	typeref:typename:bool
operator ()	multipers/gudhi/gudhi/distance_functions.h	/^  operator()(const Point& p1, const Point& p2) const {$/;"	f	class:Gudhi::Euclidean_distance	typeref:typename:std::iterator_traits<typename boost::range_iterator<Point>::type>::value_type
operator () 	multipers/gudhi/gudhi/distance_functions.h	/^  T operator() (const std::pair< T, T >& f, const std::pair< T, T >& s) const {$/;"	f	class:Gudhi::Euclidean_distance	typeref:typename:T
operator *	multipers/gudhi/gudhi/Bitmap_cubical_complex.h	/^    Simplex_handle operator*() {$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex::Skeleton_simplex_iterator	typeref:typename:Simplex_handle
operator *	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^    std::size_t operator*() const { return this->compute_index_in_bitmap(); }$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base::Vertices_iterator	typeref:typename:std::size_t
operator *	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^    std::size_t operator*() { return this->compute_index_in_bitmap(); }$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base::Top_dimensional_cells_iterator	typeref:typename:std::size_t
operator *	multipers/gudhi/gudhi/Bitmap_cubical_complex_periodic_boundary_conditions_base.h	/^    std::size_t operator*() const { return this->compute_index_in_bitmap(); }$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_periodic_boundary_conditions_base::Vertices_iterator	typeref:typename:std::size_t
operator *	multipers/gudhi/gudhi/Fields/Multi_field.h	/^  friend Element operator*(Element v, Multi_field_element const& f) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:Element
operator *	multipers/gudhi/gudhi/Fields/Multi_field.h	/^  friend Multi_field_element operator*(Multi_field_element f, const Element& v) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:Multi_field_element
operator *	multipers/gudhi/gudhi/Fields/Multi_field.h	/^  friend Multi_field_element operator*(Multi_field_element f1, Multi_field_element const& f2) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:Multi_field_element
operator *	multipers/gudhi/gudhi/Fields/Multi_field_shared.h	/^  friend Element operator*(Element v, Shared_multi_field_element const& f) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:Element
operator *	multipers/gudhi/gudhi/Fields/Multi_field_shared.h	/^  friend Shared_multi_field_element operator*(Shared_multi_field_element f, Element const v) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:Shared_multi_field_element
operator *	multipers/gudhi/gudhi/Fields/Multi_field_shared.h	/^  friend Shared_multi_field_element operator*(Shared_multi_field_element f1, Shared_multi_field_/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:Shared_multi_field_element
operator *	multipers/gudhi/gudhi/Fields/Multi_field_small.h	/^  friend Integer_type operator*(const Integer_type& v, Multi_field_element_with_small_characteri/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:Integer_type
operator *	multipers/gudhi/gudhi/Fields/Multi_field_small.h	/^  friend Multi_field_element_with_small_characteristics operator*($/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:Multi_field_element_with_small_characteristics
operator *	multipers/gudhi/gudhi/Fields/Multi_field_small.h	/^  friend Multi_field_element_with_small_characteristics operator*(Multi_field_element_with_small/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:Multi_field_element_with_small_characteristics
operator *	multipers/gudhi/gudhi/Fields/Multi_field_small_shared.h	/^  friend Integer_type operator*(const Integer_type& v, Shared_multi_field_element_with_small_cha/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:Integer_type
operator *	multipers/gudhi/gudhi/Fields/Multi_field_small_shared.h	/^  friend Shared_multi_field_element_with_small_characteristics operator*($/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:Shared_multi_field_element_with_small_characteristics
operator *	multipers/gudhi/gudhi/Fields/Z2_field.h	/^  friend Integer_type operator*(const Integer_type& v, Z2_field_element const& f) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:Integer_type
operator *	multipers/gudhi/gudhi/Fields/Z2_field.h	/^  friend Z2_field_element operator*(Z2_field_element f, const Integer_type& v) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:Z2_field_element
operator *	multipers/gudhi/gudhi/Fields/Z2_field.h	/^  friend Z2_field_element operator*(Z2_field_element f1, Z2_field_element const& f2) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:Z2_field_element
operator *	multipers/gudhi/gudhi/Fields/Zp_field.h	/^  friend Integer_type operator*(const Integer_type& v, Zp_field_element f) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:Integer_type
operator *	multipers/gudhi/gudhi/Fields/Zp_field.h	/^  friend Zp_field_element operator*(Zp_field_element f, const Integer_type& v) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:Zp_field_element
operator *	multipers/gudhi/gudhi/Fields/Zp_field.h	/^  friend Zp_field_element operator*(Zp_field_element f1, const Zp_field_element& f2) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:Zp_field_element
operator *	multipers/gudhi/gudhi/Fields/Zp_field_shared.h	/^  friend Integer_type operator*(const Integer_type& v, Shared_Zp_field_element f) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:Integer_type
operator *	multipers/gudhi/gudhi/Fields/Zp_field_shared.h	/^  friend Shared_Zp_field_element operator*(Shared_Zp_field_element f, const Integer_type& v) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:Shared_Zp_field_element
operator *	multipers/gudhi/gudhi/Fields/Zp_field_shared.h	/^  friend Shared_Zp_field_element operator*(Shared_Zp_field_element f1, const Shared_Zp_field_ele/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:Shared_Zp_field_element
operator *	multipers/gudhi/gudhi/One_critical_filtration.h	/^  friend One_critical_filtration operator*(One_critical_filtration a, const One_critical_filtrat/;"	f	namespace:Gudhi::multi_filtration	typeref:typename:One_critical_filtration
operator *	multipers/gudhi/gudhi/One_critical_filtration.h	/^  friend One_critical_filtration operator*(One_critical_filtration f, const T &val) {$/;"	f	namespace:Gudhi::multi_filtration	typeref:typename:One_critical_filtration
operator *	multipers/gudhi/gudhi/One_critical_filtration.h	/^  friend One_critical_filtration operator*(const T &val, One_critical_filtration f) {$/;"	f	namespace:Gudhi::multi_filtration	typeref:typename:One_critical_filtration
operator *	multipers/multiparameter_module_approximation/approximation.h	/^  inline const Line<value_type> &operator*() const { return current_line; }$/;"	f	class:Gudhi::multiparameter::mma::LineIterator	typeref:typename:const Line<value_type> &
operator *=	multipers/gudhi/gudhi/Fields/Multi_field.h	/^  friend void operator*=(Multi_field_element& f, const Element& v) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:void
operator *=	multipers/gudhi/gudhi/Fields/Multi_field.h	/^  friend void operator*=(Multi_field_element& f1, Multi_field_element const& f2) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:void
operator *=	multipers/gudhi/gudhi/Fields/Multi_field_shared.h	/^  friend void operator*=(Shared_multi_field_element& f, Element const v) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:void
operator *=	multipers/gudhi/gudhi/Fields/Multi_field_shared.h	/^  friend void operator*=(Shared_multi_field_element& f1, Shared_multi_field_element const& f2) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:void
operator *=	multipers/gudhi/gudhi/Fields/Multi_field_small.h	/^  friend void operator*=(Multi_field_element_with_small_characteristics& f, const Integer_type& /;"	f	namespace:Gudhi::persistence_fields	typeref:typename:void
operator *=	multipers/gudhi/gudhi/Fields/Multi_field_small.h	/^  friend void operator*=(Multi_field_element_with_small_characteristics& f1,$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:void
operator *=	multipers/gudhi/gudhi/Fields/Multi_field_small_shared.h	/^  friend void operator*=(Shared_multi_field_element_with_small_characteristics& f, const Integer/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:void
operator *=	multipers/gudhi/gudhi/Fields/Multi_field_small_shared.h	/^  friend void operator*=(Shared_multi_field_element_with_small_characteristics& f1,$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:void
operator *=	multipers/gudhi/gudhi/Fields/Z2_field.h	/^  friend void operator*=(Z2_field_element& f, const Integer_type& v) { f.element_ = (f.element_ /;"	f	namespace:Gudhi::persistence_fields	typeref:typename:void
operator *=	multipers/gudhi/gudhi/Fields/Z2_field.h	/^  friend void operator*=(Z2_field_element& f1, Z2_field_element const& f2) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:void
operator *=	multipers/gudhi/gudhi/Fields/Zp_field.h	/^  friend void operator*=(Zp_field_element& f, const Integer_type& v) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:void
operator *=	multipers/gudhi/gudhi/Fields/Zp_field.h	/^  friend void operator*=(Zp_field_element& f1, const Zp_field_element& f2) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:void
operator *=	multipers/gudhi/gudhi/Fields/Zp_field_shared.h	/^  friend void operator*=(Shared_Zp_field_element& f, const Integer_type& v) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:void
operator *=	multipers/gudhi/gudhi/Fields/Zp_field_shared.h	/^  friend void operator*=(Shared_Zp_field_element& f1, const Shared_Zp_field_element& f2) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:void
operator *=	multipers/gudhi/gudhi/One_critical_filtration.h	/^  friend One_critical_filtration &operator*=(One_critical_filtration &result, const One_critical/;"	f	namespace:Gudhi::multi_filtration	typeref:typename:One_critical_filtration &
operator *=	multipers/gudhi/gudhi/One_critical_filtration.h	/^  friend One_critical_filtration &operator*=(One_critical_filtration &result, const T &to_mul) {$/;"	f	namespace:Gudhi::multi_filtration	typeref:typename:One_critical_filtration &
operator *=	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^inline Heap_column<Master_matrix>& Heap_column<Master_matrix>::operator*=(unsigned int v)$/;"	f	class:Gudhi::persistence_matrix::Heap_column	typeref:typename:Heap_column<Master_matrix> &
operator *=	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^inline Intrusive_list_column<Master_matrix>& Intrusive_list_column<Master_matrix>::operator*=($/;"	f	class:Gudhi::persistence_matrix::Intrusive_list_column	typeref:typename:Intrusive_list_column<Master_matrix> &
operator *=	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^inline Intrusive_set_column<Master_matrix>& Intrusive_set_column<Master_matrix>::operator*=(unsi/;"	f	class:Gudhi::persistence_matrix::Intrusive_set_column	typeref:typename:Intrusive_set_column<Master_matrix> &
operator *=	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^inline List_column<Master_matrix>& List_column<Master_matrix>::operator*=(unsigned int v)$/;"	f	class:Gudhi::persistence_matrix::List_column	typeref:typename:List_column<Master_matrix> &
operator *=	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^inline Naive_vector_column<Master_matrix>& Naive_vector_column<Master_matrix>::operator*=(unsign/;"	f	class:Gudhi::persistence_matrix::Naive_vector_column	typeref:typename:Naive_vector_column<Master_matrix> &
operator *=	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^inline Set_column<Master_matrix>& Set_column<Master_matrix>::operator*=(unsigned int v)$/;"	f	class:Gudhi::persistence_matrix::Set_column	typeref:typename:Set_column<Master_matrix> &
operator *=	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^inline Small_vector_column<Master_matrix>& Small_vector_column<Master_matrix>::operator*=(unsign/;"	f	class:Gudhi::persistence_matrix::Small_vector_column	typeref:typename:Small_vector_column<Master_matrix> &
operator *=	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^inline Unordered_set_column<Master_matrix>& Unordered_set_column<Master_matrix>::operator*=(unsi/;"	f	class:Gudhi::persistence_matrix::Unordered_set_column	typeref:typename:Unordered_set_column<Master_matrix> &
operator *=	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^inline Vector_column<Master_matrix>& Vector_column<Master_matrix>::operator*=(unsigned int v)$/;"	f	class:Gudhi::persistence_matrix::Vector_column	typeref:typename:Vector_column<Master_matrix> &
operator *=	multipers/tensor/tensor.h	/^  inline void operator*=(const array_like &x) {$/;"	f	class:tensor::static_tensor_view_view	typeref:typename:void
operator *=	multipers/tensor/tensor.h	/^  inline void operator*=(const static_tensor_view_view<dtype, indices_type> &x) {$/;"	f	class:tensor::static_tensor_view_view	typeref:typename:void
operator *=	multipers/tensor/tensor.h	/^  inline void operator*=(dtype x) {$/;"	f	class:tensor::static_tensor_view_view	typeref:typename:void
operator +	multipers/gudhi/gudhi/Fields/Multi_field.h	/^  friend Element operator+(Element v, Multi_field_element const& f) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:Element
operator +	multipers/gudhi/gudhi/Fields/Multi_field.h	/^  friend Multi_field_element operator+(Multi_field_element f, const Element& v) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:Multi_field_element
operator +	multipers/gudhi/gudhi/Fields/Multi_field.h	/^  friend Multi_field_element operator+(Multi_field_element f1, Multi_field_element const& f2) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:Multi_field_element
operator +	multipers/gudhi/gudhi/Fields/Multi_field_shared.h	/^  friend Element operator+(Element v, Shared_multi_field_element const& f) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:Element
operator +	multipers/gudhi/gudhi/Fields/Multi_field_shared.h	/^  friend Shared_multi_field_element operator+(Shared_multi_field_element f, Element const v) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:Shared_multi_field_element
operator +	multipers/gudhi/gudhi/Fields/Multi_field_shared.h	/^  friend Shared_multi_field_element operator+(Shared_multi_field_element f1, Shared_multi_field_/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:Shared_multi_field_element
operator +	multipers/gudhi/gudhi/Fields/Multi_field_small.h	/^  friend Integer_type operator+(const Integer_type& v, Multi_field_element_with_small_characteri/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:Integer_type
operator +	multipers/gudhi/gudhi/Fields/Multi_field_small.h	/^  friend Multi_field_element_with_small_characteristics operator+($/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:Multi_field_element_with_small_characteristics
operator +	multipers/gudhi/gudhi/Fields/Multi_field_small.h	/^  friend Multi_field_element_with_small_characteristics operator+(Multi_field_element_with_small/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:Multi_field_element_with_small_characteristics
operator +	multipers/gudhi/gudhi/Fields/Multi_field_small_shared.h	/^  friend Integer_type operator+(const Integer_type& v, Shared_multi_field_element_with_small_cha/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:Integer_type
operator +	multipers/gudhi/gudhi/Fields/Multi_field_small_shared.h	/^  friend Shared_multi_field_element_with_small_characteristics operator+($/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:Shared_multi_field_element_with_small_characteristics
operator +	multipers/gudhi/gudhi/Fields/Z2_field.h	/^  friend Integer_type operator+(const Integer_type& v, const Z2_field_element& f) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:Integer_type
operator +	multipers/gudhi/gudhi/Fields/Z2_field.h	/^  friend Z2_field_element operator+(Z2_field_element f, const Integer_type& v) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:Z2_field_element
operator +	multipers/gudhi/gudhi/Fields/Z2_field.h	/^  friend Z2_field_element operator+(Z2_field_element f1, Z2_field_element const& f2) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:Z2_field_element
operator +	multipers/gudhi/gudhi/Fields/Zp_field.h	/^  friend Integer_type operator+(const Integer_type& v, Zp_field_element f) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:Integer_type
operator +	multipers/gudhi/gudhi/Fields/Zp_field.h	/^  friend Zp_field_element operator+(Zp_field_element f, const Integer_type& v) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:Zp_field_element
operator +	multipers/gudhi/gudhi/Fields/Zp_field.h	/^  friend Zp_field_element operator+(Zp_field_element f1, const Zp_field_element& f2) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:Zp_field_element
operator +	multipers/gudhi/gudhi/Fields/Zp_field_shared.h	/^  friend Integer_type operator+(const Integer_type& v, Shared_Zp_field_element f) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:Integer_type
operator +	multipers/gudhi/gudhi/Fields/Zp_field_shared.h	/^  friend Shared_Zp_field_element operator+(Shared_Zp_field_element f, const Integer_type& v) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:Shared_Zp_field_element
operator +	multipers/gudhi/gudhi/Fields/Zp_field_shared.h	/^  friend Shared_Zp_field_element operator+(Shared_Zp_field_element f1, const Shared_Zp_field_ele/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:Shared_Zp_field_element
operator +	multipers/gudhi/gudhi/One_critical_filtration.h	/^  friend One_critical_filtration operator+(One_critical_filtration a, const One_critical_filtrat/;"	f	namespace:Gudhi::multi_filtration	typeref:typename:One_critical_filtration
operator +	multipers/gudhi/gudhi/One_critical_filtration.h	/^  friend One_critical_filtration operator+(One_critical_filtration f, const T &val) {$/;"	f	namespace:Gudhi::multi_filtration	typeref:typename:One_critical_filtration
operator +	multipers/gudhi/gudhi/One_critical_filtration.h	/^  friend One_critical_filtration operator+(const T &val, One_critical_filtration f) {$/;"	f	namespace:Gudhi::multi_filtration	typeref:typename:One_critical_filtration
operator ++	multipers/gudhi/gudhi/Bitmap_cubical_complex.h	/^    Skeleton_simplex_iterator operator++() {$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex::Skeleton_simplex_iterator	typeref:typename:Skeleton_simplex_iterator
operator ++	multipers/gudhi/gudhi/Bitmap_cubical_complex.h	/^    Skeleton_simplex_iterator operator++(int) {$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex::Skeleton_simplex_iterator	typeref:typename:Skeleton_simplex_iterator
operator ++	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^    Top_dimensional_cells_iterator operator++() {$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base::Top_dimensional_cells_iterator	typeref:typename:Top_dimensional_cells_iterator
operator ++	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^    Top_dimensional_cells_iterator operator++(int) {$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base::Top_dimensional_cells_iterator	typeref:typename:Top_dimensional_cells_iterator
operator ++	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^    Vertices_iterator operator++() {$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base::Vertices_iterator	typeref:typename:Vertices_iterator
operator ++	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^    Vertices_iterator operator++(int) {$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base::Vertices_iterator	typeref:typename:Vertices_iterator
operator ++	multipers/gudhi/gudhi/Bitmap_cubical_complex_periodic_boundary_conditions_base.h	/^    Vertices_iterator operator++() {$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_periodic_boundary_conditions_base::Vertices_iterator	typeref:typename:Vertices_iterator
operator ++	multipers/gudhi/gudhi/Bitmap_cubical_complex_periodic_boundary_conditions_base.h	/^    Vertices_iterator operator++(int) {$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_periodic_boundary_conditions_base::Vertices_iterator	typeref:typename:Vertices_iterator
operator ++	multipers/multiparameter_module_approximation/approximation.h	/^  inline LineIterator<Filtration_value, axis, sign> &operator++() {$/;"	f	class:Gudhi::multiparameter::mma::LineIterator	typeref:typename:LineIterator<Filtration_value,axis,sign> &
operator +=	multipers/gudhi/gudhi/Fields/Multi_field.h	/^  friend void operator+=(Multi_field_element& f, const Element& v) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:void
operator +=	multipers/gudhi/gudhi/Fields/Multi_field.h	/^  friend void operator+=(Multi_field_element& f1, Multi_field_element const& f2) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:void
operator +=	multipers/gudhi/gudhi/Fields/Multi_field_shared.h	/^  friend void operator+=(Shared_multi_field_element& f, Element const v) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:void
operator +=	multipers/gudhi/gudhi/Fields/Multi_field_shared.h	/^  friend void operator+=(Shared_multi_field_element& f1, Shared_multi_field_element const& f2) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:void
operator +=	multipers/gudhi/gudhi/Fields/Multi_field_small.h	/^  friend void operator+=(Multi_field_element_with_small_characteristics& f, const Integer_type& /;"	f	namespace:Gudhi::persistence_fields	typeref:typename:void
operator +=	multipers/gudhi/gudhi/Fields/Multi_field_small.h	/^  friend void operator+=(Multi_field_element_with_small_characteristics& f1,$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:void
operator +=	multipers/gudhi/gudhi/Fields/Multi_field_small_shared.h	/^  friend void operator+=(Shared_multi_field_element_with_small_characteristics& f, const Integer/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:void
operator +=	multipers/gudhi/gudhi/Fields/Multi_field_small_shared.h	/^  friend void operator+=(Shared_multi_field_element_with_small_characteristics& f1,$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:void
operator +=	multipers/gudhi/gudhi/Fields/Z2_field.h	/^  friend void operator+=(Z2_field_element& f, const Integer_type& v) { f.element_ = (f.element_ /;"	f	namespace:Gudhi::persistence_fields	typeref:typename:void
operator +=	multipers/gudhi/gudhi/Fields/Z2_field.h	/^  friend void operator+=(Z2_field_element& f1, Z2_field_element const& f2) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:void
operator +=	multipers/gudhi/gudhi/Fields/Zp_field.h	/^  friend void operator+=(Zp_field_element& f, const Integer_type& v) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:void
operator +=	multipers/gudhi/gudhi/Fields/Zp_field.h	/^  friend void operator+=(Zp_field_element& f1, const Zp_field_element& f2) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:void
operator +=	multipers/gudhi/gudhi/Fields/Zp_field_shared.h	/^  friend void operator+=(Shared_Zp_field_element& f, const Integer_type& v) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:void
operator +=	multipers/gudhi/gudhi/Fields/Zp_field_shared.h	/^  friend void operator+=(Shared_Zp_field_element& f1, const Shared_Zp_field_element& f2) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:void
operator +=	multipers/gudhi/gudhi/Multi_persistence/Line.h	/^  friend Line &operator+=(Line &to_translate, const Point &v) {$/;"	f	namespace:Gudhi::multi_persistence	typeref:typename:Line &
operator +=	multipers/gudhi/gudhi/One_critical_filtration.h	/^  friend One_critical_filtration &operator+=(One_critical_filtration &result, const One_critical/;"	f	namespace:Gudhi::multi_filtration	typeref:typename:One_critical_filtration &
operator +=	multipers/gudhi/gudhi/One_critical_filtration.h	/^  friend One_critical_filtration &operator+=(One_critical_filtration &result, const T &to_add) {$/;"	f	namespace:Gudhi::multi_filtration	typeref:typename:One_critical_filtration &
operator +=	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^inline Heap_column<Master_matrix>& Heap_column<Master_matrix>::operator+=(Heap_column& column)$/;"	f	class:Gudhi::persistence_matrix::Heap_column	typeref:typename:Heap_column<Master_matrix> &
operator +=	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^inline Heap_column<Master_matrix>& Heap_column<Master_matrix>::operator+=(const Entry_range& col/;"	f	class:Gudhi::persistence_matrix::Heap_column	typeref:typename:Heap_column<Master_matrix> &
operator +=	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^inline Intrusive_list_column<Master_matrix>& Intrusive_list_column<Master_matrix>::operator+=($/;"	f	class:Gudhi::persistence_matrix::Intrusive_list_column	typeref:typename:Intrusive_list_column<Master_matrix> &
operator +=	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^inline Intrusive_set_column<Master_matrix>& Intrusive_set_column<Master_matrix>::operator+=($/;"	f	class:Gudhi::persistence_matrix::Intrusive_set_column	typeref:typename:Intrusive_set_column<Master_matrix> &
operator +=	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^inline Intrusive_set_column<Master_matrix>& Intrusive_set_column<Master_matrix>::operator+=(cons/;"	f	class:Gudhi::persistence_matrix::Intrusive_set_column	typeref:typename:Intrusive_set_column<Master_matrix> &
operator +=	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^inline List_column<Master_matrix>& List_column<Master_matrix>::operator+=(List_column& column)$/;"	f	class:Gudhi::persistence_matrix::List_column	typeref:typename:List_column<Master_matrix> &
operator +=	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^inline List_column<Master_matrix>& List_column<Master_matrix>::operator+=(const Entry_range& col/;"	f	class:Gudhi::persistence_matrix::List_column	typeref:typename:List_column<Master_matrix> &
operator +=	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^inline Naive_vector_column<Master_matrix>& Naive_vector_column<Master_matrix>::operator+=(Naive_/;"	f	class:Gudhi::persistence_matrix::Naive_vector_column	typeref:typename:Naive_vector_column<Master_matrix> &
operator +=	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^inline Naive_vector_column<Master_matrix>& Naive_vector_column<Master_matrix>::operator+=(const /;"	f	class:Gudhi::persistence_matrix::Naive_vector_column	typeref:typename:Naive_vector_column<Master_matrix> &
operator +=	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^inline Set_column<Master_matrix>& Set_column<Master_matrix>::operator+=(Set_column& column)$/;"	f	class:Gudhi::persistence_matrix::Set_column	typeref:typename:Set_column<Master_matrix> &
operator +=	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^inline Set_column<Master_matrix>& Set_column<Master_matrix>::operator+=(const Entry_range& colum/;"	f	class:Gudhi::persistence_matrix::Set_column	typeref:typename:Set_column<Master_matrix> &
operator +=	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^inline Small_vector_column<Master_matrix>& Small_vector_column<Master_matrix>::operator+=(Small_/;"	f	class:Gudhi::persistence_matrix::Small_vector_column	typeref:typename:Small_vector_column<Master_matrix> &
operator +=	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^inline Small_vector_column<Master_matrix>& Small_vector_column<Master_matrix>::operator+=(const /;"	f	class:Gudhi::persistence_matrix::Small_vector_column	typeref:typename:Small_vector_column<Master_matrix> &
operator +=	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^inline Unordered_set_column<Master_matrix>& Unordered_set_column<Master_matrix>::operator+=($/;"	f	class:Gudhi::persistence_matrix::Unordered_set_column	typeref:typename:Unordered_set_column<Master_matrix> &
operator +=	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^inline Unordered_set_column<Master_matrix>& Unordered_set_column<Master_matrix>::operator+=(cons/;"	f	class:Gudhi::persistence_matrix::Unordered_set_column	typeref:typename:Unordered_set_column<Master_matrix> &
operator +=	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^inline Vector_column<Master_matrix>& Vector_column<Master_matrix>::operator+=(Vector_column& col/;"	f	class:Gudhi::persistence_matrix::Vector_column	typeref:typename:Vector_column<Master_matrix> &
operator +=	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^inline Vector_column<Master_matrix>& Vector_column<Master_matrix>::operator+=(const Entry_range&/;"	f	class:Gudhi::persistence_matrix::Vector_column	typeref:typename:Vector_column<Master_matrix> &
operator +=	multipers/tensor/tensor.h	/^  inline void operator+=(const array_like &x) {$/;"	f	class:tensor::static_tensor_view_view	typeref:typename:void
operator +=	multipers/tensor/tensor.h	/^  inline void operator+=(const static_tensor_view_view<dtype, indices_type> &x) {$/;"	f	class:tensor::static_tensor_view_view	typeref:typename:void
operator +=	multipers/tensor/tensor.h	/^  inline void operator+=(dtype x) {$/;"	f	class:tensor::static_tensor_view_view	typeref:typename:void
operator -	multipers/gudhi/gudhi/Fields/Multi_field.h	/^  friend Element operator-(Element v, Multi_field_element const& f) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:Element
operator -	multipers/gudhi/gudhi/Fields/Multi_field.h	/^  friend Multi_field_element operator-(Multi_field_element f, const Element& v) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:Multi_field_element
operator -	multipers/gudhi/gudhi/Fields/Multi_field.h	/^  friend Multi_field_element operator-(Multi_field_element f1, Multi_field_element const& f2) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:Multi_field_element
operator -	multipers/gudhi/gudhi/Fields/Multi_field_shared.h	/^  friend Element operator-(Element v, Shared_multi_field_element const& f) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:Element
operator -	multipers/gudhi/gudhi/Fields/Multi_field_shared.h	/^  friend Shared_multi_field_element operator-(Shared_multi_field_element f, Element const v) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:Shared_multi_field_element
operator -	multipers/gudhi/gudhi/Fields/Multi_field_shared.h	/^  friend Shared_multi_field_element operator-(Shared_multi_field_element f1, Shared_multi_field_/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:Shared_multi_field_element
operator -	multipers/gudhi/gudhi/Fields/Multi_field_small.h	/^  friend Integer_type operator-(const Integer_type& v, const Multi_field_element_with_small_char/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:Integer_type
operator -	multipers/gudhi/gudhi/Fields/Multi_field_small.h	/^  friend Multi_field_element_with_small_characteristics operator-($/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:Multi_field_element_with_small_characteristics
operator -	multipers/gudhi/gudhi/Fields/Multi_field_small.h	/^  friend Multi_field_element_with_small_characteristics operator-(Multi_field_element_with_small/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:Multi_field_element_with_small_characteristics
operator -	multipers/gudhi/gudhi/Fields/Multi_field_small_shared.h	/^  friend Integer_type operator-(const Integer_type& v, const Shared_multi_field_element_with_sma/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:Integer_type
operator -	multipers/gudhi/gudhi/Fields/Multi_field_small_shared.h	/^  friend Shared_multi_field_element_with_small_characteristics operator-($/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:Shared_multi_field_element_with_small_characteristics
operator -	multipers/gudhi/gudhi/Fields/Z2_field.h	/^  friend Integer_type operator-(const Integer_type v, Z2_field_element const& f) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:Integer_type
operator -	multipers/gudhi/gudhi/Fields/Z2_field.h	/^  friend Z2_field_element operator-(Z2_field_element f, const Integer_type& v) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:Z2_field_element
operator -	multipers/gudhi/gudhi/Fields/Z2_field.h	/^  friend Z2_field_element operator-(Z2_field_element f1, Z2_field_element const& f2) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:Z2_field_element
operator -	multipers/gudhi/gudhi/Fields/Zp_field.h	/^  friend Integer_type operator-(const Integer_type& v, const Zp_field_element& f) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:Integer_type
operator -	multipers/gudhi/gudhi/Fields/Zp_field.h	/^  friend Zp_field_element operator-(Zp_field_element f, const Integer_type& v) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:Zp_field_element
operator -	multipers/gudhi/gudhi/Fields/Zp_field.h	/^  friend Zp_field_element operator-(Zp_field_element f1, const Zp_field_element& f2) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:Zp_field_element
operator -	multipers/gudhi/gudhi/Fields/Zp_field_shared.h	/^  friend Integer_type operator-(const Integer_type& v, const Shared_Zp_field_element& f) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:Integer_type
operator -	multipers/gudhi/gudhi/Fields/Zp_field_shared.h	/^  friend Shared_Zp_field_element operator-(Shared_Zp_field_element f, const Integer_type& v) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:Shared_Zp_field_element
operator -	multipers/gudhi/gudhi/Fields/Zp_field_shared.h	/^  friend Shared_Zp_field_element operator-(Shared_Zp_field_element f1, const Shared_Zp_field_ele/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:Shared_Zp_field_element
operator -	multipers/gudhi/gudhi/One_critical_filtration.h	/^  friend One_critical_filtration operator-(One_critical_filtration a, const One_critical_filtrat/;"	f	namespace:Gudhi::multi_filtration	typeref:typename:One_critical_filtration
operator -	multipers/gudhi/gudhi/One_critical_filtration.h	/^  friend One_critical_filtration operator-(One_critical_filtration f, const T &val) {$/;"	f	namespace:Gudhi::multi_filtration	typeref:typename:One_critical_filtration
operator -	multipers/gudhi/gudhi/One_critical_filtration.h	/^  friend One_critical_filtration operator-(const One_critical_filtration &f) {$/;"	f	namespace:Gudhi::multi_filtration	typeref:typename:One_critical_filtration
operator -	multipers/gudhi/gudhi/One_critical_filtration.h	/^  friend One_critical_filtration operator-(const T &val, One_critical_filtration f) {$/;"	f	namespace:Gudhi::multi_filtration	typeref:typename:One_critical_filtration
operator -=	multipers/gudhi/gudhi/Fields/Multi_field.h	/^  friend void operator-=(Multi_field_element& f, const Element& v) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:void
operator -=	multipers/gudhi/gudhi/Fields/Multi_field.h	/^  friend void operator-=(Multi_field_element& f1, Multi_field_element const& f2) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:void
operator -=	multipers/gudhi/gudhi/Fields/Multi_field_shared.h	/^  friend void operator-=(Shared_multi_field_element& f, Element const v) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:void
operator -=	multipers/gudhi/gudhi/Fields/Multi_field_shared.h	/^  friend void operator-=(Shared_multi_field_element& f1, Shared_multi_field_element const& f2) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:void
operator -=	multipers/gudhi/gudhi/Fields/Multi_field_small.h	/^  friend void operator-=(Multi_field_element_with_small_characteristics& f, const Integer_type& /;"	f	namespace:Gudhi::persistence_fields	typeref:typename:void
operator -=	multipers/gudhi/gudhi/Fields/Multi_field_small.h	/^  friend void operator-=(Multi_field_element_with_small_characteristics& f1,$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:void
operator -=	multipers/gudhi/gudhi/Fields/Multi_field_small_shared.h	/^  friend void operator-=(Shared_multi_field_element_with_small_characteristics& f, const Integer/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:void
operator -=	multipers/gudhi/gudhi/Fields/Multi_field_small_shared.h	/^  friend void operator-=(Shared_multi_field_element_with_small_characteristics& f1,$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:void
operator -=	multipers/gudhi/gudhi/Fields/Z2_field.h	/^  friend void operator-=(Z2_field_element& f, const Integer_type& v) { f.element_ = (f.element_ /;"	f	namespace:Gudhi::persistence_fields	typeref:typename:void
operator -=	multipers/gudhi/gudhi/Fields/Z2_field.h	/^  friend void operator-=(Z2_field_element& f1, Z2_field_element const& f2) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:void
operator -=	multipers/gudhi/gudhi/Fields/Zp_field.h	/^  friend void operator-=(Zp_field_element& f, const Integer_type& v) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:void
operator -=	multipers/gudhi/gudhi/Fields/Zp_field.h	/^  friend void operator-=(Zp_field_element& f1, const Zp_field_element& f2) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:void
operator -=	multipers/gudhi/gudhi/Fields/Zp_field_shared.h	/^  friend void operator-=(Shared_Zp_field_element& f, const Integer_type& v) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:void
operator -=	multipers/gudhi/gudhi/Fields/Zp_field_shared.h	/^  friend void operator-=(Shared_Zp_field_element& f1, const Shared_Zp_field_element& f2) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:void
operator -=	multipers/gudhi/gudhi/One_critical_filtration.h	/^  friend One_critical_filtration &operator-=(One_critical_filtration &result, const T &to_subtra/;"	f	namespace:Gudhi::multi_filtration	typeref:typename:One_critical_filtration &
operator -=	multipers/gudhi/gudhi/One_critical_filtration.h	/^  friend One_critical_filtration &operator-=(One_critical_filtration &result,$/;"	f	namespace:Gudhi::multi_filtration	typeref:typename:One_critical_filtration &
operator -=	multipers/tensor/tensor.h	/^  inline void operator-=(const array_like &x) {$/;"	f	class:tensor::static_tensor_view_view	typeref:typename:void
operator -=	multipers/tensor/tensor.h	/^  inline void operator-=(const static_tensor_view_view<dtype, indices_type> &x) {$/;"	f	class:tensor::static_tensor_view_view	typeref:typename:void
operator -=	multipers/tensor/tensor.h	/^  inline void operator-=(dtype x) {$/;"	f	class:tensor::static_tensor_view_view	typeref:typename:void
operator /	multipers/gudhi/gudhi/One_critical_filtration.h	/^  friend One_critical_filtration operator\/(One_critical_filtration a, const One_critical_filtra/;"	f	namespace:Gudhi::multi_filtration	typeref:typename:One_critical_filtration
operator /	multipers/gudhi/gudhi/One_critical_filtration.h	/^  friend One_critical_filtration operator\/(One_critical_filtration f, const T &val) {$/;"	f	namespace:Gudhi::multi_filtration	typeref:typename:One_critical_filtration
operator /	multipers/gudhi/gudhi/One_critical_filtration.h	/^  friend One_critical_filtration operator\/(const T &val, const One_critical_filtration &f) {$/;"	f	namespace:Gudhi::multi_filtration	typeref:typename:One_critical_filtration
operator /=	multipers/gudhi/gudhi/One_critical_filtration.h	/^  friend One_critical_filtration &operator\/=(One_critical_filtration &result, const One_critica/;"	f	namespace:Gudhi::multi_filtration	typeref:typename:One_critical_filtration &
operator /=	multipers/gudhi/gudhi/One_critical_filtration.h	/^  friend One_critical_filtration &operator\/=(One_critical_filtration &result, const T &to_div) /;"	f	namespace:Gudhi::multi_filtration	typeref:typename:One_critical_filtration &
operator /=	multipers/tensor/tensor.h	/^  inline void operator\/=(const array_like &x) {$/;"	f	class:tensor::static_tensor_view_view	typeref:typename:void
operator /=	multipers/tensor/tensor.h	/^  inline void operator\/=(const static_tensor_view_view<dtype, indices_type> &x) {$/;"	f	class:tensor::static_tensor_view_view	typeref:typename:void
operator /=	multipers/tensor/tensor.h	/^  inline void operator\/=(dtype x) {$/;"	f	class:tensor::static_tensor_view_view	typeref:typename:void
operator <	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  friend bool operator<(const Multi_critical_filtration &a, const Multi_critical_filtration &b) /;"	f	namespace:Gudhi::multi_filtration	typeref:typename:bool
operator <	multipers/gudhi/gudhi/One_critical_filtration.h	/^  friend bool operator<(const One_critical_filtration &a, const One_critical_filtration &b) {$/;"	f	namespace:Gudhi::multi_filtration	typeref:typename:bool
operator <	multipers/gudhi/gudhi/Persistence_matrix/columns/entry_types.h	/^  friend bool operator<(const Entry& c1, const Entry& c2) { return c1.get_row_index() < c2.get_r/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:bool
operator <	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^  friend bool operator<(const Heap_column& c1, const Heap_column& c2) {$/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:bool
operator <	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^  friend bool operator<(const Intrusive_list_column& c1, const Intrusive_list_column& c2) {$/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:bool
operator <	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^  friend bool operator<(const Intrusive_set_column& c1, const Intrusive_set_column& c2) {$/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:bool
operator <	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^  friend bool operator<(const List_column& c1, const List_column& c2) {$/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:bool
operator <	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^  friend bool operator<(const Naive_vector_column& c1, const Naive_vector_column& c2) {$/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:bool
operator <	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^  friend bool operator<(const Set_column& c1, const Set_column& c2) {$/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:bool
operator <	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^  friend bool operator<(const Small_vector_column& c1, const Small_vector_column& c2) {$/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:bool
operator <	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^  friend bool operator<(const Unordered_set_column& c1, const Unordered_set_column& c2) {$/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:bool
operator <	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^  friend bool operator<(const Vector_column& c1, const Vector_column& c2) {$/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:bool
operator <	multipers/gudhi/gudhi/Persistent_cohomology/Persistent_cohomology_column.h	/^  friend bool operator<(const Persistent_cohomology_column& c1,$/;"	f	namespace:Gudhi::persistent_cohomology	typeref:typename:bool
operator <<	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  friend std::ostream &operator<<(std::ostream &stream, const Multi_critical_filtration &f) {$/;"	f	namespace:Gudhi::multi_filtration	typeref:typename:std::ostream &
operator <<	multipers/gudhi/gudhi/Multi_persistence/Box.h	/^  friend std::ostream &operator<<(std::ostream &os, const Box<T> &box) {$/;"	f	namespace:Gudhi::multi_persistence	typeref:typename:std::ostream &
operator <<	multipers/gudhi/gudhi/One_critical_filtration.h	/^  friend std::ostream &operator<<(std::ostream &stream, const One_critical_filtration &f) {$/;"	f	namespace:Gudhi::multi_filtration	typeref:typename:std::ostream &
operator <<	multipers/gudhi/gudhi/Simplex_tree.h	/^std::ostream& operator<<(std::ostream& os, Simplex_tree<T...>& st) {$/;"	f	namespace:Gudhi	typeref:typename:std::ostream &
operator <<	multipers/gudhi/gudhi/persistence_interval.h	/^  inline friend std::ostream& operator<<(std::ostream& stream, const Persistence_interval& inter/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:std::ostream &
operator <<	multipers/gudhi/mma_interface_coh.h	/^    inline friend std::ostream &operator<<(std::ostream &stream, const Filtration_simplex_range /;"	f	class:Gudhi::multiparameter::truc_interface::Boundary_matrix_as_filtered_complex_for_coh	typeref:typename:std::ostream &
operator <<	multipers/gudhi/mma_interface_coh.h	/^  friend std::ostream &operator<<(std::ostream &stream, Persistence_backend_cohomology &structur/;"	f	namespace:Gudhi::multiparameter::truc_interface	typeref:typename:std::ostream &
operator <<	multipers/gudhi/mma_interface_coh.h	/^  friend std::ostream &operator<<(std::ostream &stream, const Boundary_matrix_as_filtered_comple/;"	f	namespace:Gudhi::multiparameter::truc_interface	typeref:typename:std::ostream &
operator <<	multipers/gudhi/mma_interface_h0.h	/^    inline friend std::ostream &operator<<(std::ostream &stream,$/;"	f	class:Gudhi::multiparameter::truc_interface::Persistence_backend_h0	typeref:typename:std::ostream &
operator <<	multipers/gudhi/mma_interface_h0.h	/^  inline friend std::ostream &operator<<(std::ostream &stream,$/;"	f	namespace:Gudhi::multiparameter::truc_interface	typeref:typename:std::ostream &
operator <<	multipers/gudhi/mma_interface_matrix.h	/^    inline friend std::ostream &operator<<(std::ostream &stream, Barcode &structure) {$/;"	f	class:Gudhi::multiparameter::truc_interface::Persistence_backend_matrix	typeref:typename:std::ostream &
operator <<	multipers/gudhi/mma_interface_matrix.h	/^  inline friend std::ostream &operator<<(std::ostream &stream, Persistence_backend_matrix &struc/;"	f	namespace:Gudhi::multiparameter::truc_interface	typeref:typename:std::ostream &
operator <<	multipers/gudhi/naive_merge_tree.h	/^  inline friend std::ostream &operator<<(std::ostream &stream, Naive_merge_forest &structure) {$/;"	f	typeref:typename:std::ostream &
operator <<	multipers/gudhi/truc.h	/^  inline friend std::ostream &operator<<(std::ostream &stream, Truc &truc) {$/;"	f	namespace:Gudhi::multiparameter::truc_interface	typeref:typename:std::ostream &
operator <<	multipers/gudhi/truc.h	/^  inline friend std::ostream &operator<<(std::ostream &stream, const PresentationStructure &stru/;"	f	namespace:Gudhi::multiparameter::truc_interface	typeref:typename:std::ostream &
operator <<	multipers/gudhi/truc.h	/^  inline friend std::ostream &operator<<(std::ostream &stream, const SimplicialStructure &struct/;"	f	namespace:Gudhi::multiparameter::truc_interface	typeref:typename:std::ostream &
operator <<	multipers/multiparameter_module_approximation/debug.h	/^std::ostream &operator<<(std::ostream &stream, const std::vector<T> truc) {$/;"	f	namespace:std	typeref:typename:std::ostream &
operator <<	multipers/tensor/tensor.h	/^  friend std::ostream &operator<<(std::ostream &stream, const static_tensor_view<dtype, indices_/;"	f	namespace:tensor	typeref:typename:std::ostream &
operator <=	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  friend bool operator<=(const Multi_critical_filtration &a, const Multi_critical_filtration &b)/;"	f	namespace:Gudhi::multi_filtration	typeref:typename:bool
operator <=	multipers/gudhi/gudhi/One_critical_filtration.h	/^  friend bool operator<=(const One_critical_filtration &a, const One_critical_filtration &b) {$/;"	f	namespace:Gudhi::multi_filtration	typeref:typename:bool
operator =	multipers/gudhi/gudhi/Fields/Multi_field.h	/^inline Multi_field_element<minimum, maximum>& Multi_field_element<minimum, maximum>::operator=($/;"	f	class:Gudhi::persistence_fields::Multi_field_element	typeref:typename:Multi_field_element<minimum,maximum> &
operator =	multipers/gudhi/gudhi/Fields/Multi_field_operators.h	/^  Multi_field_operators& operator=(Multi_field_operators other) {$/;"	f	class:Gudhi::persistence_fields::Multi_field_operators	typeref:typename:Multi_field_operators &
operator =	multipers/gudhi/gudhi/Fields/Multi_field_shared.h	/^inline Shared_multi_field_element& Shared_multi_field_element::operator=(Shared_multi_field_elem/;"	f	class:Gudhi::persistence_fields::Shared_multi_field_element	typeref:typename:Shared_multi_field_element &
operator =	multipers/gudhi/gudhi/Fields/Multi_field_shared.h	/^inline Shared_multi_field_element& Shared_multi_field_element::operator=(const Element& value) {$/;"	f	class:Gudhi::persistence_fields::Shared_multi_field_element	typeref:typename:Shared_multi_field_element &
operator =	multipers/gudhi/gudhi/Fields/Multi_field_small.h	/^  Multi_field_element_with_small_characteristics& operator=(Multi_field_element_with_small_chara/;"	f	class:Gudhi::persistence_fields::Multi_field_element_with_small_characteristics	typeref:typename:Multi_field_element_with_small_characteristics &
operator =	multipers/gudhi/gudhi/Fields/Multi_field_small.h	/^  Multi_field_element_with_small_characteristics& operator=(const Integer_type& value) {$/;"	f	class:Gudhi::persistence_fields::Multi_field_element_with_small_characteristics	typeref:typename:Multi_field_element_with_small_characteristics &
operator =	multipers/gudhi/gudhi/Fields/Multi_field_small_operators.h	/^  Multi_field_operators_with_small_characteristics& operator=(Multi_field_operators_with_small_c/;"	f	class:Gudhi::persistence_fields::Multi_field_operators_with_small_characteristics	typeref:typename:Multi_field_operators_with_small_characteristics &
operator =	multipers/gudhi/gudhi/Fields/Multi_field_small_shared.h	/^  Shared_multi_field_element_with_small_characteristics& operator=($/;"	f	class:Gudhi::persistence_fields::Shared_multi_field_element_with_small_characteristics	typeref:typename:Shared_multi_field_element_with_small_characteristics &
operator =	multipers/gudhi/gudhi/Fields/Multi_field_small_shared.h	/^  Shared_multi_field_element_with_small_characteristics& operator=(const Integer_type& value) {$/;"	f	class:Gudhi::persistence_fields::Shared_multi_field_element_with_small_characteristics	typeref:typename:Shared_multi_field_element_with_small_characteristics &
operator =	multipers/gudhi/gudhi/Fields/Z2_field.h	/^inline Z2_field_element& Z2_field_element::operator=(Z2_field_element other) {$/;"	f	class:Gudhi::persistence_fields::Z2_field_element	typeref:typename:Z2_field_element &
operator =	multipers/gudhi/gudhi/Fields/Z2_field.h	/^inline Z2_field_element& Z2_field_element::operator=(unsigned int const value) {$/;"	f	class:Gudhi::persistence_fields::Z2_field_element	typeref:typename:Z2_field_element &
operator =	multipers/gudhi/gudhi/Fields/Zp_field.h	/^  Zp_field_element& operator=(Zp_field_element other) {$/;"	f	class:Gudhi::persistence_fields::Zp_field_element	typeref:typename:Zp_field_element &
operator =	multipers/gudhi/gudhi/Fields/Zp_field.h	/^  Zp_field_element& operator=(const Integer_type& value) {$/;"	f	class:Gudhi::persistence_fields::Zp_field_element	typeref:typename:Zp_field_element &
operator =	multipers/gudhi/gudhi/Fields/Zp_field_operators.h	/^  Zp_field_operators& operator=(Zp_field_operators other) {$/;"	f	class:Gudhi::persistence_fields::Zp_field_operators	typeref:typename:Zp_field_operators &
operator =	multipers/gudhi/gudhi/Fields/Zp_field_shared.h	/^  Shared_Zp_field_element& operator=(Shared_Zp_field_element other) {$/;"	f	class:Gudhi::persistence_fields::Shared_Zp_field_element	typeref:typename:Shared_Zp_field_element &
operator =	multipers/gudhi/gudhi/Fields/Zp_field_shared.h	/^  Shared_Zp_field_element& operator=(const Integer_type& value) {$/;"	f	class:Gudhi::persistence_fields::Shared_Zp_field_element	typeref:typename:Shared_Zp_field_element &
operator =	multipers/gudhi/gudhi/Matrix.h	/^inline Matrix<PersistenceMatrixOptions>& Matrix<PersistenceMatrixOptions>::operator=(Matrix othe/;"	f	class:Gudhi::persistence_matrix::Matrix	typeref:typename:Matrix<PersistenceMatrixOptions> &
operator =	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix.h	/^inline Base_matrix<Master_matrix>& Base_matrix<Master_matrix>::operator=(const Base_matrix& othe/;"	f	class:Gudhi::persistence_matrix::Base_matrix	typeref:typename:Base_matrix<Master_matrix> &
operator =	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix_with_column_compression.h	/^Base_matrix_with_column_compression<Master_matrix>::operator=(const Base_matrix_with_column_comp/;"	f	class:Gudhi::persistence_matrix::Base_matrix_with_column_compression	typeref:typename:Base_matrix_with_column_compression<Master_matrix> &
operator =	multipers/gudhi/gudhi/Persistence_matrix/Boundary_matrix.h	/^inline Boundary_matrix<Master_matrix>& Boundary_matrix<Master_matrix>::operator=(const Boundary_/;"	f	class:Gudhi::persistence_matrix::Boundary_matrix	typeref:typename:Boundary_matrix<Master_matrix> &
operator =	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^inline Chain_matrix<Master_matrix>& Chain_matrix<Master_matrix>::operator=(const Chain_matrix& o/;"	f	class:Gudhi::persistence_matrix::Chain_matrix	typeref:typename:Chain_matrix<Master_matrix> &
operator =	multipers/gudhi/gudhi/Persistence_matrix/Id_to_index_overlay.h	/^Id_to_index_overlay<Underlying_matrix, Master_matrix>::operator=(const Id_to_index_overlay& othe/;"	f	class:Gudhi::persistence_matrix::Id_to_index_overlay	typeref:typename:Id_to_index_overlay<Underlying_matrix,Master_matrix> &
operator =	multipers/gudhi/gudhi/Persistence_matrix/Position_to_index_overlay.h	/^Position_to_index_overlay<Underlying_matrix, Master_matrix>::operator=(const Position_to_index_o/;"	f	class:Gudhi::persistence_matrix::Position_to_index_overlay	typeref:typename:Position_to_index_overlay<Underlying_matrix,Master_matrix> &
operator =	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^inline RU_matrix<Master_matrix>& RU_matrix<Master_matrix>::operator=(const RU_matrix& other)$/;"	f	class:Gudhi::persistence_matrix::RU_matrix	typeref:typename:RU_matrix<Master_matrix> &
operator =	multipers/gudhi/gudhi/Persistence_matrix/allocators/entry_constructors.h	/^  Pool_entry_constructor& operator=(const Pool_entry_constructor& other) {$/;"	f	struct:Gudhi::persistence_matrix::Pool_entry_constructor	typeref:typename:Pool_entry_constructor &
operator =	multipers/gudhi/gudhi/Persistence_matrix/base_swap.h	/^inline Base_swap<Master_matrix, Base_matrix>& Base_swap<Master_matrix, Base_matrix>::operator=(B/;"	f	class:Gudhi::persistence_matrix::Base_swap	typeref:typename:Base_swap<Master_matrix,Base_matrix> &
operator =	multipers/gudhi/gudhi/Persistence_matrix/chain_pairing.h	/^inline Chain_pairing<Master_matrix>& Chain_pairing<Master_matrix>::operator=(Chain_pairing<Maste/;"	f	class:Gudhi::persistence_matrix::Chain_pairing	typeref:typename:Chain_pairing<Master_matrix> &
operator =	multipers/gudhi/gudhi/Persistence_matrix/chain_rep_cycles.h	/^inline Chain_representative_cycles<Master_matrix>& Chain_representative_cycles<Master_matrix>::o/;"	f	class:Gudhi::persistence_matrix::Chain_representative_cycles	typeref:typename:Chain_representative_cycles<Master_matrix> &
operator =	multipers/gudhi/gudhi/Persistence_matrix/chain_vine_swap.h	/^  Chain_barcode_swap& operator=(Chain_barcode_swap other) {$/;"	f	class:Gudhi::persistence_matrix::Chain_barcode_swap	typeref:typename:Chain_barcode_swap &
operator =	multipers/gudhi/gudhi/Persistence_matrix/chain_vine_swap.h	/^inline Chain_vine_swap<Master_matrix>& Chain_vine_swap<Master_matrix>::operator=(Chain_vine_swap/;"	f	class:Gudhi::persistence_matrix::Chain_vine_swap	typeref:typename:Chain_vine_swap<Master_matrix> &
operator =	multipers/gudhi/gudhi/Persistence_matrix/columns/chain_column_extra_properties.h	/^  Chain_column_extra_properties& operator=(const Chain_column_extra_properties& other) {$/;"	f	class:Gudhi::persistence_matrix::Chain_column_extra_properties	typeref:typename:Chain_column_extra_properties &
operator =	multipers/gudhi/gudhi/Persistence_matrix/columns/column_dimension_holder.h	/^  Column_dimension_holder& operator=(const Column_dimension_holder& other) {$/;"	f	struct:Gudhi::persistence_matrix::Column_dimension_holder	typeref:typename:Column_dimension_holder &
operator =	multipers/gudhi/gudhi/Persistence_matrix/columns/entry_types.h	/^  Entry& operator=(Entry other) {$/;"	f	class:Gudhi::persistence_matrix::Entry	typeref:typename:Entry &
operator =	multipers/gudhi/gudhi/Persistence_matrix/columns/entry_types.h	/^  Entry_column_index& operator=(Entry_column_index other) {$/;"	f	class:Gudhi::persistence_matrix::Entry_column_index	typeref:typename:Entry_column_index &
operator =	multipers/gudhi/gudhi/Persistence_matrix/columns/entry_types.h	/^  Entry_field_element& operator=(Entry_field_element other) {$/;"	f	class:Gudhi::persistence_matrix::Entry_field_element	typeref:typename:Entry_field_element &
operator =	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^inline Heap_column<Master_matrix>& Heap_column<Master_matrix>::operator=(const Heap_column& othe/;"	f	class:Gudhi::persistence_matrix::Heap_column	typeref:typename:Heap_column<Master_matrix> &
operator =	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^inline Intrusive_list_column<Master_matrix>& Intrusive_list_column<Master_matrix>::operator=($/;"	f	class:Gudhi::persistence_matrix::Intrusive_list_column	typeref:typename:Intrusive_list_column<Master_matrix> &
operator =	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^inline Intrusive_set_column<Master_matrix>& Intrusive_set_column<Master_matrix>::operator=($/;"	f	class:Gudhi::persistence_matrix::Intrusive_set_column	typeref:typename:Intrusive_set_column<Master_matrix> &
operator =	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^inline List_column<Master_matrix>& List_column<Master_matrix>::operator=(const List_column& othe/;"	f	class:Gudhi::persistence_matrix::List_column	typeref:typename:List_column<Master_matrix> &
operator =	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^inline Naive_vector_column<Master_matrix>& Naive_vector_column<Master_matrix>::operator=($/;"	f	class:Gudhi::persistence_matrix::Naive_vector_column	typeref:typename:Naive_vector_column<Master_matrix> &
operator =	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^inline Set_column<Master_matrix>& Set_column<Master_matrix>::operator=(const Set_column& other)$/;"	f	class:Gudhi::persistence_matrix::Set_column	typeref:typename:Set_column<Master_matrix> &
operator =	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^inline Small_vector_column<Master_matrix>& Small_vector_column<Master_matrix>::operator=($/;"	f	class:Gudhi::persistence_matrix::Small_vector_column	typeref:typename:Small_vector_column<Master_matrix> &
operator =	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^inline Unordered_set_column<Master_matrix>& Unordered_set_column<Master_matrix>::operator=($/;"	f	class:Gudhi::persistence_matrix::Unordered_set_column	typeref:typename:Unordered_set_column<Master_matrix> &
operator =	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^inline Vector_column<Master_matrix>& Vector_column<Master_matrix>::operator=(const Vector_column/;"	f	class:Gudhi::persistence_matrix::Vector_column	typeref:typename:Vector_column<Master_matrix> &
operator =	multipers/gudhi/gudhi/Persistence_matrix/matrix_dimension_holders.h	/^  Matrix_all_dimension_holder& operator=(Matrix_all_dimension_holder other) {$/;"	f	class:Gudhi::persistence_matrix::Matrix_all_dimension_holder	typeref:typename:Matrix_all_dimension_holder &
operator =	multipers/gudhi/gudhi/Persistence_matrix/matrix_dimension_holders.h	/^  Matrix_max_dimension_holder& operator=(const Matrix_max_dimension_holder& other) {$/;"	f	class:Gudhi::persistence_matrix::Matrix_max_dimension_holder	typeref:typename:Matrix_max_dimension_holder &
operator =	multipers/gudhi/gudhi/Persistence_matrix/matrix_row_access.h	/^  Matrix_row_access& operator=(const Matrix_row_access& other) {$/;"	f	class:Gudhi::persistence_matrix::Matrix_row_access	typeref:typename:Matrix_row_access &
operator =	multipers/gudhi/gudhi/Persistence_matrix/ru_rep_cycles.h	/^inline RU_representative_cycles<Master_matrix>& RU_representative_cycles<Master_matrix>::operato/;"	f	class:Gudhi::persistence_matrix::RU_representative_cycles	typeref:typename:RU_representative_cycles<Master_matrix> &
operator =	multipers/gudhi/gudhi/Persistence_matrix/ru_vine_swap.h	/^inline RU_vine_swap<Master_matrix>& RU_vine_swap<Master_matrix>::operator=(RU_vine_swap<Master_m/;"	f	class:Gudhi::persistence_matrix::RU_vine_swap	typeref:typename:RU_vine_swap<Master_matrix> &
operator =	multipers/gudhi/gudhi/Simplex_tree.h	/^  Simplex_tree& operator=(Simplex_tree&& complex_source) {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:Simplex_tree &
operator =	multipers/gudhi/gudhi/Simplex_tree.h	/^  Simplex_tree& operator=(const Simplex_tree& complex_source) {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:Simplex_tree &
operator =	multipers/gudhi/gudhi/Simplex_tree/hooks_simplex_base.h	/^    Hooks_simplex_base_link_nodes& operator=(Hooks_simplex_base_link_nodes&& other) {$/;"	f	struct:Gudhi::Hooks_simplex_base_link_nodes	typeref:typename:Hooks_simplex_base_link_nodes &
operator =	multipers/gudhi/gudhi/Simplex_tree/hooks_simplex_base.h	/^    Hooks_simplex_base_link_nodes& operator=(const Hooks_simplex_base_link_nodes&) {$/;"	f	struct:Gudhi::Hooks_simplex_base_link_nodes	typeref:typename:Hooks_simplex_base_link_nodes &
operator =	multipers/gudhi/mma_interface_h0.h	/^  Persistence_backend_h0 &operator=(Persistence_backend_h0 other) {$/;"	f	class:Gudhi::multiparameter::truc_interface::Persistence_backend_h0	typeref:typename:Persistence_backend_h0 &
operator =	multipers/gudhi/mma_interface_matrix.h	/^  Persistence_backend_matrix &operator=(Persistence_backend_matrix other) {$/;"	f	class:Gudhi::multiparameter::truc_interface::Persistence_backend_matrix	typeref:typename:Persistence_backend_matrix &
operator =	multipers/gudhi/truc.h	/^  Truc &operator=(const Truc &other) {$/;"	f	class:Gudhi::multiparameter::truc_interface::Truc	typeref:typename:Truc &
operator =	multipers/multiparameter_module_approximation/heap_column.h	/^inline Heap_column& Heap_column::operator=(Heap_column other)$/;"	f	class:Vineyard::Heap_column	typeref:typename:Heap_column &
operator =	multipers/multiparameter_module_approximation/list_column.h	/^inline List_column &List_column::operator=(List_column other)$/;"	f	class:Vineyard::List_column	typeref:typename:List_column &
operator =	multipers/multiparameter_module_approximation/list_column_2.h	/^inline List_column &List_column::operator=(List_column other)$/;"	f	class:Vineyard::List_column	typeref:typename:List_column &
operator =	multipers/multiparameter_module_approximation/ru_matrix.h	/^RU_matrix<Column_type>::operator=(RU_matrix<Column_type> other) {$/;"	f	class:Gudhi::multiparameter::mma::RU_matrix	typeref:typename:RU_matrix<Column_type> &
operator =	multipers/multiparameter_module_approximation/set_column.h	/^inline Set_column &Set_column::operator=(Set_column other)$/;"	f	class:Gudhi::multiparameter::mma::Set_column	typeref:typename:Set_column &
operator =	multipers/multiparameter_module_approximation/unordered_set_column.h	/^inline Unordered_set_column &Unordered_set_column::operator=(Unordered_set_column other)$/;"	f	class:Vineyard::Unordered_set_column	typeref:typename:Unordered_set_column &
operator =	multipers/multiparameter_module_approximation/vector_column.h	/^inline Vector_column &Vector_column::operator=(Vector_column other)$/;"	f	class:Vineyard::Vector_column	typeref:typename:Vector_column &
operator =	multipers/multiparameter_module_approximation/vector_matrix.h	/^inline Vector_matrix<Column_type> &Vector_matrix<Column_type>::operator=($/;"	f	class:Gudhi::multiparameter::mma::Vector_matrix	typeref:typename:Vector_matrix<Column_type> &
operator =	multipers/multiparameter_module_approximation/vineyards.h	/^Vineyard_persistence<Vineyard_matrix_type>::operator=($/;"	f	class:Gudhi::multiparameter::mma::Vineyard_persistence	typeref:typename:Vineyard_persistence<Vineyard_matrix_type> &
operator =	multipers/tensor/tensor.h	/^  inline void operator=(const static_tensor_view_view<dtype, indices_type> &x) {$/;"	f	class:tensor::static_tensor_view_view	typeref:typename:void
operator =	multipers/tensor/tensor.h	/^  inline void operator=(dtype x) {$/;"	f	class:tensor::static_tensor_view_view	typeref:typename:void
operator ==	multipers/gudhi/gudhi/Bitmap_cubical_complex.h	/^    bool operator==(const Skeleton_simplex_iterator& rhs) const {$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex::Skeleton_simplex_iterator	typeref:typename:bool
operator ==	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^    bool operator==(const Top_dimensional_cells_iterator& rhs) const {$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base::Top_dimensional_cells_iterator	typeref:typename:bool
operator ==	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^    bool operator==(const Vertices_iterator& rhs) const {$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base::Vertices_iterator	typeref:typename:bool
operator ==	multipers/gudhi/gudhi/Bitmap_cubical_complex_periodic_boundary_conditions_base.h	/^    bool operator==(const Vertices_iterator& rhs) const {$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_periodic_boundary_conditions_base::Vertices_iterator	typeref:typename:bool
operator ==	multipers/gudhi/gudhi/Fields/Multi_field.h	/^  friend bool operator==(const Element& v, const Multi_field_element& f) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:bool
operator ==	multipers/gudhi/gudhi/Fields/Multi_field.h	/^  friend bool operator==(const Multi_field_element& f, const Element& v) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:bool
operator ==	multipers/gudhi/gudhi/Fields/Multi_field.h	/^  friend bool operator==(const Multi_field_element& f1, const Multi_field_element& f2) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:bool
operator ==	multipers/gudhi/gudhi/Fields/Multi_field_shared.h	/^  friend bool operator==(const Element& v, const Shared_multi_field_element& f) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:bool
operator ==	multipers/gudhi/gudhi/Fields/Multi_field_shared.h	/^  friend bool operator==(const Shared_multi_field_element& f, const Element& v) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:bool
operator ==	multipers/gudhi/gudhi/Fields/Multi_field_shared.h	/^  friend bool operator==(const Shared_multi_field_element& f1, const Shared_multi_field_element&/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:bool
operator ==	multipers/gudhi/gudhi/Fields/Multi_field_small.h	/^  friend bool operator==(const Integer_type v, const Multi_field_element_with_small_characterist/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:bool
operator ==	multipers/gudhi/gudhi/Fields/Multi_field_small.h	/^  friend bool operator==(const Multi_field_element_with_small_characteristics& f, const Integer_/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:bool
operator ==	multipers/gudhi/gudhi/Fields/Multi_field_small.h	/^  friend bool operator==(const Multi_field_element_with_small_characteristics& f1,$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:bool
operator ==	multipers/gudhi/gudhi/Fields/Multi_field_small_shared.h	/^  friend bool operator==(const Integer_type& v, const Shared_multi_field_element_with_small_char/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:bool
operator ==	multipers/gudhi/gudhi/Fields/Multi_field_small_shared.h	/^  friend bool operator==(const Shared_multi_field_element_with_small_characteristics& f, const I/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:bool
operator ==	multipers/gudhi/gudhi/Fields/Multi_field_small_shared.h	/^  friend bool operator==(const Shared_multi_field_element_with_small_characteristics& f1,$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:bool
operator ==	multipers/gudhi/gudhi/Fields/Z2_field.h	/^  friend bool operator==(const Integer_type& v, const Z2_field_element& f) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:bool
operator ==	multipers/gudhi/gudhi/Fields/Z2_field.h	/^  friend bool operator==(const Z2_field_element& f, const Integer_type& v) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:bool
operator ==	multipers/gudhi/gudhi/Fields/Z2_field.h	/^  friend bool operator==(const Z2_field_element& f1, const Z2_field_element& f2) { return f1.ele/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:bool
operator ==	multipers/gudhi/gudhi/Fields/Zp_field.h	/^  friend bool operator==(const Integer_type& v, const Zp_field_element& f) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:bool
operator ==	multipers/gudhi/gudhi/Fields/Zp_field.h	/^  friend bool operator==(const Zp_field_element& f, const Integer_type& v) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:bool
operator ==	multipers/gudhi/gudhi/Fields/Zp_field.h	/^  friend bool operator==(const Zp_field_element& f1, const Zp_field_element& f2) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:bool
operator ==	multipers/gudhi/gudhi/Fields/Zp_field_shared.h	/^  friend bool operator==(const Integer_type& v, const Shared_Zp_field_element& f) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:bool
operator ==	multipers/gudhi/gudhi/Fields/Zp_field_shared.h	/^  friend bool operator==(const Shared_Zp_field_element& f, const Integer_type& v) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:bool
operator ==	multipers/gudhi/gudhi/Fields/Zp_field_shared.h	/^  friend bool operator==(const Shared_Zp_field_element& f1, const Shared_Zp_field_element& f2) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:bool
operator ==	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  friend bool operator==(const Multi_critical_filtration &a, const Multi_critical_filtration &b)/;"	f	namespace:Gudhi::multi_filtration	typeref:typename:bool
operator ==	multipers/gudhi/gudhi/One_critical_filtration.h	/^  friend bool operator==(const One_critical_filtration &a, const One_critical_filtration &b) {$/;"	f	namespace:Gudhi::multi_filtration	typeref:typename:bool
operator ==	multipers/gudhi/gudhi/Persistence_matrix/columns/entry_types.h	/^  friend bool operator==(const Entry& c1, const Entry& c2) { return c1.get_row_index() == c2.get/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:bool
operator ==	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^  friend bool operator==(const Heap_column& c1, const Heap_column& c2) {$/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:bool
operator ==	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^  friend bool operator==(const Intrusive_list_column& c1, const Intrusive_list_column& c2) {$/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:bool
operator ==	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^  friend bool operator==(const Intrusive_set_column& c1, const Intrusive_set_column& c2) {$/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:bool
operator ==	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^  friend bool operator==(const List_column& c1, const List_column& c2) {$/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:bool
operator ==	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^  friend bool operator==(const Naive_vector_column& c1, const Naive_vector_column& c2) {$/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:bool
operator ==	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^  friend bool operator==(const Set_column& c1, const Set_column& c2) {$/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:bool
operator ==	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^  friend bool operator==(const Small_vector_column& c1, const Small_vector_column& c2) {$/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:bool
operator ==	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^  friend bool operator==(const Unordered_set_column& c1, const Unordered_set_column& c2) {$/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:bool
operator ==	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^  friend bool operator==(const Vector_column& c1, const Vector_column& c2) {$/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:bool
operator ==	multipers/gudhi/gudhi/Simplex_tree.h	/^  bool operator==(Simplex_tree<OtherSimplexTreeOptions>& st2) {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:bool
operator >	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  friend bool operator>(const Multi_critical_filtration &a, const Multi_critical_filtration &b) /;"	f	namespace:Gudhi::multi_filtration	typeref:typename:bool
operator >	multipers/gudhi/gudhi/One_critical_filtration.h	/^  friend bool operator>(const One_critical_filtration &a, const One_critical_filtration &b) { re/;"	f	namespace:Gudhi::multi_filtration	typeref:typename:bool
operator >=	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  friend bool operator>=(const Multi_critical_filtration &a, const Multi_critical_filtration &b)/;"	f	namespace:Gudhi::multi_filtration	typeref:typename:bool
operator >=	multipers/gudhi/gudhi/One_critical_filtration.h	/^  friend bool operator>=(const One_critical_filtration &a, const One_critical_filtration &b) { r/;"	f	namespace:Gudhi::multi_filtration	typeref:typename:bool
operator >>	multipers/gudhi/gudhi/Simplex_tree.h	/^std::istream& operator>>(std::istream& is, Simplex_tree<T...>& st) {$/;"	f	namespace:Gudhi	typeref:typename:std::istream &
operator Generator	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  operator Generator() {$/;"	f	class:Gudhi::multi_filtration::Multi_critical_filtration
operator ID_index	multipers/gudhi/gudhi/Persistence_matrix/columns/entry_types.h	/^  operator ID_index() const { return rowIndex_; }$/;"	f	class:Gudhi::persistence_matrix::Entry
operator []	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  Generator &operator[](std::size_t i) { return multi_filtration_[i]; }$/;"	f	class:Gudhi::multi_filtration::Multi_critical_filtration	typeref:typename:Generator &
operator []	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  const Generator &operator[](std::size_t i) const { return multi_filtration_[i]; }$/;"	f	class:Gudhi::multi_filtration::Multi_critical_filtration	typeref:typename:const Generator &
operator []	multipers/gudhi/gudhi/Multi_persistence/Line.h	/^  Point operator[](T t) const {$/;"	f	class:Gudhi::multi_persistence::Line	typeref:typename:Point
operator []	multipers/gudhi/truc.h	/^  const std::vector<unsigned int> &operator[](std::size_t i) const {$/;"	f	class:Gudhi::multiparameter::truc_interface::PresentationStructure	typeref:typename:const std::vector<unsigned int> &
operator []	multipers/gudhi/truc.h	/^  const std::vector<unsigned int> &operator[](std::size_t i) const {$/;"	f	class:Gudhi::multiparameter::truc_interface::SimplicialStructure	typeref:typename:const std::vector<unsigned int> &
operator []	multipers/gudhi/truc.h	/^  std::vector<unsigned int> &operator[](std::size_t i) {$/;"	f	class:Gudhi::multiparameter::truc_interface::PresentationStructure	typeref:typename:std::vector<unsigned int> &
operator []	multipers/gudhi/truc.h	/^  std::vector<unsigned int> &operator[](std::size_t i) {$/;"	f	class:Gudhi::multiparameter::truc_interface::SimplicialStructure	typeref:typename:std::vector<unsigned int> &
operator []	multipers/multiparameter_module_approximation/approximation.h	/^inline Summand<value_type> &Module<value_type>::operator[](const size_t index) {$/;"	f	class:Gudhi::multiparameter::mma::Module	typeref:typename:Summand<value_type> &
operator []	multipers/multiparameter_module_approximation/approximation.h	/^inline const Summand<value_type> &Module<value_type>::operator[](const size_t index) const {$/;"	f	class:Gudhi::multiparameter::mma::Module	typeref:typename:const Summand<value_type> &
operator []	multipers/multiparameter_module_approximation/utilities.h	/^  MultiDiagram<filtration_type, value_type> &operator[](const unsigned int i) {$/;"	f	struct:Gudhi::multiparameter::mma::MultiDiagrams	typeref:typename:MultiDiagram<filtration_type,value_type> &
operator []	multipers/multiparameter_module_approximation/utilities.h	/^  MultiDiagram_point<filtration_type> &operator[](unsigned int i) {$/;"	f	struct:Gudhi::multiparameter::mma::MultiDiagram	typeref:typename:MultiDiagram_point<filtration_type> &
operator []	multipers/tensor/tensor.h	/^  inline dtype &operator[](T coords) {$/;"	f	class:tensor::static_tensor_view_view	typeref:typename:dtype &
operator []	multipers/tensor/tensor.h	/^  inline dtype &operator[](const oned_array_like &coordinates) const {$/;"	f	class:tensor::static_tensor_view	typeref:typename:dtype &
operator const Generator	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  operator const Generator() const {$/;"	f	class:Gudhi::multi_filtration::Multi_critical_filtration
operator mpz_class	multipers/gudhi/gudhi/Fields/Multi_field.h	/^inline Multi_field_element<minimum, maximum>::operator mpz_class() const {$/;"	f	class:Gudhi::persistence_fields::Multi_field_element
operator mpz_class	multipers/gudhi/gudhi/Fields/Multi_field_shared.h	/^inline Shared_multi_field_element::operator mpz_class() const { return element_; }$/;"	f	class:Gudhi::persistence_fields::Shared_multi_field_element
operator std::pair<ID_index,Field_element>	multipers/gudhi/gudhi/Persistence_matrix/columns/entry_types.h	/^  operator std::pair<ID_index, Field_element>() const {$/;"	f	class:Gudhi::persistence_matrix::Entry
operator unsigned int	multipers/gudhi/gudhi/Fields/Multi_field.h	/^inline Multi_field_element<minimum, maximum>::operator unsigned int() const {$/;"	f	class:Gudhi::persistence_fields::Multi_field_element
operator unsigned int	multipers/gudhi/gudhi/Fields/Multi_field_shared.h	/^inline Shared_multi_field_element::operator unsigned int() const { return element_.get_ui(); }$/;"	f	class:Gudhi::persistence_fields::Shared_multi_field_element
operator unsigned int	multipers/gudhi/gudhi/Fields/Multi_field_small.h	/^  operator unsigned int() const { return element_; }$/;"	f	class:Gudhi::persistence_fields::Multi_field_element_with_small_characteristics
operator unsigned int	multipers/gudhi/gudhi/Fields/Multi_field_small_shared.h	/^  operator unsigned int() const { return element_; }$/;"	f	class:Gudhi::persistence_fields::Shared_multi_field_element_with_small_characteristics
operator unsigned int	multipers/gudhi/gudhi/Fields/Z2_field.h	/^inline Z2_field_element::operator unsigned int() const { return element_; }$/;"	f	class:Gudhi::persistence_fields::Z2_field_element
operator unsigned int	multipers/gudhi/gudhi/Fields/Zp_field.h	/^  operator unsigned int() const { return element_; }$/;"	f	class:Gudhi::persistence_fields::Zp_field_element
operator unsigned int	multipers/gudhi/gudhi/Fields/Zp_field_shared.h	/^  operator unsigned int() const { return element_; }$/;"	f	class:Gudhi::persistence_fields::Shared_Zp_field_element
operators	multipers/gudhi/gudhi/Matrix.h	/^    Field_operators operators;$/;"	m	struct:Gudhi::persistence_matrix::Matrix::Column_zp_settings	typeref:typename:Field_operators
operators_	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^  Field_operators* operators_;    \/**< Field operators,$/;"	m	class:Gudhi::persistence_matrix::RU_matrix	typeref:typename:Field_operators *
operators_	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^  Field_operators* operators_;$/;"	m	class:Gudhi::persistence_matrix::Heap_column	typeref:typename:Field_operators *
operators_	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^  Field_operators* operators_;$/;"	m	class:Gudhi::persistence_matrix::Intrusive_list_column	typeref:typename:Field_operators *
operators_	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^  Field_operators* operators_;$/;"	m	class:Gudhi::persistence_matrix::Intrusive_set_column	typeref:typename:Field_operators *
operators_	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^  Field_operators* operators_;$/;"	m	class:Gudhi::persistence_matrix::List_column	typeref:typename:Field_operators *
operators_	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^  Field_operators* operators_;$/;"	m	class:Gudhi::persistence_matrix::Naive_vector_column	typeref:typename:Field_operators *
operators_	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^  Field_operators* operators_;$/;"	m	class:Gudhi::persistence_matrix::Set_column	typeref:typename:Field_operators *
operators_	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^  Field_operators* operators_;$/;"	m	class:Gudhi::persistence_matrix::Small_vector_column	typeref:typename:Field_operators *
operators_	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^  Field_operators* operators_;$/;"	m	class:Gudhi::persistence_matrix::Unordered_set_column	typeref:typename:Field_operators *
operators_	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^  Field_operators* operators_;$/;"	m	class:Gudhi::persistence_matrix::Vector_column	typeref:typename:Field_operators *
options_multi	multipers/gudhi/Simplex_tree_multi_interface.h	/^using options_multi = Gudhi::multi_persistence::Simplex_tree_options_multidimensional_filtration/;"	t	namespace:Gudhi::multiparameter::python_interface	typeref:typename:Gudhi::multi_persistence::Simplex_tree_options_multidimensional_filtration<Filtration>
orbit	multipers/data/synthetic.py	/^def orbit(n: int = 1000, r: float = 1.0, x0=[]):$/;"	f
output	multipers/gudhi/gudhi/Flag_complex_edge_collapser.h	/^  std::vector<Filtered_edge> output() {$/;"	f	struct:Gudhi::collapse::Flag_complex_edge_collapser	typeref:typename:std::vector<Filtered_edge>
output_diagram	multipers/gudhi/gudhi/Persistent_cohomology.h	/^  void output_diagram(std::ostream& ostream = std::cout) {$/;"	f	class:Gudhi::persistent_cohomology::Persistent_cohomology	typeref:typename:void
output_path	multipers/io.pyx	/^output_path:str|os.PathLike = "multipers_output.scc"$/;"	v	typeref:typename:str|os.PathLike
p	compute.py	/^p = ArgumentParser()$/;"	v
p	multipers/multiparameter_module_approximation/images.h	/^	double p;								\/\/ sum smoothing$/;"	m	struct:Gudhi::multiparameter::mma::representation::ImageArgs	typeref:typename:double
pairedColumn_	multipers/gudhi/gudhi/Persistence_matrix/columns/chain_column_extra_properties.h	/^  Index pairedColumn_;  \/**< Represents the (F, G x H) partition of the columns.$/;"	m	class:Gudhi::persistence_matrix::Chain_column_extra_properties	typeref:typename:Index
pairwise_signed_measure_distances	multipers/ml/sliced_wasserstein.py	/^def pairwise_signed_measure_distances($/;"	f
parameters	compute.py	/^		parameters = {$/;"	v
parameters	compute.py	/^		parameters = {}$/;"	v
parent	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_siblings.h	/^  Vertex_handle parent() const {$/;"	f	class:Gudhi::Simplex_tree_siblings	typeref:typename:Vertex_handle
parent	multipers/gudhi/naive_merge_tree.h	/^    index parent = -1;$/;"	m	struct:Naive_bottleneck_forest::Node	typeref:typename:index
parent	multipers/gudhi/naive_merge_tree.h	/^    index parent = -1;$/;"	m	struct:Naive_merge_forest::Node	typeref:typename:index
parent_	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_siblings.h	/^  Vertex_handle parent_;$/;"	m	class:Gudhi::Simplex_tree_siblings	typeref:typename:Vertex_handle
partials_	multipers/gudhi/gudhi/Fields/Multi_field.h	/^  static inline const std::vector<Characteristic> partials_ = []() {$/;"	m	class:Gudhi::persistence_fields::Multi_field_element	typeref:typename:const std::vector<Characteristic>
partials_	multipers/gudhi/gudhi/Fields/Multi_field_operators.h	/^  std::vector<Characteristic> partials_;       \/**< Partial products of the characteristics. *\/$/;"	m	class:Gudhi::persistence_fields::Multi_field_operators	typeref:typename:std::vector<Characteristic>
partials_	multipers/gudhi/gudhi/Fields/Multi_field_shared.h	/^  static inline std::vector<Element> partials_;           \/**< Partial products of the characte/;"	m	class:Gudhi::persistence_fields::Shared_multi_field_element	typeref:typename:std::vector<Element>
partials_	multipers/gudhi/gudhi/Fields/Multi_field_small.h	/^  static inline const std::vector<Characteristic> partials_ = []() {$/;"	m	class:Gudhi::persistence_fields::Multi_field_element_with_small_characteristics	typeref:typename:const std::vector<Characteristic>
partials_	multipers/gudhi/gudhi/Fields/Multi_field_small_operators.h	/^  std::vector<Characteristic> partials_;       \/**< Partial products of the characteristics. *\/$/;"	m	class:Gudhi::persistence_fields::Multi_field_operators_with_small_characteristics	typeref:typename:std::vector<Characteristic>
partials_	multipers/gudhi/gudhi/Fields/Multi_field_small_shared.h	/^  static inline std::vector<Characteristic> partials_;       \/**< Partial products of the chara/;"	m	class:Gudhi::persistence_fields::Shared_multi_field_element_with_small_characteristics	typeref:typename:std::vector<Characteristic>
pass_line	multipers/io.pyx	/^    def pass_line(line):$/;"	f	function:scc_parser__old	file:
pd	benchmarks/stuff.py	/^import pandas as pd$/;"	I	nameref:module:pandas
pd	multipers/data/MOL2.py	/^import pandas as pd$/;"	I	nameref:module:pandas
pd	multipers/data/UCR.py	/^import pandas as pd$/;"	I	nameref:module:pandas
pd	multipers/ml/accuracies.py	/^import pandas as pd$/;"	I	nameref:module:pandas
peb8fb0799f	docs/icon.svg	/^       id="peb8fb0799f">$/;"	d
peb8fb0799f	docs/icon.svg	/^       id="peb8fb0799f">$/;"	i
perm_	multipers/gudhi/mma_interface_h0.h	/^    const std::vector<std::size_t> *perm_;$/;"	m	class:Gudhi::multiparameter::truc_interface::Persistence_backend_h0::Barcode	typeref:typename:const std::vector<std::size_t> *
perm_	multipers/gudhi/mma_interface_h0.h	/^    const std::vector<std::size_t> *perm_;$/;"	m	class:Gudhi::multiparameter::truc_interface::Persistence_backend_h0::Barcode_iterator	typeref:typename:const std::vector<std::size_t> *
perm_	multipers/gudhi/mma_interface_matrix.h	/^        perm_;$/;"	m	class:Gudhi::multiparameter::truc_interface::Persistence_backend_matrix::Barcode	typeref:typename:std::conditional<Matrix_options::has_vine_update,const std::vector<Index> *,std::vector<Index>>::type
perm_	multipers/gudhi/mma_interface_matrix.h	/^    const std::vector<Index> *perm_;$/;"	m	class:Gudhi::multiparameter::truc_interface::Persistence_backend_matrix::Barcode_iterator	typeref:typename:const std::vector<Index> *
permutationInv_	multipers/gudhi/mma_interface_h0.h	/^  std::vector<std::size_t> permutationInv_;$/;"	m	class:Gudhi::multiparameter::truc_interface::Persistence_backend_h0	typeref:typename:std::vector<std::size_t>
permutation_	multipers/gudhi/mma_interface_h0.h	/^  std::vector<std::size_t> *permutation_;$/;"	m	class:Gudhi::multiparameter::truc_interface::Persistence_backend_h0	typeref:typename:std::vector<std::size_t> *
permutation_	multipers/gudhi/mma_interface_matrix.h	/^  std::vector<Index> *permutation_;$/;"	m	class:Gudhi::multiparameter::truc_interface::Persistence_backend_matrix	typeref:typename:std::vector<Index> *
permutation_type	multipers/multiparameter_module_approximation/utilities.h	/^using permutation_type = std::vector<std::size_t>;$/;"	t	namespace:Gudhi::multiparameter::mma	typeref:typename:std::vector<std::size_t>
pers_	multipers/gudhi/mma_interface_h0.h	/^  Naive_merge_forest pers_;$/;"	m	class:Gudhi::multiparameter::truc_interface::Persistence_backend_h0	typeref:typename:Naive_merge_forest
persistence	multipers/gudhi/truc.h	/^    PersBackend persistence;  \/\/ generated by the structure, and generator_order.$/;"	m	class:Gudhi::multiparameter::truc_interface::Truc::TrucThread	typeref:typename:PersBackend
persistence	multipers/gudhi/truc.h	/^  PersBackend persistence;  \/\/ generated by the structure, and generator_order.$/;"	m	class:Gudhi::multiparameter::truc_interface::Truc	typeref:typename:PersBackend
persistence_fields	multipers/gudhi/gudhi/Fields/Multi_field.h	/^namespace persistence_fields {$/;"	n	namespace:Gudhi
persistence_fields	multipers/gudhi/gudhi/Fields/Multi_field_operators.h	/^namespace persistence_fields {$/;"	n	namespace:Gudhi
persistence_fields	multipers/gudhi/gudhi/Fields/Multi_field_shared.h	/^namespace persistence_fields {$/;"	n	namespace:Gudhi
persistence_fields	multipers/gudhi/gudhi/Fields/Multi_field_small.h	/^namespace persistence_fields {$/;"	n	namespace:Gudhi
persistence_fields	multipers/gudhi/gudhi/Fields/Multi_field_small_operators.h	/^namespace persistence_fields {$/;"	n	namespace:Gudhi
persistence_fields	multipers/gudhi/gudhi/Fields/Multi_field_small_shared.h	/^namespace persistence_fields {$/;"	n	namespace:Gudhi
persistence_fields	multipers/gudhi/gudhi/Fields/Z2_field.h	/^namespace persistence_fields {$/;"	n	namespace:Gudhi
persistence_fields	multipers/gudhi/gudhi/Fields/Z2_field_operators.h	/^namespace persistence_fields {$/;"	n	namespace:Gudhi
persistence_fields	multipers/gudhi/gudhi/Fields/Zp_field.h	/^namespace persistence_fields {$/;"	n	namespace:Gudhi
persistence_fields	multipers/gudhi/gudhi/Fields/Zp_field_operators.h	/^namespace persistence_fields {$/;"	n	namespace:Gudhi
persistence_fields	multipers/gudhi/gudhi/Fields/Zp_field_shared.h	/^namespace persistence_fields {$/;"	n	namespace:Gudhi
persistence_image	multipers_old.py	/^def persistence_image(dgm, bnds, resolution=[100,100], return_raw=False, bandwidth=1., power=1.)/;"	f
persistence_matrix	multipers/gudhi/gudhi/Matrix.h	/^namespace persistence_matrix {$/;"	n	namespace:Gudhi
persistence_matrix	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix.h	/^namespace persistence_matrix {$/;"	n	namespace:Gudhi
persistence_matrix	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix_with_column_compression.h	/^namespace persistence_matrix {$/;"	n	namespace:Gudhi
persistence_matrix	multipers/gudhi/gudhi/Persistence_matrix/Boundary_matrix.h	/^namespace persistence_matrix {$/;"	n	namespace:Gudhi
persistence_matrix	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^namespace persistence_matrix {$/;"	n	namespace:Gudhi
persistence_matrix	multipers/gudhi/gudhi/Persistence_matrix/Id_to_index_overlay.h	/^namespace persistence_matrix {$/;"	n	namespace:Gudhi
persistence_matrix	multipers/gudhi/gudhi/Persistence_matrix/Position_to_index_overlay.h	/^namespace persistence_matrix {$/;"	n	namespace:Gudhi
persistence_matrix	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^namespace persistence_matrix {$/;"	n	namespace:Gudhi
persistence_matrix	multipers/gudhi/gudhi/Persistence_matrix/allocators/entry_constructors.h	/^namespace persistence_matrix {$/;"	n	namespace:Gudhi
persistence_matrix	multipers/gudhi/gudhi/Persistence_matrix/base_pairing.h	/^namespace persistence_matrix {$/;"	n	namespace:Gudhi
persistence_matrix	multipers/gudhi/gudhi/Persistence_matrix/base_swap.h	/^namespace persistence_matrix {$/;"	n	namespace:Gudhi
persistence_matrix	multipers/gudhi/gudhi/Persistence_matrix/boundary_cell_position_to_id_mapper.h	/^namespace persistence_matrix {$/;"	n	namespace:Gudhi
persistence_matrix	multipers/gudhi/gudhi/Persistence_matrix/boundary_face_position_to_id_mapper.h	/^namespace persistence_matrix {$/;"	n	namespace:Gudhi
persistence_matrix	multipers/gudhi/gudhi/Persistence_matrix/chain_pairing.h	/^namespace persistence_matrix {$/;"	n	namespace:Gudhi
persistence_matrix	multipers/gudhi/gudhi/Persistence_matrix/chain_rep_cycles.h	/^namespace persistence_matrix {$/;"	n	namespace:Gudhi
persistence_matrix	multipers/gudhi/gudhi/Persistence_matrix/chain_vine_swap.h	/^namespace persistence_matrix {$/;"	n	namespace:Gudhi
persistence_matrix	multipers/gudhi/gudhi/Persistence_matrix/columns/chain_column_extra_properties.h	/^namespace persistence_matrix {$/;"	n	namespace:Gudhi
persistence_matrix	multipers/gudhi/gudhi/Persistence_matrix/columns/column_dimension_holder.h	/^namespace persistence_matrix {$/;"	n	namespace:Gudhi
persistence_matrix	multipers/gudhi/gudhi/Persistence_matrix/columns/column_utilities.h	/^namespace persistence_matrix {$/;"	n	namespace:Gudhi
persistence_matrix	multipers/gudhi/gudhi/Persistence_matrix/columns/entry_types.h	/^namespace persistence_matrix {$/;"	n	namespace:Gudhi
persistence_matrix	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^namespace persistence_matrix {$/;"	n	namespace:Gudhi
persistence_matrix	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^namespace persistence_matrix {$/;"	n	namespace:Gudhi
persistence_matrix	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^namespace persistence_matrix {$/;"	n	namespace:Gudhi
persistence_matrix	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^namespace persistence_matrix {$/;"	n	namespace:Gudhi
persistence_matrix	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^namespace persistence_matrix {$/;"	n	namespace:Gudhi
persistence_matrix	multipers/gudhi/gudhi/Persistence_matrix/columns/row_access.h	/^namespace persistence_matrix {$/;"	n	namespace:Gudhi
persistence_matrix	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^namespace persistence_matrix {$/;"	n	namespace:Gudhi
persistence_matrix	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^namespace persistence_matrix {$/;"	n	namespace:Gudhi
persistence_matrix	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^namespace persistence_matrix {$/;"	n	namespace:Gudhi
persistence_matrix	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^namespace persistence_matrix {$/;"	n	namespace:Gudhi
persistence_matrix	multipers/gudhi/gudhi/Persistence_matrix/matrix_dimension_holders.h	/^namespace persistence_matrix {$/;"	n	namespace:Gudhi
persistence_matrix	multipers/gudhi/gudhi/Persistence_matrix/matrix_row_access.h	/^namespace persistence_matrix {$/;"	n	namespace:Gudhi
persistence_matrix	multipers/gudhi/gudhi/Persistence_matrix/ru_pairing.h	/^namespace persistence_matrix {$/;"	n	namespace:Gudhi
persistence_matrix	multipers/gudhi/gudhi/Persistence_matrix/ru_rep_cycles.h	/^namespace persistence_matrix {$/;"	n	namespace:Gudhi
persistence_matrix	multipers/gudhi/gudhi/Persistence_matrix/ru_vine_swap.h	/^namespace persistence_matrix {$/;"	n	namespace:Gudhi
persistence_matrix	multipers/gudhi/gudhi/persistence_interval.h	/^namespace persistence_matrix {$/;"	n	namespace:Gudhi
persistence_matrix	multipers/gudhi/gudhi/persistence_matrix_options.h	/^namespace persistence_matrix {$/;"	n	namespace:Gudhi
persistence_on_lines	multipers/gudhi/truc.h	/^  inline std::vector<split_barcode> persistence_on_lines($/;"	f	class:Gudhi::multiparameter::truc_interface::Truc	typeref:typename:std::vector<split_barcode>
persistence_on_lines	multipers/gudhi/truc.h	/^  inline std::vector<split_barcode> persistence_on_lines(const std::vector<std::vector<value_typ/;"	f	class:Gudhi::multiparameter::truc_interface::Truc	typeref:typename:std::vector<split_barcode>
persistence_pair	multipers/multiparameter_module_approximation/utilities.h	/^using persistence_pair = std::pair<value_type, value_type>;$/;"	t	namespace:Gudhi::multiparameter::mma	typeref:typename:std::pair<value_type,value_type>
persistent_betti_number	multipers/gudhi/gudhi/Persistent_cohomology.h	/^  int persistent_betti_number(int dimension, Filtration_value from, Filtration_value to) const {$/;"	f	class:Gudhi::persistent_cohomology::Persistent_cohomology	typeref:typename:int
persistent_betti_numbers	multipers/gudhi/gudhi/Persistent_cohomology.h	/^  std::vector<int> persistent_betti_numbers(Filtration_value from, Filtration_value to) const {$/;"	f	class:Gudhi::persistent_cohomology::Persistent_cohomology	typeref:typename:std::vector<int>
persistent_cohomology	multipers/gudhi/gudhi/Persistent_cohomology.h	/^namespace persistent_cohomology {$/;"	n	namespace:Gudhi
persistent_cohomology	multipers/gudhi/gudhi/Persistent_cohomology/Field_Zp.h	/^namespace persistent_cohomology {$/;"	n	namespace:Gudhi
persistent_cohomology	multipers/gudhi/gudhi/Persistent_cohomology/Multi_field.h	/^namespace persistent_cohomology {$/;"	n	namespace:Gudhi
persistent_cohomology	multipers/gudhi/gudhi/Persistent_cohomology/Persistent_cohomology_column.h	/^namespace persistent_cohomology {$/;"	n	namespace:Gudhi
persistent_pairs_	multipers/gudhi/gudhi/Persistent_cohomology.h	/^  std::vector<Persistent_interval> persistent_pairs_;$/;"	m	class:Gudhi::persistent_cohomology::Persistent_cohomology	typeref:typename:std::vector<Persistent_interval>
pickle_able_todo	multipers/ml/one.py	/^			def pickle_able_todo(x, **kwargs):$/;"	f	member:SimplexTree2Histogram.transform	file:
pickleable_todo	multipers/ml/one.py	/^			pickleable_todo = lambda x : todo(to_st(x))$/;"	f	member:SimplexTree2Dgm.transform	file:
pipeline	compute.py	/^		pipeline = DummyClassifier()$/;"	v
pipeline	compute.py	/^		pipeline = Pipeline([$/;"	v
pipeline	compute.py	/^		pipeline = Pipeline([("pi", mmo.Dgms2Image()), ("svm", SVC(kernel="rbf"))])$/;"	v
pipeline	compute.py	/^		pipeline = Pipeline([("pl", mmo.Dgms2Landscapes()), ("svm", SVC(kernel="rbf"))])$/;"	v
pipeline_	compute.py	/^	pipeline_ = clone(pipeline).set_params(**example_parameter)$/;"	v
pivotChanged_	multipers/multiparameter_module_approximation/unordered_set_column.h	/^    bool pivotChanged_;$/;"	m	class:Vineyard::Unordered_set_column	typeref:typename:bool
pivotToColumnIndex_	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^  Dictionary pivotToColumnIndex_; \/**< Map from @ref IDIdx to @ref MatIdx index. *\/$/;"	m	class:Gudhi::persistence_matrix::Chain_matrix	typeref:typename:Dictionary
pivotToColumnIndex_	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^  Dictionary pivotToColumnIndex_; \/**< Map from pivot row index to column @ref MatIdx index. *\/$/;"	m	class:Gudhi::persistence_matrix::RU_matrix	typeref:typename:Dictionary
pivotToPosition_	multipers/gudhi/gudhi/Persistence_matrix/chain_vine_swap.h	/^  Dictionary pivotToPosition_;  \/\/ necessary to keep track of the barcode changes$/;"	m	class:Gudhi::persistence_matrix::Chain_barcode_swap	typeref:typename:Dictionary
pivot_	multipers/gudhi/gudhi/Persistence_matrix/columns/chain_column_extra_properties.h	/^  ID_index pivot_;      \/**< @ref IDIdx index associated to the chain *\/$/;"	m	class:Gudhi::persistence_matrix::Chain_column_extra_properties	typeref:typename:ID_index
pivot_	multipers/multiparameter_module_approximation/unordered_set_column.h	/^    int pivot_;$/;"	m	class:Vineyard::Unordered_set_column	typeref:typename:int
pkl	multipers/tests/test_simplextreemulti.py	/^import pickle as pkl$/;"	I	nameref:module:pickle
pkl	multipers/tests/test_slicer.py	/^import pickle as pkl$/;"	I	nameref:module:pickle
plot2d_PyModule	multipers/plots.py	/^def plot2d_PyModule($/;"	f
plot_EF_from_distances	multipers/data/MOL2.py	/^def plot_EF_from_distances($/;"	f
plot_signed_measure	multipers/plots.py	/^def plot_signed_measure(signed_measure, threshold=None, ax=None, **plt_kwargs):$/;"	f
plot_signed_measures	multipers/plots.py	/^def plot_signed_measures(signed_measures, threshold=None, size=4):$/;"	f
plot_surface	multipers/plots.py	/^def plot_surface($/;"	f
plot_surfaces	multipers/plots.py	/^def plot_surfaces(HF, size=4, **plt_args):$/;"	f
plt	multipers/data/MOL2.py	/^import matplotlib.pyplot as plt$/;"	I	nameref:module:matplotlib.pyplot
plt	multipers/ml/signed_measures.py	/^import matplotlib.pyplot as plt$/;"	I	nameref:module:matplotlib.pyplot
plt	multipers/plots.py	/^import matplotlib.pyplot as plt$/;"	I	nameref:module:matplotlib.pyplot
plt	multipers_old.py	/^import matplotlib.pyplot as plt$/;"	I	nameref:module:matplotlib.pyplot
plus_equal	multipers/gudhi/gudhi/Persistent_cohomology/Field_Zp.h	/^  Element plus_equal(const Element& x, const Element& y) {$/;"	f	class:Gudhi::persistent_cohomology::Field_Zp	typeref:typename:Element
plus_equal	multipers/gudhi/gudhi/Persistent_cohomology/Multi_field.h	/^  Element plus_equal(const Element& x, const Element& y) {$/;"	f	class:Gudhi::persistent_cohomology::Multi_field	typeref:typename:Element
plus_equal_column	multipers/gudhi/gudhi/Persistent_cohomology.h	/^  void plus_equal_column(Column & target, A_ds_type const& other  \/\/ value_type is pair<Simple/;"	f	class:Gudhi::persistent_cohomology::Persistent_cohomology	typeref:typename:void
plus_times_equal	multipers/gudhi/gudhi/Persistent_cohomology/Field_Zp.h	/^  Element plus_times_equal(const Element& x, const Element& y, const Element& w) {$/;"	f	class:Gudhi::persistent_cohomology::Field_Zp	typeref:typename:Element
plus_times_equal	multipers/gudhi/gudhi/Persistent_cohomology/Multi_field.h	/^  Element plus_times_equal(const Element& x, const Element& y, const Element& w) {$/;"	f	class:Gudhi::persistent_cohomology::Multi_field	typeref:typename:Element
point	multipers/gudhi/gudhi/Points_off_io.h	/^  void point(const std::vector<double>& point) {$/;"	f	class:Gudhi::Points_off_visitor_reader	typeref:typename:void
point_cloud	multipers/gudhi/gudhi/Points_off_io.h	/^  std::vector<Point_d> point_cloud;$/;"	m	class:Gudhi::Points_off_reader	typeref:typename:std::vector<Point_d>
point_cloud	multipers/gudhi/gudhi/Points_off_io.h	/^  std::vector<Point_d> point_cloud;$/;"	m	class:Gudhi::Points_off_visitor_reader	typeref:typename:std::vector<Point_d>
point_type	multipers/multiparameter_module_approximation/utilities.h	/^using point_type = Gudhi::multi_filtration::$/;"	t	namespace:Gudhi::multiparameter::mma	typeref:typename:Gudhi::multi_filtration::One_critical_filtration<value_type>
pointer	multipers/gudhi/gudhi/Bitmap_cubical_complex.h	/^    typedef value_type* pointer;$/;"	t	class:Gudhi::cubical_complex::Bitmap_cubical_complex::Skeleton_simplex_iterator	typeref:typename:value_type *
pointer	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^    typedef value_type* pointer;$/;"	t	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base::Top_dimensional_cells_iterator	typeref:typename:value_type *
pointer	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^    typedef value_type* pointer;$/;"	t	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base::Vertices_iterator	typeref:typename:value_type *
pointer	multipers/gudhi/gudhi/Bitmap_cubical_complex_periodic_boundary_conditions_base.h	/^    typedef value_type* pointer;$/;"	t	class:Gudhi::cubical_complex::Bitmap_cubical_complex_periodic_boundary_conditions_base::Vertices_iterator	typeref:typename:value_type *
pointer	multipers/gudhi/gudhi/Simple_object_pool.h	/^  typedef T* pointer;$/;"	t	class:Gudhi::Simple_object_pool	typeref:typename:T *
pos_index	multipers/gudhi/mma_interface_coh.h	/^  using pos_index = typename MatrixComplex::Simplex_key;$/;"	t	class:Gudhi::multiparameter::truc_interface::Persistence_backend_cohomology	typeref:typename:MatrixComplex::Simplex_key
pos_index	multipers/gudhi/mma_interface_h0.h	/^  using pos_index = int;$/;"	t	class:Gudhi::multiparameter::truc_interface::Persistence_backend_h0	typeref:typename:int
pos_index	multipers/gudhi/mma_interface_matrix.h	/^  using pos_index = typename matrix_type::Pos_index;$/;"	t	class:Gudhi::multiparameter::truc_interface::Persistence_backend_matrix	typeref:typename:matrix_type::Pos_index
position	multipers/gudhi/gudhi/Bitmap_cubical_complex.h	/^    std::size_t position;$/;"	m	class:Gudhi::cubical_complex::Bitmap_cubical_complex::Skeleton_simplex_iterator	typeref:typename:std::size_t
positionToBar_	multipers/gudhi/naive_merge_tree.h	/^    std::vector<index> positionToBar_;$/;"	m	struct:Naive_merge_forest::Barcode	typeref:typename:std::vector<index>
positionToID_	multipers/gudhi/naive_merge_tree.h	/^  std::vector<index> positionToID_;$/;"	m	class:Naive_merge_forest	typeref:typename:std::vector<index>
positionToIndex_	multipers/gudhi/gudhi/Persistence_matrix/Position_to_index_overlay.h	/^  std::vector<Index> positionToIndex_;  \/**< Map from @ref PosIdx index to @ref MatIdx index. */;"	m	class:Gudhi::persistence_matrix::Position_to_index_overlay	typeref:typename:std::vector<Index>
positive_negative_transpose	multipers/gudhi/gudhi/Persistence_matrix/chain_vine_swap.h	/^  void positive_negative_transpose(ID_index pivot1, ID_index pivot2) {$/;"	f	class:Gudhi::persistence_matrix::Chain_barcode_swap	typeref:typename:void
positive_transpose	multipers/gudhi/gudhi/Persistence_matrix/chain_vine_swap.h	/^  void positive_transpose(ID_index pivot1, ID_index pivot2) {$/;"	f	class:Gudhi::persistence_matrix::Chain_barcode_swap	typeref:typename:void
precision	multipers/multiparameter_module_approximation/approximation.h	/^  const value_type precision;$/;"	m	class:Gudhi::multiparameter::mma::LineIterator	typeref:typename:const value_type
predicate_	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_star_simplex_iterators.h	/^  is_coface predicate_;$/;"	m	class:Gudhi::Simplex_tree_optimized_cofaces_rooted_subtrees_simplex_iterator	typeref:typename:is_coface
predict	multipers/ml/kernels.py	/^    def predict(self, X):$/;"	m	class:DistanceMatrices2DistancesList
predict	multipers/ml/signed_measures.py	/^    def predict(self, X):$/;"	m	class:SignedMeasure2SlicedWassersteinDistance
primes_	multipers/gudhi/gudhi/Fields/Multi_field.h	/^  static inline const std::vector<unsigned int> primes_ = []() {$/;"	m	class:Gudhi::persistence_fields::Multi_field_element	typeref:typename:const std::vector<unsigned int>
primes_	multipers/gudhi/gudhi/Fields/Multi_field_operators.h	/^  std::vector<unsigned int> primes_;                \/**< All characteristics. *\/$/;"	m	class:Gudhi::persistence_fields::Multi_field_operators	typeref:typename:std::vector<unsigned int>
primes_	multipers/gudhi/gudhi/Fields/Multi_field_shared.h	/^  static inline std::vector<unsigned int> primes_;          \/**< All characteristics. *\/$/;"	m	class:Gudhi::persistence_fields::Shared_multi_field_element	typeref:typename:std::vector<unsigned int>
primes_	multipers/gudhi/gudhi/Fields/Multi_field_small.h	/^  static inline const std::vector<Characteristic> primes_ = []() {$/;"	m	class:Gudhi::persistence_fields::Multi_field_element_with_small_characteristics	typeref:typename:const std::vector<Characteristic>
primes_	multipers/gudhi/gudhi/Fields/Multi_field_small_operators.h	/^  std::vector<unsigned int> primes_;                \/**< All characteristics. *\/$/;"	m	class:Gudhi::persistence_fields::Multi_field_operators_with_small_characteristics	typeref:typename:std::vector<unsigned int>
primes_	multipers/gudhi/gudhi/Fields/Multi_field_small_shared.h	/^  static inline std::vector<Characteristic> primes_;         \/**< All characteristics. *\/$/;"	m	class:Gudhi::persistence_fields::Shared_multi_field_element_with_small_characteristics	typeref:typename:std::vector<Characteristic>
primes_	multipers/gudhi/gudhi/Persistent_cohomology/Multi_field.h	/^  std::vector<int> primes_;       \/\/ all the characteristics of the fields$/;"	m	class:Gudhi::persistent_cohomology::Multi_field	typeref:typename:std::vector<int>
print	multipers/gudhi/gudhi/Matrix.h	/^inline void Matrix<PersistenceMatrixOptions>::print(Index startCol, Index endCol, Index startRow/;"	f	class:Gudhi::persistence_matrix::Matrix	typeref:typename:void
print	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix.h	/^inline void Base_matrix<Master_matrix>::print(Index startCol, Index endCol, Index startRow, Inde/;"	f	class:Gudhi::persistence_matrix::Base_matrix	typeref:typename:void
print	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix_with_column_compression.h	/^inline void Base_matrix_with_column_compression<Master_matrix>::print() $/;"	f	class:Gudhi::persistence_matrix::Base_matrix_with_column_compression	typeref:typename:void
print	multipers/gudhi/gudhi/Persistence_matrix/Boundary_matrix.h	/^inline void Boundary_matrix<Master_matrix>::print(Index startCol, Index endCol, Index startRow, /;"	f	class:Gudhi::persistence_matrix::Boundary_matrix	typeref:typename:void
print	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^inline void Chain_matrix<Master_matrix>::print() const$/;"	f	class:Gudhi::persistence_matrix::Chain_matrix	typeref:typename:void
print	multipers/gudhi/gudhi/Persistence_matrix/Id_to_index_overlay.h	/^inline void Id_to_index_overlay<Underlying_matrix, Master_matrix>::print() $/;"	f	class:Gudhi::persistence_matrix::Id_to_index_overlay	typeref:typename:void
print	multipers/gudhi/gudhi/Persistence_matrix/Position_to_index_overlay.h	/^inline void Position_to_index_overlay<Underlying_matrix, Master_matrix>::print() $/;"	f	class:Gudhi::persistence_matrix::Position_to_index_overlay	typeref:typename:void
print	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^inline void RU_matrix<Master_matrix>::print(Index startCol, Index endCol, Index startRow, Index /;"	f	class:Gudhi::persistence_matrix::RU_matrix	typeref:typename:void
print	multipers/gudhi/naive_merge_tree.h	/^  void print(std::ostream &stream) const{$/;"	f	class:Naive_bottleneck_forest	typeref:typename:void
print_counter	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^    void print_counter() const {$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base::Top_dimensional_cells_iterator	typeref:typename:void
print_counter	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^    void print_counter() const {$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base::Vertices_iterator	typeref:typename:void
print_counter	multipers/gudhi/gudhi/Bitmap_cubical_complex_periodic_boundary_conditions_base.h	/^    void print_counter() const {$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_periodic_boundary_conditions_base::Vertices_iterator	typeref:typename:void
print_data	multipers/tensor/tensor.h	/^  void print_data() const {$/;"	f	class:tensor::static_tensor_view_view	typeref:typename:void
print_hasse	multipers/gudhi/gudhi/Simplex_tree.h	/^  void print_hasse(std::ostream& os) {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:void
print_matrices	multipers/multiparameter_module_approximation/ru_matrix.h	/^inline void RU_matrix<Column_type>::print_matrices() {$/;"	f	class:Gudhi::multiparameter::mma::RU_matrix	typeref:typename:void
process_edges	multipers/gudhi/gudhi/Flag_complex_edge_collapser.h	/^  void process_edges(FilteredEdgeRange const& edges, Delay&& delay) {$/;"	f	struct:Gudhi::collapse::Flag_complex_edge_collapser	typeref:typename:void
process_tempita	setup.py	/^def process_tempita(fromfile):$/;"	f
prod	multipers/multiparameter_module_approximation/combinatory.h	/^unsigned int prod(const std::vector<unsigned int>& toMultiply,$/;"	f	namespace:Gudhi::multiparameter::mma::Combinatorics	typeref:typename:unsigned int
prod_characteristics_	multipers/gudhi/gudhi/Persistent_cohomology/Multi_field.h	/^  Element prod_characteristics_;  \/\/ product of characteristics of the fields$/;"	m	class:Gudhi::persistent_cohomology::Multi_field	typeref:typename:Element
productOfAllCharacteristics_	multipers/gudhi/gudhi/Fields/Multi_field.h	/^  static inline const Characteristic productOfAllCharacteristics_ = []() {$/;"	m	class:Gudhi::persistence_fields::Multi_field_element	typeref:typename:const Characteristic
productOfAllCharacteristics_	multipers/gudhi/gudhi/Fields/Multi_field_operators.h	/^  Characteristic productOfAllCharacteristics_; \/**< Product of all characteristics. *\/$/;"	m	class:Gudhi::persistence_fields::Multi_field_operators	typeref:typename:Characteristic
productOfAllCharacteristics_	multipers/gudhi/gudhi/Fields/Multi_field_shared.h	/^  static inline Characteristic productOfAllCharacteristics_ = 0; \/**< Product of all characteri/;"	m	class:Gudhi::persistence_fields::Shared_multi_field_element	typeref:typename:Characteristic
productOfAllCharacteristics_	multipers/gudhi/gudhi/Fields/Multi_field_small.h	/^  static inline constexpr Characteristic productOfAllCharacteristics_ = []() {$/;"	m	class:Gudhi::persistence_fields::Multi_field_element_with_small_characteristics	typeref:typename:Characteristic
productOfAllCharacteristics_	multipers/gudhi/gudhi/Fields/Multi_field_small_operators.h	/^  Characteristic productOfAllCharacteristics_; \/**< Product of all characteristics. *\/$/;"	m	class:Gudhi::persistence_fields::Multi_field_operators_with_small_characteristics	typeref:typename:Characteristic
productOfAllCharacteristics_	multipers/gudhi/gudhi/Fields/Multi_field_small_shared.h	/^  static inline Characteristic productOfAllCharacteristics_; \/**< Product of all characteristic/;"	m	class:Gudhi::persistence_fields::Shared_multi_field_element_with_small_characteristics	typeref:typename:Characteristic
project	docs/conf.py	/^project = "multipers"$/;"	v
project_onto_grid	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  void project_onto_grid(const std::vector<oned_array> &grid, bool coordinate = true) {$/;"	f	class:Gudhi::multi_filtration::Multi_critical_filtration	typeref:typename:void
project_onto_grid	multipers/gudhi/gudhi/One_critical_filtration.h	/^  void project_onto_grid(const std::vector<oned_array> &grid, bool coordinate = true) {$/;"	f	class:Gudhi::multi_filtration::One_critical_filtration	typeref:typename:void
propagate_from_vertices_rec	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^void Bitmap_cubical_complex_base<T>::propagate_from_vertices_rec (int special_dim, int current_d/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base	typeref:typename:void
prune_above_dimension	multipers/gudhi/gudhi/Simplex_tree.h	/^  bool prune_above_dimension(int dimension) {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:bool
prune_above_dimension	multipers/gudhi/truc.h	/^  inline void prune_above_dimension(int max_dim) {$/;"	f	class:Gudhi::multiparameter::truc_interface::Truc	typeref:typename:void
prune_above_dimension	multipers/gudhi/truc.h	/^  int prune_above_dimension(int dim) { throw; }$/;"	f	class:Gudhi::multiparameter::truc_interface::SimplicialStructure	typeref:typename:int
prune_above_dimension	multipers/gudhi/truc.h	/^  int prune_above_dimension(int dim) {$/;"	f	class:Gudhi::multiparameter::truc_interface::PresentationStructure	typeref:typename:int
prune_above_filtration	multipers/gudhi/gudhi/Simplex_tree.h	/^  bool prune_above_filtration(const Filtration_value& filtration) {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:bool
ptrs	multipers/tensor/tensor.h	/^  std::vector<dtype *> ptrs;$/;"	m	class:tensor::static_tensor_view_view	typeref:typename:std::vector<dtype * >
pts	benchmarks/stuff.py	/^    pts = np.asarray(available_dataset[dataset](n))$/;"	v
pts_indices_type	multipers/gudhi/Simplex_tree_multi_interface.h	/^  using pts_indices_type = std::vector<std::vector<int32_t>>;$/;"	t	class:Gudhi::multiparameter::python_interface::Simplex_tree_multi_interface	typeref:typename:std::vector<std::vector<int32_t>>
pts_to_indices	multipers/gudhi/Simplex_tree_multi_interface.h	/^  std::pair<pts_indices_type, pts_indices_type> inline pts_to_indices($/;"	f	class:Gudhi::multiparameter::python_interface::Simplex_tree_multi_interface	typeref:typename:std::pair<pts_indices_type,pts_indices_type>
pull_to_greatest_common_lower_bound	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  void pull_to_greatest_common_lower_bound(const Generator &x) {$/;"	f	class:Gudhi::multi_filtration::Multi_critical_filtration	typeref:typename:void
pull_to_greatest_common_lower_bound	multipers/gudhi/gudhi/One_critical_filtration.h	/^  bool pull_to_greatest_common_lower_bound(const One_critical_filtration &x) {$/;"	f	class:Gudhi::multi_filtration::One_critical_filtration	typeref:typename:bool
push_back	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^inline void Heap_column<Master_matrix>::push_back(const Entry& entry)$/;"	f	class:Gudhi::persistence_matrix::Heap_column	typeref:typename:void
push_back	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^inline void Intrusive_list_column<Master_matrix>::push_back(const Entry& entry)$/;"	f	class:Gudhi::persistence_matrix::Intrusive_list_column	typeref:typename:void
push_back	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^inline void Intrusive_set_column<Master_matrix>::push_back(const Entry& entry)$/;"	f	class:Gudhi::persistence_matrix::Intrusive_set_column	typeref:typename:void
push_back	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^inline void List_column<Master_matrix>::push_back(const Entry& entry)$/;"	f	class:Gudhi::persistence_matrix::List_column	typeref:typename:void
push_back	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^inline void Naive_vector_column<Master_matrix>::push_back(const Entry& entry)$/;"	f	class:Gudhi::persistence_matrix::Naive_vector_column	typeref:typename:void
push_back	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^inline void Set_column<Master_matrix>::push_back(const Entry& entry)$/;"	f	class:Gudhi::persistence_matrix::Set_column	typeref:typename:void
push_back	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^inline void Small_vector_column<Master_matrix>::push_back(const Entry& entry)$/;"	f	class:Gudhi::persistence_matrix::Small_vector_column	typeref:typename:void
push_back	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^inline void Unordered_set_column<Master_matrix>::push_back(const Entry& entry)$/;"	f	class:Gudhi::persistence_matrix::Unordered_set_column	typeref:typename:void
push_back	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^inline void Vector_column<Master_matrix>::push_back(const Entry& entry)$/;"	f	class:Gudhi::persistence_matrix::Vector_column	typeref:typename:void
push_back_node	multipers/data/graphs.py	/^    def push_back_node(graph):$/;"	f	function:compute_ricci	file:
push_in_elbow	multipers/multi_parameter_rank_invariant/rank_invariant.h	/^inline void push_in_elbow(index_type &i, index_type &j, const index_type I, const index_type J) /;"	f	namespace:Gudhi::multiparameter::rank_invariant	typeref:typename:void
push_to	multipers/gudhi/truc.h	/^    inline void push_to(const Subfiltration &f) {$/;"	f	class:Gudhi::multiparameter::truc_interface::Truc::TrucThread	typeref:typename:void
push_to	multipers/gudhi/truc.h	/^  inline void push_to(const SubFiltration &f) {$/;"	f	class:Gudhi::multiparameter::truc_interface::Truc	typeref:typename:void
push_to_grid	multipers/grids.pyx	/^def push_to_grid(some_float[:,:] points, grid, bool return_coordinate=False):$/;"	f
push_to_least_common_upper_bound	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  void push_to_least_common_upper_bound(const Generator &x) {$/;"	f	class:Gudhi::multi_filtration::Multi_critical_filtration	typeref:typename:void
push_to_least_common_upper_bound	multipers/gudhi/gudhi/One_critical_filtration.h	/^  bool push_to_least_common_upper_bound(const One_critical_filtration &x) {$/;"	f	class:Gudhi::multi_filtration::One_critical_filtration	typeref:typename:bool
push_to_out	multipers/gudhi/truc.h	/^  inline void push_to_out(const SubFiltration &f,$/;"	f	class:Gudhi::multiparameter::truc_interface::Truc	typeref:typename:void
put_data_to_bins	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^void Bitmap_cubical_complex_base<T>::put_data_to_bins(T diameter_of_bin) {$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base	typeref:typename:void
put_data_to_bins	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^void Bitmap_cubical_complex_base<T>::put_data_to_bins(std::size_t number_of_bins) {$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base	typeref:typename:void
python_bar	multipers/multiparameter_module_approximation/utilities.h	/^  using python_bar =$/;"	t	struct:Gudhi::multiparameter::mma::MultiDiagram	typeref:typename:std::pair<std::vector<typename filtration_type::value_type>,std::vector<typename filtration_type::value_type>>
python_bar	multipers/multiparameter_module_approximation/utilities.h	/^using python_bar =$/;"	t	struct:Gudhi::multiparameter::mma::MultiDiagrams	typeref:typename:std::pair<std::vector<value_type>,std::vector<value_type>>
python_filtration_type	multipers/multiparameter_module_approximation/utilities.h	/^using python_filtration_type = std::vector<value_type>;$/;"	t	namespace:Gudhi::multiparameter::mma	typeref:typename:std::vector<value_type>
python_indices_type	multipers/function_rips.pyx	/^python_indices_type=np.int32$/;"	v
python_interface	multipers/gudhi/Simplex_tree_multi_interface.h	/^namespace python_interface {$/;"	n	namespace:Gudhi::multiparameter
python_multifiltration_type	multipers/multiparameter_module_approximation/utilities.h	/^using python_multifiltration_type = std::vector<python_filtration_type>;$/;"	t	namespace:Gudhi::multiparameter::mma	typeref:typename:std::vector<python_filtration_type>
python_tensor_dtype	multipers/function_rips.pyx	/^python_tensor_dtype = np.int32$/;"	v
python_value_type	multipers/function_rips.pyx	/^python_value_type=np.float64$/;"	v
quicksort_and_record_permutation	multipers/multiparameter_module_approximation/combinatory.h	/^void quicksort_and_record_permutation($/;"	f	namespace:Gudhi::multiparameter::mma::Combinatorics	typeref:typename:void
quiet_NaN	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  static constexpr Gudhi::multi_filtration::Multi_critical_filtration<T> quiet_NaN() noexcept {$/;"	f	class:std::numeric_limits	typeref:typename:Gudhi::multi_filtration::Multi_critical_filtration<T>
quiet_NaN	multipers/gudhi/gudhi/One_critical_filtration.h	/^  static constexpr Gudhi::multi_filtration::One_critical_filtration<T> quiet_NaN() noexcept {$/;"	f	class:std::numeric_limits	typeref:typename:Gudhi::multi_filtration::One_critical_filtration<T>
radius_to_coordinate	multipers/multi_parameter_rank_invariant/function_rips.h	/^inline radius_to_coordinate(Simplex_tree_std &st) {$/;"	f	namespace:Gudhi::multiparameter::function_rips	typeref:typename:std::pair<std::map<value_type,unsigned int>,std::vector<value_type>>
random_st	multipers/tests/__init__.py	/^def random_st(npts=100, num_parameters=2, max_dim=2):$/;"	f
rank_decomposition_by_rectangles	multipers/point_measure.pyx	/^def rank_decomposition_by_rectangles(rank_invariant:np.ndarray, bool threshold=False):$/;"	f
rank_invariant	multipers/multi_parameter_rank_invariant/rank_invariant.h	/^namespace rank_invariant { $/;"	n	namespace:Gudhi::multiparameter
rbegin	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^inline typename Heap_column<Master_matrix>::const_reverse_iterator Heap_column<Master_matrix>::r/;"	f	class:Gudhi::persistence_matrix::Heap_column	typeref:typename:Heap_column<Master_matrix>::const_reverse_iterator
rbegin	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^inline typename Heap_column<Master_matrix>::reverse_iterator Heap_column<Master_matrix>::rbegin(/;"	f	class:Gudhi::persistence_matrix::Heap_column	typeref:typename:Heap_column<Master_matrix>::reverse_iterator
rbegin	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^Intrusive_list_column<Master_matrix>::rbegin() const noexcept$/;"	f	class:Gudhi::persistence_matrix::Intrusive_list_column	typeref:typename:Intrusive_list_column<Master_matrix>::const_reverse_iterator
rbegin	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^Intrusive_list_column<Master_matrix>::rbegin() noexcept$/;"	f	class:Gudhi::persistence_matrix::Intrusive_list_column	typeref:typename:Intrusive_list_column<Master_matrix>::reverse_iterator
rbegin	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^Intrusive_set_column<Master_matrix>::rbegin() const noexcept$/;"	f	class:Gudhi::persistence_matrix::Intrusive_set_column	typeref:typename:Intrusive_set_column<Master_matrix>::const_reverse_iterator
rbegin	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^Intrusive_set_column<Master_matrix>::rbegin() noexcept$/;"	f	class:Gudhi::persistence_matrix::Intrusive_set_column	typeref:typename:Intrusive_set_column<Master_matrix>::reverse_iterator
rbegin	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^inline typename List_column<Master_matrix>::const_reverse_iterator List_column<Master_matrix>::r/;"	f	class:Gudhi::persistence_matrix::List_column	typeref:typename:List_column<Master_matrix>::const_reverse_iterator
rbegin	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^inline typename List_column<Master_matrix>::reverse_iterator List_column<Master_matrix>::rbegin(/;"	f	class:Gudhi::persistence_matrix::List_column	typeref:typename:List_column<Master_matrix>::reverse_iterator
rbegin	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^Naive_vector_column<Master_matrix>::rbegin() noexcept$/;"	f	class:Gudhi::persistence_matrix::Naive_vector_column	typeref:typename:Naive_vector_column<Master_matrix>::reverse_iterator
rbegin	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^inline typename Naive_vector_column<Master_matrix>::const_reverse_iterator Naive_vector_column<M/;"	f	class:Gudhi::persistence_matrix::Naive_vector_column	typeref:typename:Naive_vector_column<Master_matrix>::const_reverse_iterator
rbegin	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^inline typename Set_column<Master_matrix>::const_reverse_iterator Set_column<Master_matrix>::rbe/;"	f	class:Gudhi::persistence_matrix::Set_column	typeref:typename:Set_column<Master_matrix>::const_reverse_iterator
rbegin	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^inline typename Set_column<Master_matrix>::reverse_iterator Set_column<Master_matrix>::rbegin() /;"	f	class:Gudhi::persistence_matrix::Set_column	typeref:typename:Set_column<Master_matrix>::reverse_iterator
rbegin	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^Small_vector_column<Master_matrix>::rbegin() noexcept$/;"	f	class:Gudhi::persistence_matrix::Small_vector_column	typeref:typename:Small_vector_column<Master_matrix>::reverse_iterator
rbegin	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^inline typename Small_vector_column<Master_matrix>::const_reverse_iterator Small_vector_column<M/;"	f	class:Gudhi::persistence_matrix::Small_vector_column	typeref:typename:Small_vector_column<Master_matrix>::const_reverse_iterator
rbegin	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^inline typename Vector_column<Master_matrix>::const_reverse_iterator Vector_column<Master_matrix/;"	f	class:Gudhi::persistence_matrix::Vector_column	typeref:typename:Vector_column<Master_matrix>::const_reverse_iterator
rbegin	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^inline typename Vector_column<Master_matrix>::reverse_iterator Vector_column<Master_matrix>::rbe/;"	f	class:Gudhi::persistence_matrix::Vector_column	typeref:typename:Vector_column<Master_matrix>::reverse_iterator
rdf	docs/icon.svg	/^   xmlns:dc="http:\/\/purl.org\/dc\/elements\/1.1\/">$/;"	n	uri:http://www.w3.org/1999/02/22-rdf-syntax-ns#
read	multipers/gudhi/gudhi/Off_reader.h	/^  bool read(OffVisitor& off_visitor) {$/;"	f	class:Gudhi::Off_reader	typeref:typename:bool
read_edges	multipers/gudhi/gudhi/Flag_complex_edge_collapser.h	/^  void read_edges(FilteredEdgeRange const&r){$/;"	f	struct:Gudhi::collapse::Flag_complex_edge_collapser	typeref:typename:void
read_graph	multipers/gudhi/gudhi/reader_utils.h	/^Graph_t read_graph(std::string file_name) {$/;"	f	namespace:Gudhi	typeref:typename:Graph_t
read_hasse_simplex	multipers/gudhi/gudhi/reader_utils.h	/^bool read_hasse_simplex(std::istream& in_, std::vector<Simplex_key>& boundary, Filtration_value&/;"	f	namespace:Gudhi	typeref:typename:bool
read_lower_triangular_matrix_from_csv_file	multipers/gudhi/gudhi/reader_utils.h	/^std::vector<std::vector<Filtration_value>> read_lower_triangular_matrix_from_csv_file(const std:/;"	f	namespace:Gudhi	typeref:typename:std::vector<std::vector<Filtration_value>>
read_off	multipers/gudhi/gudhi/Off_reader.h	/^void read_off(const std::string& name_file_off, OFFVisitor& vis) {$/;"	f	namespace:Gudhi	typeref:typename:void
read_off_faces	multipers/gudhi/gudhi/Off_reader.h	/^  bool read_off_faces(OffVisitor& visitor) {$/;"	f	class:Gudhi::Off_reader	typeref:typename:bool
read_off_points	multipers/gudhi/gudhi/Off_reader.h	/^  bool read_off_points(OffVisitor& visitor) {$/;"	f	class:Gudhi::Off_reader	typeref:typename:bool
read_off_preamble	multipers/gudhi/gudhi/Off_reader.h	/^  bool read_off_preamble(OffVisitor& off_visitor) {$/;"	f	class:Gudhi::Off_reader	typeref:typename:bool
read_perseus_style_file	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^void Bitmap_cubical_complex_base<T>::read_perseus_style_file(const char* perseus_style_file) {$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base	typeref:typename:void
read_persistence_intervals_and_dimension	multipers/gudhi/gudhi/reader_utils.h	/^void read_persistence_intervals_and_dimension(std::string const& filename, OutputIterator out) {$/;"	f	namespace:Gudhi	typeref:typename:void
read_persistence_intervals_grouped_by_dimension	multipers/gudhi/gudhi/reader_utils.h	/^inline std::map<int, std::vector<std::pair<double, double>>> read_persistence_intervals_grouped_/;"	f	namespace:Gudhi	typeref:typename:std::map<int,std::vector<std::pair<double,double>>>
read_persistence_intervals_in_dimension	multipers/gudhi/gudhi/reader_utils.h	/^inline std::vector<std::pair<double, double>> read_persistence_intervals_in_dimension(std::strin/;"	f	namespace:Gudhi	typeref:typename:std::vector<std::pair<double,double>>
read_points	multipers/gudhi/gudhi/reader_utils.h	/^inline void read_points(std::string file_name, std::vector<std::vector<double>>& points) {$/;"	f	namespace:Gudhi	typeref:typename:void
read_scc_file	multipers/gudhi/scc_io.h	/^inline Slicer read_scc_file(const std::string& inFilePath,$/;"	f	typeref:typename:Slicer
read_simplex	multipers/gudhi/gudhi/reader_utils.h	/^bool read_simplex(std::istream& in_, std::vector<Vertex_handle>& simplex, Filtration_value& fil)/;"	f	namespace:Gudhi	typeref:typename:bool
rec_coface	multipers/gudhi/gudhi/Simplex_tree.h	/^  void rec_coface(std::vector<Vertex_handle>& vertices,$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:void
rec_copy	multipers/gudhi/gudhi/Simplex_tree.h	/^  void rec_copy(Siblings* sib, OtherSiblings* sib_source, F&& translate_filtration_value) {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:void
rec_delete	multipers/gudhi/gudhi/Simplex_tree.h	/^  void rec_delete(Siblings* sib) {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:void
rec_deserialize	multipers/gudhi/gudhi/Simplex_tree.h	/^  const char* rec_deserialize(Siblings* sib, Vertex_handle members_size, const char* ptr, int di/;"	f	class:Gudhi::Simplex_tree	typeref:typename:const char *
rec_equal	multipers/gudhi/gudhi/Simplex_tree.h	/^  bool rec_equal(Siblings* s1, OtherSiblings* s2) {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:bool
rec_for_each_simplex	multipers/gudhi/gudhi/Simplex_tree.h	/^  void rec_for_each_simplex(Siblings* sib, int dim, Fun&& fun) {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:void
rec_insert_simplex_and_subfaces_sorted	multipers/gudhi/gudhi/Simplex_tree.h	/^  std::pair<Simplex_handle, bool> rec_insert_simplex_and_subfaces_sorted(Siblings* sib,$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:std::pair<Simplex_handle,bool>
rec_prune_above_dimension	multipers/gudhi/gudhi/Simplex_tree.h	/^  bool rec_prune_above_dimension(Siblings* sib, int dim, int actual_dim) {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:bool
rec_prune_above_filtration	multipers/gudhi/gudhi/Simplex_tree.h	/^  bool rec_prune_above_filtration(Siblings* sib, const Filtration_value& filt) {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:bool
rec_reset_filtration	multipers/gudhi/gudhi/Simplex_tree.h	/^  void rec_reset_filtration(Siblings* sib, const Filtration_value& filt_value, int min_depth) {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:void
rec_serialize	multipers/gudhi/gudhi/Simplex_tree.h	/^  char* rec_serialize(Siblings* sib, char* buffer) {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:char *
rect501	docs/icon.svg	/^         id="rect501" \/>$/;"	i
recursive_insert	multipers_old.py	/^def recursive_insert(st, base_splx, splx, name_dict, filt):$/;"	f
reduce	multipers/ml/point_clouds.py	/^        def reduce(st):$/;"	f	member:PointCloud2FilteredComplex._get_sts_rips	file:
reduce	multipers/multiparameter_module_approximation/vector_matrix.h	/^inline void Vector_matrix<Column_type>::reduce(barcode_type& barcode)$/;"	f	class:Gudhi::multiparameter::mma::Vector_matrix	typeref:typename:void
reduce_complex	multipers/io.pyx	/^def reduce_complex($/;"	f
reduce_grid	multipers/ml/mma.py	/^from multipers.grids import compute_grid as reduce_grid$/;"	Y	nameref:unknown:compute_grid
reduce_grid	multipers/ml/signed_measures.py	/^from multipers.grids import compute_grid as reduce_grid$/;"	Y	nameref:unknown:compute_grid
reducedMatrixR_	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^  R_matrix reducedMatrixR_;       \/**< R. *\/$/;"	m	class:Gudhi::persistence_matrix::RU_matrix	typeref:typename:R_matrix
reducedMatrixR_	multipers/multiparameter_module_approximation/ru_matrix.h	/^  Vector_matrix<Column_type> reducedMatrixR_;$/;"	m	class:Gudhi::multiparameter::mma::RU_matrix	typeref:typename:Vector_matrix<Column_type>
reference	multipers/gudhi/gudhi/Bitmap_cubical_complex.h	/^    typedef value_type reference;$/;"	t	class:Gudhi::cubical_complex::Bitmap_cubical_complex::Skeleton_simplex_iterator	typeref:typename:value_type
reference	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^    typedef value_type reference;$/;"	t	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base::Top_dimensional_cells_iterator	typeref:typename:value_type
reference	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^    typedef value_type reference;$/;"	t	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base::Vertices_iterator	typeref:typename:value_type
reference	multipers/gudhi/gudhi/Bitmap_cubical_complex_periodic_boundary_conditions_base.h	/^    typedef value_type reference;$/;"	t	class:Gudhi::cubical_complex::Bitmap_cubical_complex_periodic_boundary_conditions_base::Vertices_iterator	typeref:typename:value_type
remaining_iterations	multipers/multiparameter_module_approximation/approximation.h	/^  int remaining_iterations;$/;"	m	class:Gudhi::multiparameter::mma::LineIterator	typeref:typename:int
remove_column	multipers/gudhi/gudhi/Matrix.h	/^inline void Matrix<PersistenceMatrixOptions>::remove_column(Index columnIndex) $/;"	f	class:Gudhi::persistence_matrix::Matrix	typeref:typename:void
remove_column	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix.h	/^inline void Base_matrix<Master_matrix>::remove_column(Index columnIndex) $/;"	f	class:Gudhi::persistence_matrix::Base_matrix	typeref:typename:void
remove_empty_generators	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  void remove_empty_generators(bool include_infinities = false) {$/;"	f	class:Gudhi::multi_filtration::Multi_critical_filtration	typeref:typename:void
remove_last	multipers/gudhi/gudhi/Matrix.h	/^inline void Matrix<PersistenceMatrixOptions>::remove_last() $/;"	f	class:Gudhi::persistence_matrix::Matrix	typeref:typename:void
remove_last	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix.h	/^inline void Base_matrix<Master_matrix>::remove_last() $/;"	f	class:Gudhi::persistence_matrix::Base_matrix	typeref:typename:void
remove_last	multipers/gudhi/gudhi/Persistence_matrix/Boundary_matrix.h	/^inline typename Boundary_matrix<Master_matrix>::Index Boundary_matrix<Master_matrix>::remove_las/;"	f	class:Gudhi::persistence_matrix::Boundary_matrix	typeref:typename:Boundary_matrix<Master_matrix>::Index
remove_last	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^inline void Chain_matrix<Master_matrix>::remove_last()$/;"	f	class:Gudhi::persistence_matrix::Chain_matrix	typeref:typename:void
remove_last	multipers/gudhi/gudhi/Persistence_matrix/Id_to_index_overlay.h	/^inline void Id_to_index_overlay<Underlying_matrix, Master_matrix>::remove_last() $/;"	f	class:Gudhi::persistence_matrix::Id_to_index_overlay	typeref:typename:void
remove_last	multipers/gudhi/gudhi/Persistence_matrix/Position_to_index_overlay.h	/^inline void Position_to_index_overlay<Underlying_matrix, Master_matrix>::remove_last() $/;"	f	class:Gudhi::persistence_matrix::Position_to_index_overlay	typeref:typename:void
remove_last	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^inline void RU_matrix<Master_matrix>::remove_last()$/;"	f	class:Gudhi::persistence_matrix::RU_matrix	typeref:typename:void
remove_maximal_cell	multipers/gudhi/gudhi/Matrix.h	/^inline void Matrix<PersistenceMatrixOptions>::remove_maximal_cell(ID_index cellIndex,$/;"	f	class:Gudhi::persistence_matrix::Matrix	typeref:typename:void
remove_maximal_cell	multipers/gudhi/gudhi/Matrix.h	/^inline void Matrix<PersistenceMatrixOptions>::remove_maximal_cell(Index columnIndex) $/;"	f	class:Gudhi::persistence_matrix::Matrix	typeref:typename:void
remove_maximal_cell	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^inline void Chain_matrix<Master_matrix>::remove_maximal_cell(ID_index cellID)$/;"	f	class:Gudhi::persistence_matrix::Chain_matrix	typeref:typename:void
remove_maximal_cell	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^inline void Chain_matrix<Master_matrix>::remove_maximal_cell(ID_index cellID,$/;"	f	class:Gudhi::persistence_matrix::Chain_matrix	typeref:typename:void
remove_maximal_cell	multipers/gudhi/gudhi/Persistence_matrix/Id_to_index_overlay.h	/^inline void Id_to_index_overlay<Underlying_matrix, Master_matrix>::remove_maximal_cell($/;"	f	class:Gudhi::persistence_matrix::Id_to_index_overlay	typeref:typename:void
remove_maximal_cell	multipers/gudhi/gudhi/Persistence_matrix/Id_to_index_overlay.h	/^inline void Id_to_index_overlay<Underlying_matrix, Master_matrix>::remove_maximal_cell(ID_index /;"	f	class:Gudhi::persistence_matrix::Id_to_index_overlay	typeref:typename:void
remove_maximal_cell	multipers/gudhi/gudhi/Persistence_matrix/Position_to_index_overlay.h	/^inline void Position_to_index_overlay<Underlying_matrix, Master_matrix>::remove_maximal_cell(Pos/;"	f	class:Gudhi::persistence_matrix::Position_to_index_overlay	typeref:typename:void
remove_maximal_cell	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^inline void RU_matrix<Master_matrix>::remove_maximal_cell(Index columnIndex)$/;"	f	class:Gudhi::persistence_matrix::RU_matrix	typeref:typename:void
remove_maximal_simplex	multipers/gudhi/Simplex_tree_interface.h	/^  void remove_maximal_simplex(const Simplex& simplex) {$/;"	f	class:Gudhi::Simplex_tree_interface	typeref:typename:void
remove_maximal_simplex	multipers/gudhi/gudhi/Simplex_tree.h	/^  void remove_maximal_simplex(Simplex_handle sh) {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:void
remove_neighbor	multipers/gudhi/gudhi/Flag_complex_edge_collapser.h	/^  void remove_neighbor(Vertex u, Vertex v) {$/;"	f	struct:Gudhi::collapse::Flag_complex_edge_collapser	typeref:typename:void
rend	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^inline typename Heap_column<Master_matrix>::const_reverse_iterator Heap_column<Master_matrix>::r/;"	f	class:Gudhi::persistence_matrix::Heap_column	typeref:typename:Heap_column<Master_matrix>::const_reverse_iterator
rend	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^inline typename Heap_column<Master_matrix>::reverse_iterator Heap_column<Master_matrix>::rend() /;"	f	class:Gudhi::persistence_matrix::Heap_column	typeref:typename:Heap_column<Master_matrix>::reverse_iterator
rend	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^Intrusive_list_column<Master_matrix>::rend() const noexcept$/;"	f	class:Gudhi::persistence_matrix::Intrusive_list_column	typeref:typename:Intrusive_list_column<Master_matrix>::const_reverse_iterator
rend	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^Intrusive_list_column<Master_matrix>::rend() noexcept$/;"	f	class:Gudhi::persistence_matrix::Intrusive_list_column	typeref:typename:Intrusive_list_column<Master_matrix>::reverse_iterator
rend	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^Intrusive_set_column<Master_matrix>::rend() noexcept$/;"	f	class:Gudhi::persistence_matrix::Intrusive_set_column	typeref:typename:Intrusive_set_column<Master_matrix>::reverse_iterator
rend	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^inline typename Intrusive_set_column<Master_matrix>::const_reverse_iterator Intrusive_set_column/;"	f	class:Gudhi::persistence_matrix::Intrusive_set_column	typeref:typename:Intrusive_set_column<Master_matrix>::const_reverse_iterator
rend	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^inline typename List_column<Master_matrix>::const_reverse_iterator List_column<Master_matrix>::r/;"	f	class:Gudhi::persistence_matrix::List_column	typeref:typename:List_column<Master_matrix>::const_reverse_iterator
rend	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^inline typename List_column<Master_matrix>::reverse_iterator List_column<Master_matrix>::rend() /;"	f	class:Gudhi::persistence_matrix::List_column	typeref:typename:List_column<Master_matrix>::reverse_iterator
rend	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^Naive_vector_column<Master_matrix>::rend() noexcept$/;"	f	class:Gudhi::persistence_matrix::Naive_vector_column	typeref:typename:Naive_vector_column<Master_matrix>::reverse_iterator
rend	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^inline typename Naive_vector_column<Master_matrix>::const_reverse_iterator Naive_vector_column<M/;"	f	class:Gudhi::persistence_matrix::Naive_vector_column	typeref:typename:Naive_vector_column<Master_matrix>::const_reverse_iterator
rend	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^inline typename Set_column<Master_matrix>::const_reverse_iterator Set_column<Master_matrix>::ren/;"	f	class:Gudhi::persistence_matrix::Set_column	typeref:typename:Set_column<Master_matrix>::const_reverse_iterator
rend	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^inline typename Set_column<Master_matrix>::reverse_iterator Set_column<Master_matrix>::rend() no/;"	f	class:Gudhi::persistence_matrix::Set_column	typeref:typename:Set_column<Master_matrix>::reverse_iterator
rend	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^Small_vector_column<Master_matrix>::rend() noexcept$/;"	f	class:Gudhi::persistence_matrix::Small_vector_column	typeref:typename:Small_vector_column<Master_matrix>::reverse_iterator
rend	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^inline typename Small_vector_column<Master_matrix>::const_reverse_iterator Small_vector_column<M/;"	f	class:Gudhi::persistence_matrix::Small_vector_column	typeref:typename:Small_vector_column<Master_matrix>::const_reverse_iterator
rend	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^inline typename Vector_column<Master_matrix>::const_reverse_iterator Vector_column<Master_matrix/;"	f	class:Gudhi::persistence_matrix::Vector_column	typeref:typename:Vector_column<Master_matrix>::const_reverse_iterator
rend	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^inline typename Vector_column<Master_matrix>::reverse_iterator Vector_column<Master_matrix>::ren/;"	f	class:Gudhi::persistence_matrix::Vector_column	typeref:typename:Vector_column<Master_matrix>::reverse_iterator
reorder	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^inline void Heap_column<Master_matrix>::reorder(const Row_index_map& valueMap, [[maybe_unused]] /;"	f	class:Gudhi::persistence_matrix::Heap_column	typeref:typename:void
reorder	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^inline void Intrusive_list_column<Master_matrix>::reorder(const Row_index_map& valueMap,$/;"	f	class:Gudhi::persistence_matrix::Intrusive_list_column	typeref:typename:void
reorder	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^inline void Intrusive_set_column<Master_matrix>::reorder(const Row_index_map& valueMap, [[maybe_/;"	f	class:Gudhi::persistence_matrix::Intrusive_set_column	typeref:typename:void
reorder	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^inline void List_column<Master_matrix>::reorder(const Row_index_map& valueMap, [[maybe_unused]] /;"	f	class:Gudhi::persistence_matrix::List_column	typeref:typename:void
reorder	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^inline void Naive_vector_column<Master_matrix>::reorder(const Row_index_map& valueMap,$/;"	f	class:Gudhi::persistence_matrix::Naive_vector_column	typeref:typename:void
reorder	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^inline void Set_column<Master_matrix>::reorder(const Row_index_map& valueMap, [[maybe_unused]] I/;"	f	class:Gudhi::persistence_matrix::Set_column	typeref:typename:void
reorder	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^inline void Small_vector_column<Master_matrix>::reorder(const Row_index_map& valueMap,$/;"	f	class:Gudhi::persistence_matrix::Small_vector_column	typeref:typename:void
reorder	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^inline void Unordered_set_column<Master_matrix>::reorder(const Row_index_map& valueMap,$/;"	f	class:Gudhi::persistence_matrix::Unordered_set_column	typeref:typename:void
reorder	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^inline void Vector_column<Master_matrix>::reorder(const Row_index_map& valueMap, [[maybe_unused]/;"	f	class:Gudhi::persistence_matrix::Vector_column	typeref:typename:void
reorder	multipers/multiparameter_module_approximation/heap_column.h	/^inline void Heap_column::reorder(std::vector<index> &valueMap)$/;"	f	class:Vineyard::Heap_column	typeref:typename:void
reorder	multipers/multiparameter_module_approximation/list_column.h	/^inline void List_column::reorder(std::vector<index> &valueMap)$/;"	f	class:Vineyard::List_column	typeref:typename:void
reorder	multipers/multiparameter_module_approximation/list_column_2.h	/^inline void List_column::reorder(std::vector<index> &valueMap)$/;"	f	class:Vineyard::List_column	typeref:typename:void
reorder	multipers/multiparameter_module_approximation/set_column.h	/^inline void Set_column::reorder(std::vector<index> &valueMap)$/;"	f	class:Gudhi::multiparameter::mma::Set_column	typeref:typename:void
reorder	multipers/multiparameter_module_approximation/unordered_set_column.h	/^inline void Unordered_set_column::reorder(std::vector<index> &valueMap)$/;"	f	class:Vineyard::Unordered_set_column	typeref:typename:void
reorder	multipers/multiparameter_module_approximation/vector_column.h	/^inline void Vector_column::reorder(std::vector<index> &valueMap)$/;"	f	class:Vineyard::Vector_column	typeref:typename:void
repToColumn_	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix_with_column_compression.h	/^  std::vector<Column*> repToColumn_;                  \/**< Map from the representative index to$/;"	m	class:Gudhi::persistence_matrix::Base_matrix_with_column_compression	typeref:typename:std::vector<Column * >
rep_	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix_with_column_compression.h	/^    Index rep_; \/**< Index in the union-find of the root of the set representing this column cl/;"	m	class:Gudhi::persistence_matrix::Base_matrix_with_column_compression::Column	typeref:typename:Index
representation	multipers/multiparameter_module_approximation/images.h	/^namespace Gudhi::multiparameter::mma::representation{$/;"	n	namespace:Gudhi::multiparameter::mma
representative	multipers/gudhi/naive_merge_tree.h	/^    index representative = -1; \/\/ cc rep for edges, position for vertices$/;"	m	struct:Naive_merge_forest::Node	typeref:typename:index
representativeCycles_	multipers/gudhi/gudhi/Persistence_matrix/chain_rep_cycles.h	/^  std::vector<Cycle> representativeCycles_;                 \/**< Cycle container. *\/$/;"	m	class:Gudhi::persistence_matrix::Chain_representative_cycles	typeref:typename:std::vector<Cycle>
representativeCycles_	multipers/gudhi/gudhi/Persistence_matrix/ru_rep_cycles.h	/^  std::vector<Index> representativeCycles_; \/**< Cycle container. *\/$/;"	m	class:Gudhi::persistence_matrix::RU_representative_cycles	typeref:typename:std::vector<Index>
res	multipers/gudhi/gudhi/Flag_complex_edge_collapser.h	/^  std::vector<std::tuple<Vertex, Vertex, Filtration_value>> res;$/;"	m	struct:Gudhi::collapse::Flag_complex_edge_collapser	typeref:typename:std::vector<std::tuple<Vertex,Vertex,Filtration_value>>
rescale	multipers/multiparameter_module_approximation/approximation.h	/^  inline void rescale(const std::vector<value_type> &rescale_factors) {$/;"	f	class:Gudhi::multiparameter::mma::Summand	typeref:typename:void
rescale	multipers/multiparameter_module_approximation/approximation.h	/^inline void Module<value_type>::rescale(const std::vector<value_type> &rescale_factors, int degr/;"	f	class:Gudhi::multiparameter::mma::Module	typeref:typename:void
rescale_from_sparse	multipers/ml/signed_measures.py	/^        def rescale_from_sparse(sparse_signed_measure):$/;"	f	member:SignedMeasureFormatter._rescale_measures	file:
rescale_sparse_signed_measure	multipers/ml/signed_measures.py	/^def rescale_sparse_signed_measure($/;"	f
reserve	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  void reserve(std::size_t n) { multi_filtration_.reserve(n); }$/;"	f	class:Gudhi::multi_filtration::Multi_critical_filtration	typeref:typename:void
reset	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix.h	/^  void reset(Column_settings* colSettings) {$/;"	f	class:Gudhi::persistence_matrix::Base_matrix	typeref:typename:void
reset	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix_with_column_compression.h	/^  void reset(Column_settings* colSettings) {$/;"	f	class:Gudhi::persistence_matrix::Base_matrix_with_column_compression	typeref:typename:void
reset	multipers/gudhi/gudhi/Persistence_matrix/Boundary_matrix.h	/^  void reset(Column_settings* colSettings) {$/;"	f	class:Gudhi::persistence_matrix::Boundary_matrix	typeref:typename:void
reset	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^  void reset(Column_settings* colSettings) {$/;"	f	class:Gudhi::persistence_matrix::Chain_matrix	typeref:typename:void
reset	multipers/gudhi/gudhi/Persistence_matrix/Id_to_index_overlay.h	/^  void reset(Column_settings* colSettings) {$/;"	f	class:Gudhi::persistence_matrix::Id_to_index_overlay	typeref:typename:void
reset	multipers/gudhi/gudhi/Persistence_matrix/Position_to_index_overlay.h	/^  void reset(Column_settings* colSettings) {$/;"	f	class:Gudhi::persistence_matrix::Position_to_index_overlay	typeref:typename:void
reset	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^  void reset(Column_settings* colSettings) {$/;"	f	class:Gudhi::persistence_matrix::RU_matrix	typeref:typename:void
reset_filtration	multipers/gudhi/gudhi/Simplex_tree.h	/^  void reset_filtration(const Filtration_value& filt_value, int min_dim = 0) {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:void
reset_graphs	multipers/data/graphs.py	/^def reset_graphs(dataset: str, N=None):  # Resets filtrations values on graphs$/;"	f
reshape	multipers/ml/one.py	/^		def reshape(dgm:np.ndarray|list)->np.ndarray:$/;"	f	member:SimplexTree2Dgm.transform	typeref:typename:np.ndarray	file:
resize	multipers/multiparameter_module_approximation/approximation.h	/^inline void Module<value_type>::resize(const unsigned int size) {$/;"	f	class:Gudhi::multiparameter::mma::Module	typeref:typename:void
resize_all_filtrations	multipers/gudhi/Simplex_tree_multi_interface.h	/^  resize_all_filtrations(int num) {$/;"	f	class:Gudhi::multiparameter::python_interface::Simplex_tree_multi_interface	typeref:typename:void
resolution	multipers/multiparameter_module_approximation/images.h	/^	std::vector<unsigned int> resolution;	\/\/ resolution of the image$/;"	m	struct:Gudhi::multiparameter::mma::representation::ImageArgs	typeref:typename:std::vector<unsigned int>
resolution_	multipers/tensor/tensor.h	/^  std::vector<indices_type> resolution_;$/;"	m	class:tensor::static_tensor_view	typeref:typename:std::vector<indices_type>
resolution_view	multipers/tensor/tensor.h	/^  const std::vector<indices_type> resolution_view;$/;"	m	class:tensor::static_tensor_view_view	typeref:typename:const std::vector<indices_type>
results_kwargs	compute.py	/^results_kwargs = namespace_to_dict(args) ## To be written in the end in the csv$/;"	v
return_first	multipers/gudhi/gudhi/Simplex_tree.h	/^  struct return_first {$/;"	s	class:Gudhi::Simplex_tree
return_type	multipers/gudhi/truc.h	/^    using return_type = decltype(std::declval<MultiFiltration>().template as_type<std::int32_t>(/;"	t	function:Gudhi::multiparameter::truc_interface::Truc::coarsen_on_grid
reverse_iterator	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^  using reverse_iterator = boost::indirect_iterator<typename Column_support::reverse_iterator>;$/;"	t	class:Gudhi::persistence_matrix::Heap_column	typeref:typename:boost::indirect_iterator<typename Column_support::reverse_iterator>
reverse_iterator	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^  using reverse_iterator = typename Column_support::reverse_iterator;$/;"	t	class:Gudhi::persistence_matrix::Intrusive_list_column	typeref:typename:Column_support::reverse_iterator
reverse_iterator	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^  using reverse_iterator = typename Column_support::reverse_iterator;$/;"	t	class:Gudhi::persistence_matrix::Intrusive_set_column	typeref:typename:Column_support::reverse_iterator
reverse_iterator	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^  using reverse_iterator = boost::indirect_iterator<typename Column_support::reverse_iterator>;$/;"	t	class:Gudhi::persistence_matrix::List_column	typeref:typename:boost::indirect_iterator<typename Column_support::reverse_iterator>
reverse_iterator	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^  using reverse_iterator = boost::indirect_iterator<typename Column_support::reverse_iterator>;$/;"	t	class:Gudhi::persistence_matrix::Naive_vector_column	typeref:typename:boost::indirect_iterator<typename Column_support::reverse_iterator>
reverse_iterator	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^  using reverse_iterator = boost::indirect_iterator<typename Column_support::reverse_iterator>;$/;"	t	class:Gudhi::persistence_matrix::Set_column	typeref:typename:boost::indirect_iterator<typename Column_support::reverse_iterator>
reverse_iterator	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^  using reverse_iterator = boost::indirect_iterator<typename Column_support::reverse_iterator>;$/;"	t	class:Gudhi::persistence_matrix::Small_vector_column	typeref:typename:boost::indirect_iterator<typename Column_support::reverse_iterator>
reverse_iterator	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^  using reverse_iterator = boost::indirect_iterator<typename Column_support::reverse_iterator>;$/;"	t	class:Gudhi::persistence_matrix::Vector_column	typeref:typename:boost::indirect_iterator<typename Column_support::reverse_iterator>
reverse_lexicographic_order	multipers/gudhi/gudhi/Simplex_tree.h	/^  bool reverse_lexicographic_order(Simplex_handle sh1, Simplex_handle sh2) {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:bool
ri_h0_degree_rips	multipers/ml/invariants_with_persistable.py	/^def ri_h0_degree_rips($/;"	f
ricci	multipers/data/graphs.py	/^    def ricci(graph, alpha=alpha):$/;"	f	function:compute_ricci	file:
rightChild	multipers/gudhi/naive_merge_tree.h	/^    index rightChild = -1;$/;"	m	struct:Naive_merge_forest::Node	typeref:typename:index
root	multipers/gudhi/gudhi/Simplex_tree.h	/^  Siblings* root() { return &root_; }$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:Siblings *
root	multipers/gudhi/naive_merge_tree.h	/^  void root() {$/;"	f	class:Naive_bottleneck_forest	typeref:typename:void
root_	multipers/gudhi/gudhi/Simplex_tree.h	/^  Siblings root_;$/;"	m	class:Gudhi::Simplex_tree	typeref:typename:Siblings
root_members_recursive_deletion	multipers/gudhi/gudhi/Simplex_tree.h	/^  void root_members_recursive_deletion() {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:void
rowIndex_	multipers/gudhi/gudhi/Persistence_matrix/columns/entry_types.h	/^  ID_index rowIndex_;   \/**< Row index of the entry. *\/$/;"	m	class:Gudhi::persistence_matrix::Entry	typeref:typename:ID_index
rowSwapped_	multipers/gudhi/gudhi/Persistence_matrix/base_swap.h	/^  bool rowSwapped_;             \/**< True if any rows were swapped since last call to `_orderRo/;"	m	class:Gudhi::persistence_matrix::Base_swap	typeref:typename:bool
rowSwapped_	multipers/multiparameter_module_approximation/vector_matrix.h	/^    bool rowSwapped_;$/;"	m	class:Gudhi::multiparameter::mma::Vector_matrix	typeref:typename:bool
rowToIndex_	multipers/gudhi/gudhi/Persistence_matrix/base_swap.h	/^  Row_dictionary rowToIndex_;   \/**< Map from index in row container to "public" row index. *\/$/;"	m	class:Gudhi::persistence_matrix::Base_swap	typeref:typename:Row_dictionary
rowToIndex_	multipers/multiparameter_module_approximation/vector_matrix.h	/^    std::vector<index> rowToIndex_;$/;"	m	class:Gudhi::multiparameter::mma::Vector_matrix	typeref:typename:std::vector<index>
row_	multipers/gudhi/gudhi/Persistent_cohomology.h	/^    Hcell * row_;                    \/\/ points to the corresponding row in the CAM$/;"	m	struct:Gudhi::persistent_cohomology::Persistent_cohomology::cocycle	typeref:typename:Hcell *
rows_	multipers/gudhi/gudhi/Persistence_matrix/columns/row_access.h	/^  Row_container* rows_;  \/**< Row container. Be careful to not destroy before the columns. *\/$/;"	m	class:Gudhi::persistence_matrix::Row_access	typeref:typename:Row_container *
rows_	multipers/gudhi/gudhi/Persistence_matrix/matrix_row_access.h	/^  Row_container* rows_;$/;"	m	class:Gudhi::persistence_matrix::Matrix_row_access	typeref:typename:Row_container *
s	benchmarks/stuff.py	/^    s = mp.Slicer(st, vineyard=(vine == "vine"), dtype=dtype, column_type=col).minpres($/;"	v
save	multipers/pickle.py	/^def save(path:str, signed_measures):$/;"	f
save_with_axis	multipers/pickle.py	/^def save_with_axis(path:str, signed_measures):$/;"	f
save_without_axis	multipers/pickle.py	/^def save_without_axis(path:str, signed_measures):$/;"	f
sc_	multipers/gudhi/gudhi/Persistent_cohomology.h	/^    FilteredComplex * sc_;$/;"	m	struct:Gudhi::persistent_cohomology::Persistent_cohomology::cmp_intervals_by_length	typeref:typename:FilteredComplex *
scc2disk	multipers/io.pyx	/^def scc2disk($/;"	f
scc2disk_old	multipers/io.pyx	/^def scc2disk_old($/;"	f
scc_parser	multipers/io.pyx	/^def scc_parser(path: str| os.PathLike):$/;"	f
scc_parser__old	multipers/io.pyx	/^def scc_parser__old(path: str):$/;"	f
scc_reduce_from_str	multipers/io.pyx	/^def scc_reduce_from_str($/;"	f
scc_reduce_from_str_to_slicer	multipers/io.pyx	/^def scc_reduce_from_str_to_slicer($/;"	f
scc_type	multipers/gudhi/Simplex_tree_multi_interface.h	/^  using scc_type = mma::scc_type<SimplexTreeOptions>;$/;"	t	class:Gudhi::multiparameter::python_interface::Simplex_tree_multi_interface	typeref:typename:mma::scc_type<SimplexTreeOptions>
scc_type	multipers/multiparameter_module_approximation/format_python-cpp.h	/^using scc_type =$/;"	t	namespace:Gudhi::multiparameter::mma	typeref:typename:std::vector<std::pair<std::vector<std::vector<typename Options::value_type>>,boundary_matrix>>
scoccolaDifferentiabilityOptimizationMultiparameter2024	docs/paper.bib	/^@inproceedings{scoccolaDifferentiabilityOptimizationMultiparameter2024,$/;"	j
score_samples	multipers/ml/convolutions.py	/^    def score_samples(self, Y, X=None):$/;"	m	class:DTM
score_samples	multipers/ml/convolutions.py	/^    def score_samples(self, Y, X=None, return_kernel=False):$/;"	m	class:KDE
score_samples_diff	multipers/ml/convolutions.py	/^    def score_samples_diff(self, Y):$/;"	m	class:DTM
script_name	compute.py	/^	script_name = argv[0]$/;"	v
self_col_	multipers/gudhi/gudhi/Persistent_cohomology/Persistent_cohomology_column.h	/^  Column * self_col_;$/;"	m	class:Gudhi::persistent_cohomology::Persistent_cohomology_cell	typeref:typename:Column *
self_siblings	multipers/gudhi/gudhi/Simplex_tree.h	/^  static Siblings* self_siblings(SimplexHandle sh) {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:Siblings *
serialize	multipers/gudhi/gudhi/Simplex_tree.h	/^  void serialize(char* buffer, const std::size_t buffer_size) {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:void
serialize_trivial	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  friend char *serialize_trivial(const Multi_critical_filtration &value, char *start) {$/;"	f	namespace:Gudhi::multi_filtration	typeref:typename:char *
serialize_trivial	multipers/gudhi/gudhi/One_critical_filtration.h	/^  friend char *serialize_trivial(const One_critical_filtration &value, char *start) {$/;"	f	namespace:Gudhi::multi_filtration	typeref:typename:char *
serialize_trivial	multipers/gudhi/gudhi/Simplex_tree/serialization_utils.h	/^char* serialize_trivial(ArgumentType value, char* start) {$/;"	f	namespace:Gudhi::simplex_tree	typeref:typename:char *
set	multipers/multiparameter_module_approximation/utilities.h	/^  void set(std::vector<MultiDiagram_point<filtration_type>> &m) {$/;"	f	struct:Gudhi::multiparameter::mma::MultiDiagram	typeref:typename:void
set_box	multipers/multiparameter_module_approximation/approximation.h	/^inline void Module<value_type>::set_box(Box<value_type> box) {$/;"	f	class:Gudhi::multiparameter::mma::Module	typeref:typename:void
set_characteristic	multipers/gudhi/gudhi/Fields/Multi_field_operators.h	/^  void set_characteristic(int minimum, int maximum) {$/;"	f	class:Gudhi::persistence_fields::Multi_field_operators	typeref:typename:void
set_characteristic	multipers/gudhi/gudhi/Fields/Multi_field_small_operators.h	/^  void set_characteristic(int minimum, int maximum) {$/;"	f	class:Gudhi::persistence_fields::Multi_field_operators_with_small_characteristics	typeref:typename:void
set_characteristic	multipers/gudhi/gudhi/Fields/Zp_field_operators.h	/^  void set_characteristic(Characteristic characteristic) {$/;"	f	class:Gudhi::persistence_fields::Zp_field_operators	typeref:typename:void
set_characteristic	multipers/gudhi/gudhi/Matrix.h	/^inline void Matrix<PersistenceMatrixOptions>::set_characteristic(Characteristic characteristic) $/;"	f	class:Gudhi::persistence_matrix::Matrix	typeref:typename:void
set_column_index	multipers/gudhi/gudhi/Persistence_matrix/columns/entry_types.h	/^  void set_column_index(Index columnIndex) { columnIndex_ = columnIndex; }$/;"	f	class:Gudhi::persistence_matrix::Entry_column_index	typeref:typename:void
set_dimension	multipers/gudhi/gudhi/Simplex_tree.h	/^  void set_dimension(int dimension, bool exact = true) {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:void
set_dimension	multipers/multiparameter_module_approximation/approximation.h	/^inline void Summand<value_type>::set_dimension(dimension_type dimension) {$/;"	f	class:Gudhi::multiparameter::mma::Summand	typeref:typename:void
set_element	multipers/gudhi/gudhi/Persistence_matrix/columns/entry_types.h	/^  void set_element(const Field_element& element) { element_ = element; }$/;"	f	class:Gudhi::persistence_matrix::Entry_field_element	typeref:typename:void
set_graphs	multipers/data/graphs.py	/^def set_graphs(graphs: list[nx.Graph], labels: list, dataset: str, N: int | str = ""):$/;"	f
set_insertion_sort	multipers/multiparameter_module_approximation/vineyards.h	/^#define set_insertion_sort$/;"	d
set_key	multipers/gudhi/Simplex_tree_multi_interface.h	/^  void set_key(const Simplex &simplex, int key) {$/;"	f	class:Gudhi::multiparameter::python_interface::Simplex_tree_multi_interface	typeref:typename:void
set_keys_to_enumerate	multipers/gudhi/Simplex_tree_multi_interface.h	/^  void set_keys_to_enumerate() {$/;"	f	class:Gudhi::multiparameter::python_interface::Simplex_tree_multi_interface	typeref:typename:void
set_length	multipers/gudhi/gudhi/Persistent_cohomology.h	/^    void set_length(Filtration_value new_length) {$/;"	f	struct:Gudhi::persistent_cohomology::Persistent_cohomology::length_interval	typeref:typename:void
set_num_generators	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  void set_num_generators(std::size_t n) {$/;"	f	class:Gudhi::multi_filtration::Multi_critical_filtration	typeref:typename:void
set_number_of_parameters	multipers/gudhi/gudhi/Simplex_tree.h	/^  void set_number_of_parameters(int num) {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:void
set_one_filtration	multipers/gudhi/truc.h	/^  inline void set_one_filtration(const array1d &truc) {$/;"	f	class:Gudhi::multiparameter::truc_interface::Truc	typeref:typename:void
set_permutation	multipers/gudhi/mma_interface_coh.h	/^  void set_permutation(const std::vector<Simplex_handle> &permutation) { new_to_old_perm_ = &per/;"	f	class:Gudhi::multiparameter::truc_interface::Boundary_matrix_as_filtered_complex_for_coh	typeref:typename:void
set_rep	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix_with_column_compression.h	/^    void set_rep(const Index& rep) { rep_ = rep; }$/;"	f	class:Gudhi::persistence_matrix::Base_matrix_with_column_compression::Column	typeref:typename:void
set_row_index	multipers/gudhi/gudhi/Persistence_matrix/columns/entry_types.h	/^  void set_row_index(ID_index rowIndex) { rowIndex_ = rowIndex; };$/;"	f	class:Gudhi::persistence_matrix::Entry	typeref:typename:void
set_to_end	multipers/gudhi/mma_interface_coh.h	/^    void set_to_end() {$/;"	f	class:Gudhi::multiparameter::truc_interface::Boundary_matrix_as_filtered_complex_for_coh::Filtration_range_iterator	typeref:typename:void
set_up_containers	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^  void set_up_containers(const std::vector<unsigned>& sizes, bool is_pos_inf) {$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base	typeref:typename:void
set_up_containers	multipers/gudhi/gudhi/Bitmap_cubical_complex_periodic_boundary_conditions_base.h	/^  void set_up_containers(const std::vector<unsigned>& sizes, bool is_pos_inf) {$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_periodic_boundary_conditions_base	typeref:typename:void
setup_bitmap_based_on_top_dimensional_cells_list	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^void Bitmap_cubical_complex_base<T>::setup_bitmap_based_on_top_dimensional_cells_list($/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base	typeref:typename:void
setup_bitmap_based_on_vertices	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^void Bitmap_cubical_complex_base<T>::setup_bitmap_based_on_vertices(const std::vector<unsigned>&/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base	typeref:typename:void
sh_	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  Simplex_handle sh_;  \/\/ current Simplex_handle in the boundary$/;"	m	class:Gudhi::Simplex_tree_boundary_simplex_iterator	typeref:typename:Simplex_handle
sh_	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  Simplex_handle sh_;$/;"	m	class:Gudhi::Simplex_tree_complex_simplex_iterator	typeref:typename:Simplex_handle
sh_	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  Simplex_handle sh_;$/;"	m	class:Gudhi::Simplex_tree_skeleton_simplex_iterator	typeref:typename:Simplex_handle
sh_	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_star_simplex_iterators.h	/^  Simplex_handle sh_;$/;"	m	class:Gudhi::Simplex_tree_optimized_cofaces_rooted_subtrees_simplex_iterator	typeref:typename:Simplex_handle
sh_	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_star_simplex_iterators.h	/^  Simplex_handle sh_;$/;"	m	class:Gudhi::Simplex_tree_optimized_star_simplex_iterator	typeref:typename:Simplex_handle
shift_coordinate	multipers/tensor/tensor.h	/^  inline void shift_coordinate(indices_type idx, indices_type shift_value) {$/;"	f	class:tensor::static_tensor_view_view	typeref:typename:void
shuffle	compute.py	/^	shuffle = False$/;"	v
shuffle	compute.py	/^	shuffle=False$/;"	v
shuffle	compute.py	/^shuffle = True if args.filtration != "dijkstra" else False$/;"	v
shuffle	multipers/ml/one.py	/^		def shuffle(dgm):$/;"	f	member:DiagramShuffle.transform	file:
sib_	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  Siblings * sib_;  \/\/ where the next search will start from$/;"	m	class:Gudhi::Simplex_tree_boundary_opposite_vertex_simplex_iterator	typeref:typename:Siblings *
sib_	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  Siblings * sib_;  \/\/ where the next search will start from$/;"	m	class:Gudhi::Simplex_tree_boundary_simplex_iterator	typeref:typename:Siblings *
sib_	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  Siblings * sib_;$/;"	m	class:Gudhi::Simplex_tree_complex_simplex_iterator	typeref:typename:Siblings *
sib_	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  Siblings * sib_;$/;"	m	class:Gudhi::Simplex_tree_simplex_vertex_iterator	typeref:typename:Siblings *
sib_	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  Siblings * sib_;$/;"	m	class:Gudhi::Simplex_tree_skeleton_simplex_iterator	typeref:typename:Siblings *
sib_	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_star_simplex_iterators.h	/^  Siblings* sib_;  \/\/$/;"	m	class:Gudhi::Simplex_tree_optimized_star_simplex_iterator	typeref:typename:Siblings *
siblings_expansion	multipers/gudhi/gudhi/Simplex_tree.h	/^  void siblings_expansion(Siblings* siblings  \/\/ must contain elements$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:void
siblings_expansion	multipers/gudhi/gudhi/Simplex_tree.h	/^  void siblings_expansion(Siblings* siblings,  \/\/ must contain elements$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:void
siblings_expansion_with_blockers	multipers/gudhi/gudhi/Simplex_tree.h	/^  void siblings_expansion_with_blockers(Siblings* siblings, int max_dim, int k, Blocker block_si/;"	f	class:Gudhi::Simplex_tree	typeref:typename:void
signed_betti	multipers/point_measure.pyx	/^def signed_betti(hilbert_function:np.ndarray, bool threshold=False):$/;"	f
signed_measure	multipers/_signed_measure_meta.py	/^def signed_measure($/;"	f	typeref:typename:list[tuple[np.ndarray,np.ndarray]]
signed_measure_indices	multipers/multi_parameter_rank_invariant/diff_helpers.h	/^using signed_measure_indices = std::vector<std::vector<int32_t>>;$/;"	t	namespace:Gudhi::multiparameter::differentiation	typeref:typename:std::vector<std::vector<int32_t>>
signed_measure_pts	multipers/multi_parameter_rank_invariant/diff_helpers.h	/^using signed_measure_pts = std::vector<std::vector<typename Filtration::value_type>>;$/;"	t	namespace:Gudhi::multiparameter::differentiation	typeref:typename:std::vector<std::vector<typename Filtration::value_type>>
simp_	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_star_simplex_iterators.h	/^    Static_vertex_vector simp_;  \/\/ vertices of simplex, in reverse order$/;"	m	class:Gudhi::Simplex_tree_optimized_cofaces_rooted_subtrees_simplex_iterator::is_coface	typeref:typename:Static_vertex_vector
simplex	multipers/gudhi/gudhi/Bitmap_cubical_complex.h	/^  Simplex_handle simplex(Simplex_key k) {$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex	typeref:typename:Simplex_handle
simplex	multipers/gudhi/gudhi/Simplex_tree.h	/^  Simplex_handle simplex(Simplex_key idx) const { return filtration_vect_[idx]; }$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:Simplex_handle
simplex	multipers/gudhi/mma_interface_coh.h	/^  Simplex_handle simplex(Simplex_key key) const {$/;"	f	class:Gudhi::multiparameter::truc_interface::Boundary_matrix_as_filtered_complex_for_coh	typeref:typename:Simplex_handle
simplex_data	multipers/gudhi/gudhi/Simplex_tree.h	/^  static Simplex_data& simplex_data(Simplex_handle sh) {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:Simplex_data &
simplex_filtration	multipers/gudhi/Simplex_tree_interface.h	/^  Filtration_value simplex_filtration(const Simplex& simplex) {$/;"	f	class:Gudhi::Simplex_tree_interface	typeref:typename:Filtration_value
simplex_filtration	multipers/gudhi/Simplex_tree_multi_interface.h	/^  simplex_filtration(const Simplex &simplex) {$/;"	f	class:Gudhi::multiparameter::python_interface::Simplex_tree_multi_interface	typeref:typename:SimplexTreeOptions::Filtration_value *
simplex_handle_from_node	multipers/gudhi/gudhi/Simplex_tree.h	/^  static Simplex_handle simplex_handle_from_node(Node& node) {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:Simplex_handle
simplex_tree	multipers/gudhi/gudhi/Simplex_tree/serialization_utils.h	/^namespace simplex_tree {$/;"	n	namespace:Gudhi
simplex_vertex_range	multipers/gudhi/gudhi/Simplex_tree.h	/^  Simplex_vertex_range simplex_vertex_range(Simplex_handle sh) const {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:Simplex_vertex_range
simplextree2hist	multipers/ml/one.py	/^def simplextree2hist(simplextree, range:tuple[float, float], bins:int, density:bool)->np.ndarray/;"	f	typeref:typename:np.ndarray
simplextree_to_ordered_bf	multipers/gudhi/Simplex_tree_multi_interface.h	/^flattened_scc_type inline simplextree_to_ordered_bf(){$/;"	f	class:Gudhi::multiparameter::python_interface::Simplex_tree_multi_interface	typeref:typename:flattened_scc_type
simplextree_to_ordered_bf	multipers/multiparameter_module_approximation/format_python-cpp.h	/^flattened_scc_type<Options> inline simplextree_to_ordered_bf($/;"	f	namespace:Gudhi::multiparameter::mma	typeref:typename:flattened_scc_type<Options>
simplextree_to_scc	multipers/gudhi/Simplex_tree_multi_interface.h	/^  scc_type inline simplextree_to_scc() { return Gudhi::multiparameter::mma::simplextree_to_scc(*/;"	f	class:Gudhi::multiparameter::python_interface::Simplex_tree_multi_interface	typeref:typename:scc_type
simplextree_to_scc	multipers/multiparameter_module_approximation/format_python-cpp.h	/^inline scc_type<STOptions> simplextree_to_scc(Gudhi::Simplex_tree<STOptions> &st) {$/;"	f	namespace:Gudhi::multiparameter::mma	typeref:typename:scc_type<STOptions>
simplices_list	multipers/gudhi/Simplex_tree_multi_interface.h	/^  using simplices_list = std::vector<std::vector<int>>;$/;"	t	class:Gudhi::multiparameter::python_interface::Simplex_tree_multi_interface	typeref:typename:std::vector<std::vector<int>>
simplify	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  void simplify() {$/;"	f	class:Gudhi::multi_filtration::Multi_critical_filtration	typeref:typename:void
sinc_kernel	multipers/ml/convolutions.py	/^def sinc_kernel(x_i, y_j, bandwidth):$/;"	f
size	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^  inline std::size_t size() const { return this->data.size(); }$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base	typeref:typename:std::size_t
size	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^inline std::size_t Heap_column<Master_matrix>::size() const$/;"	f	class:Gudhi::persistence_matrix::Heap_column	typeref:typename:std::size_t
size	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^inline std::size_t Intrusive_list_column<Master_matrix>::size() const$/;"	f	class:Gudhi::persistence_matrix::Intrusive_list_column	typeref:typename:std::size_t
size	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^inline std::size_t Intrusive_set_column<Master_matrix>::size() const$/;"	f	class:Gudhi::persistence_matrix::Intrusive_set_column	typeref:typename:std::size_t
size	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^inline std::size_t List_column<Master_matrix>::size() const$/;"	f	class:Gudhi::persistence_matrix::List_column	typeref:typename:std::size_t
size	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^inline std::size_t Naive_vector_column<Master_matrix>::size() const$/;"	f	class:Gudhi::persistence_matrix::Naive_vector_column	typeref:typename:std::size_t
size	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^inline std::size_t Set_column<Master_matrix>::size() const$/;"	f	class:Gudhi::persistence_matrix::Set_column	typeref:typename:std::size_t
size	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^inline std::size_t Small_vector_column<Master_matrix>::size() const$/;"	f	class:Gudhi::persistence_matrix::Small_vector_column	typeref:typename:std::size_t
size	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^inline std::size_t Unordered_set_column<Master_matrix>::size() const$/;"	f	class:Gudhi::persistence_matrix::Unordered_set_column	typeref:typename:std::size_t
size	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^inline std::size_t Vector_column<Master_matrix>::size() const$/;"	f	class:Gudhi::persistence_matrix::Vector_column	typeref:typename:std::size_t
size	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_siblings.h	/^  size_t size() const {$/;"	f	class:Gudhi::Simplex_tree_siblings	typeref:typename:size_t
size	multipers/gudhi/mma_interface_coh.h	/^    std::size_t size() {$/;"	f	class:Gudhi::multiparameter::truc_interface::Boundary_matrix_as_filtered_complex_for_coh::Filtration_simplex_range	typeref:typename:std::size_t
size	multipers/gudhi/mma_interface_coh.h	/^  std::size_t size() { return matrix_.num_simplices(); }$/;"	f	class:Gudhi::multiparameter::truc_interface::Persistence_backend_cohomology	typeref:typename:std::size_t
size	multipers/gudhi/mma_interface_h0.h	/^    std::size_t size() const { return barcode_->size(); }$/;"	f	class:Gudhi::multiparameter::truc_interface::Persistence_backend_h0::Barcode	typeref:typename:std::size_t
size	multipers/gudhi/mma_interface_h0.h	/^  std::size_t size() {$/;"	f	class:Gudhi::multiparameter::truc_interface::Persistence_backend_h0	typeref:typename:std::size_t
size	multipers/gudhi/mma_interface_matrix.h	/^    std::size_t size() const { return barcode_->size(); }$/;"	f	class:Gudhi::multiparameter::truc_interface::Persistence_backend_matrix::Barcode	typeref:typename:std::size_t
size	multipers/gudhi/mma_interface_matrix.h	/^  inline std::size_t size() { return this->matrix_.get_number_of_columns(); }$/;"	f	class:Gudhi::multiparameter::truc_interface::Persistence_backend_matrix	typeref:typename:std::size_t
size	multipers/gudhi/truc.h	/^  inline std::size_t size() const { return boundaries.size(); };$/;"	f	class:Gudhi::multiparameter::truc_interface::SimplicialStructure	typeref:typename:std::size_t
size	multipers/gudhi/truc.h	/^  inline std::size_t size() const { return generators.size(); };$/;"	f	class:Gudhi::multiparameter::truc_interface::PresentationStructure	typeref:typename:std::size_t
size	multipers/multiparameter_module_approximation/approximation.h	/^inline unsigned int Module<value_type>::size() const {$/;"	f	class:Gudhi::multiparameter::mma::Module	typeref:typename:unsigned int
size	multipers/multiparameter_module_approximation/utilities.h	/^  unsigned int size() const { return this->multiDiagrams.size(); }$/;"	f	struct:Gudhi::multiparameter::mma::MultiDiagrams	typeref:typename:unsigned int
size	multipers/multiparameter_module_approximation/utilities.h	/^  unsigned int size() { return this->multiDiagram.size(); }$/;"	f	struct:Gudhi::multiparameter::mma::MultiDiagram	typeref:typename:unsigned int
size	multipers/tensor/tensor.h	/^  inline std::size_t size() const { return size_; }$/;"	f	class:tensor::static_tensor_view	typeref:typename:std::size_t
size	multipers/tensor/tensor.h	/^  std::size_t size() const { return ptrs.size(); }$/;"	f	class:tensor::static_tensor_view_view	typeref:typename:std::size_t
size_	multipers/gudhi/mma_interface_coh.h	/^    std::size_t size_;$/;"	m	class:Gudhi::multiparameter::truc_interface::Boundary_matrix_as_filtered_complex_for_coh::Filtration_simplex_range	typeref:typename:std::size_t
size_	multipers/tensor/tensor.h	/^  std::size_t size_;$/;"	m	class:tensor::static_tensor_view	typeref:typename:std::size_t
size_type	multipers/gudhi/gudhi/Simple_object_pool.h	/^  typedef typename Base::size_type size_type;$/;"	t	class:Gudhi::Simple_object_pool	typeref:typename:Base::size_type
sizes	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^  std::vector<unsigned> sizes;$/;"	m	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base	typeref:typename:std::vector<unsigned>
skeleton_simplex_range	multipers/gudhi/gudhi/Bitmap_cubical_complex.h	/^  Skeleton_simplex_range skeleton_simplex_range(unsigned dimension) {$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex	typeref:typename:Skeleton_simplex_range
skeleton_simplex_range	multipers/gudhi/gudhi/Simplex_tree.h	/^  Skeleton_simplex_range skeleton_simplex_range(int dim) {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:Skeleton_simplex_range
sktda	multipers_old.py	/^import gudhi.representations as sktda$/;"	I	nameref:module:gudhi.representations
slicers	_tempita_grid_gen.py	/^slicers = [$/;"	v
sm2diff	multipers/distances.py	/^def sm2diff(sm1, sm2):$/;"	f
sm_distance	multipers/distances.py	/^def sm_distance($/;"	f
sm_in_grid	multipers/grids.pyx	/^def sm_in_grid(pts, weights, grid, int num_parameters=-1, mass_default=None):$/;"	f
smds	compute.py	/^		smds = mmo.Dgms2SignedMeasureDistance(n_jobs=args.n_jobs, progress=True).fit_transform(diagram/;"	v
smri	multipers/_signed_measure_meta.py	/^            from multipers.simplex_tree_multi import _rank_signed_measure as smri$/;"	Y	function:signed_measure	file:	nameref:unknown:_rank_signed_measure
sms_in_grid	multipers/grids.pyx	/^def sms_in_grid(sms, grid, int num_parameters=-1, mass_default=None):$/;"	f
sodipodi	docs/icon.svg	/^   xmlns:dc="http:\/\/purl.org\/dc\/elements\/1.1\/">$/;"	n	uri:http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd
sort_and_return_permutation	multipers/multiparameter_module_approximation/combinatory.h	/^permutation_type sort_and_return_permutation($/;"	f	namespace:Gudhi::multiparameter::mma::Combinatorics	typeref:typename:permutation_type
sort_sm	multipers/tests/__init__.py	/^def sort_sm(sms):$/;"	f
sorted_cells	multipers/gudhi/gudhi/Bitmap_cubical_complex.h	/^  std::vector<std::size_t> sorted_cells;$/;"	m	class:Gudhi::cubical_complex::Bitmap_cubical_complex	typeref:typename:std::vector<std::size_t>
sparse_type	multipers/tensor/tensor.h	/^  using sparse_type = std::pair<std::vector<std::vector<indices_type>>, std::vector<dtype>>;$/;"	t	class:tensor::static_tensor_view	typeref:typename:std::pair<std::vector<std::vector<indices_type>>,std::vector<dtype>>
sparsify	multipers/point_measure.pyx	/^def sparsify(x):$/;"	f
sparsify	multipers/tensor/tensor.h	/^  inline sparse_type sparsify(const std::vector<bool> &flip_axes = {}, bool verbose = false) con/;"	f	class:tensor::static_tensor_view	typeref:typename:sparse_type
split_barcode	multipers/gudhi/truc.h	/^  using split_barcode =$/;"	t	class:Gudhi::multiparameter::truc_interface::Truc	typeref:typename:std::vector<std::vector<std::pair<typename MultiFiltration::value_type,typename MultiFiltration::value_type>>>
split_multimol	multipers/data/MOL2.py	/^def split_multimol($/;"	f
squeeze_filtration	multipers/gudhi/Simplex_tree_multi_interface.h	/^  void squeeze_filtration($/;"	f	class:Gudhi::multiparameter::python_interface::Simplex_tree_multi_interface	typeref:typename:void
squeeze_filtration_from_ptr	multipers/gudhi/Simplex_tree_multi_interface.h	/^void inline squeeze_filtration_from_ptr(uintptr_t splxptr, Args... args) {$/;"	f	namespace:Gudhi::multiparameter::python_interface	typeref:typename:void
squeeze_filtration_inplace	multipers/gudhi/Simplex_tree_multi_interface.h	/^  void squeeze_filtration_inplace(const std::vector<std::vector<double>> &grid,$/;"	f	class:Gudhi::multiparameter::python_interface::Simplex_tree_multi_interface	typeref:typename:void
st	benchmarks/stuff.py	/^    st: SimplexTreeMulti_type = mmp.PointCloud2FilteredComplex($/;"	v	typeref:typename:SimplexTreeMulti_type
st	multipers/tests/test_signed_measure.py	/^st = random_st(npts=50).collapse_edges(-2, ignore_warning=True)$/;"	v
st2bf	multipers/multiparameter_module_approximation/format_python-cpp.h	/^st2bf(SimplexTree &st) {$/;"	f	namespace:Gudhi::multiparameter::mma	typeref:typename:BoundaryFiltration<typename SimplexTree::Options::Filtration_value>
st_	multipers/gudhi/gudhi/Simplex_tree.h	/^    Simplex_tree* st_;$/;"	m	class:Gudhi::Simplex_tree::Fast_cofaces_predicate	typeref:typename:Simplex_tree *
st_	multipers/gudhi/gudhi/Simplex_tree.h	/^    Simplex_tree* st_;$/;"	m	struct:Gudhi::Simplex_tree::is_before_in_totally_ordered_filtration	typeref:typename:Simplex_tree *
st_	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  SimplexTree * st_;  \/\/ simplex containing the simplicial complex$/;"	m	class:Gudhi::Simplex_tree_boundary_opposite_vertex_simplex_iterator	typeref:typename:SimplexTree *
st_	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  SimplexTree * st_;  \/\/ simplex containing the simplicial complex$/;"	m	class:Gudhi::Simplex_tree_boundary_simplex_iterator	typeref:typename:SimplexTree *
st_	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  SimplexTree * st_;$/;"	m	class:Gudhi::Simplex_tree_complex_simplex_iterator	typeref:typename:SimplexTree *
st_	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  SimplexTree * st_;$/;"	m	class:Gudhi::Simplex_tree_skeleton_simplex_iterator	typeref:typename:SimplexTree *
st_	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_star_simplex_iterators.h	/^  SimplexTree* st_;  \/\/ Simplex tree for complex C$/;"	m	class:Gudhi::Simplex_tree_optimized_star_simplex_iterator	typeref:typename:SimplexTree *
st_	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_star_simplex_iterators.h	/^  SimplexTree* st_;$/;"	m	class:Gudhi::Simplex_tree_optimized_cofaces_rooted_subtrees_simplex_iterator	typeref:typename:SimplexTree *
st_coord_type	multipers/gudhi/Simplex_tree_multi_interface.h	/^    using st_coord_type = Simplex_tree_multi_interface<int_fil_type, int32_t>;$/;"	t	function:Gudhi::multiparameter::python_interface::Simplex_tree_multi_interface::squeeze_filtration	typeref:typename:Simplex_tree_multi_interface<int_fil_type,int32_t>
stable_simplex_handles	multipers/gudhi/Simplex_tree_interface.h	/^  static const bool stable_simplex_handles = false;$/;"	m	struct:Gudhi::Simplex_tree_options_for_python	typeref:typename:const bool
stable_simplex_handles	multipers/gudhi/gudhi/Simplex_tree/simplex_tree_options.h	/^  static const bool stable_simplex_handles = false;$/;"	m	struct:Gudhi::Simplex_tree_options_default	typeref:typename:const bool
stable_simplex_handles	multipers/gudhi/gudhi/Simplex_tree/simplex_tree_options.h	/^  static const bool stable_simplex_handles = false;$/;"	m	struct:Gudhi::Simplex_tree_options_fast_persistence	typeref:typename:const bool
stable_simplex_handles	multipers/gudhi/gudhi/Simplex_tree/simplex_tree_options.h	/^  static const bool stable_simplex_handles = false;$/;"	m	struct:Gudhi::Simplex_tree_options_minimal	typeref:typename:const bool
stable_simplex_handles	multipers/gudhi/gudhi/Simplex_tree/simplex_tree_options.h	/^  static const bool stable_simplex_handles = true;$/;"	m	struct:Gudhi::Simplex_tree_options_full_featured	typeref:typename:const bool
stable_simplex_handles	multipers/gudhi/gudhi/Simplex_tree_multi.h	/^  static const bool stable_simplex_handles = false;$/;"	m	struct:Gudhi::multi_persistence::Simplex_tree_options_multidimensional_filtration	typeref:typename:const bool
stable_simplex_handles	multipers/multi_parameter_rank_invariant/persistence_slices.h	/^  static const bool stable_simplex_handles = false;$/;"	m	struct:Gudhi::multiparameter::Simplex_tree_float	typeref:typename:const bool
star_simplex_range	multipers/gudhi/gudhi/Simplex_tree.h	/^  Cofaces_simplex_range star_simplex_range(const Simplex_handle simplex) { return cofaces_simple/;"	f	class:Gudhi::Simplex_tree	typeref:typename:Cofaces_simplex_range
static_tensor_view	multipers/tensor/tensor.h	/^  static_tensor_view(dtype *data_ptr, const std::vector<indices_type> &resolution)$/;"	f	class:tensor::static_tensor_view
static_tensor_view	multipers/tensor/tensor.h	/^class static_tensor_view {  \/\/ Python handles the construction - destruction of$/;"	c	namespace:tensor
static_tensor_view_view	multipers/tensor/tensor.h	/^  static_tensor_view_view(const static_tensor_view<dtype, indices_type> &parent,$/;"	f	class:tensor::static_tensor_view_view
static_tensor_view_view	multipers/tensor/tensor.h	/^  static_tensor_view_view(dtype *data_ptr,$/;"	f	class:tensor::static_tensor_view_view
static_tensor_view_view	multipers/tensor/tensor.h	/^class static_tensor_view_view$/;"	c	namespace:tensor
std	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^namespace std {$/;"	n
std	multipers/gudhi/gudhi/One_critical_filtration.h	/^namespace std {$/;"	n
std	multipers/gudhi/gudhi/persistence_interval.h	/^namespace std {$/;"	n
std	multipers/multiparameter_module_approximation/debug.h	/^namespace std {$/;"	n
store_filtration	multipers/gudhi/Simplex_tree_interface.h	/^  static const bool store_filtration = true;$/;"	m	struct:Gudhi::Simplex_tree_options_for_python	typeref:typename:const bool
store_filtration	multipers/gudhi/gudhi/Simplex_tree/simplex_tree_options.h	/^  static const bool store_filtration = false;$/;"	m	struct:Gudhi::Simplex_tree_options_minimal	typeref:typename:const bool
store_filtration	multipers/gudhi/gudhi/Simplex_tree/simplex_tree_options.h	/^  static const bool store_filtration = true;$/;"	m	struct:Gudhi::Simplex_tree_options_default	typeref:typename:const bool
store_filtration	multipers/gudhi/gudhi/Simplex_tree/simplex_tree_options.h	/^  static const bool store_filtration = true;$/;"	m	struct:Gudhi::Simplex_tree_options_fast_persistence	typeref:typename:const bool
store_filtration	multipers/gudhi/gudhi/Simplex_tree/simplex_tree_options.h	/^  static const bool store_filtration = true;$/;"	m	struct:Gudhi::Simplex_tree_options_full_featured	typeref:typename:const bool
store_filtration	multipers/gudhi/gudhi/Simplex_tree_multi.h	/^  static const bool store_filtration = true;$/;"	m	struct:Gudhi::multi_persistence::Simplex_tree_options_multidimensional_filtration	typeref:typename:const bool
store_filtration	multipers/multi_parameter_rank_invariant/persistence_slices.h	/^  static const bool store_filtration = true;$/;"	m	struct:Gudhi::multiparameter::Simplex_tree_float	typeref:typename:const bool
store_key	multipers/gudhi/Simplex_tree_interface.h	/^  static const bool store_key = true;$/;"	m	struct:Gudhi::Simplex_tree_options_for_python	typeref:typename:const bool
store_key	multipers/gudhi/gudhi/Simplex_tree/simplex_tree_options.h	/^  static const bool store_key = false;$/;"	m	struct:Gudhi::Simplex_tree_options_minimal	typeref:typename:const bool
store_key	multipers/gudhi/gudhi/Simplex_tree/simplex_tree_options.h	/^  static const bool store_key = true;$/;"	m	struct:Gudhi::Simplex_tree_options_default	typeref:typename:const bool
store_key	multipers/gudhi/gudhi/Simplex_tree/simplex_tree_options.h	/^  static const bool store_key = true;$/;"	m	struct:Gudhi::Simplex_tree_options_fast_persistence	typeref:typename:const bool
store_key	multipers/gudhi/gudhi/Simplex_tree/simplex_tree_options.h	/^  static const bool store_key = true;$/;"	m	struct:Gudhi::Simplex_tree_options_full_featured	typeref:typename:const bool
store_key	multipers/gudhi/gudhi/Simplex_tree_multi.h	/^  static const bool store_key = true;$/;"	m	struct:Gudhi::multi_persistence::Simplex_tree_options_multidimensional_filtration	typeref:typename:const bool
store_key	multipers/multi_parameter_rank_invariant/persistence_slices.h	/^  static const bool store_key = true;$/;"	m	struct:Gudhi::multiparameter::Simplex_tree_float	typeref:typename:const bool
strats	multipers/tests/test_signed_measure.py	/^strats = [("regular_closest", 20), ("quantile", 20), ("regular", 17)]$/;"	v
stream_	multipers/gudhi/gudhi/Off_reader.h	/^  std::ifstream& stream_;$/;"	m	class:Gudhi::Off_reader	typeref:typename:std::ifstream &
structure	multipers/gudhi/truc.h	/^  Structure structure;                      \/\/ defined at construction time. Const$/;"	m	class:Gudhi::multiparameter::truc_interface::Truc	typeref:typename:Structure
style1	docs/icon.svg	/^       id="style1">*{stroke-linejoin: round; stroke-linecap: butt}<\/style>$/;"	d
style1	docs/icon.svg	/^       id="style1">*{stroke-linejoin: round; stroke-linecap: butt}<\/style>$/;"	i
sublevelsets_multipersistence	multipers_old.py	/^def sublevelsets_multipersistence(matching, simplextree, filters, homology=0, num_lines=100, cor/;"	f
subtract	multipers/gudhi/gudhi/Fields/Multi_field_operators.h	/^  Element subtract(Element e1, const Element& e2) const {$/;"	f	class:Gudhi::persistence_fields::Multi_field_operators	typeref:typename:Element
subtract	multipers/gudhi/gudhi/Fields/Multi_field_small_operators.h	/^  Element subtract(Element e1, Element e2) const {$/;"	f	class:Gudhi::persistence_fields::Multi_field_operators_with_small_characteristics	typeref:typename:Element
subtract	multipers/gudhi/gudhi/Fields/Z2_field_operators.h	/^  static Element subtract(Unsigned_integer_type e1, Unsigned_integer_type e2) {$/;"	f	class:Gudhi::persistence_fields::Z2_field_operators	typeref:typename:Element
subtract	multipers/gudhi/gudhi/Fields/Zp_field_operators.h	/^  Element subtract(Element e1, Element e2) const {$/;"	f	class:Gudhi::persistence_fields::Zp_field_operators	typeref:typename:Element
subtract_	multipers/gudhi/gudhi/One_critical_filtration.h	/^  constexpr static bool subtract_(T &v1, T v2) { return add_(v1, -v2); }$/;"	f	class:Gudhi::multi_filtration::One_critical_filtration	typeref:typename:bool
subtract_inplace_back	multipers/gudhi/gudhi/Fields/Multi_field_operators.h	/^  void subtract_inplace_back(const Element& e1, Element& e2) const {$/;"	f	class:Gudhi::persistence_fields::Multi_field_operators	typeref:typename:void
subtract_inplace_back	multipers/gudhi/gudhi/Fields/Multi_field_small_operators.h	/^  void subtract_inplace_back(Element e1, Element& e2) const {$/;"	f	class:Gudhi::persistence_fields::Multi_field_operators_with_small_characteristics	typeref:typename:void
subtract_inplace_back	multipers/gudhi/gudhi/Fields/Z2_field_operators.h	/^  static void subtract_inplace_back(Unsigned_integer_type e1, Unsigned_integer_type& e2) {$/;"	f	class:Gudhi::persistence_fields::Z2_field_operators	typeref:typename:void
subtract_inplace_back	multipers/gudhi/gudhi/Fields/Zp_field_operators.h	/^  void subtract_inplace_back(Element e1, Element& e2) const {$/;"	f	class:Gudhi::persistence_fields::Zp_field_operators	typeref:typename:void
subtract_inplace_front	multipers/gudhi/gudhi/Fields/Multi_field_operators.h	/^  void subtract_inplace_front(Element& e1, const Element& e2) const {$/;"	f	class:Gudhi::persistence_fields::Multi_field_operators	typeref:typename:void
subtract_inplace_front	multipers/gudhi/gudhi/Fields/Multi_field_small_operators.h	/^  void subtract_inplace_front(Element& e1, Element e2) const {$/;"	f	class:Gudhi::persistence_fields::Multi_field_operators_with_small_characteristics	typeref:typename:void
subtract_inplace_front	multipers/gudhi/gudhi/Fields/Z2_field_operators.h	/^  static void subtract_inplace_front(Unsigned_integer_type& e1, Unsigned_integer_type e2) {$/;"	f	class:Gudhi::persistence_fields::Z2_field_operators	typeref:typename:void
subtract_inplace_front	multipers/gudhi/gudhi/Fields/Zp_field_operators.h	/^  void subtract_inplace_front(Element& e1, Element e2) const {$/;"	f	class:Gudhi::persistence_fields::Zp_field_operators	typeref:typename:void
suffix_	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  Static_vertex_vector suffix_;$/;"	m	class:Gudhi::Simplex_tree_boundary_opposite_vertex_simplex_iterator	typeref:typename:Static_vertex_vector
suffix_	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  Static_vertex_vector suffix_;$/;"	m	class:Gudhi::Simplex_tree_boundary_simplex_iterator	typeref:typename:Static_vertex_vector
svg	docs/icon.svg	/^   xmlns:dc="http:\/\/purl.org\/dc\/elements\/1.1\/">$/;"	n	uri:http://www.w3.org/2000/svg
svg501	docs/icon.svg	/^   xmlns:dc="http:\/\/purl.org\/dc\/elements\/1.1\/">$/;"	i
svm	compute.py	/^		svm = SVC(kernel = "precomputed")$/;"	v
svm	compute.py	/^		svm = SVC(kernel="rbf")$/;"	v
swap	multipers/gudhi/gudhi/Fields/Multi_field.h	/^  friend void swap(Multi_field_element& f1, Multi_field_element& f2) { std::swap(f1.element_, f2/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:void
swap	multipers/gudhi/gudhi/Fields/Multi_field_operators.h	/^  friend void swap(Multi_field_operators& f1, Multi_field_operators& f2) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:void
swap	multipers/gudhi/gudhi/Fields/Multi_field_shared.h	/^  friend void swap(Shared_multi_field_element& f1, Shared_multi_field_element& f2) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:void
swap	multipers/gudhi/gudhi/Fields/Multi_field_small.h	/^  friend void swap(Multi_field_element_with_small_characteristics& f1,$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:void
swap	multipers/gudhi/gudhi/Fields/Multi_field_small_operators.h	/^  friend void swap(Multi_field_operators_with_small_characteristics& f1,$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:void
swap	multipers/gudhi/gudhi/Fields/Multi_field_small_shared.h	/^  friend void swap(Shared_multi_field_element_with_small_characteristics& f1,$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:void
swap	multipers/gudhi/gudhi/Fields/Z2_field.h	/^  friend void swap(Z2_field_element& f1, Z2_field_element& f2) { std::swap(f1.element_, f2.eleme/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:void
swap	multipers/gudhi/gudhi/Fields/Zp_field.h	/^  friend void swap(Zp_field_element& f1, Zp_field_element& f2) { std::swap(f1.element_, f2.eleme/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:void
swap	multipers/gudhi/gudhi/Fields/Zp_field_operators.h	/^  friend void swap(Zp_field_operators& f1, Zp_field_operators& f2) {$/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:void
swap	multipers/gudhi/gudhi/Fields/Zp_field_shared.h	/^  friend void swap(Shared_Zp_field_element& f1, Shared_Zp_field_element& f2) { std::swap(f1.elem/;"	f	namespace:Gudhi::persistence_fields	typeref:typename:void
swap	multipers/gudhi/gudhi/Matrix.h	/^  friend void swap(Matrix& matrix1, Matrix& matrix2) { $/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:void
swap	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix.h	/^  friend void swap(Base_matrix& matrix1, Base_matrix& matrix2) {$/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:void
swap	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix_with_column_compression.h	/^  friend void swap(Base_matrix_with_column_compression& matrix1, Base_matrix_with_column_compres/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:void
swap	multipers/gudhi/gudhi/Persistence_matrix/Boundary_matrix.h	/^  friend void swap(Boundary_matrix& matrix1, Boundary_matrix& matrix2) {$/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:void
swap	multipers/gudhi/gudhi/Persistence_matrix/Chain_matrix.h	/^  friend void swap(Chain_matrix& matrix1, Chain_matrix& matrix2) {$/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:void
swap	multipers/gudhi/gudhi/Persistence_matrix/Id_to_index_overlay.h	/^  friend void swap(Id_to_index_overlay& matrix1, Id_to_index_overlay& matrix2) {$/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:void
swap	multipers/gudhi/gudhi/Persistence_matrix/Position_to_index_overlay.h	/^  friend void swap(Position_to_index_overlay& matrix1, Position_to_index_overlay& matrix2) {$/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:void
swap	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^  friend void swap(RU_matrix& matrix1, RU_matrix& matrix2) {$/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:void
swap	multipers/gudhi/gudhi/Persistence_matrix/allocators/entry_constructors.h	/^  friend void swap(New_entry_constructor& col1, New_entry_constructor& col2) {}$/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:void
swap	multipers/gudhi/gudhi/Persistence_matrix/allocators/entry_constructors.h	/^  friend void swap(Pool_entry_constructor& col1, Pool_entry_constructor& col2) {$/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:void
swap	multipers/gudhi/gudhi/Persistence_matrix/base_pairing.h	/^  friend void swap(Base_pairing& pairing1, Base_pairing& pairing2) {$/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:void
swap	multipers/gudhi/gudhi/Persistence_matrix/base_pairing.h	/^  friend void swap([[maybe_unused]] Dummy_base_pairing& d1, [[maybe_unused]] Dummy_base_pairing&/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:void
swap	multipers/gudhi/gudhi/Persistence_matrix/base_swap.h	/^  friend void swap(Base_swap& base1, Base_swap& base2) {$/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:void
swap	multipers/gudhi/gudhi/Persistence_matrix/base_swap.h	/^  friend void swap([[maybe_unused]] Dummy_base_swap& d1, [[maybe_unused]] Dummy_base_swap& d2) {/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:void
swap	multipers/gudhi/gudhi/Persistence_matrix/boundary_cell_position_to_id_mapper.h	/^  friend void swap(Cell_position_to_ID_mapper& mapper1, Cell_position_to_ID_mapper& mapper2) {$/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:void
swap	multipers/gudhi/gudhi/Persistence_matrix/boundary_cell_position_to_id_mapper.h	/^  friend void swap([[maybe_unused]] Dummy_pos_mapper& d1, [[maybe_unused]] Dummy_pos_mapper& d2)/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:void
swap	multipers/gudhi/gudhi/Persistence_matrix/boundary_face_position_to_id_mapper.h	/^  friend void swap(Face_position_to_ID_mapper& mapper1, Face_position_to_ID_mapper& mapper2) {$/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:void
swap	multipers/gudhi/gudhi/Persistence_matrix/boundary_face_position_to_id_mapper.h	/^  friend void swap([[maybe_unused]] Dummy_pos_mapper& d1, [[maybe_unused]] Dummy_pos_mapper& d2)/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:void
swap	multipers/gudhi/gudhi/Persistence_matrix/chain_pairing.h	/^  friend void swap(Chain_pairing& pairing1, Chain_pairing& pairing2) {$/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:void
swap	multipers/gudhi/gudhi/Persistence_matrix/chain_pairing.h	/^  friend void swap([[maybe_unused]] Dummy_chain_pairing& d1, [[maybe_unused]] Dummy_chain_pairin/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:void
swap	multipers/gudhi/gudhi/Persistence_matrix/chain_rep_cycles.h	/^  friend void swap(Chain_representative_cycles& base1, Chain_representative_cycles& base2) {$/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:void
swap	multipers/gudhi/gudhi/Persistence_matrix/chain_rep_cycles.h	/^  friend void swap([[maybe_unused]] Dummy_chain_representative_cycles& d1,$/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:void
swap	multipers/gudhi/gudhi/Persistence_matrix/chain_vine_swap.h	/^  friend void swap(Chain_barcode_swap& swap1, Chain_barcode_swap& swap2) {$/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:void
swap	multipers/gudhi/gudhi/Persistence_matrix/chain_vine_swap.h	/^  friend void swap(Chain_vine_swap& swap1, Chain_vine_swap& swap2) {$/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:void
swap	multipers/gudhi/gudhi/Persistence_matrix/chain_vine_swap.h	/^  friend void swap([[maybe_unused]] Dummy_chain_vine_pairing& d1, [[maybe_unused]] Dummy_chain_v/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:void
swap	multipers/gudhi/gudhi/Persistence_matrix/chain_vine_swap.h	/^  friend void swap([[maybe_unused]] Dummy_chain_vine_swap& d1, [[maybe_unused]] Dummy_chain_vine/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:void
swap	multipers/gudhi/gudhi/Persistence_matrix/columns/chain_column_extra_properties.h	/^  friend void swap(Chain_column_extra_properties& col1, Chain_column_extra_properties& col2) {$/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:void
swap	multipers/gudhi/gudhi/Persistence_matrix/columns/chain_column_extra_properties.h	/^  friend void swap([[maybe_unused]] Dummy_chain_properties& col1, [[maybe_unused]] Dummy_chain_p/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:void
swap	multipers/gudhi/gudhi/Persistence_matrix/columns/column_dimension_holder.h	/^  friend void swap(Column_dimension_holder& col1, Column_dimension_holder& col2) { std::swap(col/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:void
swap	multipers/gudhi/gudhi/Persistence_matrix/columns/column_dimension_holder.h	/^  friend void swap([[maybe_unused]] Dummy_dimension_holder& col1, [[maybe_unused]] Dummy_dimensi/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:void
swap	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^  friend void swap(Heap_column& col1, Heap_column& col2) {$/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:void
swap	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^  friend void swap(Intrusive_list_column& col1, Intrusive_list_column& col2) {$/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:void
swap	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^  friend void swap(Intrusive_set_column& col1, Intrusive_set_column& col2) {$/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:void
swap	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^  friend void swap(List_column& col1, List_column& col2) {$/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:void
swap	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^  friend void swap(Naive_vector_column& col1, Naive_vector_column& col2) {$/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:void
swap	multipers/gudhi/gudhi/Persistence_matrix/columns/row_access.h	/^  friend void swap(Row_access& r1, Row_access& r2) {$/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:void
swap	multipers/gudhi/gudhi/Persistence_matrix/columns/row_access.h	/^  friend void swap([[maybe_unused]] Dummy_row_access& d1, [[maybe_unused]] Dummy_row_access& d2)/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:void
swap	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^  friend void swap(Set_column& col1, Set_column& col2) {$/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:void
swap	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^  friend void swap(Small_vector_column& col1, Small_vector_column& col2) {$/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:void
swap	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^  friend void swap(Unordered_set_column& col1, Unordered_set_column& col2) {$/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:void
swap	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^  friend void swap(Vector_column& col1, Vector_column& col2) {$/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:void
swap	multipers/gudhi/gudhi/Persistence_matrix/matrix_dimension_holders.h	/^  friend void swap(Matrix_all_dimension_holder& matrix1, Matrix_all_dimension_holder& matrix2) {$/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:void
swap	multipers/gudhi/gudhi/Persistence_matrix/matrix_dimension_holders.h	/^  friend void swap(Matrix_max_dimension_holder& matrix1, Matrix_max_dimension_holder& matrix2) {$/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:void
swap	multipers/gudhi/gudhi/Persistence_matrix/matrix_dimension_holders.h	/^  friend void swap([[maybe_unused]] Dummy_matrix_dimension_holder& d1,$/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:void
swap	multipers/gudhi/gudhi/Persistence_matrix/matrix_row_access.h	/^  friend void swap(Matrix_row_access& matrix1, Matrix_row_access& matrix2) { std::swap(matrix1.r/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:void
swap	multipers/gudhi/gudhi/Persistence_matrix/matrix_row_access.h	/^  friend void swap([[maybe_unused]] Dummy_matrix_row_access& d1, [[maybe_unused]] Dummy_matrix_r/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:void
swap	multipers/gudhi/gudhi/Persistence_matrix/ru_pairing.h	/^  friend void swap(RU_pairing& pairing1, RU_pairing& pairing2) {$/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:void
swap	multipers/gudhi/gudhi/Persistence_matrix/ru_pairing.h	/^  friend void swap([[maybe_unused]] Dummy_ru_pairing& d1, [[maybe_unused]] Dummy_ru_pairing& d2)/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:void
swap	multipers/gudhi/gudhi/Persistence_matrix/ru_rep_cycles.h	/^  friend void swap(RU_representative_cycles& base1, RU_representative_cycles& base2) {$/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:void
swap	multipers/gudhi/gudhi/Persistence_matrix/ru_rep_cycles.h	/^  friend void swap([[maybe_unused]] Dummy_ru_representative_cycles& d1,$/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:void
swap	multipers/gudhi/gudhi/Persistence_matrix/ru_vine_swap.h	/^  friend void swap(RU_vine_swap& swap1, RU_vine_swap& swap2) {$/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:void
swap	multipers/gudhi/gudhi/Persistence_matrix/ru_vine_swap.h	/^  friend void swap([[maybe_unused]] Dummy_ru_vine_pairing& d1, [[maybe_unused]] Dummy_ru_vine_pa/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:void
swap	multipers/gudhi/gudhi/Persistence_matrix/ru_vine_swap.h	/^  friend void swap([[maybe_unused]] Dummy_ru_vine_swap& d1, [[maybe_unused]] Dummy_ru_vine_swap&/;"	f	namespace:Gudhi::persistence_matrix	typeref:typename:void
swap	multipers/gudhi/mma_interface_coh.h	/^  friend void swap(Boundary_matrix_as_filtered_complex_for_coh &be1, Boundary_matrix_as_filtered/;"	f	namespace:Gudhi::multiparameter::truc_interface	typeref:typename:void
swap	multipers/gudhi/mma_interface_coh.h	/^  friend void swap(Persistence_backend_cohomology &be1, Persistence_backend_cohomology &be2) {$/;"	f	namespace:Gudhi::multiparameter::truc_interface	typeref:typename:void
swap	multipers/gudhi/mma_interface_h0.h	/^  friend void swap(Persistence_backend_h0 &be1, Persistence_backend_h0 &be2) {$/;"	f	namespace:Gudhi::multiparameter::truc_interface	typeref:typename:void
swap	multipers/gudhi/mma_interface_matrix.h	/^  friend void swap(Persistence_backend_matrix &be1, Persistence_backend_matrix &be2) {$/;"	f	namespace:Gudhi::multiparameter::truc_interface	typeref:typename:void
swap	multipers/gudhi/naive_merge_tree.h	/^    friend void swap(Barcode &mf1, Barcode &mf2) {$/;"	f	class:Naive_merge_forest	typeref:typename:void
swap	multipers/gudhi/naive_merge_tree.h	/^  friend void swap(Naive_bottleneck_forest &mf1, Naive_bottleneck_forest &mf2) {$/;"	f	typeref:typename:void
swap	multipers/gudhi/naive_merge_tree.h	/^  friend void swap(Naive_merge_forest &mf1, Naive_merge_forest &mf2) {$/;"	f	typeref:typename:void
swap	multipers/multiparameter_module_approximation/approximation.h	/^  friend void swap(Summand &sum1, Summand &sum2) {$/;"	f	namespace:Gudhi::multiparameter::mma	typeref:typename:void
swap	multipers/multiparameter_module_approximation/heap_column.h	/^inline void swap(Heap_column& col1, Heap_column& col2)$/;"	f	namespace:Vineyard	typeref:typename:void
swap	multipers/multiparameter_module_approximation/list_column.h	/^inline void swap(List_column& col1, List_column& col2)$/;"	f	namespace:Vineyard	typeref:typename:void
swap	multipers/multiparameter_module_approximation/list_column_2.h	/^inline void swap(List_column& col1, List_column& col2)$/;"	f	namespace:Vineyard	typeref:typename:void
swap	multipers/multiparameter_module_approximation/ru_matrix.h	/^inline void swap(RU_matrix<Column_type> &matrix1,$/;"	f	namespace:Gudhi::multiparameter::mma	typeref:typename:void
swap	multipers/multiparameter_module_approximation/set_column.h	/^inline void swap(Set_column& col1, Set_column& col2)$/;"	f	namespace:Gudhi::multiparameter::mma	typeref:typename:void
swap	multipers/multiparameter_module_approximation/unordered_set_column.h	/^inline void swap(Unordered_set_column& col1, Unordered_set_column& col2)$/;"	f	namespace:Vineyard	typeref:typename:void
swap	multipers/multiparameter_module_approximation/vector_column.h	/^inline void swap(Vector_column& col1, Vector_column& col2)$/;"	f	namespace:Vineyard	typeref:typename:void
swap	multipers/multiparameter_module_approximation/vector_matrix.h	/^inline void swap(Vector_matrix<Column_type>& matrix1, Vector_matrix<Column_type>& matrix2)$/;"	f	namespace:Gudhi::multiparameter::mma	typeref:typename:void
swap	multipers/tensor/tensor.h	/^  inline void swap(static_tensor_view_view<dtype, indices_type> &x) {$/;"	f	class:tensor::static_tensor_view_view	typeref:typename:void
swap_at_indices	multipers/multiparameter_module_approximation/vector_matrix.h	/^inline void Vector_matrix<Column_type>::swap_at_indices(index index1, index index2)$/;"	f	class:Gudhi::multiparameter::mma::Vector_matrix	typeref:typename:void
swap_columns	multipers/gudhi/gudhi/Matrix.h	/^inline void Matrix<PersistenceMatrixOptions>::swap_columns(Index columnIndex1, Index columnIndex/;"	f	class:Gudhi::persistence_matrix::Matrix	typeref:typename:void
swap_columns	multipers/gudhi/gudhi/Persistence_matrix/Id_to_index_overlay.h	/^inline void Id_to_index_overlay<Underlying_matrix, Master_matrix>::swap_columns(ID_index cellID1/;"	f	class:Gudhi::persistence_matrix::Id_to_index_overlay	typeref:typename:void
swap_columns	multipers/gudhi/gudhi/Persistence_matrix/base_swap.h	/^inline void Base_swap<Master_matrix, Base_matrix>::swap_columns(Index columnIndex1, Index column/;"	f	class:Gudhi::persistence_matrix::Base_swap	typeref:typename:void
swap_columns	multipers/multiparameter_module_approximation/vector_matrix.h	/^inline void Vector_matrix<Column_type>::swap_columns(index columnIndex1, index columnIndex2)$/;"	f	class:Gudhi::multiparameter::mma::Vector_matrix	typeref:typename:void
swap_dimension	multipers/gudhi/gudhi/Persistence_matrix/columns/column_dimension_holder.h	/^  void swap_dimension(Column_dimension_holder& other) { std::swap(dim_, other.dim_); }$/;"	f	struct:Gudhi::persistence_matrix::Column_dimension_holder	typeref:typename:void
swap_out_edges	multipers/gudhi/naive_merge_tree.h	/^  void swap_out_edges(index inVertex1, index inVertex2, index outVertex1,$/;"	f	class:Naive_bottleneck_forest	typeref:typename:void
swap_pivots	multipers/gudhi/gudhi/Persistence_matrix/columns/chain_column_extra_properties.h	/^  void swap_pivots(Chain_column_extra_properties& other) { std::swap(pivot_, other.pivot_); }$/;"	f	class:Gudhi::persistence_matrix::Chain_column_extra_properties	typeref:typename:void
swap_positions	multipers/gudhi/gudhi/Persistence_matrix/chain_vine_swap.h	/^  void swap_positions(ID_index pivot1, ID_index pivot2) {$/;"	f	class:Gudhi::persistence_matrix::Chain_barcode_swap	typeref:typename:void
swap_rows	multipers/gudhi/gudhi/Matrix.h	/^inline void Matrix<PersistenceMatrixOptions>::swap_rows(Index rowIndex1, Index rowIndex2) $/;"	f	class:Gudhi::persistence_matrix::Matrix	typeref:typename:void
swap_rows	multipers/gudhi/gudhi/Persistence_matrix/Id_to_index_overlay.h	/^inline void Id_to_index_overlay<Underlying_matrix, Master_matrix>::swap_rows(Index rowIndex1, In/;"	f	class:Gudhi::persistence_matrix::Id_to_index_overlay	typeref:typename:void
swap_rows	multipers/gudhi/gudhi/Persistence_matrix/base_swap.h	/^inline void Base_swap<Master_matrix, Base_matrix>::swap_rows(ID_index rowIndex1, ID_index rowInd/;"	f	class:Gudhi::persistence_matrix::Base_swap	typeref:typename:void
swap_rows	multipers/multiparameter_module_approximation/vector_matrix.h	/^inline void Vector_matrix<Column_type>::swap_rows(index rowIndex1, index rowIndex2)$/;"	f	class:Gudhi::multiparameter::mma::Vector_matrix	typeref:typename:void
swds	compute.py	/^		swds = mmo.Dgms2SlicedWassersteinDistanceMatrices(num_directions=10, n_jobs=args.n_jobs).fit_t/;"	v
templated_cython_modules	setup.py	/^templated_cython_modules = [$/;"	v
tensor	multipers/tensor/tensor.h	/^namespace tensor {$/;"	n
tensor_möbius_inversion	multipers/ml/signed_measures.py	/^def tensor_möbius_inversion($/;"	f
test_1	multipers/tests/test_mma.py	/^def test_1():$/;"	f
test_1	multipers/tests/test_simplextreemulti.py	/^def test_1():$/;"	f
test_1	multipers/tests/test_slicer.py	/^def test_1():$/;"	f
test_2	multipers/tests/test_simplextreemulti.py	/^def test_2():$/;"	f
test_2	multipers/tests/test_slicer.py	/^def test_2():$/;"	f
test_3	multipers/tests/test_hilbert_function.py	/^def test_3():$/;"	f
test_3	multipers/tests/test_simplextreemulti.py	/^def test_3():$/;"	f
test_3	multipers/tests/test_slicer.py	/^def test_3():$/;"	f
test_4	multipers/tests/test_hilbert_function.py	/^def test_4():$/;"	f
test_4	multipers/tests/test_simplextreemulti.py	/^def test_4():$/;"	f
test_5	multipers/tests/test_hilbert_function.py	/^def test_5():$/;"	f
test_backends	multipers/tests/test_signed_measure.py	/^def test_backends(invariant, degree, mass_default, S):$/;"	f
test_bitmap	multipers/tests/test_slicer.py	/^def test_bitmap():$/;"	f
test_distance_matrix_filling	multipers/tests/test_simplextreemulti.py	/^def test_distance_matrix_filling():$/;"	f
test_external	multipers/tests/test_slicer.py	/^def test_external(dim, degree):$/;"	f
test_flagify	multipers/tests/test_simplextreemulti.py	/^def test_flagify():$/;"	f
test_h0_rips_density	multipers/tests/test_diff_helper.py	/^def test_h0_rips_density():$/;"	f
test_h1_rips_density	multipers/tests/test_diff_helper.py	/^def test_h1_rips_density():$/;"	f
test_img	multipers/tests/test_mma.py	/^def test_img():$/;"	f
test_kcritical_batch_insert	multipers/tests/test_simplextreemulti.py	/^def test_kcritical_batch_insert():$/;"	f
test_make_filtration_non_decreasing	multipers/tests/test_simplextreemulti.py	/^def test_make_filtration_non_decreasing():$/;"	f
test_pipeline1	multipers/tests/test_mma.py	/^def test_pipeline1(prune_degrees_above, n_jobs):$/;"	f
test_pipeline2	multipers/tests/test_mma.py	/^def test_pipeline2(prune_degrees_above, n_jobs, expand_dim):$/;"	f
test_pkl	multipers/tests/test_slicer.py	/^def test_pkl():$/;"	f
test_pruning	multipers/tests/test_slicer.py	/^def test_pruning():$/;"	f
test_random_alpha_safe_conversion	multipers/tests/test_python-cpp_conversion.py	/^def test_random_alpha_safe_conversion():$/;"	f
test_random_alpha_unsafe_conversion	multipers/tests/test_python-cpp_conversion.py	/^def test_random_alpha_unsafe_conversion():$/;"	f
test_random_rips_safe_conversion	multipers/tests/test_python-cpp_conversion.py	/^def test_random_rips_safe_conversion():$/;"	f
test_rank_decomposition	multipers/tests/test_signed_betti.py	/^def test_rank_decomposition():$/;"	f
test_representative_cycles	multipers/tests/test_slicer.py	/^def test_representative_cycles():$/;"	f
test_scc	multipers/tests/test_slicer.py	/^def test_scc():$/;"	f
test_serialize	multipers/tests/test_simplextreemulti.py	/^def test_serialize():$/;"	f
test_throw_test	multipers/tests/test_point_clouds.py	/^def test_throw_test():$/;"	f
theorical_max_EF	multipers/data/MOL2.py	/^def theorical_max_EF(distances, labels, alpha):$/;"	f
theorical_max_EF_from_distances	multipers/data/MOL2.py	/^def theorical_max_EF_from_distances(list_of_distances, list_of_labels, alpha):$/;"	f
three_annulus	multipers/data/synthetic.py	/^def three_annulus(num_pts: int = 500, num_outliers: int = 500):$/;"	f
threshold_down	multipers/multiparameter_module_approximation/utilities.h	/^void inline threshold_down(point_type &point,$/;"	f	namespace:Gudhi::multiparameter::mma	typeref:typename:void
threshold_down	multipers/multiparameter_module_approximation/vineyards_trajectories.h	/^void threshold_down(point_type &point, const Box<value_type> &box,$/;"	f	namespace:Gudhi::multiparameter::mma	typeref:typename:void
threshold_filters_list	multipers/multiparameter_module_approximation/approximation.h	/^inline void threshold_filters_list(std::vector<filtration_type> &filtersList, const Box<value_ty/;"	f	namespace:Gudhi::multiparameter::mma	typeref:typename:void
threshold_up	multipers/multiparameter_module_approximation/utilities.h	/^void inline threshold_up(point_type &point,$/;"	f	namespace:Gudhi::multiparameter::mma	typeref:typename:void
threshold_up	multipers/multiparameter_module_approximation/vineyards_trajectories.h	/^void threshold_up(point_type &point, const Box<value_type> &box,$/;"	f	namespace:Gudhi::multiparameter::mma	typeref:typename:void
timer_	multipers/multiparameter_module_approximation/debug.h	/^  tp timer_;$/;"	m	class:Gudhi::multiparameter::mma::Debug::Timer	typeref:typename:tp
times	multipers/gudhi/gudhi/Persistent_cohomology/Field_Zp.h	/^  Element times(const Element& y, const Element& w) {$/;"	f	class:Gudhi::persistent_cohomology::Field_Zp	typeref:typename:Element
times	multipers/gudhi/gudhi/Persistent_cohomology/Multi_field.h	/^  Element times(const Element& y, const Element& w) {$/;"	f	class:Gudhi::persistent_cohomology::Multi_field	typeref:typename:Element
times_minus	multipers/gudhi/gudhi/Persistent_cohomology/Field_Zp.h	/^  Element times_minus(Element x, Element y) {$/;"	f	class:Gudhi::persistent_cohomology::Field_Zp	typeref:typename:Element
times_minus	multipers/gudhi/gudhi/Persistent_cohomology/Multi_field.h	/^  Element times_minus(const Element& x, const Element& y) {$/;"	f	class:Gudhi::persistent_cohomology::Multi_field	typeref:typename:Element
timings	benchmarks/stuff.py	/^timings = {}$/;"	v
to_flat_idx	multipers/multiparameter_module_approximation/approximation.h	/^std::vector<std::vector<std::vector<int>>> inline Module<value_type>::to_flat_idx($/;"	f	class:Gudhi::multiparameter::mma::Module	typeref:typename:std::vector<std::vector<std::vector<int>>>
to_grid_coord	multipers/multiparameter_module_approximation/approximation.h	/^std::vector<int> inline to_grid_coord(const Gudhi::multi_filtration::One_critical_filtration<val/;"	f	namespace:Gudhi::multiparameter::mma	typeref:typename:std::vector<int>
to_idx	multipers/multiparameter_module_approximation/approximation.h	/^inline typename Module<value_type>::idx_dump_type Module<value_type>::to_idx($/;"	f	class:Gudhi::multiparameter::mma::Module	typeref:typename:Module<value_type>::idx_dump_type
to_int	multipers/grids.pyx	/^    def to_int(x):$/;"	f	function:sm_in_grid	file:
to_iter	_tempita_grid_gen.py	/^to_iter = [$/;"	v
to_lazy	multipers/ml/convolutions.py	/^    def to_lazy(X, Y, x_weights):$/;"	m	class:KDE
to_multipers	multipers/multiparameter_module_approximation/utilities.h	/^  std::vector<std::vector<double>> to_multipers($/;"	f	struct:Gudhi::multiparameter::mma::MultiDiagram	typeref:typename:std::vector<std::vector<double>>
to_multipers	multipers/multiparameter_module_approximation/utilities.h	/^  std::vector<std::vector<std::vector<double>>> to_multipers() {$/;"	f	struct:Gudhi::multiparameter::mma::MultiDiagrams	typeref:typename:std::vector<std::vector<std::vector<double>>>
to_range	multipers/gudhi/gudhi/Flag_complex_edge_collapser.h	/^template<class R, class T> R to_range(T const& t) { R r; r.insert(r.end(), t.begin(), t.end()); /;"	f	namespace:Gudhi::collapse	typeref:typename:R
to_range	multipers/gudhi/gudhi/Flag_complex_edge_collapser.h	/^template<class R> R to_range(R&& r) { return std::move(r); }$/;"	f	namespace:Gudhi::collapse	typeref:typename:R
to_simplex_tree	multipers/data/MOL2.py	/^        to_simplex_tree = lambda path_to_mol2_file: [$/;"	f	member:Molecule2SimplexTree.transform	file:
to_st	multipers/ml/one.py	/^			to_st = lambda x : x$/;"	f	member:SimplexTree2Histogram.fit	file:
to_std	multipers/gudhi/Simplex_tree_multi_interface.h	/^  void to_std(intptr_t ptr, const Line_like &line, int dimension) {$/;"	f	class:Gudhi::multiparameter::python_interface::Simplex_tree_multi_interface	typeref:typename:void
to_std_linear_projection	multipers/gudhi/Simplex_tree_multi_interface.h	/^  void to_std_linear_projection(intptr_t ptr, std::vector<double> linear_form) {$/;"	f	class:Gudhi::multiparameter::python_interface::Simplex_tree_multi_interface	typeref:typename:void
to_str	multipers/gudhi/truc.h	/^  inline std::string to_str() {$/;"	f	class:Gudhi::multiparameter::truc_interface::Truc	typeref:typename:std::string
to_stream	multipers/gudhi/truc.h	/^  inline void to_stream(std::ostream &stream, const std::vector<index_type> &order) {$/;"	f	class:Gudhi::multiparameter::truc_interface::PresentationStructure	typeref:typename:void
to_stream	multipers/gudhi/truc.h	/^  inline void to_stream(std::ostream &stream, const std::vector<index_type> &order) {$/;"	f	class:Gudhi::multiparameter::truc_interface::SimplicialStructure	typeref:typename:void
to_switch	compute.py	/^to_switch = args.pipeline.lower()$/;"	v
to_unique	multipers/grids.pyx	/^    to_unique = lambda f : np.unique(f) if isinstance(f,np.ndarray) else f.unique()$/;"	f	function:_compute_grid_numpy	file:
todense	multipers/grids.pyx	/^def todense(grid, bool product_order=False):$/;"	f
todense	multipers/torch/diff_grids.py	/^def todense(grid: list[torch.Tensor]):$/;"	f
todo	multipers/data/graphs.py	/^        def todo(graph, filtrations=self.filtrations) -> list[mp.SimplexTreeMulti]:$/;"	f	member:Graph2SimplexTrees.transform	typeref:typename:list[mp.SimplexTreeMulti]	file:
todo	multipers/ml/mma.py	/^            def todo(mods):$/;"	f	member:MMA2IMG.transform	file:
todo	multipers/ml/mma.py	/^        def todo(mod):$/;"	f	member:MMA2Landscape.transform	file:
todo	multipers/ml/mma.py	/^        def todo(sts: Iterable[_FilteredComplexType]):$/;"	f	member:FilteredComplex2MMA.transform	file:
todo	multipers/ml/one.py	/^		def todo(dgms):$/;"	f	member:DiagramShuffle.transform	file:
todo	multipers/ml/one.py	/^		def todo(graph, f=self.f) -> gd.SimplexTree: # TODO : use batch insert$/;"	f	member:Graph2SimplexTree.transform	typeref:typename:gd.SimplexTree	file:
todo	multipers/ml/one.py	/^		def todo(point_cloud) -> gd.SimplexTree: # TODO : use batch insert$/;"	f	member:PointCloud2SimplexTree.transform	typeref:typename:gd.SimplexTree	file:
todo	multipers/ml/signed_measures.py	/^            def todo(swd, X_of_degree):$/;"	f	member:SignedMeasure2SlicedWassersteinDistance.transform	file:
todo1	multipers/ml/mma.py	/^            def todo1(x):$/;"	f	member:MMA2IMG.transform	file:
todo1	multipers/ml/mma.py	/^            def todo1(x, c):$/;"	f	member:MMA2IMG.transform	file:
todo1	multipers/ml/mma.py	/^        def todo1(x, box):$/;"	f	member:FilteredComplex2MMA.transform	file:
todo2	multipers/ml/mma.py	/^            def todo2(mods):$/;"	f	member:MMA2IMG.transform	file:
todo_extended	multipers/ml/one.py	/^		def todo_extended(st):$/;"	f	member:SimplexTree2Dgm.transform	file:
todo_standard	multipers/ml/one.py	/^		def todo_standard(st):$/;"	f	member:SimplexTree2Dgm.transform	file:
todo_x	multipers/ml/signed_measures.py	/^        def todo_x(x):$/;"	f	member:FilteredComplex2SignedMeasure.transform	file:
top_dimensional_cells_iterator_begin	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^  Top_dimensional_cells_iterator top_dimensional_cells_iterator_begin() {$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base	typeref:typename:Top_dimensional_cells_iterator
top_dimensional_cells_iterator_end	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^  Top_dimensional_cells_iterator top_dimensional_cells_iterator_end() {$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base	typeref:typename:Top_dimensional_cells_iterator
top_dimensional_cells_range	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^  Top_dimensional_cells_range top_dimensional_cells_range() { return Top_dimensional_cells_range/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base	typeref:typename:Top_dimensional_cells_range
torch_geometric_2nx	multipers/data/pytorch2simplextree.py	/^def torch_geometric_2nx(dataset, labels_only = False, print_flag = False, weight_flag = False):$/;"	f
tp	multipers/multiparameter_module_approximation/debug.h	/^using tp = clk::time_point;$/;"	t	namespace:Gudhi::multiparameter::mma::Debug	typeref:typename:clk::time_point
transform	compute.py	/^	def transform(self, X, y=None):$/;"	m	class:Identity
transform	multipers/data/MOL2.py	/^    def transform(self, X: Iterable[str]):$/;"	m	class:Molecule2SimplexTree
transform	multipers/data/graphs.py	/^    def transform(self, X: list[nx.Graph]):$/;"	m	class:Graph2SimplexTrees
transform	multipers/data/pytorch2simplextree.py	/^	def transform(self,X:list[nx.Graph]):$/;"	m	class:Torch2SimplexTree
transform	multipers/ml/kernels.py	/^    def transform(self, X) -> np.ndarray:$/;"	m	class:DistanceMatrix2Kernel	typeref:typename:np.ndarray
transform	multipers/ml/kernels.py	/^    def transform(self, X):$/;"	m	class:DistanceList2DistanceMatrix
transform	multipers/ml/kernels.py	/^    def transform(self, X):$/;"	m	class:DistanceMatrices2DistancesList
transform	multipers/ml/kernels.py	/^    def transform(self, X):$/;"	m	class:DistanceMatrix2DistanceList
transform	multipers/ml/kernels.py	/^    def transform(self, X):$/;"	m	class:DistancesLists2DistanceMatrices
transform	multipers/ml/mma.py	/^    def transform(self, X) -> list[np.ndarray]:$/;"	m	class:MMA2Landscape	typeref:typename:list[np.ndarray]
transform	multipers/ml/mma.py	/^    def transform(self, X):$/;"	m	class:FilteredComplex2MMA
transform	multipers/ml/mma.py	/^    def transform(self, X):$/;"	m	class:MMA2IMG
transform	multipers/ml/mma.py	/^    def transform(self, X_in):$/;"	m	class:MMAFormatter
transform	multipers/ml/one.py	/^	def transform(self,X)->np.ndarray:$/;"	m	class:Dgms2SWK	typeref:typename:np.ndarray
transform	multipers/ml/one.py	/^	def transform(self,X): # X is a list (data) of list of diagrams$/;"	m	class:Dgms2SignedMeasureDistance
transform	multipers/ml/one.py	/^	def transform(self,X): # X is a list (data) of list of diagrams$/;"	m	class:Dgms2SignedMeasureHistogram
transform	multipers/ml/one.py	/^	def transform(self,X): # X is a list (data) of list of diagrams$/;"	m	class:Dgms2SignedMeasureImage
transform	multipers/ml/one.py	/^	def transform(self,X):$/;"	m	class:Dgm2Histogram
transform	multipers/ml/one.py	/^	def transform(self,X):$/;"	m	class:Dgms2Image
transform	multipers/ml/one.py	/^	def transform(self,X):$/;"	m	class:Dgms2Landscapes
transform	multipers/ml/one.py	/^	def transform(self,X):$/;"	m	class:Dgms2SlicedWassersteinDistanceMatrices
transform	multipers/ml/one.py	/^	def transform(self,X):$/;"	m	class:FilvecGetter
transform	multipers/ml/one.py	/^	def transform(self,X):$/;"	m	class:SimplexTree2Histogram
transform	multipers/ml/one.py	/^	def transform(self,X:list[gd.SimplexTree]):$/;"	m	class:SimplexTree2Dgm
transform	multipers/ml/one.py	/^	def transform(self,X:list[list[np.ndarray]]):$/;"	m	class:DiagramShuffle
transform	multipers/ml/one.py	/^	def transform(self,X:list[nx.Graph]):$/;"	m	class:Graph2SimplexTree
transform	multipers/ml/one.py	/^	def transform(self,X:list[nx.Graph]):$/;"	m	class:PointCloud2SimplexTree
transform	multipers/ml/point_clouds.py	/^    def transform(self, X):$/;"	m	class:PointCloud2FilteredComplex
transform	multipers/ml/signed_measures.py	/^    def transform(self, X):$/;"	m	class:DegreeRips2SignedMeasure
transform	multipers/ml/signed_measures.py	/^    def transform(self, X):$/;"	m	class:FilteredComplex2SignedMeasure
transform	multipers/ml/signed_measures.py	/^    def transform(self, X):$/;"	m	class:SignedMeasure2Convolution
transform	multipers/ml/signed_measures.py	/^    def transform(self, X):$/;"	m	class:SignedMeasure2SlicedWassersteinDistance
transform	multipers/ml/signed_measures.py	/^    def transform(self, X):$/;"	m	class:SignedMeasureFormatter
transform	multipers/ml/signed_measures.py	/^    def transform(self, X):$/;"	m	class:SignedMeasures2SlicedWassersteinDistances
transform	multipers/ml/signed_measures.py	/^    def transform(self, X: Iterable[mp.simplex_tree_multi.SimplexTreeMulti_type]):$/;"	m	class:SimplexTree2RectangleDecomposition
transform	multipers/ml/sliced_wasserstein.py	/^    def transform(self, X):$/;"	m	class:SlicedWassersteinDistance
transform	multipers/ml/sliced_wasserstein.py	/^    def transform(self, X):$/;"	m	class:WassersteinDistance
transform	multipers/ml/tools.py	/^    def transform(self, X):$/;"	m	class:SimplexTreeEdgeCollapser
transform	multipers_old.py	/^	def transform(self, X):$/;"	m	class:MultiPersistenceImageWrapper
transform	multipers_old.py	/^	def transform(self, X):$/;"	m	class:MultiPersistenceLandscapeWrapper
transform	multipers_old.py	/^	def transform(self, X):$/;"	m	class:PersistenceImageWrapper
transform	multipers_old.py	/^	def transform(self, X):$/;"	m	class:SubsampleWrapper
transform1	multipers/ml/signed_measures.py	/^    def transform1($/;"	m	class:FilteredComplex2SignedMeasure
translate	multipers/multiparameter_module_approximation/approximation.h	/^  inline void translate(const std::vector<value_type> &translation) {$/;"	f	class:Gudhi::multiparameter::mma::Summand	typeref:typename:void
translate	multipers/multiparameter_module_approximation/approximation.h	/^inline void Module<value_type>::translate(const std::vector<value_type> &translation, int degree/;"	f	class:Gudhi::multiparameter::mma::Module	typeref:typename:void
transverse_idx_	multipers/gudhi/gudhi/Persistent_cohomology.h	/^  std::map<Simplex_key, cocycle> transverse_idx_;$/;"	m	class:Gudhi::persistent_cohomology::Persistent_cohomology	typeref:typename:std::map<Simplex_key,cocycle>
truc_interface	multipers/gudhi/mma_interface_coh.h	/^namespace truc_interface {$/;"	n	namespace:Gudhi::multiparameter
truc_interface	multipers/gudhi/mma_interface_h0.h	/^namespace truc_interface {$/;"	n	namespace:Gudhi::multiparameter
truc_interface	multipers/gudhi/mma_interface_matrix.h	/^namespace truc_interface {$/;"	n	namespace:Gudhi::multiparameter
truc_interface	multipers/gudhi/truc.h	/^namespace truc_interface {$/;"	n	namespace:Gudhi::multiparameter
truc_ptr	multipers/gudhi/truc.h	/^    const Truc *truc_ptr;$/;"	m	class:Gudhi::multiparameter::truc_interface::Truc::TrucThread	typeref:typename:const Truc *
true_geodesic	compute.py	/^	true_geodesic = args.geodesic_backend == "torch_geometric"$/;"	v
tuple_element	multipers/gudhi/gudhi/persistence_interval.h	/^struct tuple_element<I, Gudhi::persistence_matrix::Persistence_interval<Dimension, Event_value> /;"	s	namespace:std
tuple_size	multipers/gudhi/gudhi/persistence_interval.h	/^struct tuple_size<Gudhi::persistence_matrix::Persistence_interval<Dimension, Event_value> >$/;"	s	namespace:std
type	multipers/gudhi/Persistence_slices_interface.h	/^  using type = ClementMatrixBackendVine<col, PresentationStructure>;$/;"	t	struct:PersBackendOptsImpl	typeref:typename:ClementMatrixBackendVine<col,PresentationStructure>
type	multipers/gudhi/Persistence_slices_interface.h	/^  using type = GraphBackendVine;$/;"	t	struct:PersBackendOptsImpl	typeref:typename:GraphBackendVine
type	multipers/gudhi/Persistence_slices_interface.h	/^  using type = Gudhi::multiparameter::truc_interface::Persistence_backend_cohomology<Presentatio/;"	t	struct:PersBackendOptsImpl	typeref:typename:Gudhi::multiparameter::truc_interface::Persistence_backend_cohomology<PresentationStructure>
type	multipers/gudhi/Persistence_slices_interface.h	/^  using type = Matrix_interface<is_vine, col>;$/;"	t	struct:PersBackendOptsImpl	typeref:typename:Matrix_interface<is_vine,col>
type	multipers/gudhi/gudhi/Simplex_tree/simplex_tree_options.h	/^struct Get_simplex_data_type<O, std::void_t<typename O::Simplex_data>> { typedef typename O::Sim/;"	t	struct:Gudhi::Get_simplex_data_type	typeref:typename:O::Simplex_data
type	multipers/gudhi/gudhi/Simplex_tree/simplex_tree_options.h	/^template <class, class=void> struct Get_simplex_data_type { typedef No_simplex_data type; };$/;"	t	struct:Gudhi::Get_simplex_data_type	typeref:typename:No_simplex_data
u_transposed_	multipers/gudhi/gudhi/Persistence_matrix/ru_rep_cycles.h	/^  std::vector<Cycle> u_transposed_;$/;"	m	class:Gudhi::persistence_matrix::RU_representative_cycles	typeref:typename:std::vector<Cycle>
unassign_paired_chain	multipers/gudhi/gudhi/Persistence_matrix/columns/chain_column_extra_properties.h	/^  void unassign_paired_chain() { pairedColumn_ = -1; };$/;"	f	class:Gudhi::persistence_matrix::Chain_column_extra_properties	typeref:typename:void
unify_lifetimes	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  friend bool unify_lifetimes(Multi_critical_filtration &f1, const Multi_critical_filtration &f2/;"	f	namespace:Gudhi::multi_filtration	typeref:typename:bool
unify_lifetimes	multipers/gudhi/gudhi/One_critical_filtration.h	/^  friend bool unify_lifetimes(One_critical_filtration &f1, const One_critical_filtration &f2) {$/;"	f	namespace:Gudhi::multi_filtration	typeref:typename:bool
unify_lifetimes	multipers/gudhi/gudhi/Simplex_tree/simplex_tree_options.h	/^bool unify_lifetimes(Arithmetic_filtration_value& f1, Arithmetic_filtration_value f2)$/;"	f	namespace:Gudhi	typeref:typename:bool
unlink	multipers/gudhi/gudhi/Persistence_matrix/columns/row_access.h	/^inline void Row_access<Master_matrix>::unlink(Matrix_entry* entry) $/;"	f	class:Gudhi::persistence_matrix::Row_access	typeref:typename:void
unlink_hooks	multipers/gudhi/gudhi/Simplex_tree/hooks_simplex_base.h	/^    void unlink_hooks() { list_max_vertex_hook_.unlink(); }$/;"	f	struct:Gudhi::Hooks_simplex_base_link_nodes	typeref:typename:void
unsparse_signed_measure	multipers/ml/signed_measures.py	/^    def unsparse_signed_measure(self, sparse_signed_measure):$/;"	m	class:SignedMeasureFormatter
update	multipers/multiparameter_module_approximation/vineyards.h	/^inline void Vineyard_persistence<Vineyard_matrix_type>::update($/;"	f	class:Gudhi::multiparameter::mma::Vineyard_persistence	typeref:typename:void
update_cohomology_groups	multipers/gudhi/gudhi/Persistent_cohomology.h	/^  void update_cohomology_groups(Simplex_handle sigma, int dim_sigma) {$/;"	f	class:Gudhi::persistent_cohomology::Persistent_cohomology	typeref:typename:void
update_cohomology_groups_edge	multipers/gudhi/gudhi/Persistent_cohomology.h	/^  void update_cohomology_groups_edge(Simplex_handle sigma) {$/;"	f	class:Gudhi::persistent_cohomology::Persistent_cohomology	typeref:typename:void
update_down	multipers/gudhi/gudhi/Persistence_matrix/matrix_dimension_holders.h	/^  void update_down(unsigned int dimension) {$/;"	f	class:Gudhi::persistence_matrix::Matrix_all_dimension_holder	typeref:typename:void
update_entry	multipers/gudhi/gudhi/Persistence_matrix/columns/row_access.h	/^inline void Row_access<Master_matrix>::update_entry(const Matrix_entry& entry) $/;"	f	class:Gudhi::persistence_matrix::Row_access	typeref:typename:void
update_representative_cycles	multipers/gudhi/gudhi/Matrix.h	/^inline void Matrix<PersistenceMatrixOptions>::update_representative_cycles() $/;"	f	class:Gudhi::persistence_matrix::Matrix	typeref:typename:void
update_representative_cycles	multipers/gudhi/gudhi/Persistence_matrix/Id_to_index_overlay.h	/^inline void Id_to_index_overlay<Underlying_matrix, Master_matrix>::update_representative_cycles(/;"	f	class:Gudhi::persistence_matrix::Id_to_index_overlay	typeref:typename:void
update_representative_cycles	multipers/gudhi/gudhi/Persistence_matrix/Position_to_index_overlay.h	/^inline void Position_to_index_overlay<Underlying_matrix, Master_matrix>::update_representative_c/;"	f	class:Gudhi::persistence_matrix::Position_to_index_overlay	typeref:typename:void
update_representative_cycles	multipers/gudhi/gudhi/Persistence_matrix/chain_rep_cycles.h	/^inline void Chain_representative_cycles<Master_matrix>::update_representative_cycles()$/;"	f	class:Gudhi::persistence_matrix::Chain_representative_cycles	typeref:typename:void
update_representative_cycles	multipers/gudhi/gudhi/Persistence_matrix/ru_rep_cycles.h	/^inline void RU_representative_cycles<Master_matrix>::update_representative_cycles() $/;"	f	class:Gudhi::persistence_matrix::RU_representative_cycles	typeref:typename:void
update_sign_	multipers/gudhi/gudhi/One_critical_filtration.h	/^  constexpr static bool update_sign_(T toComp, int &sign) {$/;"	f	class:Gudhi::multi_filtration::One_critical_filtration	typeref:typename:bool
update_simplex_tree_after_node_insertion	multipers/gudhi/gudhi/Simplex_tree.h	/^  void update_simplex_tree_after_node_insertion(Simplex_handle sh) {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:void
update_simplex_tree_before_node_removal	multipers/gudhi/gudhi/Simplex_tree.h	/^  void update_simplex_tree_before_node_removal(Simplex_handle sh) {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:void
update_up	multipers/gudhi/gudhi/Persistence_matrix/matrix_dimension_holders.h	/^  void update_up(Dimension dimension) {$/;"	f	class:Gudhi::persistence_matrix::Matrix_max_dimension_holder	typeref:typename:void
update_up	multipers/gudhi/gudhi/Persistence_matrix/matrix_dimension_holders.h	/^  void update_up(unsigned int dimension) {$/;"	f	class:Gudhi::persistence_matrix::Matrix_all_dimension_holder	typeref:typename:void
update_weight	multipers/gudhi/naive_merge_tree.h	/^  void update_weight(index id1, index id2, index newWeight) {$/;"	f	class:Naive_bottleneck_forest	typeref:typename:void
upperCorner_	multipers/gudhi/gudhi/Multi_persistence/Box.h	/^  Point upperCorner_; \/**< Greatest of defining corners. *\/$/;"	m	class:Gudhi::multi_persistence::Box	typeref:typename:Point
upper_bound_dimension	multipers/gudhi/gudhi/Simplex_tree.h	/^  int upper_bound_dimension() const { return dimension_; }$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:int
use10	docs/icon.svg	/^         id="use10" \/>$/;"	i
use100	docs/icon.svg	/^         id="use100" \/>$/;"	i
use101	docs/icon.svg	/^         id="use101" \/>$/;"	i
use102	docs/icon.svg	/^         id="use102" \/>$/;"	i
use103	docs/icon.svg	/^         id="use103" \/>$/;"	i
use104	docs/icon.svg	/^         id="use104" \/>$/;"	i
use105	docs/icon.svg	/^         id="use105" \/>$/;"	i
use106	docs/icon.svg	/^         id="use106" \/>$/;"	i
use107	docs/icon.svg	/^         id="use107" \/>$/;"	i
use108	docs/icon.svg	/^         id="use108" \/>$/;"	i
use109	docs/icon.svg	/^         id="use109" \/>$/;"	i
use11	docs/icon.svg	/^         id="use11" \/>$/;"	i
use110	docs/icon.svg	/^         id="use110" \/>$/;"	i
use111	docs/icon.svg	/^         id="use111" \/>$/;"	i
use112	docs/icon.svg	/^         id="use112" \/>$/;"	i
use113	docs/icon.svg	/^         id="use113" \/>$/;"	i
use114	docs/icon.svg	/^         id="use114" \/>$/;"	i
use115	docs/icon.svg	/^         id="use115" \/>$/;"	i
use116	docs/icon.svg	/^         id="use116" \/>$/;"	i
use117	docs/icon.svg	/^         id="use117" \/>$/;"	i
use118	docs/icon.svg	/^         id="use118" \/>$/;"	i
use119	docs/icon.svg	/^         id="use119" \/>$/;"	i
use12	docs/icon.svg	/^         id="use12" \/>$/;"	i
use120	docs/icon.svg	/^         id="use120" \/>$/;"	i
use121	docs/icon.svg	/^         id="use121" \/>$/;"	i
use122	docs/icon.svg	/^         id="use122" \/>$/;"	i
use123	docs/icon.svg	/^         id="use123" \/>$/;"	i
use124	docs/icon.svg	/^         id="use124" \/>$/;"	i
use125	docs/icon.svg	/^         id="use125" \/>$/;"	i
use126	docs/icon.svg	/^         id="use126" \/>$/;"	i
use127	docs/icon.svg	/^         id="use127" \/>$/;"	i
use128	docs/icon.svg	/^         id="use128" \/>$/;"	i
use129	docs/icon.svg	/^         id="use129" \/>$/;"	i
use13	docs/icon.svg	/^         id="use13" \/>$/;"	i
use130	docs/icon.svg	/^         id="use130" \/>$/;"	i
use131	docs/icon.svg	/^         id="use131" \/>$/;"	i
use132	docs/icon.svg	/^         id="use132" \/>$/;"	i
use133	docs/icon.svg	/^         id="use133" \/>$/;"	i
use134	docs/icon.svg	/^         id="use134" \/>$/;"	i
use135	docs/icon.svg	/^         id="use135" \/>$/;"	i
use136	docs/icon.svg	/^         id="use136" \/>$/;"	i
use137	docs/icon.svg	/^         id="use137" \/>$/;"	i
use138	docs/icon.svg	/^         id="use138" \/>$/;"	i
use139	docs/icon.svg	/^         id="use139" \/>$/;"	i
use14	docs/icon.svg	/^         id="use14" \/>$/;"	i
use140	docs/icon.svg	/^         id="use140" \/>$/;"	i
use141	docs/icon.svg	/^         id="use141" \/>$/;"	i
use142	docs/icon.svg	/^         id="use142" \/>$/;"	i
use143	docs/icon.svg	/^         id="use143" \/>$/;"	i
use144	docs/icon.svg	/^         id="use144" \/>$/;"	i
use145	docs/icon.svg	/^         id="use145" \/>$/;"	i
use146	docs/icon.svg	/^         id="use146" \/>$/;"	i
use147	docs/icon.svg	/^         id="use147" \/>$/;"	i
use148	docs/icon.svg	/^         id="use148" \/>$/;"	i
use149	docs/icon.svg	/^         id="use149" \/>$/;"	i
use15	docs/icon.svg	/^         id="use15" \/>$/;"	i
use150	docs/icon.svg	/^         id="use150" \/>$/;"	i
use151	docs/icon.svg	/^         id="use151" \/>$/;"	i
use152	docs/icon.svg	/^         id="use152" \/>$/;"	i
use153	docs/icon.svg	/^         id="use153" \/>$/;"	i
use154	docs/icon.svg	/^         id="use154" \/>$/;"	i
use155	docs/icon.svg	/^         id="use155" \/>$/;"	i
use156	docs/icon.svg	/^         id="use156" \/>$/;"	i
use157	docs/icon.svg	/^         id="use157" \/>$/;"	i
use158	docs/icon.svg	/^         id="use158" \/>$/;"	i
use159	docs/icon.svg	/^         id="use159" \/>$/;"	i
use16	docs/icon.svg	/^         id="use16" \/>$/;"	i
use160	docs/icon.svg	/^         id="use160" \/>$/;"	i
use161	docs/icon.svg	/^         id="use161" \/>$/;"	i
use162	docs/icon.svg	/^         id="use162" \/>$/;"	i
use163	docs/icon.svg	/^         id="use163" \/>$/;"	i
use164	docs/icon.svg	/^         id="use164" \/>$/;"	i
use165	docs/icon.svg	/^         id="use165" \/>$/;"	i
use166	docs/icon.svg	/^         id="use166" \/>$/;"	i
use167	docs/icon.svg	/^         id="use167" \/>$/;"	i
use168	docs/icon.svg	/^         id="use168" \/>$/;"	i
use169	docs/icon.svg	/^         id="use169" \/>$/;"	i
use17	docs/icon.svg	/^         id="use17" \/>$/;"	i
use170	docs/icon.svg	/^         id="use170" \/>$/;"	i
use171	docs/icon.svg	/^         id="use171" \/>$/;"	i
use172	docs/icon.svg	/^         id="use172" \/>$/;"	i
use173	docs/icon.svg	/^         id="use173" \/>$/;"	i
use174	docs/icon.svg	/^         id="use174" \/>$/;"	i
use175	docs/icon.svg	/^         id="use175" \/>$/;"	i
use176	docs/icon.svg	/^         id="use176" \/>$/;"	i
use177	docs/icon.svg	/^         id="use177" \/>$/;"	i
use178	docs/icon.svg	/^         id="use178" \/>$/;"	i
use179	docs/icon.svg	/^         id="use179" \/>$/;"	i
use18	docs/icon.svg	/^         id="use18" \/>$/;"	i
use180	docs/icon.svg	/^         id="use180" \/>$/;"	i
use181	docs/icon.svg	/^         id="use181" \/>$/;"	i
use182	docs/icon.svg	/^         id="use182" \/>$/;"	i
use183	docs/icon.svg	/^         id="use183" \/>$/;"	i
use184	docs/icon.svg	/^         id="use184" \/>$/;"	i
use185	docs/icon.svg	/^         id="use185" \/>$/;"	i
use186	docs/icon.svg	/^         id="use186" \/>$/;"	i
use187	docs/icon.svg	/^         id="use187" \/>$/;"	i
use188	docs/icon.svg	/^         id="use188" \/>$/;"	i
use189	docs/icon.svg	/^         id="use189" \/>$/;"	i
use19	docs/icon.svg	/^         id="use19" \/>$/;"	i
use190	docs/icon.svg	/^         id="use190" \/>$/;"	i
use191	docs/icon.svg	/^         id="use191" \/>$/;"	i
use192	docs/icon.svg	/^         id="use192" \/>$/;"	i
use193	docs/icon.svg	/^         id="use193" \/>$/;"	i
use194	docs/icon.svg	/^         id="use194" \/>$/;"	i
use195	docs/icon.svg	/^         id="use195" \/>$/;"	i
use196	docs/icon.svg	/^         id="use196" \/>$/;"	i
use197	docs/icon.svg	/^         id="use197" \/>$/;"	i
use198	docs/icon.svg	/^         id="use198" \/>$/;"	i
use199	docs/icon.svg	/^         id="use199" \/>$/;"	i
use2	docs/icon.svg	/^         id="use2" \/>$/;"	i
use20	docs/icon.svg	/^         id="use20" \/>$/;"	i
use200	docs/icon.svg	/^         id="use200" \/>$/;"	i
use201	docs/icon.svg	/^         id="use201" \/>$/;"	i
use202	docs/icon.svg	/^         id="use202" \/>$/;"	i
use203	docs/icon.svg	/^         id="use203" \/>$/;"	i
use204	docs/icon.svg	/^         id="use204" \/>$/;"	i
use205	docs/icon.svg	/^         id="use205" \/>$/;"	i
use206	docs/icon.svg	/^         id="use206" \/>$/;"	i
use207	docs/icon.svg	/^         id="use207" \/>$/;"	i
use208	docs/icon.svg	/^         id="use208" \/>$/;"	i
use209	docs/icon.svg	/^         id="use209" \/>$/;"	i
use21	docs/icon.svg	/^         id="use21" \/>$/;"	i
use210	docs/icon.svg	/^         id="use210" \/>$/;"	i
use211	docs/icon.svg	/^         id="use211" \/>$/;"	i
use212	docs/icon.svg	/^         id="use212" \/>$/;"	i
use213	docs/icon.svg	/^         id="use213" \/>$/;"	i
use214	docs/icon.svg	/^         id="use214" \/>$/;"	i
use215	docs/icon.svg	/^         id="use215" \/>$/;"	i
use216	docs/icon.svg	/^         id="use216" \/>$/;"	i
use217	docs/icon.svg	/^         id="use217" \/>$/;"	i
use218	docs/icon.svg	/^         id="use218" \/>$/;"	i
use219	docs/icon.svg	/^         id="use219" \/>$/;"	i
use22	docs/icon.svg	/^         id="use22" \/>$/;"	i
use220	docs/icon.svg	/^         id="use220" \/>$/;"	i
use221	docs/icon.svg	/^         id="use221" \/>$/;"	i
use222	docs/icon.svg	/^         id="use222" \/>$/;"	i
use223	docs/icon.svg	/^         id="use223" \/>$/;"	i
use224	docs/icon.svg	/^         id="use224" \/>$/;"	i
use225	docs/icon.svg	/^         id="use225" \/>$/;"	i
use226	docs/icon.svg	/^         id="use226" \/>$/;"	i
use227	docs/icon.svg	/^         id="use227" \/>$/;"	i
use228	docs/icon.svg	/^         id="use228" \/>$/;"	i
use229	docs/icon.svg	/^         id="use229" \/>$/;"	i
use23	docs/icon.svg	/^         id="use23" \/>$/;"	i
use230	docs/icon.svg	/^         id="use230" \/>$/;"	i
use231	docs/icon.svg	/^         id="use231" \/>$/;"	i
use232	docs/icon.svg	/^         id="use232" \/>$/;"	i
use233	docs/icon.svg	/^         id="use233" \/>$/;"	i
use234	docs/icon.svg	/^         id="use234" \/>$/;"	i
use235	docs/icon.svg	/^         id="use235" \/>$/;"	i
use236	docs/icon.svg	/^         id="use236" \/>$/;"	i
use237	docs/icon.svg	/^         id="use237" \/>$/;"	i
use238	docs/icon.svg	/^         id="use238" \/>$/;"	i
use239	docs/icon.svg	/^         id="use239" \/>$/;"	i
use24	docs/icon.svg	/^         id="use24" \/>$/;"	i
use240	docs/icon.svg	/^         id="use240" \/>$/;"	i
use241	docs/icon.svg	/^         id="use241" \/>$/;"	i
use242	docs/icon.svg	/^         id="use242" \/>$/;"	i
use243	docs/icon.svg	/^         id="use243" \/>$/;"	i
use244	docs/icon.svg	/^         id="use244" \/>$/;"	i
use245	docs/icon.svg	/^         id="use245" \/>$/;"	i
use246	docs/icon.svg	/^         id="use246" \/>$/;"	i
use247	docs/icon.svg	/^         id="use247" \/>$/;"	i
use248	docs/icon.svg	/^         id="use248" \/>$/;"	i
use249	docs/icon.svg	/^         id="use249" \/>$/;"	i
use25	docs/icon.svg	/^         id="use25" \/>$/;"	i
use250	docs/icon.svg	/^         id="use250" \/>$/;"	i
use251	docs/icon.svg	/^         id="use251" \/>$/;"	i
use252	docs/icon.svg	/^         id="use252" \/>$/;"	i
use253	docs/icon.svg	/^         id="use253" \/>$/;"	i
use254	docs/icon.svg	/^         id="use254" \/>$/;"	i
use255	docs/icon.svg	/^         id="use255" \/>$/;"	i
use256	docs/icon.svg	/^         id="use256" \/>$/;"	i
use257	docs/icon.svg	/^         id="use257" \/>$/;"	i
use258	docs/icon.svg	/^         id="use258" \/>$/;"	i
use259	docs/icon.svg	/^         id="use259" \/>$/;"	i
use26	docs/icon.svg	/^         id="use26" \/>$/;"	i
use260	docs/icon.svg	/^         id="use260" \/>$/;"	i
use261	docs/icon.svg	/^         id="use261" \/>$/;"	i
use262	docs/icon.svg	/^         id="use262" \/>$/;"	i
use263	docs/icon.svg	/^         id="use263" \/>$/;"	i
use264	docs/icon.svg	/^         id="use264" \/>$/;"	i
use265	docs/icon.svg	/^         id="use265" \/>$/;"	i
use266	docs/icon.svg	/^         id="use266" \/>$/;"	i
use267	docs/icon.svg	/^         id="use267" \/>$/;"	i
use268	docs/icon.svg	/^         id="use268" \/>$/;"	i
use269	docs/icon.svg	/^         id="use269" \/>$/;"	i
use27	docs/icon.svg	/^         id="use27" \/>$/;"	i
use270	docs/icon.svg	/^         id="use270" \/>$/;"	i
use271	docs/icon.svg	/^         id="use271" \/>$/;"	i
use272	docs/icon.svg	/^         id="use272" \/>$/;"	i
use273	docs/icon.svg	/^         id="use273" \/>$/;"	i
use274	docs/icon.svg	/^         id="use274" \/>$/;"	i
use275	docs/icon.svg	/^         id="use275" \/>$/;"	i
use276	docs/icon.svg	/^         id="use276" \/>$/;"	i
use277	docs/icon.svg	/^         id="use277" \/>$/;"	i
use278	docs/icon.svg	/^         id="use278" \/>$/;"	i
use279	docs/icon.svg	/^         id="use279" \/>$/;"	i
use28	docs/icon.svg	/^         id="use28" \/>$/;"	i
use280	docs/icon.svg	/^         id="use280" \/>$/;"	i
use281	docs/icon.svg	/^         id="use281" \/>$/;"	i
use282	docs/icon.svg	/^         id="use282" \/>$/;"	i
use283	docs/icon.svg	/^         id="use283" \/>$/;"	i
use284	docs/icon.svg	/^         id="use284" \/>$/;"	i
use285	docs/icon.svg	/^         id="use285" \/>$/;"	i
use286	docs/icon.svg	/^         id="use286" \/>$/;"	i
use287	docs/icon.svg	/^         id="use287" \/>$/;"	i
use288	docs/icon.svg	/^         id="use288" \/>$/;"	i
use289	docs/icon.svg	/^         id="use289" \/>$/;"	i
use29	docs/icon.svg	/^         id="use29" \/>$/;"	i
use290	docs/icon.svg	/^         id="use290" \/>$/;"	i
use291	docs/icon.svg	/^         id="use291" \/>$/;"	i
use292	docs/icon.svg	/^         id="use292" \/>$/;"	i
use293	docs/icon.svg	/^         id="use293" \/>$/;"	i
use294	docs/icon.svg	/^         id="use294" \/>$/;"	i
use295	docs/icon.svg	/^         id="use295" \/>$/;"	i
use296	docs/icon.svg	/^         id="use296" \/>$/;"	i
use297	docs/icon.svg	/^         id="use297" \/>$/;"	i
use298	docs/icon.svg	/^         id="use298" \/>$/;"	i
use299	docs/icon.svg	/^         id="use299" \/>$/;"	i
use3	docs/icon.svg	/^         id="use3" \/>$/;"	i
use30	docs/icon.svg	/^         id="use30" \/>$/;"	i
use300	docs/icon.svg	/^         id="use300" \/>$/;"	i
use301	docs/icon.svg	/^         id="use301" \/>$/;"	i
use302	docs/icon.svg	/^         id="use302" \/>$/;"	i
use303	docs/icon.svg	/^         id="use303" \/>$/;"	i
use304	docs/icon.svg	/^         id="use304" \/>$/;"	i
use305	docs/icon.svg	/^         id="use305" \/>$/;"	i
use306	docs/icon.svg	/^         id="use306" \/>$/;"	i
use307	docs/icon.svg	/^         id="use307" \/>$/;"	i
use308	docs/icon.svg	/^         id="use308" \/>$/;"	i
use309	docs/icon.svg	/^         id="use309" \/>$/;"	i
use31	docs/icon.svg	/^         id="use31" \/>$/;"	i
use310	docs/icon.svg	/^         id="use310" \/>$/;"	i
use311	docs/icon.svg	/^         id="use311" \/>$/;"	i
use312	docs/icon.svg	/^         id="use312" \/>$/;"	i
use313	docs/icon.svg	/^         id="use313" \/>$/;"	i
use314	docs/icon.svg	/^         id="use314" \/>$/;"	i
use315	docs/icon.svg	/^         id="use315" \/>$/;"	i
use316	docs/icon.svg	/^         id="use316" \/>$/;"	i
use317	docs/icon.svg	/^         id="use317" \/>$/;"	i
use318	docs/icon.svg	/^         id="use318" \/>$/;"	i
use319	docs/icon.svg	/^         id="use319" \/>$/;"	i
use32	docs/icon.svg	/^         id="use32" \/>$/;"	i
use320	docs/icon.svg	/^         id="use320" \/>$/;"	i
use321	docs/icon.svg	/^         id="use321" \/>$/;"	i
use322	docs/icon.svg	/^         id="use322" \/>$/;"	i
use323	docs/icon.svg	/^         id="use323" \/>$/;"	i
use324	docs/icon.svg	/^         id="use324" \/>$/;"	i
use325	docs/icon.svg	/^         id="use325" \/>$/;"	i
use326	docs/icon.svg	/^         id="use326" \/>$/;"	i
use327	docs/icon.svg	/^         id="use327" \/>$/;"	i
use328	docs/icon.svg	/^         id="use328" \/>$/;"	i
use329	docs/icon.svg	/^         id="use329" \/>$/;"	i
use33	docs/icon.svg	/^         id="use33" \/>$/;"	i
use330	docs/icon.svg	/^         id="use330" \/>$/;"	i
use331	docs/icon.svg	/^         id="use331" \/>$/;"	i
use332	docs/icon.svg	/^         id="use332" \/>$/;"	i
use333	docs/icon.svg	/^         id="use333" \/>$/;"	i
use334	docs/icon.svg	/^         id="use334" \/>$/;"	i
use335	docs/icon.svg	/^         id="use335" \/>$/;"	i
use336	docs/icon.svg	/^         id="use336" \/>$/;"	i
use337	docs/icon.svg	/^         id="use337" \/>$/;"	i
use338	docs/icon.svg	/^         id="use338" \/>$/;"	i
use339	docs/icon.svg	/^         id="use339" \/>$/;"	i
use34	docs/icon.svg	/^         id="use34" \/>$/;"	i
use340	docs/icon.svg	/^         id="use340" \/>$/;"	i
use341	docs/icon.svg	/^         id="use341" \/>$/;"	i
use342	docs/icon.svg	/^         id="use342" \/>$/;"	i
use343	docs/icon.svg	/^         id="use343" \/>$/;"	i
use344	docs/icon.svg	/^         id="use344" \/>$/;"	i
use345	docs/icon.svg	/^         id="use345" \/>$/;"	i
use346	docs/icon.svg	/^         id="use346" \/>$/;"	i
use347	docs/icon.svg	/^         id="use347" \/>$/;"	i
use348	docs/icon.svg	/^         id="use348" \/>$/;"	i
use349	docs/icon.svg	/^         id="use349" \/>$/;"	i
use35	docs/icon.svg	/^         id="use35" \/>$/;"	i
use350	docs/icon.svg	/^         id="use350" \/>$/;"	i
use351	docs/icon.svg	/^         id="use351" \/>$/;"	i
use352	docs/icon.svg	/^         id="use352" \/>$/;"	i
use353	docs/icon.svg	/^         id="use353" \/>$/;"	i
use354	docs/icon.svg	/^         id="use354" \/>$/;"	i
use355	docs/icon.svg	/^         id="use355" \/>$/;"	i
use356	docs/icon.svg	/^         id="use356" \/>$/;"	i
use357	docs/icon.svg	/^         id="use357" \/>$/;"	i
use358	docs/icon.svg	/^         id="use358" \/>$/;"	i
use359	docs/icon.svg	/^         id="use359" \/>$/;"	i
use36	docs/icon.svg	/^         id="use36" \/>$/;"	i
use360	docs/icon.svg	/^         id="use360" \/>$/;"	i
use361	docs/icon.svg	/^         id="use361" \/>$/;"	i
use362	docs/icon.svg	/^         id="use362" \/>$/;"	i
use363	docs/icon.svg	/^         id="use363" \/>$/;"	i
use364	docs/icon.svg	/^         id="use364" \/>$/;"	i
use365	docs/icon.svg	/^         id="use365" \/>$/;"	i
use366	docs/icon.svg	/^         id="use366" \/>$/;"	i
use367	docs/icon.svg	/^         id="use367" \/>$/;"	i
use368	docs/icon.svg	/^         id="use368" \/>$/;"	i
use369	docs/icon.svg	/^         id="use369" \/>$/;"	i
use37	docs/icon.svg	/^         id="use37" \/>$/;"	i
use370	docs/icon.svg	/^         id="use370" \/>$/;"	i
use371	docs/icon.svg	/^         id="use371" \/>$/;"	i
use372	docs/icon.svg	/^         id="use372" \/>$/;"	i
use373	docs/icon.svg	/^         id="use373" \/>$/;"	i
use374	docs/icon.svg	/^         id="use374" \/>$/;"	i
use375	docs/icon.svg	/^         id="use375" \/>$/;"	i
use376	docs/icon.svg	/^         id="use376" \/>$/;"	i
use377	docs/icon.svg	/^         id="use377" \/>$/;"	i
use378	docs/icon.svg	/^         id="use378" \/>$/;"	i
use379	docs/icon.svg	/^         id="use379" \/>$/;"	i
use38	docs/icon.svg	/^         id="use38" \/>$/;"	i
use380	docs/icon.svg	/^         id="use380" \/>$/;"	i
use381	docs/icon.svg	/^         id="use381" \/>$/;"	i
use382	docs/icon.svg	/^         id="use382" \/>$/;"	i
use383	docs/icon.svg	/^         id="use383" \/>$/;"	i
use384	docs/icon.svg	/^         id="use384" \/>$/;"	i
use385	docs/icon.svg	/^         id="use385" \/>$/;"	i
use386	docs/icon.svg	/^         id="use386" \/>$/;"	i
use387	docs/icon.svg	/^         id="use387" \/>$/;"	i
use388	docs/icon.svg	/^         id="use388" \/>$/;"	i
use389	docs/icon.svg	/^         id="use389" \/>$/;"	i
use39	docs/icon.svg	/^         id="use39" \/>$/;"	i
use390	docs/icon.svg	/^         id="use390" \/>$/;"	i
use391	docs/icon.svg	/^         id="use391" \/>$/;"	i
use392	docs/icon.svg	/^         id="use392" \/>$/;"	i
use393	docs/icon.svg	/^         id="use393" \/>$/;"	i
use394	docs/icon.svg	/^         id="use394" \/>$/;"	i
use395	docs/icon.svg	/^         id="use395" \/>$/;"	i
use396	docs/icon.svg	/^         id="use396" \/>$/;"	i
use397	docs/icon.svg	/^         id="use397" \/>$/;"	i
use398	docs/icon.svg	/^         id="use398" \/>$/;"	i
use399	docs/icon.svg	/^         id="use399" \/>$/;"	i
use4	docs/icon.svg	/^         id="use4" \/>$/;"	i
use40	docs/icon.svg	/^         id="use40" \/>$/;"	i
use400	docs/icon.svg	/^         id="use400" \/>$/;"	i
use401	docs/icon.svg	/^         id="use401" \/>$/;"	i
use402	docs/icon.svg	/^         id="use402" \/>$/;"	i
use403	docs/icon.svg	/^         id="use403" \/>$/;"	i
use404	docs/icon.svg	/^         id="use404" \/>$/;"	i
use405	docs/icon.svg	/^         id="use405" \/>$/;"	i
use406	docs/icon.svg	/^         id="use406" \/>$/;"	i
use407	docs/icon.svg	/^         id="use407" \/>$/;"	i
use408	docs/icon.svg	/^         id="use408" \/>$/;"	i
use409	docs/icon.svg	/^         id="use409" \/>$/;"	i
use41	docs/icon.svg	/^         id="use41" \/>$/;"	i
use410	docs/icon.svg	/^         id="use410" \/>$/;"	i
use411	docs/icon.svg	/^         id="use411" \/>$/;"	i
use412	docs/icon.svg	/^         id="use412" \/>$/;"	i
use413	docs/icon.svg	/^         id="use413" \/>$/;"	i
use414	docs/icon.svg	/^         id="use414" \/>$/;"	i
use415	docs/icon.svg	/^         id="use415" \/>$/;"	i
use416	docs/icon.svg	/^         id="use416" \/>$/;"	i
use417	docs/icon.svg	/^         id="use417" \/>$/;"	i
use418	docs/icon.svg	/^         id="use418" \/>$/;"	i
use419	docs/icon.svg	/^         id="use419" \/>$/;"	i
use42	docs/icon.svg	/^         id="use42" \/>$/;"	i
use420	docs/icon.svg	/^         id="use420" \/>$/;"	i
use421	docs/icon.svg	/^         id="use421" \/>$/;"	i
use422	docs/icon.svg	/^         id="use422" \/>$/;"	i
use423	docs/icon.svg	/^         id="use423" \/>$/;"	i
use424	docs/icon.svg	/^         id="use424" \/>$/;"	i
use425	docs/icon.svg	/^         id="use425" \/>$/;"	i
use426	docs/icon.svg	/^         id="use426" \/>$/;"	i
use427	docs/icon.svg	/^         id="use427" \/>$/;"	i
use428	docs/icon.svg	/^         id="use428" \/>$/;"	i
use429	docs/icon.svg	/^         id="use429" \/>$/;"	i
use43	docs/icon.svg	/^         id="use43" \/>$/;"	i
use430	docs/icon.svg	/^         id="use430" \/>$/;"	i
use431	docs/icon.svg	/^         id="use431" \/>$/;"	i
use432	docs/icon.svg	/^         id="use432" \/>$/;"	i
use433	docs/icon.svg	/^         id="use433" \/>$/;"	i
use434	docs/icon.svg	/^         id="use434" \/>$/;"	i
use435	docs/icon.svg	/^         id="use435" \/>$/;"	i
use436	docs/icon.svg	/^         id="use436" \/>$/;"	i
use437	docs/icon.svg	/^         id="use437" \/>$/;"	i
use438	docs/icon.svg	/^         id="use438" \/>$/;"	i
use439	docs/icon.svg	/^         id="use439" \/>$/;"	i
use44	docs/icon.svg	/^         id="use44" \/>$/;"	i
use440	docs/icon.svg	/^         id="use440" \/>$/;"	i
use441	docs/icon.svg	/^         id="use441" \/>$/;"	i
use442	docs/icon.svg	/^         id="use442" \/>$/;"	i
use443	docs/icon.svg	/^         id="use443" \/>$/;"	i
use444	docs/icon.svg	/^         id="use444" \/>$/;"	i
use445	docs/icon.svg	/^         id="use445" \/>$/;"	i
use446	docs/icon.svg	/^         id="use446" \/>$/;"	i
use447	docs/icon.svg	/^         id="use447" \/>$/;"	i
use448	docs/icon.svg	/^         id="use448" \/>$/;"	i
use449	docs/icon.svg	/^         id="use449" \/>$/;"	i
use45	docs/icon.svg	/^         id="use45" \/>$/;"	i
use450	docs/icon.svg	/^         id="use450" \/>$/;"	i
use451	docs/icon.svg	/^         id="use451" \/>$/;"	i
use452	docs/icon.svg	/^         id="use452" \/>$/;"	i
use453	docs/icon.svg	/^         id="use453" \/>$/;"	i
use454	docs/icon.svg	/^         id="use454" \/>$/;"	i
use455	docs/icon.svg	/^         id="use455" \/>$/;"	i
use456	docs/icon.svg	/^         id="use456" \/>$/;"	i
use457	docs/icon.svg	/^         id="use457" \/>$/;"	i
use458	docs/icon.svg	/^         id="use458" \/>$/;"	i
use459	docs/icon.svg	/^         id="use459" \/>$/;"	i
use46	docs/icon.svg	/^         id="use46" \/>$/;"	i
use460	docs/icon.svg	/^         id="use460" \/>$/;"	i
use461	docs/icon.svg	/^         id="use461" \/>$/;"	i
use462	docs/icon.svg	/^         id="use462" \/>$/;"	i
use463	docs/icon.svg	/^         id="use463" \/>$/;"	i
use464	docs/icon.svg	/^         id="use464" \/>$/;"	i
use465	docs/icon.svg	/^         id="use465" \/>$/;"	i
use466	docs/icon.svg	/^         id="use466" \/>$/;"	i
use467	docs/icon.svg	/^         id="use467" \/>$/;"	i
use468	docs/icon.svg	/^         id="use468" \/>$/;"	i
use469	docs/icon.svg	/^         id="use469" \/>$/;"	i
use47	docs/icon.svg	/^         id="use47" \/>$/;"	i
use470	docs/icon.svg	/^         id="use470" \/>$/;"	i
use471	docs/icon.svg	/^         id="use471" \/>$/;"	i
use472	docs/icon.svg	/^         id="use472" \/>$/;"	i
use473	docs/icon.svg	/^         id="use473" \/>$/;"	i
use474	docs/icon.svg	/^         id="use474" \/>$/;"	i
use475	docs/icon.svg	/^         id="use475" \/>$/;"	i
use476	docs/icon.svg	/^         id="use476" \/>$/;"	i
use477	docs/icon.svg	/^         id="use477" \/>$/;"	i
use478	docs/icon.svg	/^         id="use478" \/>$/;"	i
use479	docs/icon.svg	/^         id="use479" \/>$/;"	i
use48	docs/icon.svg	/^         id="use48" \/>$/;"	i
use480	docs/icon.svg	/^         id="use480" \/>$/;"	i
use481	docs/icon.svg	/^         id="use481" \/>$/;"	i
use482	docs/icon.svg	/^         id="use482" \/>$/;"	i
use483	docs/icon.svg	/^         id="use483" \/>$/;"	i
use484	docs/icon.svg	/^         id="use484" \/>$/;"	i
use485	docs/icon.svg	/^         id="use485" \/>$/;"	i
use486	docs/icon.svg	/^         id="use486" \/>$/;"	i
use487	docs/icon.svg	/^         id="use487" \/>$/;"	i
use488	docs/icon.svg	/^         id="use488" \/>$/;"	i
use489	docs/icon.svg	/^         id="use489" \/>$/;"	i
use49	docs/icon.svg	/^         id="use49" \/>$/;"	i
use490	docs/icon.svg	/^         id="use490" \/>$/;"	i
use491	docs/icon.svg	/^         id="use491" \/>$/;"	i
use492	docs/icon.svg	/^         id="use492" \/>$/;"	i
use493	docs/icon.svg	/^         id="use493" \/>$/;"	i
use494	docs/icon.svg	/^         id="use494" \/>$/;"	i
use495	docs/icon.svg	/^         id="use495" \/>$/;"	i
use496	docs/icon.svg	/^         id="use496" \/>$/;"	i
use497	docs/icon.svg	/^         id="use497" \/>$/;"	i
use498	docs/icon.svg	/^         id="use498" \/>$/;"	i
use499	docs/icon.svg	/^         id="use499" \/>$/;"	i
use5	docs/icon.svg	/^         id="use5" \/>$/;"	i
use50	docs/icon.svg	/^         id="use50" \/>$/;"	i
use500	docs/icon.svg	/^         id="use500" \/>$/;"	i
use501	docs/icon.svg	/^         id="use501" \/>$/;"	i
use51	docs/icon.svg	/^         id="use51" \/>$/;"	i
use52	docs/icon.svg	/^         id="use52" \/>$/;"	i
use53	docs/icon.svg	/^         id="use53" \/>$/;"	i
use54	docs/icon.svg	/^         id="use54" \/>$/;"	i
use55	docs/icon.svg	/^         id="use55" \/>$/;"	i
use56	docs/icon.svg	/^         id="use56" \/>$/;"	i
use57	docs/icon.svg	/^         id="use57" \/>$/;"	i
use58	docs/icon.svg	/^         id="use58" \/>$/;"	i
use59	docs/icon.svg	/^         id="use59" \/>$/;"	i
use6	docs/icon.svg	/^         id="use6" \/>$/;"	i
use60	docs/icon.svg	/^         id="use60" \/>$/;"	i
use61	docs/icon.svg	/^         id="use61" \/>$/;"	i
use62	docs/icon.svg	/^         id="use62" \/>$/;"	i
use63	docs/icon.svg	/^         id="use63" \/>$/;"	i
use64	docs/icon.svg	/^         id="use64" \/>$/;"	i
use65	docs/icon.svg	/^         id="use65" \/>$/;"	i
use66	docs/icon.svg	/^         id="use66" \/>$/;"	i
use67	docs/icon.svg	/^         id="use67" \/>$/;"	i
use68	docs/icon.svg	/^         id="use68" \/>$/;"	i
use69	docs/icon.svg	/^         id="use69" \/>$/;"	i
use7	docs/icon.svg	/^         id="use7" \/>$/;"	i
use70	docs/icon.svg	/^         id="use70" \/>$/;"	i
use71	docs/icon.svg	/^         id="use71" \/>$/;"	i
use72	docs/icon.svg	/^         id="use72" \/>$/;"	i
use73	docs/icon.svg	/^         id="use73" \/>$/;"	i
use74	docs/icon.svg	/^         id="use74" \/>$/;"	i
use75	docs/icon.svg	/^         id="use75" \/>$/;"	i
use76	docs/icon.svg	/^         id="use76" \/>$/;"	i
use77	docs/icon.svg	/^         id="use77" \/>$/;"	i
use78	docs/icon.svg	/^         id="use78" \/>$/;"	i
use79	docs/icon.svg	/^         id="use79" \/>$/;"	i
use8	docs/icon.svg	/^         id="use8" \/>$/;"	i
use80	docs/icon.svg	/^         id="use80" \/>$/;"	i
use81	docs/icon.svg	/^         id="use81" \/>$/;"	i
use82	docs/icon.svg	/^         id="use82" \/>$/;"	i
use83	docs/icon.svg	/^         id="use83" \/>$/;"	i
use84	docs/icon.svg	/^         id="use84" \/>$/;"	i
use85	docs/icon.svg	/^         id="use85" \/>$/;"	i
use86	docs/icon.svg	/^         id="use86" \/>$/;"	i
use87	docs/icon.svg	/^         id="use87" \/>$/;"	i
use88	docs/icon.svg	/^         id="use88" \/>$/;"	i
use89	docs/icon.svg	/^         id="use89" \/>$/;"	i
use9	docs/icon.svg	/^         id="use9" \/>$/;"	i
use90	docs/icon.svg	/^         id="use90" \/>$/;"	i
use91	docs/icon.svg	/^         id="use91" \/>$/;"	i
use92	docs/icon.svg	/^         id="use92" \/>$/;"	i
use93	docs/icon.svg	/^         id="use93" \/>$/;"	i
use94	docs/icon.svg	/^         id="use94" \/>$/;"	i
use95	docs/icon.svg	/^         id="use95" \/>$/;"	i
use96	docs/icon.svg	/^         id="use96" \/>$/;"	i
use97	docs/icon.svg	/^         id="use97" \/>$/;"	i
use98	docs/icon.svg	/^         id="use98" \/>$/;"	i
use99	docs/icon.svg	/^         id="use99" \/>$/;"	i
user_allocator	multipers/gudhi/gudhi/Simple_object_pool.h	/^  typedef boost::default_user_allocator_malloc_free user_allocator;$/;"	t	class:Gudhi::Simple_object_pool	typeref:typename:boost::default_user_allocator_malloc_free
v_	multipers/gudhi/gudhi/Simplex_tree/Simplex_tree_iterators.h	/^  Vertex_handle v_;$/;"	m	class:Gudhi::Simplex_tree_simplex_vertex_iterator	typeref:typename:Vertex_handle
valid_	multipers/gudhi/gudhi/Points_off_io.h	/^  bool valid_;$/;"	m	class:Gudhi::Points_off_reader	typeref:typename:bool
valid_line	multipers/io.pyx	/^    def valid_line(line):$/;"	f	function:scc_parser	file:
value_type	multipers/gudhi/gudhi/Bitmap_cubical_complex.h	/^    typedef Simplex_handle value_type;$/;"	t	class:Gudhi::cubical_complex::Bitmap_cubical_complex::Skeleton_simplex_iterator	typeref:typename:Simplex_handle
value_type	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^    typedef std::size_t value_type;$/;"	t	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base::Top_dimensional_cells_iterator	typeref:typename:std::size_t
value_type	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^    typedef std::size_t value_type;$/;"	t	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base::Vertices_iterator	typeref:typename:std::size_t
value_type	multipers/gudhi/gudhi/Bitmap_cubical_complex_periodic_boundary_conditions_base.h	/^    typedef std::size_t value_type;$/;"	t	class:Gudhi::cubical_complex::Bitmap_cubical_complex_periodic_boundary_conditions_base::Vertices_iterator	typeref:typename:std::size_t
value_type	multipers/gudhi/gudhi/Multi_critical_filtration.h	/^  using value_type = T; \/**< Entry type. *\/$/;"	t	class:Gudhi::multi_filtration::Multi_critical_filtration	typeref:typename:T
value_type	multipers/gudhi/gudhi/One_critical_filtration.h	/^  using value_type = T;             \/**< Entry type. *\/$/;"	t	class:Gudhi::multi_filtration::One_critical_filtration	typeref:typename:T
value_type	multipers/gudhi/gudhi/Simplex_tree_multi.h	/^  typedef typename Filtration::value_type value_type;$/;"	t	struct:Gudhi::multi_persistence::Simplex_tree_options_multidimensional_filtration	typeref:typename:Filtration::value_type
value_type	multipers/gudhi/truc.h	/^    using value_type = typename MultiFiltration::value_type;$/;"	t	class:Gudhi::multiparameter::truc_interface::Truc::TrucThread	typeref:typename:MultiFiltration::value_type
value_type	multipers/gudhi/truc.h	/^  using value_type = typename MultiFiltration::value_type;$/;"	t	class:Gudhi::multiparameter::truc_interface::Truc	typeref:typename:MultiFiltration::value_type
value_type	multipers/multi_parameter_rank_invariant/diff_helpers.h	/^  using value_type = typename Filtration::value_type;$/;"	t	function:Gudhi::multiparameter::differentiation::get_signed_measure_indices	typeref:typename:Filtration::value_type
value_type	multipers/multi_parameter_rank_invariant/function_rips.h	/^using value_type = typename python_interface::interface_std::Filtration_value;$/;"	t	namespace:Gudhi::multiparameter::function_rips	typeref:typename:python_interface::interface_std::Filtration_value
value_type	multipers/multi_parameter_rank_invariant/hilbert_function.h	/^  using value_type = typename Filtration::value_type;$/;"	t	function:Gudhi::multiparameter::hilbert_function::compute_2d_hilbert_surface	typeref:typename:Filtration::value_type
value_type	multipers/multi_parameter_rank_invariant/rank_invariant.h	/^  using value_type = typename MultiFiltration::value_type;$/;"	t	function:Gudhi::multiparameter::rank_invariant::compute_2d_rank_invariant_of_elbow	typeref:typename:MultiFiltration::value_type
value_type	multipers/multi_parameter_rank_invariant/rank_invariant.h	/^  using value_type = typename Simplex_tree_std::Filtration_value;$/;"	t	function:Gudhi::multiparameter::rank_invariant::compute_2d_rank_invariant_of_elbow	typeref:typename:Simplex_tree_std::Filtration_value
value_type	multipers/multiparameter_module_approximation/approximation.h	/^  using value_type = typename Filtration_value::value_type;$/;"	t	class:Gudhi::multiparameter::mma::LineIterator	typeref:typename:Filtration_value::value_type
value_type	multipers/multiparameter_module_approximation/approximation.h	/^  using value_type = typename Filtration_value::value_type;$/;"	t	function:Gudhi::multiparameter::mma::__add_vineyard_trajectory_to_module	typeref:typename:Filtration_value::value_type
value_type	multipers/multiparameter_module_approximation/format_python-cpp.h	/^  using value_type =$/;"	t	function:Gudhi::multiparameter::mma::function_simplextree_to_scc	typeref:typename:STOptions::Filtration_value::value_type
value_type	multipers/multiparameter_module_approximation/utilities.h	/^using value_type = double;$/;"	t	namespace:Gudhi::multiparameter::mma	typeref:typename:double
value_types	_tempita_grid_gen.py	/^value_types = [$/;"	v
verbose	multipers/multiparameter_module_approximation/utilities.h	/^constexpr const bool verbose = false;$/;"	v	namespace:Gudhi::multiparameter::mma	typeref:typename:const bool
verbose_	multipers/multiparameter_module_approximation/vineyards.h	/^    const bool verbose_;$/;"	m	class:Gudhi::multiparameter::mma::Vineyard_persistence	typeref:typename:const bool
version	docs/conf.py	/^version = mp.__version__$/;"	v
vertex_edge_swap	multipers/gudhi/naive_merge_tree.h	/^  void vertex_edge_swap(index position, index eV1Position, index eV2Position) {$/;"	f	class:Naive_merge_forest	typeref:typename:void
vertex_filtration_t	multipers/gudhi/gudhi/graph_simplicial_complex.h	/^struct vertex_filtration_t {$/;"	s	namespace:Gudhi
vertex_swap	multipers/gudhi/naive_merge_tree.h	/^  void vertex_swap(index position) {$/;"	f	class:Naive_merge_forest	typeref:typename:void
vertex_with_same_filtration	multipers/gudhi/gudhi/Simplex_tree.h	/^  Vertex_handle vertex_with_same_filtration(Simplex_handle sh) {$/;"	f	class:Gudhi::Simplex_tree	typeref:typename:Vertex_handle
vertices_iterator_begin	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^  Vertices_iterator vertices_iterator_begin() {$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base	typeref:typename:Vertices_iterator
vertices_iterator_begin	multipers/gudhi/gudhi/Bitmap_cubical_complex_periodic_boundary_conditions_base.h	/^  Vertices_iterator vertices_iterator_begin() {$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_periodic_boundary_conditions_base	typeref:typename:Vertices_iterator
vertices_iterator_end	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^  Vertices_iterator vertices_iterator_end() {$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base	typeref:typename:Vertices_iterator
vertices_iterator_end	multipers/gudhi/gudhi/Bitmap_cubical_complex_periodic_boundary_conditions_base.h	/^  Vertices_iterator vertices_iterator_end() {$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_periodic_boundary_conditions_base	typeref:typename:Vertices_iterator
vertices_range	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^  Vertices_range vertices_range() { return Vertices_range(this); }$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base	typeref:typename:Vertices_range
vertices_range	multipers/gudhi/gudhi/Bitmap_cubical_complex_periodic_boundary_conditions_base.h	/^  Vertices_range vertices_range() { return Vertices_range(this); }$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_periodic_boundary_conditions_base	typeref:typename:Vertices_range
vine	benchmarks/stuff.py	/^    n, dataset, cplx, inv, degree, vine, dtype, col = args$/;"	v
vine_swap	multipers/gudhi/gudhi/Matrix.h	/^inline bool Matrix<PersistenceMatrixOptions>::vine_swap(Pos_index index) $/;"	f	class:Gudhi::persistence_matrix::Matrix	typeref:typename:bool
vine_swap	multipers/gudhi/gudhi/Matrix.h	/^inline typename Matrix<PersistenceMatrixOptions>::Index Matrix<PersistenceMatrixOptions>::vine_s/;"	f	class:Gudhi::persistence_matrix::Matrix	typeref:typename:Matrix<PersistenceMatrixOptions>::Index
vine_swap	multipers/gudhi/gudhi/Persistence_matrix/Id_to_index_overlay.h	/^Id_to_index_overlay<Underlying_matrix, Master_matrix>::vine_swap(ID_index cellID1, ID_index cell/;"	f	class:Gudhi::persistence_matrix::Id_to_index_overlay	typeref:typename:Id_to_index_overlay<Underlying_matrix,Master_matrix>::ID_index
vine_swap	multipers/gudhi/gudhi/Persistence_matrix/Position_to_index_overlay.h	/^inline bool Position_to_index_overlay<Underlying_matrix, Master_matrix>::vine_swap(Pos_index pos/;"	f	class:Gudhi::persistence_matrix::Position_to_index_overlay	typeref:typename:bool
vine_swap	multipers/gudhi/gudhi/Persistence_matrix/chain_vine_swap.h	/^inline typename Chain_vine_swap<Master_matrix>::Index Chain_vine_swap<Master_matrix>::vine_swap(/;"	f	class:Gudhi::persistence_matrix::Chain_vine_swap	typeref:typename:Chain_vine_swap<Master_matrix>::Index
vine_swap	multipers/gudhi/gudhi/Persistence_matrix/ru_vine_swap.h	/^inline bool RU_vine_swap<Master_matrix>::vine_swap(Pos_index index) $/;"	f	class:Gudhi::persistence_matrix::RU_vine_swap	typeref:typename:bool
vine_swap	multipers/gudhi/mma_interface_h0.h	/^  void vine_swap(pos_index i) {$/;"	f	class:Gudhi::multiparameter::truc_interface::Persistence_backend_h0	typeref:typename:void
vine_swap	multipers/gudhi/mma_interface_matrix.h	/^  inline void vine_swap(pos_index i) { matrix_.vine_swap(i); }$/;"	f	class:Gudhi::multiparameter::truc_interface::Persistence_backend_matrix	typeref:typename:void
vine_swap	multipers/multiparameter_module_approximation/ru_matrix.h	/^inline void RU_matrix<Column_type>::vine_swap(index index) {$/;"	f	class:Gudhi::multiparameter::mma::RU_matrix	typeref:typename:void
vine_swap_with_z_eq_1_case	multipers/gudhi/gudhi/Matrix.h	/^inline bool Matrix<PersistenceMatrixOptions>::vine_swap_with_z_eq_1_case(Pos_index index) $/;"	f	class:Gudhi::persistence_matrix::Matrix	typeref:typename:bool
vine_swap_with_z_eq_1_case	multipers/gudhi/gudhi/Matrix.h	/^inline typename Matrix<PersistenceMatrixOptions>::Index Matrix<PersistenceMatrixOptions>::vine_s/;"	f	class:Gudhi::persistence_matrix::Matrix	typeref:typename:Matrix<PersistenceMatrixOptions>::Index
vine_swap_with_z_eq_1_case	multipers/gudhi/gudhi/Persistence_matrix/Id_to_index_overlay.h	/^Id_to_index_overlay<Underlying_matrix, Master_matrix>::vine_swap_with_z_eq_1_case(ID_index cellI/;"	f	class:Gudhi::persistence_matrix::Id_to_index_overlay	typeref:typename:Id_to_index_overlay<Underlying_matrix,Master_matrix>::ID_index
vine_swap_with_z_eq_1_case	multipers/gudhi/gudhi/Persistence_matrix/Position_to_index_overlay.h	/^inline bool Position_to_index_overlay<Underlying_matrix, Master_matrix>::vine_swap_with_z_eq_1_c/;"	f	class:Gudhi::persistence_matrix::Position_to_index_overlay	typeref:typename:bool
vine_swap_with_z_eq_1_case	multipers/gudhi/gudhi/Persistence_matrix/chain_vine_swap.h	/^inline typename Chain_vine_swap<Master_matrix>::Index Chain_vine_swap<Master_matrix>::vine_swap_/;"	f	class:Gudhi::persistence_matrix::Chain_vine_swap	typeref:typename:Chain_vine_swap<Master_matrix>::Index
vine_swap_with_z_eq_1_case	multipers/gudhi/gudhi/Persistence_matrix/ru_vine_swap.h	/^inline bool RU_vine_swap<Master_matrix>::vine_swap_with_z_eq_1_case(Pos_index index) $/;"	f	class:Gudhi::persistence_matrix::RU_vine_swap	typeref:typename:bool
vineyard	benchmarks/stuff.py	/^vineyard = ["vine", "novine"]$/;"	v
vineyard_update	multipers/gudhi/truc.h	/^    inline void vineyard_update() {$/;"	f	class:Gudhi::multiparameter::truc_interface::Truc::TrucThread	typeref:typename:void
vineyard_update	multipers/gudhi/truc.h	/^  inline void vineyard_update() {$/;"	f	class:Gudhi::multiparameter::truc_interface::Truc	typeref:typename:void
vineyard_update	multipers/gudhi/truc.h	/^  inline void vineyard_update(PersBackend &persistence,$/;"	f	class:Gudhi::multiparameter::truc_interface::Truc	typeref:typename:void
vineyards_values	_tempita_grid_gen.py	/^vineyards_values = [$/;"	v
was_modified	setup.py	/^def was_modified(file):$/;"	f
wasserstein_1	multipers/ml/one.py	/^	def wasserstein_1(a:np.ndarray,b:np.ndarray)->float:$/;"	m	class:Dgms2SignedMeasureDistance	typeref:typename:float
weak_copy	multipers/gudhi/truc.h	/^    inline TrucThread weak_copy() const { return TrucThread(*truc_ptr); }$/;"	f	class:Gudhi::multiparameter::truc_interface::Truc::TrucThread	typeref:typename:TrucThread
weak_copy	multipers/gudhi/truc.h	/^  TrucThread weak_copy() const { return TrucThread(*this); }$/;"	f	class:Gudhi::multiparameter::truc_interface::Truc	typeref:typename:TrucThread
weights_	multipers/gudhi/naive_merge_tree.h	/^      weights_; \/\/ TODO: test other map types and having a pair as key is ugly$/;"	m	class:Naive_bottleneck_forest	typeref:typename:std::unordered_map<std::pair<index,index>,index,boost::hash<std::pair<index,index>>>
write_output_diagram	multipers/gudhi/gudhi/Persistent_cohomology.h	/^  void write_output_diagram(std::string diagram_name) {$/;"	f	class:Gudhi::persistent_cohomology::Persistent_cohomology	typeref:typename:void
write_scc_file	multipers/gudhi/scc_io.h	/^inline void write_scc_file(const std::string& outFilePath,$/;"	f	typeref:typename:void
write_to_scc_file	multipers/gudhi/truc.h	/^  void write_to_scc_file(const std::string &outFilePath,$/;"	f	class:Gudhi::multiparameter::truc_interface::Truc	typeref:typename:void
xlink	docs/icon.svg	/^   xmlns:dc="http:\/\/purl.org\/dc\/elements\/1.1\/">$/;"	n	uri:http://www.w3.org/1999/xlink
xtest	compute.py	/^	xtest, ytest = UCR.get_test(dataset = args.dataset)$/;"	v
xtrain	compute.py	/^	xtrain, ytrain = UCR.get_train(dataset=args.dataset)$/;"	v
ytest	compute.py	/^	xtest, ytest = UCR.get_test(dataset = args.dataset)$/;"	v
ytrain	compute.py	/^	xtrain, ytrain = UCR.get_train(dataset=args.dataset)$/;"	v
zero_cell	multipers/multiparameter_module_approximation/vector_matrix.h	/^inline void Vector_matrix<Column_type>::zero_cell(index columnIndex, index rowIndex)$/;"	f	class:Gudhi::multiparameter::mma::Vector_matrix	typeref:typename:void
zero_cocycles_	multipers/gudhi/gudhi/Persistent_cohomology.h	/^  std::unordered_map<Simplex_key, Simplex_key> zero_cocycles_;$/;"	m	class:Gudhi::persistent_cohomology::Persistent_cohomology	typeref:typename:std::unordered_map<Simplex_key,Simplex_key>
zero_column	multipers/gudhi/gudhi/Matrix.h	/^inline void Matrix<PersistenceMatrixOptions>::zero_column(Index columnIndex) $/;"	f	class:Gudhi::persistence_matrix::Matrix	typeref:typename:void
zero_column	multipers/gudhi/gudhi/Matrix.h	/^inline void Matrix<PersistenceMatrixOptions>::zero_column(Index columnIndex, bool inR) $/;"	f	class:Gudhi::persistence_matrix::Matrix	typeref:typename:void
zero_column	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix.h	/^inline void Base_matrix<Master_matrix>::zero_column(Index columnIndex) {$/;"	f	class:Gudhi::persistence_matrix::Base_matrix	typeref:typename:void
zero_column	multipers/gudhi/gudhi/Persistence_matrix/Boundary_matrix.h	/^inline void Boundary_matrix<Master_matrix>::zero_column(Index columnIndex) $/;"	f	class:Gudhi::persistence_matrix::Boundary_matrix	typeref:typename:void
zero_column	multipers/gudhi/gudhi/Persistence_matrix/Id_to_index_overlay.h	/^inline void Id_to_index_overlay<Underlying_matrix, Master_matrix>::zero_column(ID_index cellID) $/;"	f	class:Gudhi::persistence_matrix::Id_to_index_overlay	typeref:typename:void
zero_column	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^inline void RU_matrix<Master_matrix>::zero_column(Index columnIndex, bool inR)$/;"	f	class:Gudhi::persistence_matrix::RU_matrix	typeref:typename:void
zero_column	multipers/multiparameter_module_approximation/vector_matrix.h	/^inline void Vector_matrix<Column_type>::zero_column(index columnIndex)$/;"	f	class:Gudhi::multiparameter::mma::Vector_matrix	typeref:typename:void
zero_entry	multipers/gudhi/gudhi/Matrix.h	/^inline void Matrix<PersistenceMatrixOptions>::zero_entry(Index columnIndex, ID_index rowIndex) $/;"	f	class:Gudhi::persistence_matrix::Matrix	typeref:typename:void
zero_entry	multipers/gudhi/gudhi/Matrix.h	/^inline void Matrix<PersistenceMatrixOptions>::zero_entry(Index columnIndex, ID_index rowIndex, b/;"	f	class:Gudhi::persistence_matrix::Matrix	typeref:typename:void
zero_entry	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix.h	/^inline void Base_matrix<Master_matrix>::zero_entry(Index columnIndex, Index rowIndex) $/;"	f	class:Gudhi::persistence_matrix::Base_matrix	typeref:typename:void
zero_entry	multipers/gudhi/gudhi/Persistence_matrix/Boundary_matrix.h	/^inline void Boundary_matrix<Master_matrix>::zero_entry(Index columnIndex, Index rowIndex) $/;"	f	class:Gudhi::persistence_matrix::Boundary_matrix	typeref:typename:void
zero_entry	multipers/gudhi/gudhi/Persistence_matrix/Id_to_index_overlay.h	/^inline void Id_to_index_overlay<Underlying_matrix, Master_matrix>::zero_entry(ID_index cellID, I/;"	f	class:Gudhi::persistence_matrix::Id_to_index_overlay	typeref:typename:void
zero_entry	multipers/gudhi/gudhi/Persistence_matrix/RU_matrix.h	/^inline void RU_matrix<Master_matrix>::zero_entry(Index columnIndex, Index rowIndex, bool inR)$/;"	f	class:Gudhi::persistence_matrix::RU_matrix	typeref:typename:void
zero_out_sm	multipers/point_measure.pyx	/^def zero_out_sm(pts,weights, mass_default):$/;"	f
zero_out_sms	multipers/point_measure.pyx	/^def zero_out_sms(sms, mass_default):$/;"	f
~Base_matrix_with_column_compression	multipers/gudhi/gudhi/Persistence_matrix/Base_matrix_with_column_compression.h	/^inline Base_matrix_with_column_compression<Master_matrix>::~Base_matrix_with_column_compression(/;"	f	class:Gudhi::persistence_matrix::Base_matrix_with_column_compression
~Bitmap_cubical_complex	multipers/gudhi/gudhi/Bitmap_cubical_complex.h	/^  virtual ~Bitmap_cubical_complex() {}$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex
~Bitmap_cubical_complex_base	multipers/gudhi/gudhi/Bitmap_cubical_complex_base.h	/^  virtual ~Bitmap_cubical_complex_base() {}$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_base
~Bitmap_cubical_complex_periodic_boundary_conditions_base	multipers/gudhi/gudhi/Bitmap_cubical_complex_periodic_boundary_conditions_base.h	/^  virtual ~Bitmap_cubical_complex_periodic_boundary_conditions_base() {}$/;"	f	class:Gudhi::cubical_complex::Bitmap_cubical_complex_periodic_boundary_conditions_base
~Heap_column	multipers/gudhi/gudhi/Persistence_matrix/columns/heap_column.h	/^inline Heap_column<Master_matrix>::~Heap_column()$/;"	f	class:Gudhi::persistence_matrix::Heap_column
~Hooks_simplex_base_link_nodes	multipers/gudhi/gudhi/Simplex_tree/hooks_simplex_base.h	/^    ~Hooks_simplex_base_link_nodes() {}  \/\/ unlink_hooks(); }$/;"	f	struct:Gudhi::Hooks_simplex_base_link_nodes
~Id_to_index_overlay	multipers/gudhi/gudhi/Persistence_matrix/Id_to_index_overlay.h	/^inline Id_to_index_overlay<Underlying_matrix, Master_matrix>::~Id_to_index_overlay() $/;"	f	class:Gudhi::persistence_matrix::Id_to_index_overlay
~Intrusive_list_column	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_list_column.h	/^inline Intrusive_list_column<Master_matrix>::~Intrusive_list_column()$/;"	f	class:Gudhi::persistence_matrix::Intrusive_list_column
~Intrusive_set_column	multipers/gudhi/gudhi/Persistence_matrix/columns/intrusive_set_column.h	/^inline Intrusive_set_column<Master_matrix>::~Intrusive_set_column()$/;"	f	class:Gudhi::persistence_matrix::Intrusive_set_column
~List_column	multipers/gudhi/gudhi/Persistence_matrix/columns/list_column.h	/^inline List_column<Master_matrix>::~List_column() {$/;"	f	class:Gudhi::persistence_matrix::List_column
~Matrix	multipers/gudhi/gudhi/Matrix.h	/^inline Matrix<PersistenceMatrixOptions>::~Matrix() $/;"	f	class:Gudhi::persistence_matrix::Matrix
~Matrix_row_access	multipers/gudhi/gudhi/Persistence_matrix/matrix_row_access.h	/^  ~Matrix_row_access() { delete rows_; }$/;"	f	class:Gudhi::persistence_matrix::Matrix_row_access
~Naive_vector_column	multipers/gudhi/gudhi/Persistence_matrix/columns/naive_vector_column.h	/^inline Naive_vector_column<Master_matrix>::~Naive_vector_column()$/;"	f	class:Gudhi::persistence_matrix::Naive_vector_column
~Off_reader	multipers/gudhi/gudhi/Off_reader.h	/^  ~Off_reader() {$/;"	f	class:Gudhi::Off_reader
~Persistent_cohomology	multipers/gudhi/gudhi/Persistent_cohomology.h	/^  ~Persistent_cohomology() {$/;"	f	class:Gudhi::persistent_cohomology::Persistent_cohomology
~Set_column	multipers/gudhi/gudhi/Persistence_matrix/columns/set_column.h	/^inline Set_column<Master_matrix>::~Set_column()$/;"	f	class:Gudhi::persistence_matrix::Set_column
~Simplex_tree	multipers/gudhi/gudhi/Simplex_tree.h	/^  ~Simplex_tree() { root_members_recursive_deletion(); }$/;"	f	class:Gudhi::Simplex_tree
~Small_vector_column	multipers/gudhi/gudhi/Persistence_matrix/columns/small_vector_column.h	/^inline Small_vector_column<Master_matrix>::~Small_vector_column()$/;"	f	class:Gudhi::persistence_matrix::Small_vector_column
~Timer	multipers/multiparameter_module_approximation/debug.h	/^  ~Timer() {$/;"	f	class:Gudhi::multiparameter::mma::Debug::Timer
~Unordered_set_column	multipers/gudhi/gudhi/Persistence_matrix/columns/unordered_set_column.h	/^inline Unordered_set_column<Master_matrix>::~Unordered_set_column()$/;"	f	class:Gudhi::persistence_matrix::Unordered_set_column
~Vector_column	multipers/gudhi/gudhi/Persistence_matrix/columns/vector_column.h	/^inline Vector_column<Master_matrix>::~Vector_column()$/;"	f	class:Gudhi::persistence_matrix::Vector_column
