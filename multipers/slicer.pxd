# WARNING: Do not edit this file directly.
# It is automatically generated from 'multipers/slicer.pxd.tp'.
# Changes must be made there.


cimport numpy as cnp

# SequentialDataset and its two concrete subclasses are (optionally randomized)
# iterators over the rows of a matrix X and corresponding target values y.

from libcpp.utility cimport pair 
from libcpp cimport bool, int, float
from libcpp.vector cimport vector
from libcpp cimport tuple


from libc.stdint cimport intptr_t, uint16_t, uint32_t, int32_t, uint64_t, int64_t
from cython cimport uint

import numpy as np
python_value_type=np.float32

from libcpp.string cimport string

cdef extern from "Simplex_tree_multi_interface.h" namespace "Gudhi::multiparameter::python_interface":
    cdef cppclass Simplex_tree_multi_interface[F=*, value_type=*]:
        pass

from multipers.filtrations cimport *
ctypedef  vector[uint] cycle_type ## its the cycle type of matrix


#------------------------------------------------------------------------------
cdef extern from "Persistence_slices_interface.h":
  cdef cppclass GeneralVineClementTruc "GeneralVineClementTruc<>":
      ctypedef float value_type

      GeneralVineClementTruc()

      GeneralVineClementTruc(const vector[vector[unsigned int]]&, const vector[int]&, const vector[Finitely_critical_multi_filtration[float]]&)

      GeneralVineClementTruc& operator=(const GeneralVineClementTruc&)
      vector[vector[pair[float, float]]] get_barcode() nogil
      void push_to(const Line[float]&) nogil
      void set_one_filtration(const vector[float]&) nogil

      vector[float] get_one_filtration()
      void compute_persistence() nogil
      uint32_t num_generators() nogil
      uint32_t num_parameters() nogil
      string to_str() nogil
      pair[Finitely_critical_multi_filtration[float], Finitely_critical_multi_filtration[float]] get_bounding_box() except + nogil
      vector[Finitely_critical_multi_filtration[float]] get_filtration_values() nogil
      vector[int] get_dimensions() nogil
      vector[vector[uint]] get_boundaries() nogil
      void coarsen_on_grid_inplace(vector[vector[float]], bool) nogil
      vector[Finitely_critical_multi_filtration[float]]& get_filtrations() nogil
      void vineyard_update() nogil
      vector[cycle_type] get_representative_cycles(bool) nogil
      vector[size_t] get_current_order() nogil

#------------------------------------------------------------------------------
cdef extern from "Persistence_slices_interface.h":
  cdef cppclass SimplicialVineGraphTruc "SimplicialVineGraphTruc":
      ctypedef float value_type

      SimplicialVineGraphTruc()

      SimplicialVineGraphTruc(Simplex_tree_multi_interface[Finitely_critical_multi_filtration[float], float]*)

      SimplicialVineGraphTruc& operator=(const SimplicialVineGraphTruc&)
      vector[vector[pair[float, float]]] get_barcode() nogil
      void push_to(const Line[float]&) nogil
      void set_one_filtration(const vector[float]&) nogil

      vector[float] get_one_filtration()
      void compute_persistence() nogil
      uint32_t num_generators() nogil
      uint32_t num_parameters() nogil
      string to_str() nogil
      pair[Finitely_critical_multi_filtration[float], Finitely_critical_multi_filtration[float]] get_bounding_box() except + nogil
      vector[Finitely_critical_multi_filtration[float]] get_filtration_values() nogil
      vector[int] get_dimensions() nogil
      vector[vector[uint]] get_boundaries() nogil
      void coarsen_on_grid_inplace(vector[vector[float]], bool) nogil
      vector[Finitely_critical_multi_filtration[float]]& get_filtrations() nogil
      void vineyard_update() nogil
      vector[cycle_type] get_representative_cycles(bool) nogil
      vector[size_t] get_current_order() nogil

#------------------------------------------------------------------------------
cdef extern from "Persistence_slices_interface.h":
  cdef cppclass SimplicialVineMatrixTruc "SimplicialVineMatrixTruc<>":
      ctypedef float value_type

      SimplicialVineMatrixTruc()

      SimplicialVineMatrixTruc(Simplex_tree_multi_interface[Finitely_critical_multi_filtration[float], float]*)

      SimplicialVineMatrixTruc& operator=(const SimplicialVineMatrixTruc&)
      vector[vector[pair[float, float]]] get_barcode() nogil
      void push_to(const Line[float]&) nogil
      void set_one_filtration(const vector[float]&) nogil

      vector[float] get_one_filtration()
      void compute_persistence() nogil
      uint32_t num_generators() nogil
      uint32_t num_parameters() nogil
      string to_str() nogil
      pair[Finitely_critical_multi_filtration[float], Finitely_critical_multi_filtration[float]] get_bounding_box() except + nogil
      vector[Finitely_critical_multi_filtration[float]] get_filtration_values() nogil
      vector[int] get_dimensions() nogil
      vector[vector[uint]] get_boundaries() nogil
      void coarsen_on_grid_inplace(vector[vector[float]], bool) nogil
      vector[Finitely_critical_multi_filtration[float]]& get_filtrations() nogil
      void vineyard_update() nogil
      vector[cycle_type] get_representative_cycles(bool) nogil
      vector[size_t] get_current_order() nogil

#------------------------------------------------------------------------------
cdef extern from "Persistence_slices_interface.h":
  cdef cppclass SimplicialNoVineMatrixTruc "SimplicialNoVineMatrixTruc<>":
      ctypedef float value_type

      SimplicialNoVineMatrixTruc()

      SimplicialNoVineMatrixTruc(Simplex_tree_multi_interface[Finitely_critical_multi_filtration[float], float]*)

      SimplicialNoVineMatrixTruc& operator=(const SimplicialNoVineMatrixTruc&)
      vector[vector[pair[float, float]]] get_barcode() nogil
      void push_to(const Line[float]&) nogil
      void set_one_filtration(const vector[float]&) nogil

      vector[float] get_one_filtration()
      void compute_persistence() nogil
      uint32_t num_generators() nogil
      uint32_t num_parameters() nogil
      string to_str() nogil
      pair[Finitely_critical_multi_filtration[float], Finitely_critical_multi_filtration[float]] get_bounding_box() except + nogil
      vector[Finitely_critical_multi_filtration[float]] get_filtration_values() nogil
      vector[int] get_dimensions() nogil
      vector[vector[uint]] get_boundaries() nogil
      void coarsen_on_grid_inplace(vector[vector[float]], bool) nogil
      vector[Finitely_critical_multi_filtration[float]]& get_filtrations() nogil

#------------------------------------------------------------------------------
cdef extern from "Persistence_slices_interface.h":
  cdef cppclass C_KSlicer0_vine_i32 "MatrixTrucPythonInterface<true,true,int32_t,Available_columns::INTRUSIVE_SET>":
      ctypedef int32_t value_type

      C_KSlicer0_vine_i32()

      C_KSlicer0_vine_i32(const vector[vector[unsigned int]]&, const vector[int]&, const vector[KCriticalFiltration[int32_t]]&)

      C_KSlicer0_vine_i32& operator=(const C_KSlicer0_vine_i32&)
      vector[vector[pair[int32_t, int32_t]]] get_barcode() nogil
      void push_to(const Line[int32_t]&) nogil
      void set_one_filtration(const vector[int32_t]&) nogil

      vector[int32_t] get_one_filtration()
      void compute_persistence() nogil
      uint32_t num_generators() nogil
      uint32_t num_parameters() nogil
      string to_str() nogil
      pair[Finitely_critical_multi_filtration[int32_t], Finitely_critical_multi_filtration[int32_t]] get_bounding_box() except + nogil
      vector[Finitely_critical_multi_filtration[int32_t]] get_filtration_values() nogil
      vector[int] get_dimensions() nogil
      vector[vector[uint]] get_boundaries() nogil
      void coarsen_on_grid_inplace(vector[vector[int32_t]], bool) nogil
      vector[KCriticalFiltration[int32_t]]& get_filtrations() nogil
      C_KSlicer0_vine_i32 coarsen_on_grid(vector[vector[int32_t]]) nogil
      void vineyard_update() nogil
      vector[cycle_type] get_representative_cycles(bool) nogil
      vector[size_t] get_current_order() nogil
      void add_point(const Finitely_critical_multi_filtration[int32_t] &) nogil

#------------------------------------------------------------------------------
cdef extern from "Persistence_slices_interface.h":
  cdef cppclass C_KSlicer0_vine_f32 "MatrixTrucPythonInterface<true,true,float,Available_columns::INTRUSIVE_SET>":
      ctypedef float value_type

      C_KSlicer0_vine_f32()

      C_KSlicer0_vine_f32(const vector[vector[unsigned int]]&, const vector[int]&, const vector[KCriticalFiltration[float]]&)

      C_KSlicer0_vine_f32& operator=(const C_KSlicer0_vine_f32&)
      vector[vector[pair[float, float]]] get_barcode() nogil
      void push_to(const Line[float]&) nogil
      void set_one_filtration(const vector[float]&) nogil

      vector[float] get_one_filtration()
      void compute_persistence() nogil
      uint32_t num_generators() nogil
      uint32_t num_parameters() nogil
      string to_str() nogil
      pair[Finitely_critical_multi_filtration[float], Finitely_critical_multi_filtration[float]] get_bounding_box() except + nogil
      vector[Finitely_critical_multi_filtration[float]] get_filtration_values() nogil
      vector[int] get_dimensions() nogil
      vector[vector[uint]] get_boundaries() nogil
      void coarsen_on_grid_inplace(vector[vector[float]], bool) nogil
      vector[KCriticalFiltration[float]]& get_filtrations() nogil
      C_KSlicer0_vine_i32 coarsen_on_grid(vector[vector[float]]) nogil
      void vineyard_update() nogil
      vector[cycle_type] get_representative_cycles(bool) nogil
      vector[size_t] get_current_order() nogil
      void add_point(const Finitely_critical_multi_filtration[float] &) nogil

#------------------------------------------------------------------------------
cdef extern from "Persistence_slices_interface.h":
  cdef cppclass C_KSlicer0_vine_f64 "MatrixTrucPythonInterface<true,true,double,Available_columns::INTRUSIVE_SET>":
      ctypedef double value_type

      C_KSlicer0_vine_f64()

      C_KSlicer0_vine_f64(const vector[vector[unsigned int]]&, const vector[int]&, const vector[KCriticalFiltration[double]]&)

      C_KSlicer0_vine_f64& operator=(const C_KSlicer0_vine_f64&)
      vector[vector[pair[double, double]]] get_barcode() nogil
      void push_to(const Line[double]&) nogil
      void set_one_filtration(const vector[double]&) nogil

      vector[double] get_one_filtration()
      void compute_persistence() nogil
      uint32_t num_generators() nogil
      uint32_t num_parameters() nogil
      string to_str() nogil
      pair[Finitely_critical_multi_filtration[double], Finitely_critical_multi_filtration[double]] get_bounding_box() except + nogil
      vector[Finitely_critical_multi_filtration[double]] get_filtration_values() nogil
      vector[int] get_dimensions() nogil
      vector[vector[uint]] get_boundaries() nogil
      void coarsen_on_grid_inplace(vector[vector[double]], bool) nogil
      vector[KCriticalFiltration[double]]& get_filtrations() nogil
      C_KSlicer0_vine_i32 coarsen_on_grid(vector[vector[double]]) nogil
      void vineyard_update() nogil
      vector[cycle_type] get_representative_cycles(bool) nogil
      vector[size_t] get_current_order() nogil
      void add_point(const Finitely_critical_multi_filtration[double] &) nogil

#------------------------------------------------------------------------------
cdef extern from "Persistence_slices_interface.h":
  cdef cppclass C_Slicer0_vine_i32 "MatrixTrucPythonInterface<true,false,int32_t,Available_columns::INTRUSIVE_SET>":
      ctypedef int32_t value_type

      C_Slicer0_vine_i32()

      C_Slicer0_vine_i32(const vector[vector[unsigned int]]&, const vector[int]&, const vector[Finitely_critical_multi_filtration[int32_t]]&)

      C_Slicer0_vine_i32& operator=(const C_Slicer0_vine_i32&)
      vector[vector[pair[int32_t, int32_t]]] get_barcode() nogil
      void push_to(const Line[int32_t]&) nogil
      void set_one_filtration(const vector[int32_t]&) nogil

      vector[int32_t] get_one_filtration()
      void compute_persistence() nogil
      uint32_t num_generators() nogil
      uint32_t num_parameters() nogil
      string to_str() nogil
      pair[Finitely_critical_multi_filtration[int32_t], Finitely_critical_multi_filtration[int32_t]] get_bounding_box() except + nogil
      vector[Finitely_critical_multi_filtration[int32_t]] get_filtration_values() nogil
      vector[int] get_dimensions() nogil
      vector[vector[uint]] get_boundaries() nogil
      void coarsen_on_grid_inplace(vector[vector[int32_t]], bool) nogil
      vector[Finitely_critical_multi_filtration[int32_t]]& get_filtrations() nogil
      C_Slicer0_vine_i32 coarsen_on_grid(vector[vector[int32_t]]) nogil
      void vineyard_update() nogil
      vector[cycle_type] get_representative_cycles(bool) nogil
      vector[size_t] get_current_order() nogil

#------------------------------------------------------------------------------
cdef extern from "Persistence_slices_interface.h":
  cdef cppclass C_Slicer0_vine_f32 "MatrixTrucPythonInterface<true,false,float,Available_columns::INTRUSIVE_SET>":
      ctypedef float value_type

      C_Slicer0_vine_f32()

      C_Slicer0_vine_f32(const vector[vector[unsigned int]]&, const vector[int]&, const vector[Finitely_critical_multi_filtration[float]]&)

      C_Slicer0_vine_f32& operator=(const C_Slicer0_vine_f32&)
      vector[vector[pair[float, float]]] get_barcode() nogil
      void push_to(const Line[float]&) nogil
      void set_one_filtration(const vector[float]&) nogil

      vector[float] get_one_filtration()
      void compute_persistence() nogil
      uint32_t num_generators() nogil
      uint32_t num_parameters() nogil
      string to_str() nogil
      pair[Finitely_critical_multi_filtration[float], Finitely_critical_multi_filtration[float]] get_bounding_box() except + nogil
      vector[Finitely_critical_multi_filtration[float]] get_filtration_values() nogil
      vector[int] get_dimensions() nogil
      vector[vector[uint]] get_boundaries() nogil
      void coarsen_on_grid_inplace(vector[vector[float]], bool) nogil
      vector[Finitely_critical_multi_filtration[float]]& get_filtrations() nogil
      C_Slicer0_vine_i32 coarsen_on_grid(vector[vector[float]]) nogil
      void vineyard_update() nogil
      vector[cycle_type] get_representative_cycles(bool) nogil
      vector[size_t] get_current_order() nogil

#------------------------------------------------------------------------------
cdef extern from "Persistence_slices_interface.h":
  cdef cppclass C_Slicer0_vine_f64 "MatrixTrucPythonInterface<true,false,double,Available_columns::INTRUSIVE_SET>":
      ctypedef double value_type

      C_Slicer0_vine_f64()

      C_Slicer0_vine_f64(const vector[vector[unsigned int]]&, const vector[int]&, const vector[Finitely_critical_multi_filtration[double]]&)

      C_Slicer0_vine_f64& operator=(const C_Slicer0_vine_f64&)
      vector[vector[pair[double, double]]] get_barcode() nogil
      void push_to(const Line[double]&) nogil
      void set_one_filtration(const vector[double]&) nogil

      vector[double] get_one_filtration()
      void compute_persistence() nogil
      uint32_t num_generators() nogil
      uint32_t num_parameters() nogil
      string to_str() nogil
      pair[Finitely_critical_multi_filtration[double], Finitely_critical_multi_filtration[double]] get_bounding_box() except + nogil
      vector[Finitely_critical_multi_filtration[double]] get_filtration_values() nogil
      vector[int] get_dimensions() nogil
      vector[vector[uint]] get_boundaries() nogil
      void coarsen_on_grid_inplace(vector[vector[double]], bool) nogil
      vector[Finitely_critical_multi_filtration[double]]& get_filtrations() nogil
      C_Slicer0_vine_i32 coarsen_on_grid(vector[vector[double]]) nogil
      void vineyard_update() nogil
      vector[cycle_type] get_representative_cycles(bool) nogil
      vector[size_t] get_current_order() nogil

#------------------------------------------------------------------------------
cdef extern from "Persistence_slices_interface.h":
  cdef cppclass C_KSlicer0_i32 "MatrixTrucPythonInterface<false,true,int32_t,Available_columns::INTRUSIVE_SET>":
      ctypedef int32_t value_type

      C_KSlicer0_i32()

      C_KSlicer0_i32(const vector[vector[unsigned int]]&, const vector[int]&, const vector[KCriticalFiltration[int32_t]]&)

      C_KSlicer0_i32& operator=(const C_KSlicer0_i32&)
      vector[vector[pair[int32_t, int32_t]]] get_barcode() nogil
      void push_to(const Line[int32_t]&) nogil
      void set_one_filtration(const vector[int32_t]&) nogil

      vector[int32_t] get_one_filtration()
      void compute_persistence() nogil
      uint32_t num_generators() nogil
      uint32_t num_parameters() nogil
      string to_str() nogil
      pair[Finitely_critical_multi_filtration[int32_t], Finitely_critical_multi_filtration[int32_t]] get_bounding_box() except + nogil
      vector[Finitely_critical_multi_filtration[int32_t]] get_filtration_values() nogil
      vector[int] get_dimensions() nogil
      vector[vector[uint]] get_boundaries() nogil
      void coarsen_on_grid_inplace(vector[vector[int32_t]], bool) nogil
      vector[KCriticalFiltration[int32_t]]& get_filtrations() nogil
      C_KSlicer0_i32 coarsen_on_grid(vector[vector[int32_t]]) nogil
      void add_point(const Finitely_critical_multi_filtration[int32_t] &) nogil

#------------------------------------------------------------------------------
cdef extern from "Persistence_slices_interface.h":
  cdef cppclass C_KSlicer0_f32 "MatrixTrucPythonInterface<false,true,float,Available_columns::INTRUSIVE_SET>":
      ctypedef float value_type

      C_KSlicer0_f32()

      C_KSlicer0_f32(const vector[vector[unsigned int]]&, const vector[int]&, const vector[KCriticalFiltration[float]]&)

      C_KSlicer0_f32& operator=(const C_KSlicer0_f32&)
      vector[vector[pair[float, float]]] get_barcode() nogil
      void push_to(const Line[float]&) nogil
      void set_one_filtration(const vector[float]&) nogil

      vector[float] get_one_filtration()
      void compute_persistence() nogil
      uint32_t num_generators() nogil
      uint32_t num_parameters() nogil
      string to_str() nogil
      pair[Finitely_critical_multi_filtration[float], Finitely_critical_multi_filtration[float]] get_bounding_box() except + nogil
      vector[Finitely_critical_multi_filtration[float]] get_filtration_values() nogil
      vector[int] get_dimensions() nogil
      vector[vector[uint]] get_boundaries() nogil
      void coarsen_on_grid_inplace(vector[vector[float]], bool) nogil
      vector[KCriticalFiltration[float]]& get_filtrations() nogil
      C_KSlicer0_i32 coarsen_on_grid(vector[vector[float]]) nogil
      void add_point(const Finitely_critical_multi_filtration[float] &) nogil

#------------------------------------------------------------------------------
cdef extern from "Persistence_slices_interface.h":
  cdef cppclass C_KSlicer0_f64 "MatrixTrucPythonInterface<false,true,double,Available_columns::INTRUSIVE_SET>":
      ctypedef double value_type

      C_KSlicer0_f64()

      C_KSlicer0_f64(const vector[vector[unsigned int]]&, const vector[int]&, const vector[KCriticalFiltration[double]]&)

      C_KSlicer0_f64& operator=(const C_KSlicer0_f64&)
      vector[vector[pair[double, double]]] get_barcode() nogil
      void push_to(const Line[double]&) nogil
      void set_one_filtration(const vector[double]&) nogil

      vector[double] get_one_filtration()
      void compute_persistence() nogil
      uint32_t num_generators() nogil
      uint32_t num_parameters() nogil
      string to_str() nogil
      pair[Finitely_critical_multi_filtration[double], Finitely_critical_multi_filtration[double]] get_bounding_box() except + nogil
      vector[Finitely_critical_multi_filtration[double]] get_filtration_values() nogil
      vector[int] get_dimensions() nogil
      vector[vector[uint]] get_boundaries() nogil
      void coarsen_on_grid_inplace(vector[vector[double]], bool) nogil
      vector[KCriticalFiltration[double]]& get_filtrations() nogil
      C_KSlicer0_i32 coarsen_on_grid(vector[vector[double]]) nogil
      void add_point(const Finitely_critical_multi_filtration[double] &) nogil

#------------------------------------------------------------------------------
cdef extern from "Persistence_slices_interface.h":
  cdef cppclass C_Slicer0_i32 "MatrixTrucPythonInterface<false,false,int32_t,Available_columns::INTRUSIVE_SET>":
      ctypedef int32_t value_type

      C_Slicer0_i32()

      C_Slicer0_i32(const vector[vector[unsigned int]]&, const vector[int]&, const vector[Finitely_critical_multi_filtration[int32_t]]&)

      C_Slicer0_i32& operator=(const C_Slicer0_i32&)
      vector[vector[pair[int32_t, int32_t]]] get_barcode() nogil
      void push_to(const Line[int32_t]&) nogil
      void set_one_filtration(const vector[int32_t]&) nogil

      vector[int32_t] get_one_filtration()
      void compute_persistence() nogil
      uint32_t num_generators() nogil
      uint32_t num_parameters() nogil
      string to_str() nogil
      pair[Finitely_critical_multi_filtration[int32_t], Finitely_critical_multi_filtration[int32_t]] get_bounding_box() except + nogil
      vector[Finitely_critical_multi_filtration[int32_t]] get_filtration_values() nogil
      vector[int] get_dimensions() nogil
      vector[vector[uint]] get_boundaries() nogil
      void coarsen_on_grid_inplace(vector[vector[int32_t]], bool) nogil
      vector[Finitely_critical_multi_filtration[int32_t]]& get_filtrations() nogil
      C_Slicer0_i32 coarsen_on_grid(vector[vector[int32_t]]) nogil

#------------------------------------------------------------------------------
cdef extern from "Persistence_slices_interface.h":
  cdef cppclass C_Slicer0_f32 "MatrixTrucPythonInterface<false,false,float,Available_columns::INTRUSIVE_SET>":
      ctypedef float value_type

      C_Slicer0_f32()

      C_Slicer0_f32(const vector[vector[unsigned int]]&, const vector[int]&, const vector[Finitely_critical_multi_filtration[float]]&)

      C_Slicer0_f32& operator=(const C_Slicer0_f32&)
      vector[vector[pair[float, float]]] get_barcode() nogil
      void push_to(const Line[float]&) nogil
      void set_one_filtration(const vector[float]&) nogil

      vector[float] get_one_filtration()
      void compute_persistence() nogil
      uint32_t num_generators() nogil
      uint32_t num_parameters() nogil
      string to_str() nogil
      pair[Finitely_critical_multi_filtration[float], Finitely_critical_multi_filtration[float]] get_bounding_box() except + nogil
      vector[Finitely_critical_multi_filtration[float]] get_filtration_values() nogil
      vector[int] get_dimensions() nogil
      vector[vector[uint]] get_boundaries() nogil
      void coarsen_on_grid_inplace(vector[vector[float]], bool) nogil
      vector[Finitely_critical_multi_filtration[float]]& get_filtrations() nogil
      C_Slicer0_i32 coarsen_on_grid(vector[vector[float]]) nogil

#------------------------------------------------------------------------------
cdef extern from "Persistence_slices_interface.h":
  cdef cppclass C_Slicer0_f64 "MatrixTrucPythonInterface<false,false,double,Available_columns::INTRUSIVE_SET>":
      ctypedef double value_type

      C_Slicer0_f64()

      C_Slicer0_f64(const vector[vector[unsigned int]]&, const vector[int]&, const vector[Finitely_critical_multi_filtration[double]]&)

      C_Slicer0_f64& operator=(const C_Slicer0_f64&)
      vector[vector[pair[double, double]]] get_barcode() nogil
      void push_to(const Line[double]&) nogil
      void set_one_filtration(const vector[double]&) nogil

      vector[double] get_one_filtration()
      void compute_persistence() nogil
      uint32_t num_generators() nogil
      uint32_t num_parameters() nogil
      string to_str() nogil
      pair[Finitely_critical_multi_filtration[double], Finitely_critical_multi_filtration[double]] get_bounding_box() except + nogil
      vector[Finitely_critical_multi_filtration[double]] get_filtration_values() nogil
      vector[int] get_dimensions() nogil
      vector[vector[uint]] get_boundaries() nogil
      void coarsen_on_grid_inplace(vector[vector[double]], bool) nogil
      vector[Finitely_critical_multi_filtration[double]]& get_filtrations() nogil
      C_Slicer0_i32 coarsen_on_grid(vector[vector[double]]) nogil



#### MMA Stuff

from multipers.mma_structures cimport Module
cdef extern from "multiparameter_module_approximation/approximation.h" namespace "Gudhi::multiparameter::mma":
  Module[float] multiparameter_module_approximation(GeneralVineClementTruc&, Finitely_critical_multi_filtration[float]&, float, Box[float]&, bool, bool, bool) except + nogil
  Module[float] multiparameter_module_approximation(SimplicialVineGraphTruc&, Finitely_critical_multi_filtration[float]&, float, Box[float]&, bool, bool, bool) except + nogil
  Module[float] multiparameter_module_approximation(SimplicialVineMatrixTruc&, Finitely_critical_multi_filtration[float]&, float, Box[float]&, bool, bool, bool) except + nogil
  Module[float] multiparameter_module_approximation(C_KSlicer0_vine_f32&, Finitely_critical_multi_filtration[float]&, float, Box[float]&, bool, bool, bool) except + nogil
  Module[double] multiparameter_module_approximation(C_KSlicer0_vine_f64&, Finitely_critical_multi_filtration[double]&, double, Box[double]&, bool, bool, bool) except + nogil
  Module[float] multiparameter_module_approximation(C_Slicer0_vine_f32&, Finitely_critical_multi_filtration[float]&, float, Box[float]&, bool, bool, bool) except + nogil
  Module[double] multiparameter_module_approximation(C_Slicer0_vine_f64&, Finitely_critical_multi_filtration[double]&, double, Box[double]&, bool, bool, bool) except + nogil




import multipers.slicer as mps
from cython.operator cimport dereference
cdef inline Module[float] _multiparameter_module_approximation_f32(object slicer, Finitely_critical_multi_filtration[float]& direction, float max_error, Box[float] box, bool threshold, bool complete, bool verbose):
  import multipers.slicer as mps
  cdef intptr_t slicer_ptr = <intptr_t>(slicer.get_ptr())
  cdef Module[float] mod
  if False:
    pass
  elif isinstance(slicer, mps._SlicerClement):
    with nogil:
      mod = multiparameter_module_approximation(dereference(<GeneralVineClementTruc*>(slicer_ptr)), direction, max_error, box, threshold, complete, verbose)
  elif isinstance(slicer, mps._SlicerVineGraph):
    with nogil:
      mod = multiparameter_module_approximation(dereference(<SimplicialVineGraphTruc*>(slicer_ptr)), direction, max_error, box, threshold, complete, verbose)
  elif isinstance(slicer, mps._SlicerVineSimplicial):
    with nogil:
      mod = multiparameter_module_approximation(dereference(<SimplicialVineMatrixTruc*>(slicer_ptr)), direction, max_error, box, threshold, complete, verbose)
  elif isinstance(slicer, mps._KSlicer0_vine_f32):
    with nogil:
      mod = multiparameter_module_approximation(dereference(<C_KSlicer0_vine_f32*>(slicer_ptr)), direction, max_error, box, threshold, complete, verbose)
  elif isinstance(slicer, mps._Slicer0_vine_f32):
    with nogil:
      mod = multiparameter_module_approximation(dereference(<C_Slicer0_vine_f32*>(slicer_ptr)), direction, max_error, box, threshold, complete, verbose)
  else:
    raise ValueError(f"Unsupported slicer type {type(slicer)}")

  return mod
cdef inline Module[double] _multiparameter_module_approximation_f64(object slicer, Finitely_critical_multi_filtration[double]& direction, double max_error, Box[double] box, bool threshold, bool complete, bool verbose):
  import multipers.slicer as mps
  cdef intptr_t slicer_ptr = <intptr_t>(slicer.get_ptr())
  cdef Module[double] mod
  if False:
    pass
  elif isinstance(slicer, mps._KSlicer0_vine_f64):
    with nogil:
      mod = multiparameter_module_approximation(dereference(<C_KSlicer0_vine_f64*>(slicer_ptr)), direction, max_error, box, threshold, complete, verbose)
  elif isinstance(slicer, mps._Slicer0_vine_f64):
    with nogil:
      mod = multiparameter_module_approximation(dereference(<C_Slicer0_vine_f64*>(slicer_ptr)), direction, max_error, box, threshold, complete, verbose)
  else:
    raise ValueError(f"Unsupported slicer type {type(slicer)}")

  return mod

###### RANK INVARIANT
from libc.stdint cimport intptr_t, uint16_t, uint32_t, int32_t, int16_t, int8_t
ctypedef int32_t tensor_dtype
ctypedef int32_t indices_type




ctypedef pair[vector[vector[indices_type]], vector[tensor_dtype]] signed_measure_type



cdef extern from "multi_parameter_rank_invariant/rank_invariant.h" namespace "Gudhi::multiparameter::rank_invariant":
  ## from slicers
    void compute_rank_invariant_python(GeneralVineClementTruc&, tensor_dtype* , const vector[indices_type], const vector[indices_type], indices_type) except + nogil
    signed_measure_type compute_rank_signed_measure(GeneralVineClementTruc&, tensor_dtype* , const vector[indices_type], const vector[indices_type], indices_type, bool) except + nogil
    void compute_rank_invariant_python(SimplicialVineGraphTruc&, tensor_dtype* , const vector[indices_type], const vector[indices_type], indices_type) except + nogil
    signed_measure_type compute_rank_signed_measure(SimplicialVineGraphTruc&, tensor_dtype* , const vector[indices_type], const vector[indices_type], indices_type, bool) except + nogil
    void compute_rank_invariant_python(SimplicialVineMatrixTruc&, tensor_dtype* , const vector[indices_type], const vector[indices_type], indices_type) except + nogil
    signed_measure_type compute_rank_signed_measure(SimplicialVineMatrixTruc&, tensor_dtype* , const vector[indices_type], const vector[indices_type], indices_type, bool) except + nogil
    void compute_rank_invariant_python(SimplicialNoVineMatrixTruc&, tensor_dtype* , const vector[indices_type], const vector[indices_type], indices_type) except + nogil
    signed_measure_type compute_rank_signed_measure(SimplicialNoVineMatrixTruc&, tensor_dtype* , const vector[indices_type], const vector[indices_type], indices_type, bool) except + nogil
    void compute_rank_invariant_python(C_KSlicer0_vine_i32&, tensor_dtype* , const vector[indices_type], const vector[indices_type], indices_type) except + nogil
    signed_measure_type compute_rank_signed_measure(C_KSlicer0_vine_i32&, tensor_dtype* , const vector[indices_type], const vector[indices_type], indices_type, bool) except + nogil
    void compute_rank_invariant_python(C_KSlicer0_vine_f32&, tensor_dtype* , const vector[indices_type], const vector[indices_type], indices_type) except + nogil
    signed_measure_type compute_rank_signed_measure(C_KSlicer0_vine_f32&, tensor_dtype* , const vector[indices_type], const vector[indices_type], indices_type, bool) except + nogil
    void compute_rank_invariant_python(C_KSlicer0_vine_f64&, tensor_dtype* , const vector[indices_type], const vector[indices_type], indices_type) except + nogil
    signed_measure_type compute_rank_signed_measure(C_KSlicer0_vine_f64&, tensor_dtype* , const vector[indices_type], const vector[indices_type], indices_type, bool) except + nogil
    void compute_rank_invariant_python(C_Slicer0_vine_i32&, tensor_dtype* , const vector[indices_type], const vector[indices_type], indices_type) except + nogil
    signed_measure_type compute_rank_signed_measure(C_Slicer0_vine_i32&, tensor_dtype* , const vector[indices_type], const vector[indices_type], indices_type, bool) except + nogil
    void compute_rank_invariant_python(C_Slicer0_vine_f32&, tensor_dtype* , const vector[indices_type], const vector[indices_type], indices_type) except + nogil
    signed_measure_type compute_rank_signed_measure(C_Slicer0_vine_f32&, tensor_dtype* , const vector[indices_type], const vector[indices_type], indices_type, bool) except + nogil
    void compute_rank_invariant_python(C_Slicer0_vine_f64&, tensor_dtype* , const vector[indices_type], const vector[indices_type], indices_type) except + nogil
    signed_measure_type compute_rank_signed_measure(C_Slicer0_vine_f64&, tensor_dtype* , const vector[indices_type], const vector[indices_type], indices_type, bool) except + nogil
    void compute_rank_invariant_python(C_KSlicer0_i32&, tensor_dtype* , const vector[indices_type], const vector[indices_type], indices_type) except + nogil
    signed_measure_type compute_rank_signed_measure(C_KSlicer0_i32&, tensor_dtype* , const vector[indices_type], const vector[indices_type], indices_type, bool) except + nogil
    void compute_rank_invariant_python(C_KSlicer0_f32&, tensor_dtype* , const vector[indices_type], const vector[indices_type], indices_type) except + nogil
    signed_measure_type compute_rank_signed_measure(C_KSlicer0_f32&, tensor_dtype* , const vector[indices_type], const vector[indices_type], indices_type, bool) except + nogil
    void compute_rank_invariant_python(C_KSlicer0_f64&, tensor_dtype* , const vector[indices_type], const vector[indices_type], indices_type) except + nogil
    signed_measure_type compute_rank_signed_measure(C_KSlicer0_f64&, tensor_dtype* , const vector[indices_type], const vector[indices_type], indices_type, bool) except + nogil
    void compute_rank_invariant_python(C_Slicer0_i32&, tensor_dtype* , const vector[indices_type], const vector[indices_type], indices_type) except + nogil
    signed_measure_type compute_rank_signed_measure(C_Slicer0_i32&, tensor_dtype* , const vector[indices_type], const vector[indices_type], indices_type, bool) except + nogil
    void compute_rank_invariant_python(C_Slicer0_f32&, tensor_dtype* , const vector[indices_type], const vector[indices_type], indices_type) except + nogil
    signed_measure_type compute_rank_signed_measure(C_Slicer0_f32&, tensor_dtype* , const vector[indices_type], const vector[indices_type], indices_type, bool) except + nogil
    void compute_rank_invariant_python(C_Slicer0_f64&, tensor_dtype* , const vector[indices_type], const vector[indices_type], indices_type) except + nogil
    signed_measure_type compute_rank_signed_measure(C_Slicer0_f64&, tensor_dtype* , const vector[indices_type], const vector[indices_type], indices_type, bool) except + nogil





cdef inline void _compute_rank_invariant(object slicer, tensor_dtype* container_ptr, vector[indices_type] c_grid_shape, vector[indices_type] degrees, int n_jobs):
  import multipers.slicer as mps
  cdef intptr_t slicer_ptr = <intptr_t>(slicer.get_ptr())
  if isinstance(slicer, mps._SlicerClement):
    with nogil:
      compute_rank_invariant_python(dereference(<GeneralVineClementTruc*>(slicer_ptr)),container_ptr, c_grid_shape,degrees, n_jobs)
      return
  if isinstance(slicer, mps._SlicerVineGraph):
    with nogil:
      compute_rank_invariant_python(dereference(<SimplicialVineGraphTruc*>(slicer_ptr)),container_ptr, c_grid_shape,degrees, n_jobs)
      return
  if isinstance(slicer, mps._SlicerVineSimplicial):
    with nogil:
      compute_rank_invariant_python(dereference(<SimplicialVineMatrixTruc*>(slicer_ptr)),container_ptr, c_grid_shape,degrees, n_jobs)
      return
  if isinstance(slicer, mps._SlicerNoVineSimplicial):
    with nogil:
      compute_rank_invariant_python(dereference(<SimplicialNoVineMatrixTruc*>(slicer_ptr)),container_ptr, c_grid_shape,degrees, n_jobs)
      return
  if isinstance(slicer, mps._KSlicer0_vine_i32):
    with nogil:
      compute_rank_invariant_python(dereference(<C_KSlicer0_vine_i32*>(slicer_ptr)),container_ptr, c_grid_shape,degrees, n_jobs)
      return
  if isinstance(slicer, mps._KSlicer0_vine_f32):
    with nogil:
      compute_rank_invariant_python(dereference(<C_KSlicer0_vine_f32*>(slicer_ptr)),container_ptr, c_grid_shape,degrees, n_jobs)
      return
  if isinstance(slicer, mps._KSlicer0_vine_f64):
    with nogil:
      compute_rank_invariant_python(dereference(<C_KSlicer0_vine_f64*>(slicer_ptr)),container_ptr, c_grid_shape,degrees, n_jobs)
      return
  if isinstance(slicer, mps._Slicer0_vine_i32):
    with nogil:
      compute_rank_invariant_python(dereference(<C_Slicer0_vine_i32*>(slicer_ptr)),container_ptr, c_grid_shape,degrees, n_jobs)
      return
  if isinstance(slicer, mps._Slicer0_vine_f32):
    with nogil:
      compute_rank_invariant_python(dereference(<C_Slicer0_vine_f32*>(slicer_ptr)),container_ptr, c_grid_shape,degrees, n_jobs)
      return
  if isinstance(slicer, mps._Slicer0_vine_f64):
    with nogil:
      compute_rank_invariant_python(dereference(<C_Slicer0_vine_f64*>(slicer_ptr)),container_ptr, c_grid_shape,degrees, n_jobs)
      return
  if isinstance(slicer, mps._KSlicer0_i32):
    with nogil:
      compute_rank_invariant_python(dereference(<C_KSlicer0_i32*>(slicer_ptr)),container_ptr, c_grid_shape,degrees, n_jobs)
      return
  if isinstance(slicer, mps._KSlicer0_f32):
    with nogil:
      compute_rank_invariant_python(dereference(<C_KSlicer0_f32*>(slicer_ptr)),container_ptr, c_grid_shape,degrees, n_jobs)
      return
  if isinstance(slicer, mps._KSlicer0_f64):
    with nogil:
      compute_rank_invariant_python(dereference(<C_KSlicer0_f64*>(slicer_ptr)),container_ptr, c_grid_shape,degrees, n_jobs)
      return
  if isinstance(slicer, mps._Slicer0_i32):
    with nogil:
      compute_rank_invariant_python(dereference(<C_Slicer0_i32*>(slicer_ptr)),container_ptr, c_grid_shape,degrees, n_jobs)
      return
  if isinstance(slicer, mps._Slicer0_f32):
    with nogil:
      compute_rank_invariant_python(dereference(<C_Slicer0_f32*>(slicer_ptr)),container_ptr, c_grid_shape,degrees, n_jobs)
      return
  if isinstance(slicer, mps._Slicer0_f64):
    with nogil:
      compute_rank_invariant_python(dereference(<C_Slicer0_f64*>(slicer_ptr)),container_ptr, c_grid_shape,degrees, n_jobs)
      return
  raise ValueError(f"Unsupported slicer type {type(slicer)}")



cdef inline  _compute_rank_sm(object slicer, tensor_dtype* container_ptr, vector[indices_type] c_grid_shape, vector[indices_type] degrees, int n_jobs, bool verbose):
  import multipers.slicer as mps
  cdef intptr_t slicer_ptr = <intptr_t>(slicer.get_ptr())
  cdef signed_measure_type sm
  cdef cnp.ndarray[indices_type, ndim=2] pts
  cdef cnp.ndarray[tensor_dtype, ndim=1] weights
  if isinstance(slicer, mps._SlicerClement):
    with nogil:
      sm = compute_rank_signed_measure(dereference(<GeneralVineClementTruc*>(slicer_ptr)),container_ptr, c_grid_shape,degrees, n_jobs, verbose)
    pts = sm.first
    weights = sm.second
    return (pts,weights)
  if isinstance(slicer, mps._SlicerVineGraph):
    with nogil:
      sm = compute_rank_signed_measure(dereference(<SimplicialVineGraphTruc*>(slicer_ptr)),container_ptr, c_grid_shape,degrees, n_jobs, verbose)
    pts = sm.first
    weights = sm.second
    return (pts,weights)
  if isinstance(slicer, mps._SlicerVineSimplicial):
    with nogil:
      sm = compute_rank_signed_measure(dereference(<SimplicialVineMatrixTruc*>(slicer_ptr)),container_ptr, c_grid_shape,degrees, n_jobs, verbose)
    pts = sm.first
    weights = sm.second
    return (pts,weights)
  if isinstance(slicer, mps._SlicerNoVineSimplicial):
    with nogil:
      sm = compute_rank_signed_measure(dereference(<SimplicialNoVineMatrixTruc*>(slicer_ptr)),container_ptr, c_grid_shape,degrees, n_jobs, verbose)
    pts = sm.first
    weights = sm.second
    return (pts,weights)
  if isinstance(slicer, mps._KSlicer0_vine_i32):
    with nogil:
      sm = compute_rank_signed_measure(dereference(<C_KSlicer0_vine_i32*>(slicer_ptr)),container_ptr, c_grid_shape,degrees, n_jobs, verbose)
    pts = sm.first
    weights = sm.second
    return (pts,weights)
  if isinstance(slicer, mps._KSlicer0_vine_f32):
    with nogil:
      sm = compute_rank_signed_measure(dereference(<C_KSlicer0_vine_f32*>(slicer_ptr)),container_ptr, c_grid_shape,degrees, n_jobs, verbose)
    pts = sm.first
    weights = sm.second
    return (pts,weights)
  if isinstance(slicer, mps._KSlicer0_vine_f64):
    with nogil:
      sm = compute_rank_signed_measure(dereference(<C_KSlicer0_vine_f64*>(slicer_ptr)),container_ptr, c_grid_shape,degrees, n_jobs, verbose)
    pts = sm.first
    weights = sm.second
    return (pts,weights)
  if isinstance(slicer, mps._Slicer0_vine_i32):
    with nogil:
      sm = compute_rank_signed_measure(dereference(<C_Slicer0_vine_i32*>(slicer_ptr)),container_ptr, c_grid_shape,degrees, n_jobs, verbose)
    pts = sm.first
    weights = sm.second
    return (pts,weights)
  if isinstance(slicer, mps._Slicer0_vine_f32):
    with nogil:
      sm = compute_rank_signed_measure(dereference(<C_Slicer0_vine_f32*>(slicer_ptr)),container_ptr, c_grid_shape,degrees, n_jobs, verbose)
    pts = sm.first
    weights = sm.second
    return (pts,weights)
  if isinstance(slicer, mps._Slicer0_vine_f64):
    with nogil:
      sm = compute_rank_signed_measure(dereference(<C_Slicer0_vine_f64*>(slicer_ptr)),container_ptr, c_grid_shape,degrees, n_jobs, verbose)
    pts = sm.first
    weights = sm.second
    return (pts,weights)
  if isinstance(slicer, mps._KSlicer0_i32):
    with nogil:
      sm = compute_rank_signed_measure(dereference(<C_KSlicer0_i32*>(slicer_ptr)),container_ptr, c_grid_shape,degrees, n_jobs, verbose)
    pts = sm.first
    weights = sm.second
    return (pts,weights)
  if isinstance(slicer, mps._KSlicer0_f32):
    with nogil:
      sm = compute_rank_signed_measure(dereference(<C_KSlicer0_f32*>(slicer_ptr)),container_ptr, c_grid_shape,degrees, n_jobs, verbose)
    pts = sm.first
    weights = sm.second
    return (pts,weights)
  if isinstance(slicer, mps._KSlicer0_f64):
    with nogil:
      sm = compute_rank_signed_measure(dereference(<C_KSlicer0_f64*>(slicer_ptr)),container_ptr, c_grid_shape,degrees, n_jobs, verbose)
    pts = sm.first
    weights = sm.second
    return (pts,weights)
  if isinstance(slicer, mps._Slicer0_i32):
    with nogil:
      sm = compute_rank_signed_measure(dereference(<C_Slicer0_i32*>(slicer_ptr)),container_ptr, c_grid_shape,degrees, n_jobs, verbose)
    pts = sm.first
    weights = sm.second
    return (pts,weights)
  if isinstance(slicer, mps._Slicer0_f32):
    with nogil:
      sm = compute_rank_signed_measure(dereference(<C_Slicer0_f32*>(slicer_ptr)),container_ptr, c_grid_shape,degrees, n_jobs, verbose)
    pts = sm.first
    weights = sm.second
    return (pts,weights)
  if isinstance(slicer, mps._Slicer0_f64):
    with nogil:
      sm = compute_rank_signed_measure(dereference(<C_Slicer0_f64*>(slicer_ptr)),container_ptr, c_grid_shape,degrees, n_jobs, verbose)
    pts = sm.first
    weights = sm.second
    return (pts,weights)
  raise ValueError(f"Unsupported slicer type {type(slicer)}")
